(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var TextureCube;

TextureCube = require('./src/voxels/texture-cube');

module.exports = function(SceneManager) {
  var c, child, colorGeo, cubeMaterial, cubeMaterial2, f, face, i, item, key, mesh, mesh2, textureGeo, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4;
  colorGeo = new THREE.Geometry();
  textureGeo = new THREE.Geometry();
  _ref = SceneManager.scene.children;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    i = _ref[_i];
    if (i != null ? i.isVoxel : void 0) {
      if ((_ref1 = i.material) != null ? _ref1.color : void 0) {
        c = i.material.color;
        _ref2 = i.geometry.faces;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          f = _ref2[_j];
          f.color = c;
        }
        THREE.GeometryUtils.merge(colorGeo, i);
      } else if (i.material) {
        _ref3 = i.geometry.faces;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          face = _ref3[_k];
          face.color.set(face.materialIndex);
        }
        THREE.GeometryUtils.merge(textureGeo, i);
      } else if (i instanceof THREE.Object3D) {
        child = i.children[0];
        mesh = child.clone();
        mesh.position.addVectors(mesh.position, i.position);
        THREE.GeometryUtils.merge(colorGeo, mesh);
      } else {
        throw new Error('whoops!');
      }
    }
  }
  _ref4 = SceneManager.scene.children;
  for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
    i = _ref4[_l];
    item = SceneManager.scene.children[0];
    if (item) {
      scene.remove(item);
      for (key in item) {
        delete item[key];
      }
    }
  }
  cubeMaterial = new SceneManager._CubeMaterial({
    vertexColors: THREE.VertexColors,
    transparent: true
  });
  cubeMaterial2 = TextureCube.meshFaceMaterial();
  mesh = new THREE.Mesh(colorGeo, cubeMaterial);
  mesh2 = new THREE.Mesh(textureGeo, cubeMaterial2);
  scene.add(mesh);
  return scene.add(mesh2);
};



},{"./src/voxels/texture-cube":131}],2:[function(require,module,exports){
Number.prototype.mod = function(n) {
  return ((this % n) + n) % n;
};

require('./run-editor');



},{"./run-editor":100}],3:[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.BufferGeometryExporter = function () {};

THREE.BufferGeometryExporter.prototype = {

	constructor: THREE.BufferGeometryExporter,

	parse: function ( geometry ) {

		var output = {
			metadata: {
				version: 4.0,
				type: 'BufferGeometry',
				generator: 'BufferGeometryExporter'
			},
			attributes: {
			}
		};

		var attributes = geometry.attributes;
		var offsets = geometry.offsets;
		var boundingSphere = geometry.boundingSphere;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];

			var array = [], typeArray = attribute.array;

			for ( var i = 0, l = typeArray.length; i < l; i ++ ) {

				array[ i ] = typeArray[ i ];

			}

			output.attributes[ key ] = {
				itemSize: attribute.itemSize,
				type: attribute.array.constructor.name,
				array: array
			}

		}

		if ( offsets.length > 0 ) {

			output.offsets = JSON.parse( JSON.stringify( offsets ) );

		}

		if ( boundingSphere !== null ) {

			output.boundingSphere = {
				center: boundingSphere.center.toArray(),
				radius: boundingSphere.radius
			}

		}

		return output;

	}

};

},{}],4:[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.GeometryExporter = function () {};

THREE.GeometryExporter.prototype = {

	constructor: THREE.GeometryExporter,

	parse: function ( geometry ) {

		var output = {
			metadata: {
				version: 4.0,
				type: 'geometry',
				generator: 'GeometryExporter'
			}
		};

		var vertices = [];

		for ( var i = 0; i < geometry.vertices.length; i ++ ) {

			var vertex = geometry.vertices[ i ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

		var faces = [];
		var normals = [];
		var normalsHash = {};
		var colors = [];
		var colorsHash = {};
		var uvs = [];
		var uvsHash = {};

		for ( var i = 0; i < geometry.faces.length; i ++ ) {

			var face = geometry.faces[ i ];

			var hasMaterial = false; // face.materialIndex !== undefined;
			var hasFaceUv = false; // deprecated
			var hasFaceVertexUv = geometry.faceVertexUvs[ 0 ][ i ] !== undefined;
			var hasFaceNormal = face.normal.length() > 0;
			var hasFaceVertexNormal = face.vertexNormals.length > 0;
			var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
			var hasFaceVertexColor = face.vertexColors.length > 0;

			var faceType = 0;

			faceType = setBit( faceType, 0, 0 );
			faceType = setBit( faceType, 1, hasMaterial );
			faceType = setBit( faceType, 2, hasFaceUv );
			faceType = setBit( faceType, 3, hasFaceVertexUv );
			faceType = setBit( faceType, 4, hasFaceNormal );
			faceType = setBit( faceType, 5, hasFaceVertexNormal );
			faceType = setBit( faceType, 6, hasFaceColor );
			faceType = setBit( faceType, 7, hasFaceVertexColor );

			faces.push( faceType );
			faces.push( face.a, face.b, face.c );


			/*
			if ( hasMaterial ) {

				faces.push( face.materialIndex );

			}
			*/

			if ( hasFaceVertexUv ) {

				var faceVertexUvs = geometry.faceVertexUvs[ 0 ][ i ];

				faces.push(
					getUvIndex( faceVertexUvs[ 0 ] ),
					getUvIndex( faceVertexUvs[ 1 ] ),
					getUvIndex( faceVertexUvs[ 2 ] )
				);

			}

			if ( hasFaceNormal ) {

				faces.push( getNormalIndex( face.normal ) );

			}

			if ( hasFaceVertexNormal ) {

				var vertexNormals = face.vertexNormals;

				faces.push(
					getNormalIndex( vertexNormals[ 0 ] ),
					getNormalIndex( vertexNormals[ 1 ] ),
					getNormalIndex( vertexNormals[ 2 ] )
				);

			}

			if ( hasFaceColor ) {

				faces.push( getColorIndex( face.color ) );

			}

			if ( hasFaceVertexColor ) {

				var vertexColors = face.vertexColors;

				faces.push(
					getColorIndex( vertexColors[ 0 ] ),
					getColorIndex( vertexColors[ 1 ] ),
					getColorIndex( vertexColors[ 2 ] )
				);

			}

		}

		function setBit( value, position, enabled ) {

			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position) );

		}

		function getNormalIndex( normal ) {

			var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

			if ( normalsHash[ hash ] !== undefined ) {

				return normalsHash[ hash ];

			}

			normalsHash[ hash ] = normals.length / 3;
			normals.push( normal.x, normal.y, normal.z );

			return normalsHash[ hash ];

		}

		function getColorIndex( color ) {

			var hash = color.r.toString() + color.g.toString() + color.b.toString();

			if ( colorsHash[ hash ] !== undefined ) {

				return colorsHash[ hash ];

			}

			colorsHash[ hash ] = colors.length;
			colors.push( color.getHex() );

			return colorsHash[ hash ];

		}

		function getUvIndex( uv ) {

			var hash = uv.x.toString() + uv.y.toString();

			if ( uvsHash[ hash ] !== undefined ) {

				return uvsHash[ hash ];

			}

			uvsHash[ hash ] = uvs.length / 2;
			uvs.push( uv.x, uv.y );

			return uvsHash[ hash ];

		}

		output.vertices = vertices;
		output.normals = normals;
		if ( colors.length > 0 ) output.colors = colors;
		if ( uvs.length > 0 ) output.uvs = [ uvs ]; // temporal backward compatibility
		output.faces = faces;

		//

		return output;

	}

};

},{}],5:[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.MaterialExporter = function () {};

THREE.MaterialExporter.prototype = {

	constructor: THREE.MaterialExporter,

	parse: function ( material ) {

		var output = {
			metadata: {
				version: 4.2,
				type: 'material',
				generator: 'MaterialExporter'
			}
		};

		output.uuid = material.uuid;

		if ( material.name !== "" ) output.name = material.name;

		if ( material instanceof THREE.MeshBasicMaterial ) {

			output.type = 'MeshBasicMaterial';
			output.color = material.color.getHex();
			if ( material.vertexColors !== THREE.NoColors ) output.vertexColors = material.vertexColors;
			if ( material.blending !== THREE.NormalBlending ) output.blending = material.blending;
			if ( material.side !== THREE.FrontSide ) output.side = material.side;
			output.opacity = material.opacity;
			output.transparent = material.transparent;
			output.wireframe = material.wireframe;

		} else if ( material instanceof THREE.MeshLambertMaterial ) {

			output.type = 'MeshLambertMaterial';
			output.color = material.color.getHex();
			output.ambient = material.ambient.getHex();
			output.emissive = material.emissive.getHex();
			if ( material.vertexColors !== THREE.NoColors ) output.vertexColors = material.vertexColors;
			if ( material.blending !== THREE.NormalBlending ) output.blending = material.blending;
			if ( material.side !== THREE.FrontSide ) output.side = material.side;
			output.opacity = material.opacity;
			output.transparent = material.transparent;
			output.wireframe = material.wireframe;

		} else if ( material instanceof THREE.MeshPhongMaterial ) {

			output.type = 'MeshPhongMaterial';
			output.color = material.color.getHex();
			output.ambient = material.ambient.getHex();
			output.emissive = material.emissive.getHex();
			output.specular = material.specular.getHex();
			output.shininess = material.shininess;
			if ( material.vertexColors !== THREE.NoColors ) output.vertexColors = material.vertexColors;
			if ( material.blending !== THREE.NormalBlending ) output.blending = material.blending;
			if ( material.side !== THREE.FrontSide ) output.side = material.side;
			output.opacity = material.opacity;
			output.transparent = material.transparent;
			output.wireframe = material.wireframe;

		} else if ( material instanceof THREE.MeshNormalMaterial ) {

			output.type = 'MeshNormalMaterial';
			if ( material.blending !== THREE.NormalBlending ) output.blending = material.blending;
			if ( material.side !== THREE.FrontSide ) output.side = material.side;
			output.opacity = material.opacity;
			output.transparent = material.transparent;
			output.wireframe = material.wireframe;

		} else if ( material instanceof THREE.MeshDepthMaterial ) {

			output.type = 'MeshDepthMaterial';
			if ( material.blending !== THREE.NormalBlending ) output.blending = material.blending;
			if ( material.side !== THREE.FrontSide ) output.side = material.side;
			output.opacity = material.opacity;
			output.transparent = material.transparent;
			output.wireframe = material.wireframe;

		} else if ( material instanceof THREE.MeshFaceMaterial ) {

			output.type = 'MeshFaceMaterial';
			output.materials = [];

			for ( var i = 0, l = material.materials.length; i < l; i ++ ) {

				output.materials.push( this.parse( material.materials[ i ] ) );

			}

		} else if ( material instanceof THREE.ShaderMaterial ) {

			output.type = 'ShaderMaterial';
			output.uniforms = material.uniforms;
			output.vertexShader = material.vertexShader;
			output.fragmentShader = material.fragmentShader;

		} else if ( material instanceof THREE.SpriteMaterial ) {

			output.type = 'SpriteMaterial';
			output.color = material.color.getHex();
			output.opacity = material.opacity;
			output.transparent = material.transparent;

		}

		return output;

	}

};

},{}],6:[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ObjectExporter = function () {};

THREE.ObjectExporter.prototype = {

	constructor: THREE.ObjectExporter,

	parse: function ( object ) {

		// console.log( object );

		var output = {
			metadata: {
				version: 4.3,
				type: 'Object',
				generator: 'ObjectExporter'
			}
		};

		//

		var geometries = {};
		var geometryExporter = new THREE.GeometryExporter();
		var bufferGeometryExporter = new THREE.BufferGeometryExporter();

		var parseGeometry = function ( geometry ) {

			if ( output.geometries === undefined ) {

				output.geometries = [];

			}

			if ( geometries[ geometry.uuid ] === undefined ) {

				var data = {};

				data.uuid = geometry.uuid;

				if ( geometry.name !== "" ) data.name = geometry.name;

				var handleParameters = function ( parameters ) {

					for ( var i = 0; i < parameters.length; i ++ ) {

						var parameter = parameters[ i ];

						if ( geometry.parameters[ parameter ] !== undefined ) {

							data[ parameter ] = geometry.parameters[ parameter ];

						}

					}

				};

				if ( geometry instanceof THREE.PlaneGeometry ) {

					data.type = 'PlaneGeometry';
					handleParameters( [ 'width', 'height', 'widthSegments', 'heightSegments' ] );

				} else if ( geometry instanceof THREE.BoxGeometry ) {

					data.type = 'BoxGeometry';
					handleParameters( [ 'width', 'height', 'depth', 'widthSegments', 'heightSegments', 'depthSegments' ] );

				} else if ( geometry instanceof THREE.CircleGeometry ) {

					data.type = 'CircleGeometry';
					handleParameters( [ 'radius', 'segments' ] );

				} else if ( geometry instanceof THREE.CylinderGeometry ) {

					data.type = 'CylinderGeometry';
					handleParameters( [ 'radiusTop', 'radiusBottom', 'height', 'radialSegments', 'heightSegments', 'openEnded' ] );

				} else if ( geometry instanceof THREE.SphereGeometry ) {

					data.type = 'SphereGeometry';
					handleParameters( [ 'radius', 'widthSegments', 'heightSegments', 'phiStart', 'phiLength', 'thetaStart', 'thetaLength' ] );

				} else if ( geometry instanceof THREE.IcosahedronGeometry ) {

					data.type = 'IcosahedronGeometry';
					handleParameters( [ 'radius', 'detail' ] );

				} else if ( geometry instanceof THREE.TorusGeometry ) {

					data.type = 'TorusGeometry';
					handleParameters( [ 'radius', 'tube', 'radialSegments', 'tubularSegments', 'arc' ] );

				} else if ( geometry instanceof THREE.TorusKnotGeometry ) {

					data.type = 'TorusKnotGeometry';
					handleParameters( [ 'radius', 'tube', 'radialSegments', 'tubularSegments', 'p', 'q', 'heightScale' ] );

				} else if ( geometry instanceof THREE.BufferGeometry ) {

					data.type = 'BufferGeometry';
					data.data = bufferGeometryExporter.parse( geometry );

					delete data.data.metadata;

				} else if ( geometry instanceof THREE.Geometry ) {

					data.type = 'Geometry';
					data.data = geometryExporter.parse( geometry );

					delete data.data.metadata;

				}

				geometries[ geometry.uuid ] = data;

				output.geometries.push( data );

			}

			return geometry.uuid;

		};

		//

		var materials = {};
		var materialExporter = new THREE.MaterialExporter();

		var parseMaterial = function ( material ) {

			if ( output.materials === undefined ) {

				output.materials = [];

			}

			if ( materials[ material.uuid ] === undefined ) {

				var data = materialExporter.parse( material );

				delete data.metadata;

				materials[ material.uuid ] = data;

				output.materials.push( data );

			}

			return material.uuid;

		};

		//

		var parseObject = function ( object ) {

			var data = {};

			data.uuid = object.uuid;

			if ( object.name !== '' ) data.name = object.name;
			if ( JSON.stringify( object.userData ) !== '{}' ) data.userData = object.userData;
			if ( object.visible !== true ) data.visible = object.visible;

			if ( object instanceof THREE.Scene ) {

				data.type = 'Scene';

			} else if ( object instanceof THREE.PerspectiveCamera ) {

				data.type = 'PerspectiveCamera';
				data.fov = object.fov;
				data.aspect = object.aspect;
				data.near = object.near;
				data.far = object.far;

			} else if ( object instanceof THREE.OrthographicCamera ) {

				data.type = 'OrthographicCamera';
				data.left = object.left;
				data.right = object.right;
				data.top = object.top;
				data.bottom = object.bottom;
				data.near = object.near;
				data.far = object.far;

			} else if ( object instanceof THREE.AmbientLight ) {

				data.type = 'AmbientLight';
				data.color = object.color.getHex();

			} else if ( object instanceof THREE.DirectionalLight ) {

				data.type = 'DirectionalLight';
				data.color = object.color.getHex();
				data.intensity = object.intensity;

			} else if ( object instanceof THREE.PointLight ) {

				data.type = 'PointLight';
				data.color = object.color.getHex();
				data.intensity = object.intensity;
				data.distance = object.distance;

			} else if ( object instanceof THREE.SpotLight ) {

				data.type = 'SpotLight';
				data.color = object.color.getHex();
				data.intensity = object.intensity;
				data.distance = object.distance;
				data.angle = object.angle;
				data.exponent = object.exponent;

			} else if ( object instanceof THREE.HemisphereLight ) {

				data.type = 'HemisphereLight';
				data.color = object.color.getHex();
				data.groundColor = object.groundColor.getHex();

			} else if ( object instanceof THREE.Mesh ) {

				data.type = 'Mesh';
				data.geometry = parseGeometry( object.geometry );
				data.material = parseMaterial( object.material );

			} else if ( object instanceof THREE.Sprite ) {

				data.type = 'Sprite';
				data.material = parseMaterial( object.material );

			} else {

				data.type = 'Object3D';

			}

			data.matrix = object.matrix.toArray();

			if ( object.children.length > 0 ) {

				data.children = [];

				for ( var i = 0; i < object.children.length; i ++ ) {

					data.children.push( parseObject( object.children[ i ] ) );

				}

			}

			return data;

		}

		output.object = parseObject( object );

		return output;

	}

}

},{}],7:[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ObjectLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.ObjectLoader.prototype = {

	constructor: THREE.ObjectLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.XHRLoader( scope.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json ) {

		var geometries = this.parseGeometries( json.geometries );
		var materials = this.parseMaterials( json.materials );
		var object = this.parseObject( json.object, geometries, materials );

		return object;

	},

	parseGeometries: function ( json ) {

		var geometries = {};

		if ( json !== undefined ) {

			var geometryLoader = new THREE.JSONLoader();
			var bufferGeometryLoader = new THREE.BufferGeometryLoader();

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var geometry;
				var data = json[ i ];

				switch ( data.type ) {

					case 'PlaneGeometry':

						geometry = new THREE.PlaneGeometry(
							data.width,
							data.height,
							data.widthSegments,
							data.heightSegments
						);

						break;

					case 'BoxGeometry':
					case 'CubeGeometry': // backwards compatible

						geometry = new THREE.BoxGeometry(
							data.width,
							data.height,
							data.depth,
							data.widthSegments,
							data.heightSegments,
							data.depthSegments
						);

						break;

					case 'CircleGeometry':

						geometry = new THREE.CircleGeometry(
							data.radius,
							data.segments
						);

						break;

					case 'CylinderGeometry':

						geometry = new THREE.CylinderGeometry(
							data.radiusTop,
							data.radiusBottom,
							data.height,
							data.radialSegments,
							data.heightSegments,
							data.openEnded
						);

						break;

					case 'SphereGeometry':

						geometry = new THREE.SphereGeometry(
							data.radius,
							data.widthSegments,
							data.heightSegments,
							data.phiStart,
							data.phiLength,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'IcosahedronGeometry':

						geometry = new THREE.IcosahedronGeometry(
							data.radius,
							data.detail
						);

						break;

					case 'TorusGeometry':

						geometry = new THREE.TorusGeometry(
							data.radius,
							data.tube,
							data.radialSegments,
							data.tubularSegments,
							data.arc
						);

						break;

					case 'TorusKnotGeometry':

						geometry = new THREE.TorusKnotGeometry(
							data.radius,
							data.tube,
							data.radialSegments,
							data.tubularSegments,
							data.p,
							data.q,
							data.heightScale
						);

						break;

					case 'BufferGeometry':

						geometry = bufferGeometryLoader.parse( data.data );

						break;

					case 'Geometry':

						geometry = geometryLoader.parse( data.data ).geometry;

						break;

				}

				geometry.uuid = data.uuid;

				if ( data.name !== undefined ) geometry.name = data.name;

				geometries[ data.uuid ] = geometry;

			}

		}

		return geometries;

	},

	parseMaterials: function ( json ) {

		var materials = {};

		if ( json !== undefined ) {

			var loader = new THREE.MaterialLoader();

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var data = json[ i ];
				var material = loader.parse( data );

				material.uuid = data.uuid;

				if ( data.name !== undefined ) material.name = data.name;

				materials[ data.uuid ] = material;

			}

		}

		return materials;

	},

	parseObject: function () {

		var matrix = new THREE.Matrix4();

		return function ( data, geometries, materials ) {

			var object;

			switch ( data.type ) {

				case 'Scene':

					object = new THREE.Scene();

					break;

				case 'PerspectiveCamera':

					object = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

					break;

				case 'OrthographicCamera':

					object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

					break;

				case 'AmbientLight':

					object = new THREE.AmbientLight( data.color );

					break;

				case 'DirectionalLight':

					object = new THREE.DirectionalLight( data.color, data.intensity );

					break;

				case 'PointLight':

					object = new THREE.PointLight( data.color, data.intensity, data.distance );

					break;

				case 'SpotLight':

					object = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent );

					break;

				case 'HemisphereLight':

					object = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );

					break;

				case 'Mesh':

					var geometry = geometries[ data.geometry ];
					var material = materials[ data.material ];

					if ( geometry === undefined ) {

						console.error( 'THREE.ObjectLoader: Undefined geometry ' + data.geometry );

					}

					if ( material === undefined ) {

						console.error( 'THREE.ObjectLoader: Undefined material ' + data.material );

					}

					object = new THREE.Mesh( geometry, material );

					break;

				case 'Sprite':

					var material = materials[ data.material ];

					if ( material === undefined ) {

						console.error( 'THREE.ObjectLoader: Undefined material ' + data.material );

					}

					object = new THREE.Sprite( material );

					break;

				default:

					object = new THREE.Object3D();

			}

			object.uuid = data.uuid;

			if ( data.name !== undefined ) object.name = data.name;
			if ( data.matrix !== undefined ) {

				matrix.fromArray( data.matrix );
				matrix.decompose( object.position, object.quaternion, object.scale );

			} else {

				if ( data.position !== undefined ) object.position.fromArray( data.position );
				if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
				if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

			}

			if ( data.visible !== undefined ) object.visible = data.visible;
			if ( data.userData !== undefined ) object.userData = data.userData;

			if ( data.children !== undefined ) {

				for ( var child in data.children ) {

					object.add( this.parseObject( data.children[ child ], geometries, materials ) );

				}

			}

			return object;

		}

	}()

};

},{}],8:[function(require,module,exports){
module.exports = AABB

var vec3 = require('gl-matrix').vec3

function AABB(pos, vec) {

  if(!(this instanceof AABB)) {
    return new AABB(pos, vec)
  }

  var pos2 = vec3.create()
  vec3.add(pos2, pos, vec)
 
  this.base = vec3.min(vec3.create(), pos, pos2)
  this.vec = vec
  this.max = vec3.max(vec3.create(), pos, pos2)

  this.mag = vec3.length(this.vec)

}

var cons = AABB
  , proto = cons.prototype

proto.width = function() {
  return this.vec[0]
}

proto.height = function() {
  return this.vec[1]
}

proto.depth = function() {
  return this.vec[2]
}

proto.x0 = function() {
  return this.base[0]
}

proto.y0 = function() {
  return this.base[1]
}

proto.z0 = function() {
  return this.base[2]
}

proto.x1 = function() {
  return this.max[0]
}

proto.y1 = function() {
  return this.max[1]
}

proto.z1 = function() {
  return this.max[2]
}

proto.translate = function(by) {
  vec3.add(this.max, this.max, by)
  vec3.add(this.base, this.base, by)
  return this
}

proto.expand = function(aabb) {
  var max = vec3.create()
    , min = vec3.create()

  vec3.max(max, aabb.max, this.max)
  vec3.min(min, aabb.base, this.base)
  vec3.sub(max, max, min)

  return new AABB(min, max)
}

proto.intersects = function(aabb) {
  if(aabb.base[0] > this.max[0]) return false
  if(aabb.base[1] > this.max[1]) return false
  if(aabb.base[2] > this.max[2]) return false
  if(aabb.max[0] < this.base[0]) return false
  if(aabb.max[1] < this.base[1]) return false
  if(aabb.max[2] < this.base[2]) return false

  return true
}

proto.touches = function(aabb) {

  var intersection = this.union(aabb);

  return (intersection !== null) &&
         ((intersection.width() == 0) ||
         (intersection.height() == 0) || 
         (intersection.depth() == 0))

}

proto.union = function(aabb) {
  if(!this.intersects(aabb)) return null

  var base_x = Math.max(aabb.base[0], this.base[0])
    , base_y = Math.max(aabb.base[1], this.base[1])
    , base_z = Math.max(aabb.base[2], this.base[2])
    , max_x = Math.min(aabb.max[0], this.max[0])
    , max_y = Math.min(aabb.max[1], this.max[1])
    , max_z = Math.min(aabb.max[2], this.max[2])

  return new AABB([base_x, base_y, base_z], [max_x - base_x, max_y - base_y, max_z - base_z])
}





},{"gl-matrix":9}],9:[function(require,module,exports){
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.1.0
 */

/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


(function() {
  "use strict";

  var shim = {};
  if (typeof(exports) === 'undefined') {
    if(typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      shim.exports = {};
      define(function() {
        return shim.exports;
      });
    } else {
      // gl-matrix lives in a browser, define its namespaces in global
      shim.exports = window;
    }    
  }
  else {
    // gl-matrix lives in commonjs, define its namespaces in exports
    shim.exports = exports;
  }

  (function(exports) {
    /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


if(!GLMAT_EPSILON) {
    var GLMAT_EPSILON = 0.000001;
}

if(!GLMAT_ARRAY_TYPE) {
    var GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
}

/**
 * @class Common utilities
 * @name glMatrix
 */
var glMatrix = {};

/**
 * Sets the type of array used when creating new vectors and matricies
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
glMatrix.setMatrixArrayType = function(type) {
    GLMAT_ARRAY_TYPE = type;
}

if(typeof(exports) !== 'undefined') {
    exports.glMatrix = glMatrix;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 2 Dimensional Vector
 * @name vec2
 */

var vec2 = {};

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
vec2.create = function() {
    var out = new GLMAT_ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
};

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
vec2.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
vec2.fromValues = function(x, y) {
    var out = new GLMAT_ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};

/**
 * Subtracts two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};

/**
 * Alias for {@link vec2.subtract}
 * @function
 */
vec2.sub = vec2.subtract;

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};

/**
 * Alias for {@link vec2.multiply}
 * @function
 */
vec2.mul = vec2.multiply;

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};

/**
 * Alias for {@link vec2.divide}
 * @function
 */
vec2.div = vec2.divide;

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.distance}
 * @function
 */
vec2.dist = vec2.distance;

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
vec2.sqrDist = vec2.squaredDistance;

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
vec2.length = function (a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.length}
 * @function
 */
vec2.len = vec2.length;

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec2.squaredLength = function (a) {
    var x = a[0],
        y = a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
vec2.sqrLen = vec2.squaredLength;

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x*x + y*y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
vec2.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
vec2.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2d = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat4 = function(out, a, m) {
    var x = a[0], 
        y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
};

/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec2.forEach = (function() {
    var vec = vec2.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 2;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec2.str = function (a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec2 = vec2;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 3 Dimensional Vector
 * @name vec3
 */

var vec3 = {};

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
vec3.create = function() {
    var out = new GLMAT_ARRAY_TYPE(3);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
};

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
vec3.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
vec3.fromValues = function(x, y, z) {
    var out = new GLMAT_ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
};

/**
 * Subtracts two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
};

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
vec3.sub = vec3.subtract;

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
};

/**
 * Alias for {@link vec3.multiply}
 * @function
 */
vec3.mul = vec3.multiply;

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
};

/**
 * Alias for {@link vec3.divide}
 * @function
 */
vec3.div = vec3.divide;

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
};

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
};

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
};

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
vec3.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.distance}
 * @function
 */
vec3.dist = vec3.distance;

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
vec3.sqrDist = vec3.squaredDistance;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
vec3.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.length}
 * @function
 */
vec3.len = vec3.length;

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec3.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
vec3.sqrLen = vec3.squaredLength;

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
};

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
vec3.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var len = x*x + y*y + z*z;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
vec3.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.cross = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2];

    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
};

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
};

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12];
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13];
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14];
    return out;
};

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
vec3.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec3.forEach = (function() {
    var vec = vec3.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 3;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec3.str = function (a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec3 = vec3;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 4 Dimensional Vector
 * @name vec4
 */

var vec4 = {};

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
vec4.create = function() {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
};

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
vec4.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
vec4.fromValues = function(x, y, z, w) {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
vec4.sub = vec4.subtract;

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
};

/**
 * Alias for {@link vec4.multiply}
 * @function
 */
vec4.mul = vec4.multiply;

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
};

/**
 * Alias for {@link vec4.divide}
 * @function
 */
vec4.div = vec4.divide;

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
};

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
};

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
vec4.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.distance}
 * @function
 */
vec4.dist = vec4.distance;

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
vec4.sqrDist = vec4.squaredDistance;

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
vec4.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.length}
 * @function
 */
vec4.len = vec4.length;

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec4.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
vec4.sqrLen = vec4.squaredLength;

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
};

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
vec4.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    var len = x*x + y*y + z*z + w*w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
        out[3] = a[3] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
vec4.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
vec4.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
};

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
vec4.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
};

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
vec4.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec4.forEach = (function() {
    var vec = vec4.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 4;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec4.str = function (a) {
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec4 = vec4;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 2x2 Matrix
 * @name mat2
 */

var mat2 = {};

var mat2Identity = new Float32Array([
    1, 0,
    0, 1
]);

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
mat2.create = function() {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
mat2.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
    } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
    }
    
    return out;
};

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],

        // Calculate the determinant
        det = a0 * a3 - a2 * a1;

    if (!det) {
        return null;
    }
    det = 1.0 / det;
    
    out[0] =  a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] =  a0 * det;

    return out;
};

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.adjoint = function(out, a) {
    // Caching this value is nessecary if out == a
    var a0 = a[0];
    out[0] =  a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] =  a0;

    return out;
};

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
mat2.determinant = function (a) {
    return a[0] * a[3] - a[2] * a[1];
};

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a1 * b2;
    out[1] = a0 * b1 + a1 * b3;
    out[2] = a2 * b0 + a3 * b2;
    out[3] = a2 * b1 + a3 * b3;
    return out;
};

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
mat2.mul = mat2.multiply;

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a1 * s;
    out[1] = a0 * -s + a1 * c;
    out[2] = a2 *  c + a3 * s;
    out[3] = a2 * -s + a3 * c;
    return out;
};

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
mat2.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v1;
    out[2] = a2 * v0;
    out[3] = a3 * v1;
    return out;
};

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2.str = function (a) {
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat2 = mat2;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 2x3 Matrix
 * @name mat2d
 * 
 * @description 
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, b,
 *  c, d,
 *  tx,ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, b, 0
 *  c, d, 0
 *  tx,ty,1]
 * </pre>
 * The last column is ignored so the array is shorter and operations are faster.
 */

var mat2d = {};

var mat2dIdentity = new Float32Array([
    1, 0,
    0, 1,
    0, 0
]);

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.create = function() {
    var out = new GLMAT_ARRAY_TYPE(6);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
mat2d.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.invert = function(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
        atx = a[4], aty = a[5];

    var det = aa * ad - ab * ac;
    if(!det){
        return null;
    }
    det = 1.0 / det;

    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
};

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
mat2d.determinant = function (a) {
    return a[0] * a[3] - a[1] * a[2];
};

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.multiply = function (out, a, b) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
        atx = a[4], aty = a[5],
        ba = b[0], bb = b[1], bc = b[2], bd = b[3],
        btx = b[4], bty = b[5];

    out[0] = aa*ba + ab*bc;
    out[1] = aa*bb + ab*bd;
    out[2] = ac*ba + ad*bc;
    out[3] = ac*bb + ad*bd;
    out[4] = ba*atx + bc*aty + btx;
    out[5] = bb*atx + bd*aty + bty;
    return out;
};

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
mat2d.mul = mat2d.multiply;


/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.rotate = function (out, a, rad) {
    var aa = a[0],
        ab = a[1],
        ac = a[2],
        ad = a[3],
        atx = a[4],
        aty = a[5],
        st = Math.sin(rad),
        ct = Math.cos(rad);

    out[0] = aa*ct + ab*st;
    out[1] = -aa*st + ab*ct;
    out[2] = ac*ct + ad*st;
    out[3] = -ac*st + ct*ad;
    out[4] = ct*atx + st*aty;
    out[5] = ct*aty - st*atx;
    return out;
};

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {mat2d} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
mat2d.scale = function(out, a, v) {
    var vx = v[0], vy = v[1];
    out[0] = a[0] * vx;
    out[1] = a[1] * vy;
    out[2] = a[2] * vx;
    out[3] = a[3] * vy;
    out[4] = a[4] * vx;
    out[5] = a[5] * vy;
    return out;
};

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {mat2d} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
mat2d.translate = function(out, a, v) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4] + v[0];
    out[5] = a[5] + v[1];
    return out;
};

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2d.str = function (a) {
    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat2d = mat2d;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 3x3 Matrix
 * @name mat3
 */

var mat3 = {};

var mat3Identity = new Float32Array([
    1, 0, 0,
    0, 1, 0,
    0, 0, 1
]);

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
mat3.create = function() {
    var out = new GLMAT_ARRAY_TYPE(9);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
mat3.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }
    
    return out;
};

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,

        // Calculate the determinant
        det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
};

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    out[0] = (a11 * a22 - a12 * a21);
    out[1] = (a02 * a21 - a01 * a22);
    out[2] = (a01 * a12 - a02 * a11);
    out[3] = (a12 * a20 - a10 * a22);
    out[4] = (a00 * a22 - a02 * a20);
    out[5] = (a02 * a10 - a00 * a12);
    out[6] = (a10 * a21 - a11 * a20);
    out[7] = (a01 * a20 - a00 * a21);
    out[8] = (a00 * a11 - a01 * a10);
    return out;
};

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
mat3.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
};

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b00 = b[0], b01 = b[1], b02 = b[2],
        b10 = b[3], b11 = b[4], b12 = b[5],
        b20 = b[6], b21 = b[7], b22 = b[8];

    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;

    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;

    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
};

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
mat3.mul = mat3.multiply;

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
mat3.translate = function(out, a, v) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],
        x = v[0], y = v[1];

    out[0] = a00;
    out[1] = a01;
    out[2] = a02;

    out[3] = a10;
    out[4] = a11;
    out[5] = a12;

    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
};

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.rotate = function (out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        s = Math.sin(rad),
        c = Math.cos(rad);

    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;

    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;

    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
mat3.scale = function(out, a, v) {
    var x = v[0], y = v[2];

    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];

    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];

    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
mat3.fromMat2d = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;

    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;

    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
};

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
mat3.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;

    out[3] = xy - wz;
    out[4] = 1 - (xx + zz);
    out[5] = yz + wx;

    out[6] = xz + wy;
    out[7] = yz - wx;
    out[8] = 1 - (xx + yy);

    return out;
};

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat3.str = function (a) {
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + 
                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat3 = mat3;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 4x4 Matrix
 * @name mat4
 */

var mat4 = {};

var mat4Identity = new Float32Array([
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1
]);

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
mat4.create = function() {
    var out = new GLMAT_ARRAY_TYPE(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
mat4.clone = function(a) {
    var out = new GLMAT_ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
mat4.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
mat4.mul = mat4.multiply;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.translate = function (out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.scale = function(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.rotate = function (out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < GLMAT_EPSILON) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateX = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateY = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateZ = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslation = function (out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};

/**
* Calculates a 4x4 matrix from the given quaternion
*
* @param {mat4} out mat4 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat4} out
*/
mat4.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;

    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;

    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.frustum = function (out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspective = function (out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.ortho = function (out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
mat4.lookAt = function (out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&
        Math.abs(eyey - centery) < GLMAT_EPSILON &&
        Math.abs(eyez - centerz) < GLMAT_EPSILON) {
        return mat4.identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat4.str = function (a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat4 = mat4;
}
;
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class Quaternion
 * @name quat
 */

var quat = {};

var quatIdentity = new Float32Array([0, 0, 0, 1]);

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
quat.create = function() {
    var out = new GLMAT_ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
quat.clone = vec4.clone;

/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
quat.fromValues = vec4.fromValues;

/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
quat.copy = vec4.copy;

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
quat.set = vec4.set;

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
};

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
quat.add = vec4.add;

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
quat.multiply = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
};

/**
 * Alias for {@link quat.multiply}
 * @function
 */
quat.mul = quat.multiply;

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
quat.scale = vec4.scale;

/**
 * Rotates a quaternion by the given angle around the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateX = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
};

/**
 * Rotates a quaternion by the given angle around the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateY = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        by = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
};

/**
 * Rotates a quaternion by the given angle around the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateZ = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bz = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
};

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
quat.calculateW = function (out, a) {
    var x = a[0], y = a[1], z = a[2];

    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
};

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
quat.dot = vec4.dot;

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
quat.lerp = vec4.lerp;

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
quat.slerp = function (out, a, b, t) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    var cosHalfTheta = ax * bx + ay * by + az * bz + aw * bw,
        halfTheta,
        sinHalfTheta,
        ratioA,
        ratioB;

    if (Math.abs(cosHalfTheta) >= 1.0) {
        if (out !== a) {
            out[0] = ax;
            out[1] = ay;
            out[2] = az;
            out[3] = aw;
        }
        return out;
    }

    halfTheta = Math.acos(cosHalfTheta);
    sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    if (Math.abs(sinHalfTheta) < 0.001) {
        out[0] = (ax * 0.5 + bx * 0.5);
        out[1] = (ay * 0.5 + by * 0.5);
        out[2] = (az * 0.5 + bz * 0.5);
        out[3] = (aw * 0.5 + bw * 0.5);
        return out;
    }

    ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
    ratioB = Math.sin(t * halfTheta) / sinHalfTheta;

    out[0] = (ax * ratioA + bx * ratioB);
    out[1] = (ay * ratioA + by * ratioB);
    out[2] = (az * ratioA + bz * ratioB);
    out[3] = (aw * ratioA + bw * ratioB);

    return out;
};

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
quat.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
        invDot = dot ? 1.0/dot : 0;
    
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

    out[0] = -a0*invDot;
    out[1] = -a1*invDot;
    out[2] = -a2*invDot;
    out[3] = a3*invDot;
    return out;
};

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
quat.conjugate = function (out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
};

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */
quat.length = vec4.length;

/**
 * Alias for {@link quat.length}
 * @function
 */
quat.len = quat.length;

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
quat.squaredLength = vec4.squaredLength;

/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
quat.sqrLen = quat.squaredLength;

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
quat.normalize = vec4.normalize;

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
quat.fromMat3 = (function() {
    var s_iNext = [1,2,0];
    return function(out, m) {
        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
        // article "Quaternion Calculus and Fast Animation".
        var fTrace = m[0] + m[4] + m[8];
        var fRoot;

        if ( fTrace > 0.0 ) {
            // |w| > 1/2, may as well choose w > 1/2
            fRoot = Math.sqrt(fTrace + 1.0);  // 2w
            out[3] = 0.5 * fRoot;
            fRoot = 0.5/fRoot;  // 1/(4w)
            out[0] = (m[7]-m[5])*fRoot;
            out[1] = (m[2]-m[6])*fRoot;
            out[2] = (m[3]-m[1])*fRoot;
        } else {
            // |w| <= 1/2
            var i = 0;
            if ( m[4] > m[0] )
              i = 1;
            if ( m[8] > m[i*3+i] )
              i = 2;
            var j = s_iNext[i];
            var k = s_iNext[j];
            
            fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
            out[i] = 0.5 * fRoot;
            fRoot = 0.5 / fRoot;
            out[3] = (m[k*3+j] - m[j*3+k]) * fRoot;
            out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
            out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
        }
        
        return out;
    };
})();

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
quat.str = function (a) {
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.quat = quat;
}
;













  })(shim.exports);
})();

},{}],10:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = Buffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var kMaxLength = 0x3fffffff

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Note:
 *
 * - Implementation must support adding new properties to `Uint8Array` instances.
 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *    incorrect length in some situations.
 *
 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
 * get the Object implementation, which is slower but will work correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  try {
    var buf = new ArrayBuffer(0)
    var arr = new Uint8Array(buf)
    arr.foo = function () { return 42 }
    return 42 === arr.foo() && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (subject, encoding, noZero) {
  if (!(this instanceof Buffer))
    return new Buffer(subject, encoding, noZero)

  var type = typeof subject

  // Find the length
  var length
  if (type === 'number')
    length = subject > 0 ? subject >>> 0 : 0
  else if (type === 'string') {
    if (encoding === 'base64')
      subject = base64clean(subject)
    length = Buffer.byteLength(subject, encoding)
  } else if (type === 'object' && subject !== null) { // assume object is array-like
    if (subject.type === 'Buffer' && isArray(subject.data))
      subject = subject.data
    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
  } else
    throw new TypeError('must start with number, buffer, array or string')

  if (this.length > kMaxLength)
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
      'size: 0x' + kMaxLength.toString(16) + ' bytes')

  var buf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Preferred: Return an augmented `Uint8Array` instance for best performance
    buf = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return THIS instance of Buffer (created by `new`)
    buf = this
    buf.length = length
    buf._isBuffer = true
  }

  var i
  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
    // Speed optimization -- use set if we're copying from a typed array
    buf._set(subject)
  } else if (isArrayish(subject)) {
    // Treat array-ish objects as a byte array
    if (Buffer.isBuffer(subject)) {
      for (i = 0; i < length; i++)
        buf[i] = subject.readUInt8(i)
    } else {
      for (i = 0; i < length; i++)
        buf[i] = ((subject[i] % 256) + 256) % 256
    }
  } else if (type === 'string') {
    buf.write(subject, 0, encoding)
  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
    for (i = 0; i < length; i++) {
      buf[i] = 0
    }
  }

  return buf
}

Buffer.isBuffer = function (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
    throw new TypeError('Arguments must be Buffers')

  var x = a.length
  var y = b.length
  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
  if (i !== len) {
    x = a[i]
    y = b[i]
  }
  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')

  if (list.length === 0) {
    return new Buffer(0)
  } else if (list.length === 1) {
    return list[0]
  }

  var i
  if (totalLength === undefined) {
    totalLength = 0
    for (i = 0; i < list.length; i++) {
      totalLength += list[i].length
    }
  }

  var buf = new Buffer(totalLength)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

Buffer.byteLength = function (str, encoding) {
  var ret
  str = str + ''
  switch (encoding || 'utf8') {
    case 'ascii':
    case 'binary':
    case 'raw':
      ret = str.length
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = str.length * 2
      break
    case 'hex':
      ret = str.length >>> 1
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8ToBytes(str).length
      break
    case 'base64':
      ret = base64ToBytes(str).length
      break
    default:
      ret = str.length
  }
  return ret
}

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

// toString(encoding, start=0, end=buffer.length)
Buffer.prototype.toString = function (encoding, start, end) {
  var loweredCase = false

  start = start >>> 0
  end = end === undefined || end === Infinity ? this.length : end >>> 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase)
          throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.equals = function (b) {
  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max)
      str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  return Buffer.compare(this, b)
}

// `get` will be removed in Node 0.13+
Buffer.prototype.get = function (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` will be removed in Node 0.13+
Buffer.prototype.set = function (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(byte)) throw new Error('Invalid hex string')
    buf[offset + i] = byte
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
  return charsWritten
}

function asciiWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
  return charsWritten
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
  return charsWritten
}

function utf16leWrite (buf, string, offset, length) {
  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length)
  return charsWritten
}

Buffer.prototype.write = function (string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length
      length = undefined
    }
  } else {  // legacy
    var swap = encoding
    encoding = offset
    offset = length
    length = swap
  }

  offset = Number(offset) || 0
  var remaining = this.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase()

  var ret
  switch (encoding) {
    case 'hex':
      ret = hexWrite(this, string, offset, length)
      break
    case 'utf8':
    case 'utf-8':
      ret = utf8Write(this, string, offset, length)
      break
    case 'ascii':
      ret = asciiWrite(this, string, offset, length)
      break
    case 'binary':
      ret = binaryWrite(this, string, offset, length)
      break
    case 'base64':
      ret = base64Write(this, string, offset, length)
      break
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      ret = utf16leWrite(this, string, offset, length)
      break
    default:
      throw new TypeError('Unknown encoding: ' + encoding)
  }
  return ret
}

Buffer.prototype.toJSON = function () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  var res = ''
  var tmp = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    if (buf[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
      tmp = ''
    } else {
      tmp += '%' + buf[i].toString(16)
    }
  }

  return res + decodeUtf8Char(tmp)
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function binarySlice (buf, start, end) {
  return asciiSlice(buf, start, end)
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len;
    if (start < 0)
      start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0)
      end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start)
    end = start

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    return Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    var newBuf = new Buffer(sliceLen, undefined, true)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
    return newBuf
  }
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0)
    throw new RangeError('offset is not uint')
  if (offset + ext > length)
    throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
}

Buffer.prototype.readInt8 = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80))
    return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
}

Buffer.prototype.readFloatLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function (offset, noAssert) {
  if (!noAssert)
    checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else objectWriteUInt16(this, value, offset, true)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else objectWriteUInt16(this, value, offset, false)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else objectWriteUInt32(this, value, offset, true)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert)
    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else objectWriteUInt32(this, value, offset, false)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new TypeError('value is out of bounds')
  if (offset + ext > buf.length) throw new TypeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert)
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function (target, target_start, start, end) {
  var source = this

  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (!target_start) target_start = 0

  // Copy 0 bytes; we're done
  if (end === start) return
  if (target.length === 0 || source.length === 0) return

  // Fatal error conditions
  if (end < start) throw new TypeError('sourceEnd < sourceStart')
  if (target_start < 0 || target_start >= target.length)
    throw new TypeError('targetStart out of bounds')
  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')
  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length)
    end = this.length
  if (target.length - target_start < end - start)
    end = target.length - target_start + start

  var len = end - start

  if (len < 100 || !Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < len; i++) {
      target[i + target_start] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), target_start)
  }
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new TypeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')
  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function (arr) {
  arr._isBuffer = true

  // save reference to original Uint8Array get/set methods before overwriting
  arr._get = arr.get
  arr._set = arr.set

  // deprecated, will be removed in node 0.13+
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-z]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function isArrayish (subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
      subject && typeof subject === 'object' &&
      typeof subject.length === 'number'
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    var b = str.charCodeAt(i)
    if (b <= 0x7F) {
      byteArray.push(b)
    } else {
      var start = i
      if (b >= 0xD800 && b <= 0xDFFF) i++
      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
      for (var j = 0; j < h.length; j++) {
        byteArray.push(parseInt(h[j], 16))
      }
    }
  }
  return byteArray
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(str)
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length))
      break
    dst[i + offset] = src[i]
  }
  return i
}

function decodeUtf8Char (str) {
  try {
    return decodeURIComponent(str)
  } catch (err) {
    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
  }
}

},{"base64-js":11,"ieee754":12,"is-array":13}],11:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS)
			return 62 // '+'
		if (code === SLASH)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],12:[function(require,module,exports){
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isLE ? (nBytes - 1) : 0,
      d = isLE ? -1 : 1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isLE ? 0 : (nBytes - 1),
      d = isLE ? 1 : -1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],13:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],14:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],15:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],16:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],17:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":18}],18:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],19:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":20}],20:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
},{"./_stream_readable":22,"./_stream_writable":24,"_process":18,"core-util-is":25,"inherits":15}],21:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":23,"core-util-is":25,"inherits":15}],22:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = false;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // In streams that never have any data, and do push(null) right away,
  // the consumer can miss the 'end' event if they do some I/O before
  // consuming the stream.  So, we don't emit('end') until some reading
  // happens.
  this.calledRead = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (typeof chunk === 'string' && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null || chunk === undefined) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      // update the buffer info.
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront) {
        state.buffer.unshift(chunk);
      } else {
        state.reading = false;
        state.buffer.push(chunk);
      }

      if (state.needReadable)
        emitReadable(stream);

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  var state = this._readableState;
  state.calledRead = true;
  var nOrig = n;
  var ret;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    ret = null;

    // In cases where the decoder did not receive enough data
    // to produce a full chunk, then immediately received an
    // EOF, state.buffer will contain [<Buffer >, <Buffer 00 ...>].
    // howMuchToRead will see this and coerce the amount to
    // read to zero (because it's looking at the length of the
    // first <Buffer > in state.buffer), and we'll end up here.
    //
    // This can only happen via state.decoder -- no other venue
    // exists for pushing a zero-length chunk into state.buffer
    // and triggering this behavior. In this case, we return our
    // remaining data and end the stream, if appropriate.
    if (state.length > 0 && state.decoder) {
      ret = fromList(n, state);
      state.length -= ret.length;
    }

    if (state.length === 0)
      endReadable(this);

    return ret;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;

  // if we currently have less than the highWaterMark, then also read some
  if (state.length - n <= state.highWaterMark)
    doRead = true;

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading)
    doRead = false;

  if (doRead) {
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read called its callback synchronously, then `reading`
  // will be false, and we need to re-evaluate how much data we
  // can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we happened to read() exactly the remaining amount in the
  // buffer, and the EOF has been seen at this point, then make sure
  // that we emit 'end' on the very next tick.
  if (state.ended && !state.endEmitted && state.length === 0)
    endReadable(this);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // if we've ended and we have some data left, then emit
  // 'readable' now to make sure it gets picked up.
  if (state.length > 0)
    emitReadable(stream);
  else
    endReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (state.emittedReadable)
    return;

  state.emittedReadable = true;
  if (state.sync)
    process.nextTick(function() {
      emitReadable_(stream);
    });
  else
    emitReadable_(stream);
}

function emitReadable_(stream) {
  stream.emit('readable');
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    if (readable !== src) return;
    cleanup();
  }

  function onend() {
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (!dest._writableState || dest._writableState.needDrain)
      ondrain();
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    // the handler that waits for readable events after all
    // the data gets sucked out in flow.
    // This would be easier to follow with a .once() handler
    // in flow(), but that is too slow.
    this.on('readable', pipeOnReadable);

    state.flowing = true;
    process.nextTick(function() {
      flow(src);
    });
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var dest = this;
    var state = src._readableState;
    state.awaitDrain--;
    if (state.awaitDrain === 0)
      flow(src);
  };
}

function flow(src) {
  var state = src._readableState;
  var chunk;
  state.awaitDrain = 0;

  function write(dest, i, list) {
    var written = dest.write(chunk);
    if (false === written) {
      state.awaitDrain++;
    }
  }

  while (state.pipesCount && null !== (chunk = src.read())) {

    if (state.pipesCount === 1)
      write(state.pipes, 0, null);
    else
      forEach(state.pipes, write);

    src.emit('data', chunk);

    // if anyone needs a drain, then we have to wait for that.
    if (state.awaitDrain > 0)
      return;
  }

  // if every destination was unpiped, either before entering this
  // function, or in the while loop, then stop flowing.
  //
  // NB: This is a pretty rare edge case.
  if (state.pipesCount === 0) {
    state.flowing = false;

    // if there were data event listeners added, then switch to old mode.
    if (EE.listenerCount(src, 'data') > 0)
      emitDataEvents(src);
    return;
  }

  // at this point, no one needed a drain, so we just ran out of data
  // on the next readable event, start it over again.
  state.ranOut = true;
}

function pipeOnReadable() {
  if (this._readableState.ranOut) {
    this._readableState.ranOut = false;
    flow(this);
  }
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    this.removeListener('readable', pipeOnReadable);
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data' && !this._readableState.flowing)
    emitDataEvents(this);

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        this.read(0);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  emitDataEvents(this);
  this.read(0);
  this.emit('resume');
};

Readable.prototype.pause = function() {
  emitDataEvents(this, true);
  this.emit('pause');
};

function emitDataEvents(stream, startPaused) {
  var state = stream._readableState;

  if (state.flowing) {
    // https://github.com/isaacs/readable-stream/issues/16
    throw new Error('Cannot switch to old mode now.');
  }

  var paused = startPaused || false;
  var readable = false;

  // convert to an old-style stream.
  stream.readable = true;
  stream.pipe = Stream.prototype.pipe;
  stream.on = stream.addListener = Stream.prototype.on;

  stream.on('readable', function() {
    readable = true;

    var c;
    while (!paused && (null !== (c = stream.read())))
      stream.emit('data', c);

    if (c === null) {
      readable = false;
      stream._readableState.needReadable = true;
    }
  });

  stream.pause = function() {
    paused = true;
    this.emit('pause');
  };

  stream.resume = function() {
    paused = false;
    if (readable)
      process.nextTick(function() {
        stream.emit('readable');
      });
    else
      this.read(0);
    this.emit('resume');
  };

  // now make it start, just in case it hadn't already.
  stream.emit('readable');
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    //if (state.objectMode && util.isNullOrUndefined(chunk))
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (typeof stream[i] === 'function' &&
        typeof this[i] === 'undefined') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted && state.calledRead) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"_process":18,"buffer":10,"core-util-is":25,"events":14,"inherits":15,"isarray":16,"stream":31,"string_decoder/":26}],23:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  var ts = this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('finish', function() {
    if ('function' === typeof this._flush)
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var rs = stream._readableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":20,"core-util-is":25,"inherits":15}],24:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : 16 * 1024;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, becuase any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!Buffer.isBuffer(chunk) &&
      'string' !== typeof chunk &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb))
    ret = writeOrBuffer(this, state, chunk, encoding, cb);

  return ret;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      cb(er);
    });
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished && !state.bufferProcessing && state.buffer.length)
      clearBuffer(stream, state);

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  cb();
  if (finished)
    finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  for (var c = 0; c < state.buffer.length; c++) {
    var entry = state.buffer[c];
    var chunk = entry.chunk;
    var encoding = entry.encoding;
    var cb = entry.callback;
    var len = state.objectMode ? 1 : chunk.length;

    doWrite(stream, state, len, chunk, encoding, cb);

    // if we didn't call the onwrite immediately, then
    // it means that we need to wait until it does.
    // also, that means that the chunk and cb are currently
    // being processed, so move the buffer counter past them.
    if (state.writing) {
      c++;
      break;
    }
  }

  state.bufferProcessing = false;
  if (c < state.buffer.length)
    state.buffer = state.buffer.slice(c);
  else
    state.buffer.length = 0;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (typeof chunk !== 'undefined' && chunk !== null)
    this.write(chunk, encoding);

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    state.finished = true;
    stream.emit('finish');
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":20,"_process":18,"buffer":10,"core-util-is":25,"inherits":15,"stream":31}],25:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return Buffer.isBuffer(arg);
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
}).call(this,require("buffer").Buffer)
},{"buffer":10}],26:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":10}],27:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":21}],28:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":20,"./lib/_stream_passthrough.js":21,"./lib/_stream_readable.js":22,"./lib/_stream_transform.js":23,"./lib/_stream_writable.js":24}],29:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":23}],30:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":24}],31:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":14,"inherits":15,"readable-stream/duplex.js":19,"readable-stream/passthrough.js":27,"readable-stream/readable.js":28,"readable-stream/transform.js":29,"readable-stream/writable.js":30}],32:[function(require,module,exports){
var ever = require('ever')
  , vkey = require('vkey')
  , max = Math.max

module.exports = function(el, bindings, state) {
  var root = null
  if(bindings === undefined || !el.ownerDocument) {
    state = bindings
    bindings = el
    el = this.document.body
    try {
      root = window.top.document.body
    } catch(e){}
  }

  var ee = ever(el)
    , re = root ? ever(root) : ee
    , measured = {}
    , enabled = true

  state = state || {}

  state.bindings = bindings

  // always initialize the state.
  for(var key in bindings) {
    if(bindings[key] === 'enabled' ||
       bindings[key] === 'enable' ||
       bindings[key] === 'disable' ||
       bindings[key] === 'destroy' ||
       bindings[key] === 'bindings') {
      throw new Error(bindings[key]+' is reserved')
    }
    state[bindings[key]] = 0
    measured[key] = 1
  }

  re.on('keyup', wrapped(onoff(kb, false)))
  re.on('keydown', wrapped(onoff(kb, true)))
  ee.on('mouseup', wrapped(onoff(mouse, false)))
  ee.on('mousedown', wrapped(onoff(mouse, true)))

  state.enabled = function() {
    return enabled
  }

  state.enable = enable_disable(true)
  state.disable = enable_disable(false)
  state.destroy = function() {
    re.removeAllListeners()
    ee.removeAllListeners()
  }
  return state

  function clear() {
    // always initialize the state.
    for(var key in bindings) {
      state[bindings[key]] = 0
      measured[key] = 1
    }
  }

  function enable_disable(on_or_off) {
    return function() {
      clear()
      enabled = on_or_off
      return this
    }
  }

  function wrapped(fn) {
    return function(ev) {
      if(enabled) {
        fn(ev)
      } else {
        return
      }
    }
  }

  function onoff(find, on_or_off) {
    return function(ev) {
      var key = find(ev)
        , binding = bindings[key]

      if(binding) {
        state[binding] += on_or_off ? max(measured[key]--, 0) : -(measured[key] = 1)

        if(!on_or_off && state[binding] < 0) {
          state[binding] = 0
        }
      }
    }
  }

  function mouse(ev) {
    return '<mouse '+ev.which+'>'
  }

  function kb(ev) {
    return vkey[ev.keyCode] || ev.char
  }
}

},{"ever":33,"vkey":36}],33:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter;

module.exports = function (elem) {
    return new Ever(elem);
};

function Ever (elem) {
    this.element = elem;
}

Ever.prototype = new EventEmitter;

Ever.prototype.on = function (name, cb, useCapture) {
    if (!this._events) this._events = {};
    if (!this._events[name]) this._events[name] = [];
    this._events[name].push(cb);
    this.element.addEventListener(name, cb, useCapture || false);

    return this;
};
Ever.prototype.addListener = Ever.prototype.on;

Ever.prototype.removeListener = function (type, listener, useCapture) {
    if (!this._events) this._events = {};
    this.element.removeEventListener(type, listener, useCapture || false);
    
    var xs = this.listeners(type);
    var ix = xs.indexOf(listener);
    if (ix >= 0) xs.splice(ix, 1);

    return this;
};

Ever.prototype.removeAllListeners = function (type) {
    var self = this;
    function removeAll (t) {
        var xs = self.listeners(t);
        for (var i = 0; i < xs.length; i++) {
            self.removeListener(t, xs[i]);
        }
    }
    
    if (type) {
        removeAll(type)
    }
    else if (self._events) {
        for (var key in self._events) {
            if (key) removeAll(key);
        }
    }
    return EventEmitter.prototype.removeAllListeners.apply(self, arguments);
}

var initSignatures = require('./init.json');

Ever.prototype.emit = function (name, ev) {
    if (typeof name === 'object') {
        ev = name;
        name = ev.type;
    }
    
    if (!isEvent(ev)) {
        var type = Ever.typeOf(name);
        
        var opts = ev || {};
        if (opts.type === undefined) opts.type = name;
        
        ev = document.createEvent(type + 's');
        var init = typeof ev['init' + type] === 'function'
            ? 'init' + type : 'initEvent'
        ;
        
        var sig = initSignatures[init];
        var used = {};
        var args = [];
        
        for (var i = 0; i < sig.length; i++) {
            var key = sig[i];
            args.push(opts[key]);
            used[key] = true;
        }
        ev[init].apply(ev, args);
        
        // attach remaining unused options to the object
        for (var key in opts) {
            if (!used[key]) ev[key] = opts[key];
        }
    }
    return this.element.dispatchEvent(ev);
};

function isEvent (ev) {
    var s = Object.prototype.toString.call(ev);
    return /\[object \S+Event\]/.test(s);
}

Ever.types = require('./types.json');
Ever.typeOf = (function () {
    var types = {};
    for (var key in Ever.types) {
        var ts = Ever.types[key];
        for (var i = 0; i < ts.length; i++) {
            types[ts[i]] = key;
        }
    }
    
    return function (name) {
        return types[name] || 'Event';
    };
})();;

},{"./init.json":34,"./types.json":35,"events":14}],34:[function(require,module,exports){
module.exports={
  "initEvent" : [
    "type",
    "canBubble", 
    "cancelable"
  ],
  "initUIEvent" : [
    "type",
    "canBubble", 
    "cancelable", 
    "view", 
    "detail"
  ],
  "initMouseEvent" : [
    "type",
    "canBubble", 
    "cancelable", 
    "view", 
    "detail", 
    "screenX", 
    "screenY", 
    "clientX", 
    "clientY", 
    "ctrlKey", 
    "altKey", 
    "shiftKey", 
    "metaKey", 
    "button",
    "relatedTarget"
  ],
  "initMutationEvent" : [
    "type",
    "canBubble", 
    "cancelable", 
    "relatedNode", 
    "prevValue", 
    "newValue", 
    "attrName", 
    "attrChange"
  ]
}

},{}],35:[function(require,module,exports){
module.exports={
  "MouseEvent" : [
    "click",
    "mousedown",
    "mouseup",
    "mouseover",
    "mousemove",
    "mouseout"
  ],
  "KeyBoardEvent" : [
    "keydown",
    "keyup",
    "keypress"
  ],
  "MutationEvent" : [
    "DOMSubtreeModified",
    "DOMNodeInserted",
    "DOMNodeRemoved",
    "DOMNodeRemovedFromDocument",
    "DOMNodeInsertedIntoDocument",
    "DOMAttrModified",
    "DOMCharacterDataModified"
  ],
  "HTMLEvent" : [
    "load",
    "unload",
    "abort",
    "error",
    "select",
    "change",
    "submit",
    "reset",
    "focus",
    "blur",
    "resize",
    "scroll"
  ],
  "UIEvent" : [
    "DOMFocusIn",
    "DOMFocusOut",
    "DOMActivate"
  ]
}

},{}],36:[function(require,module,exports){
var ua = typeof window !== 'undefined' ? window.navigator.userAgent : ''
  , isOSX = /OS X/.test(ua)
  , isOpera = /Opera/.test(ua)
  , maybeFirefox = !/like Gecko/.test(ua) && !isOpera

var i, output = module.exports = {
  0:  isOSX ? '<menu>' : '<UNK>'
, 1:  '<mouse 1>'
, 2:  '<mouse 2>'
, 3:  '<break>'
, 4:  '<mouse 3>'
, 5:  '<mouse 4>'
, 6:  '<mouse 5>'
, 8:  '<backspace>'
, 9:  '<tab>'
, 12: '<clear>'
, 13: '<enter>'
, 16: '<shift>'
, 17: '<control>'
, 18: '<alt>'
, 19: '<pause>'
, 20: '<caps-lock>'
, 21: '<ime-hangul>'
, 23: '<ime-junja>'
, 24: '<ime-final>'
, 25: '<ime-kanji>'
, 27: '<escape>'
, 28: '<ime-convert>'
, 29: '<ime-nonconvert>'
, 30: '<ime-accept>'
, 31: '<ime-mode-change>'
, 27: '<escape>'
, 32: '<space>'
, 33: '<page-up>'
, 34: '<page-down>'
, 35: '<end>'
, 36: '<home>'
, 37: '<left>'
, 38: '<up>'
, 39: '<right>'
, 40: '<down>'
, 41: '<select>'
, 42: '<print>'
, 43: '<execute>'
, 44: '<snapshot>'
, 45: '<insert>'
, 46: '<delete>'
, 47: '<help>'
, 91: '<meta>'  // meta-left -- no one handles left and right properly, so we coerce into one.
, 92: '<meta>'  // meta-right
, 93: isOSX ? '<meta>' : '<menu>'      // chrome,opera,safari all report this for meta-right (osx mbp).
, 95: '<sleep>'
, 106: '<num-*>'
, 107: '<num-+>'
, 108: '<num-enter>'
, 109: '<num-->'
, 110: '<num-.>'
, 111: '<num-/>'
, 144: '<num-lock>'
, 145: '<scroll-lock>'
, 160: '<shift-left>'
, 161: '<shift-right>'
, 162: '<control-left>'
, 163: '<control-right>'
, 164: '<alt-left>'
, 165: '<alt-right>'
, 166: '<browser-back>'
, 167: '<browser-forward>'
, 168: '<browser-refresh>'
, 169: '<browser-stop>'
, 170: '<browser-search>'
, 171: '<browser-favorites>'
, 172: '<browser-home>'

  // ff/osx reports '<volume-mute>' for '-'
, 173: isOSX && maybeFirefox ? '-' : '<volume-mute>'
, 174: '<volume-down>'
, 175: '<volume-up>'
, 176: '<next-track>'
, 177: '<prev-track>'
, 178: '<stop>'
, 179: '<play-pause>'
, 180: '<launch-mail>'
, 181: '<launch-media-select>'
, 182: '<launch-app 1>'
, 183: '<launch-app 2>'
, 186: ';'
, 187: '='
, 188: ','
, 189: '-'
, 190: '.'
, 191: '/'
, 192: '`'
, 219: '['
, 220: '\\'
, 221: ']'
, 222: "'"
, 223: '<meta>'
, 224: '<meta>'       // firefox reports meta here.
, 226: '<alt-gr>'
, 229: '<ime-process>'
, 231: isOpera ? '`' : '<unicode>'
, 246: '<attention>'
, 247: '<crsel>'
, 248: '<exsel>'
, 249: '<erase-eof>'
, 250: '<play>'
, 251: '<zoom>'
, 252: '<no-name>'
, 253: '<pa-1>'
, 254: '<clear>'
}

for(i = 58; i < 65; ++i) {
  output[i] = String.fromCharCode(i)
}

// 0-9
for(i = 48; i < 58; ++i) {
  output[i] = (i - 48)+''
}

// A-Z
for(i = 65; i < 91; ++i) {
  output[i] = String.fromCharCode(i)
}

// num0-9
for(i = 96; i < 106; ++i) {
  output[i] = '<num-'+(i - 96)+'>'
}

// F1-F24
for(i = 112; i < 136; ++i) {
  output[i] = 'F'+(i-111)
}

},{}],37:[function(require,module,exports){
var THREE

module.exports = function(three, image, sizeRatio) {
  return new Skin(three, image, sizeRatio)
}

function Skin(three, image, opts) {
  if (opts) opts.image = opts.image || image
  else opts = { image: image }
  if (typeof image === 'object' && !(image instanceof HTMLElement)) opts = image
  THREE = three // hack until three.js fixes multiple instantiation
  this.sizeRatio = opts.sizeRatio || 8
  this.scale = opts.scale || new three.Vector3(1, 1, 1)
  this.fallbackImage = opts.fallbackImage || 'skin.png'
  this.createCanvases()
  this.charMaterial = this.getMaterial(this.skin, false)
	this.charMaterialTrans = this.getMaterial(this.skin, true)
  if (typeof opts.image === "string") this.fetchImage(opts.image)
  if (opts.image instanceof HTMLElement) this.setImage(opts.image)
  this.mesh = this.createPlayerObject()
}

Skin.prototype.createCanvases = function() {
  this.skinBig = document.createElement('canvas')
  this.skinBigContext = this.skinBig.getContext('2d')
  this.skinBig.width = 64 * this.sizeRatio
  this.skinBig.height = 32 * this.sizeRatio

  this.skin = document.createElement('canvas')
  this.skinContext = this.skin.getContext('2d')
  this.skin.width = 64
  this.skin.height = 32
}

Skin.prototype.fetchImage = function(imageURL) {
  var self = this
  this.image = new Image()
  this.image.crossOrigin = 'anonymous'
  this.image.src = imageURL
  this.image.onload = function() {
    self.setImage(self.image)
  }
}

Skin.prototype.setImage = function (skin) {
  this.image = skin
  this.skinContext.clearRect(0, 0, 64, 32);

  this.skinContext.drawImage(skin, 0, 0);

  var imgdata = this.skinContext.getImageData(0, 0, 64, 32);
  var pixels = imgdata.data;

  this.skinBigContext.clearRect(0, 0, this.skinBig.width, this.skinBig.height);
  this.skinBigContext.save();

  var isOnecolor = true;

  var colorCheckAgainst = [40, 0];
  var colorIndex = (colorCheckAgainst[0]+colorCheckAgainst[1]*64)*4;

  var isPixelDifferent = function (x, y) {
    if(pixels[(x+y*64)*4+0] !== pixels[colorIndex+0] || pixels[(x+y*64)*4+1] !== pixels[colorIndex+1] || pixels[(x+y*64)*4+2] !== pixels[colorIndex+2] || pixels[(x+y*64)*4+3] !== pixels[colorIndex+3]) {
      return true;
    }
    return false;
  };

  // Check if helmet/hat is a solid color
  // Bottom row
  for(var i=32; i < 64; i+=1) {
    for(var j=8; j < 16; j+=1) {
      if(isPixelDifferent(i, j)) {
        isOnecolor = false;
        break;
      }
    }
    if(!isOnecolor) {
      break;
    }
  }
  if(!isOnecolor) {
    // Top row
    for(var i=40; i < 56; i+=1) {
      for(var j=0; j < 8; j+=1) {
        if(isPixelDifferent(i, j)) {
          isOnecolor = false;
          break;
        }
      }
      if(!isOnecolor) {
        break;
      }

    }
  }

  for(var i=0; i < 64; i+=1) {
    for(var j=0; j < 32; j+=1) {
      if(isOnecolor && ((i >= 32 && i < 64 && j >= 8 && j < 16) || (i >= 40 && i < 56 && j >= 0 && j < 8))) {
        pixels[(i+j*64)*4+3] = 0
      }
      this.skinBigContext.fillStyle = 'rgba('+pixels[(i+j*64)*4+0]+', '+pixels[(i+j*64)*4+1]+', '+pixels[(i+j*64)*4+2]+', '+pixels[(i+j*64)*4+3]/255+')';
      this.skinBigContext.fillRect(i * this.sizeRatio, j * this.sizeRatio, this.sizeRatio, this.sizeRatio);
    }
  }

  this.skinBigContext.restore();

  this.skinContext.putImageData(imgdata, 0, 0);

  this.charMaterial.map.needsUpdate = true;
  this.charMaterialTrans.map.needsUpdate = true;

};

Skin.prototype.getMaterial = function(img, transparent) {
  var texture    = new THREE.Texture(img);
  texture.magFilter  = THREE.NearestFilter;
  texture.minFilter  = THREE.NearestFilter;
  texture.format    = transparent ? THREE.RGBAFormat : THREE.RGBFormat;
  texture.needsUpdate  = true;
  var material  = new THREE.MeshBasicMaterial({
    map    : texture,
    transparent  : transparent ? true : false
  });
  return material;
}

Skin.prototype.UVMap = function(mesh, face, x, y, w, h, rotateBy) {
  if (!rotateBy) rotateBy = 0;
  var uvs = mesh.geometry.faceVertexUvs[0][face];
  var tileU = x;
  var tileV = y;
  var tileUvWidth = 1/64;
  var tileUvHeight = 1/32;
  // uvs[ (0 + rotateBy) % 4 ].x = (tileU * tileUvWidth)
  // uvs[ (0 + rotateBy) % 4 ].y = 1 - (tileV * tileUvHeight)
  // uvs[ (1 + rotateBy) % 4 ].x = (tileU * tileUvWidth)
  // uvs[ (1 + rotateBy) % 4 ].y = 1 - (tileV * tileUvHeight + h * tileUvHeight)
  // uvs[ (2 + rotateBy) % 4 ].x = (tileU * tileUvWidth + w * tileUvWidth)
  // uvs[ (2 + rotateBy) % 4 ].y = 1 - (tileV * tileUvHeight + h * tileUvHeight)
  //uvs[ (3 + rotateBy) % 4 ].x = (tileU * tileUvWidth + w * tileUvWidth)
  //uvs[ (3 + rotateBy) % 4 ].y = 1 - (tileV * tileUvHeight)
}

Skin.prototype.cubeFromPlanes = function (size, mat) {
  var cube = new THREE.Object3D();
  var meshes = [];
  for(var i=0; i < 6; i++) {
    var mesh = new THREE.Mesh(new THREE.PlaneGeometry(size, size), mat);
    mesh.doubleSided = true;
    cube.add(mesh);
    meshes.push(mesh);
  }
  // Front
  meshes[0].rotation.x = Math.PI/2;
  meshes[0].rotation.z = -Math.PI/2;
  meshes[0].position.x = size/2;

  // Back
  meshes[1].rotation.x = Math.PI/2;
  meshes[1].rotation.z = Math.PI/2;
  meshes[1].position.x = -size/2;

  // Top
  meshes[2].position.y = size/2;

  // Bottom
  meshes[3].rotation.y = Math.PI;
  meshes[3].rotation.z = Math.PI;
  meshes[3].position.y = -size/2;

  // Left
  meshes[4].rotation.x = Math.PI/2;
  meshes[4].position.z = size/2;

  // Right
  meshes[5].rotation.x = -Math.PI/2;
  meshes[5].rotation.y = Math.PI;
  meshes[5].position.z = -size/2;

  return cube;
}

//exporting these meshes for manipulation:
//leftLeg
//rightLeg
//leftArm
//rightArm
//body
//head

Skin.prototype.createPlayerObject = function(scene) {
  var headgroup = new THREE.Object3D();
  var upperbody = this.upperbody = new THREE.Object3D();

  // Left leg
  var leftleggeo = new THREE.CubeGeometry(4, 12, 4);
  for(var i=0; i < 8; i+=1) {
    leftleggeo.vertices[i].y -= 6;
  }
  var leftleg = this.leftLeg = new THREE.Mesh(leftleggeo, this.charMaterial);
  leftleg.position.z = -2;
  leftleg.position.y = -6;
  this.UVMap(leftleg, 0, 8, 20, -4, 12);
  this.UVMap(leftleg, 1, 16, 20, -4, 12);
  this.UVMap(leftleg, 2, 4, 16, 4, 4, 3);
  this.UVMap(leftleg, 3, 8, 20, 4, -4, 1);
  this.UVMap(leftleg, 4, 12, 20, -4, 12);
  this.UVMap(leftleg, 5, 4, 20, -4, 12);

  // Right leg
  var rightleggeo = new THREE.CubeGeometry(4, 12, 4);
  for(var i=0; i < 8; i+=1) {
    rightleggeo.vertices[i].y -= 6;
  }
  var rightleg = this.rightLeg =new THREE.Mesh(rightleggeo, this.charMaterial);
  rightleg.position.z = 2;
  rightleg.position.y = -6;
  this.UVMap(rightleg, 0, 4, 20, 4, 12);
  this.UVMap(rightleg, 1, 12, 20, 4, 12);
  this.UVMap(rightleg, 2, 8, 16, -4, 4, 3);
  this.UVMap(rightleg, 3, 12, 20, -4, -4, 1);
  this.UVMap(rightleg, 4, 0, 20, 4, 12);
  this.UVMap(rightleg, 5, 8, 20, 4, 12);

  // Body
  var bodygeo = new THREE.CubeGeometry(4, 12, 8);
  var bodymesh = this.body = new THREE.Mesh(bodygeo, this.charMaterial);
  this.UVMap(bodymesh, 0, 20, 20, 8, 12);
  this.UVMap(bodymesh, 1, 32, 20, 8, 12);
  this.UVMap(bodymesh, 2, 20, 16, 8, 4, 1);
  this.UVMap(bodymesh, 3, 28, 16, 8, 4, 3);
  this.UVMap(bodymesh, 4, 16, 20, 4, 12);
  this.UVMap(bodymesh, 5, 28, 20, 4, 12);
  upperbody.add(bodymesh);


  // Left arm
  var leftarmgeo = new THREE.CubeGeometry(4, 12, 4);
  for(var i=0; i < 8; i+=1) {
    leftarmgeo.vertices[i].y -= 4;
  }
  var leftarm = this.leftArm = new THREE.Mesh(leftarmgeo, this.charMaterial);
  leftarm.position.z = -6;
  leftarm.position.y = 4;
  leftarm.rotation.x = Math.PI/32;
  this.UVMap(leftarm, 0, 48, 20, -4, 12);
  this.UVMap(leftarm, 1, 56, 20, -4, 12);
  this.UVMap(leftarm, 2, 48, 16, -4, 4, 1);
  this.UVMap(leftarm, 3, 52, 16, -4, 4, 3);
  this.UVMap(leftarm, 4, 52, 20, -4, 12);
  this.UVMap(leftarm, 5, 44, 20, -4, 12);
  upperbody.add(leftarm);

  // Right arm
  var rightarmgeo = new THREE.CubeGeometry(4, 12, 4);
  for(var i=0; i < 8; i+=1) {
    rightarmgeo.vertices[i].y -= 4;
  }
  var rightarm =this.rightArm = new THREE.Mesh(rightarmgeo, this.charMaterial);
  rightarm.position.z = 6;
  rightarm.position.y = 4;
  rightarm.rotation.x = -Math.PI/32;
  this.UVMap(rightarm, 0, 44, 20, 4, 12);
  this.UVMap(rightarm, 1, 52, 20, 4, 12);
  this.UVMap(rightarm, 2, 44, 16, 4, 4, 1);
  this.UVMap(rightarm, 3, 48, 16, 4, 4, 3);
  this.UVMap(rightarm, 4, 40, 20, 4, 12);
  this.UVMap(rightarm, 5, 48, 20, 4, 12);
  upperbody.add(rightarm);

  //Head
  var headgeo = new THREE.CubeGeometry(8, 8, 8);
  var headmesh = this.head = new THREE.Mesh(headgeo, this.charMaterial);
  headmesh.position.y = 2;
  this.UVMap(headmesh, 0, 8, 8, 8, 8);
  this.UVMap(headmesh, 1, 24, 8, 8, 8);

  this.UVMap(headmesh, 2, 8, 0, 8, 8, 1);
  this.UVMap(headmesh, 3, 16, 0, 8, 8, 3);

  this.UVMap(headmesh, 4, 0, 8, 8, 8);
  this.UVMap(headmesh, 5, 16, 8, 8, 8);

  var unrotatedHeadMesh = new THREE.Object3D();
  unrotatedHeadMesh.rotation.y = Math.PI / 2;
  unrotatedHeadMesh.add(headmesh);

  headgroup.add(unrotatedHeadMesh);

  var helmet = this.cubeFromPlanes(9, this.charMaterialTrans);
  helmet.position.y = 2;
  this.UVMap(helmet.children[0], 0, 32+8, 8, 8, 8);
  this.UVMap(helmet.children[1], 0, 32+24, 8, 8, 8);
  this.UVMap(helmet.children[2], 0, 32+8, 0, 8, 8, 1);
  this.UVMap(helmet.children[3], 0, 32+16, 0, 8, 8, 3);
  this.UVMap(helmet.children[4], 0, 32+0, 8, 8, 8);
  this.UVMap(helmet.children[5], 0, 32+16, 8, 8, 8);

  headgroup.add(helmet);

  var ears = new THREE.Object3D();

  var eargeo = new THREE.CubeGeometry(1, (9/8)*6, (9/8)*6);
  var leftear = new THREE.Mesh(eargeo, this.charMaterial);
  var rightear = new THREE.Mesh(eargeo, this.charMaterial);

  leftear.position.y = 2+(9/8)*5;
  rightear.position.y = 2+(9/8)*5;
  leftear.position.z = -(9/8)*5;
  rightear.position.z = (9/8)*5;

  // Right ear share same geometry, same uv-maps

  this.UVMap(leftear, 0, 25, 1, 6, 6); // Front side
  this.UVMap(leftear, 1, 32, 1, 6, 6); // Back side

  this.UVMap(leftear, 2, 25, 0, 6, 1, 1); // Top edge
  this.UVMap(leftear, 3, 31, 0, 6, 1, 1); // Bottom edge

  this.UVMap(leftear, 4, 24, 1, 1, 6); // Left edge
  this.UVMap(leftear, 5, 31, 1, 1, 6); // Right edge

  ears.add(leftear);
  ears.add(rightear);

  leftear.visible = rightear.visible = false;

  headgroup.add(ears);
  headgroup.position.y = 8;

  var playerModel = this.playerModel = new THREE.Object3D();

  playerModel.add(leftleg);
  playerModel.add(rightleg);

  playerModel.add(upperbody);

  var playerRotation = new THREE.Object3D();
  playerRotation.rotation.y = Math.PI / 2
  playerRotation.position.y = 12
  playerRotation.add(playerModel)

  var rotatedHead = new THREE.Object3D();
  rotatedHead.rotation.y = -Math.PI/2;
  rotatedHead.add(headgroup);

  playerModel.add(rotatedHead);
  playerModel.position.y = 6;

  var playerGroup = new THREE.Object3D();
  playerGroup.cameraInside = new THREE.Object3D()
  playerGroup.cameraOutside = new THREE.Object3D()

  playerGroup.cameraInside.position.x = 0;
  playerGroup.cameraInside.position.y = 2;
  playerGroup.cameraInside.position.z = 0;

  playerGroup.head = headgroup
  headgroup.add(playerGroup.cameraInside)
  playerGroup.cameraInside.add(playerGroup.cameraOutside)

  playerGroup.cameraOutside.position.z = 100


  playerGroup.add(playerRotation);
  playerGroup.scale = this.scale
  return playerGroup
}

},{}],38:[function(require,module,exports){
module.exports = raf

var EE = require('events').EventEmitter
  , global = typeof window === 'undefined' ? this : window

var _raf =
  global.requestAnimationFrame ||
  global.webkitRequestAnimationFrame ||
  global.mozRequestAnimationFrame ||
  global.msRequestAnimationFrame ||
  global.oRequestAnimationFrame ||
  (global.setImmediate ? function(fn, el) {
    setImmediate(fn)
  } :
  function(fn, el) {
    setTimeout(fn, 0)
  })

function raf(el) {
  var now = raf.now()
    , ee = new EE

  ee.pause = function() { ee.paused = true }
  ee.resume = function() { ee.paused = false }

  _raf(iter, el)

  return ee

  function iter(timestamp) {
    var _now = raf.now()
      , dt = _now - now
    
    now = _now

    ee.emit('data', dt)

    if(!ee.paused) {
      _raf(iter, el)
    }
  }
}

raf.polyfill = _raf
raf.now = function() { return Date.now() }

},{"events":14}],39:[function(require,module,exports){
//     Underscore.js 1.7.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.7.0';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var createCallback = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  _.iteratee = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return createCallback(value, context, argCount);
    if (_.isObject(value)) return _.matches(value);
    return _.property(value);
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    if (obj == null) return obj;
    iteratee = createCallback(iteratee, context);
    var i, length = obj.length;
    if (length === +length) {
      for (i = 0; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    if (obj == null) return [];
    iteratee = _.iteratee(iteratee, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length),
        currentKey;
    for (var index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index = 0, currentKey;
    if (arguments.length < 3) {
      if (!length) throw new TypeError(reduceError);
      memo = obj[keys ? keys[index++] : index++];
    }
    for (; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {
    if (obj == null) obj = [];
    iteratee = createCallback(iteratee, context, 4);
    var keys = obj.length !== + obj.length && _.keys(obj),
        index = (keys || obj).length,
        currentKey;
    if (arguments.length < 3) {
      if (!index) throw new TypeError(reduceError);
      memo = obj[keys ? keys[--index] : --index];
    }
    while (index--) {
      currentKey = keys ? keys[index] : index;
      memo = iteratee(memo, obj[currentKey], currentKey, obj);
    }
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    predicate = _.iteratee(predicate, context);
    _.some(obj, function(value, index, list) {
      if (predicate(value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    predicate = _.iteratee(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(_.iteratee(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    if (obj == null) return true;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    if (obj == null) return false;
    predicate = _.iteratee(predicate, context);
    var keys = obj.length !== +obj.length && _.keys(obj),
        length = (keys || obj).length,
        index, currentKey;
    for (index = 0; index < length; index++) {
      currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (obj.length !== +obj.length) obj = _.values(obj);
    return _.indexOf(obj, target) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = obj.length === +obj.length ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = obj && obj.length === +obj.length ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = _.iteratee(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = _.iteratee(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = low + high >>> 1;
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return obj.length === +obj.length ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = _.iteratee(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    for (var i = 0, length = input.length; i < length; i++) {
      var value = input[i];
      if (!_.isArray(value) && !_.isArguments(value)) {
        if (!strict) output.push(value);
      } else if (shallow) {
        push.apply(output, value);
      } else {
        flatten(value, shallow, strict, output);
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (array == null) return [];
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = _.iteratee(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = array.length; i < length; i++) {
      var value = array[i];
      if (isSorted) {
        if (!i || seen !== value) result.push(value);
        seen = value;
      } else if (iteratee) {
        var computed = iteratee(value, i, array);
        if (_.indexOf(seen, computed) < 0) {
          seen.push(computed);
          result.push(value);
        }
      } else if (_.indexOf(result, value) < 0) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true, []));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    if (array == null) return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(slice.call(arguments, 1), true, true, []);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function(array) {
    if (array == null) return [];
    var length = _.max(arguments, 'length').length;
    var results = Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var idx = array.length;
    if (typeof from == 'number') {
      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
    }
    while (--idx >= 0) if (array[idx] === item) return idx;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var Ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    args = slice.call(arguments, 2);
    bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      Ctor.prototype = func.prototype;
      var self = new Ctor;
      Ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (_.isObject(result)) return result;
      return self;
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = hasher ? hasher.apply(this, arguments) : key;
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last > 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed before being called N times.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      } else {
        func = null;
      }
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    if (!_.isObject(obj)) return obj;
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (hasOwnProperty.call(source, prop)) {
            obj[prop] = source[prop];
        }
      }
    }
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj, iteratee, context) {
    var result = {}, key;
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      iteratee = createCallback(iteratee, context);
      for (key in obj) {
        var value = obj[key];
        if (iteratee(value, key, obj)) result[key] = value;
      }
    } else {
      var keys = concat.apply([], slice.call(arguments, 1));
      obj = new Object(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];
        if (key in obj) result[key] = obj[key];
      }
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    if (!_.isObject(obj)) return obj;
    for (var i = 1, length = arguments.length; i < length; i++) {
      var source = arguments[i];
      for (var prop in source) {
        if (obj[prop] === void 0) obj[prop] = source[prop];
      }
    }
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (
      aCtor !== bCtor &&
      // Handle Object.create(x) cases
      'constructor' in a && 'constructor' in b &&
      !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
        _.isFunction(bCtor) && bCtor instanceof bCtor)
    ) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size, result;
    // Recursively compare objects and arrays.
    if (className === '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size === b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      size = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      result = _.keys(b).length === size;
      if (result) {
        while (size--) {
          // Deep compare each member
          key = keys[size];
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around an IE 11 bug.
  if (typeof /./ !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    var pairs = _.pairs(attrs), length = pairs.length;
    return function(obj) {
      if (obj == null) return !length;
      obj = new Object(obj);
      for (var i = 0; i < length; i++) {
        var pair = pairs[i], key = pair[0];
        if (pair[1] !== obj[key] || !(key in obj)) return false;
      }
      return true;
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = createCallback(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? object[property]() : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],40:[function(require,module,exports){
(function (process){
var voxel = require('voxel')
var voxelMesh = require('voxel-mesh')
var voxelChunks = require('voxel-chunks')
var ray = require('voxel-raycast')
var texture = require('voxel-texture')
var control = require('voxel-control')
var voxelView = require('voxel-view')
var THREE = window.THREE
var Stats = require('./lib/stats')
var Detector = require('./lib/detector')
var inherits = require('inherits')
var path = require('path')
var EventEmitter = require('events').EventEmitter
if (process.browser) var interact = require('interact')
var requestAnimationFrame = require('raf')
var collisions = require('collide-3d-tilemap')
var aabb = require('aabb-3d')
var glMatrix = require('gl-matrix')
var vector = glMatrix.vec3
var SpatialEventEmitter = require('spatial-events')
var regionChange = require('voxel-region-change')
var kb = require('kb-controls')
var physical = require('voxel-physical')
var pin = require('pin-it')

module.exports = Game

function Game(opts) {
  if (!(this instanceof Game)) return new Game(opts)
  var self = this
  if (!opts) opts = {}
  if (process.browser && this.notCapable()) return

  if (!('generateChunks' in opts)) opts.generateChunks = true
  this.generateChunks = opts.generateChunks
  this.setConfigurablePositions(opts)
  this.configureChunkLoading(opts)
  this.THREE = THREE
  this.vector = vector
  this.glMatrix = glMatrix

  this.cubeSize = 1 // backwards compat
  this.chunkSize = opts.chunkSize || 32

  // chunkDistance and removeDistance should not be set to the same thing
  // as it causes lag when you go back and forth on a chunk boundary
  this.chunkDistance = opts.chunkDistance || 2
  this.removeDistance = opts.removeDistance || this.chunkDistance + 1

  this.playerHeight = opts.playerHeight || 1.62
  this.meshType = opts.meshType || 'surfaceMesh'
  this.mesher = opts.mesher || voxel.meshers.greedy
  this.materialType = opts.materialType || THREE.MeshLambertMaterial
  this.materialParams = opts.materialParams || {}
  this.items = []
  this.voxels = voxel(this)
  this.chunkGroups = voxelChunks(this)
  this.height = typeof window === "undefined" ? 1 : window.innerHeight
  this.width = typeof window === "undefined" ? 1 : window.innerWidth
  this.scene = new THREE.Scene()
  this.view = opts.view || new voxelView(THREE, { width: this.width, height: this.height })
  this.view.bindToScene(this.scene)
  this.camera = this.view.getCamera()
  if (!opts.lightsDisabled) this.addLights(this.scene)

  this.collideVoxels = collisions(
    this.getBlock.bind(this),
    1,
    [Infinity, Infinity, Infinity],
    [-Infinity, -Infinity, -Infinity]
  )

  this.timer = this.initializeTimer((opts.tickFPS || 16))
  this.paused = false

  this.spatial = new SpatialEventEmitter
  this.region = regionChange(this.spatial, aabb([0, 0, 0], [1, 1, 1]), this.chunkSize)
  this.voxelRegion = regionChange(this.spatial, 1)
  this.chunkRegion = regionChange(this.spatial, this.chunkSize)

  // contains chunks that has had an update this tick. Will be generated right before redrawing the frame
  this.chunksNeedsUpdate = {}

  this.materials = texture({
    THREE: THREE,
    texturePath: opts.texturePath || './textures/',
    materialType: opts.materialType || THREE.MeshLambertMaterial,
    materialParams: opts.materialParams || {}
  })

  this.materialNames = opts.materials || [['grass', 'dirt', 'grass_dirt'], 'brick', 'dirt']

  self.chunkRegion.on('change', function(newChunk) {
    self.removeFarChunks()
  })

  if (process.browser) this.materials.load(this.materialNames)

  if (this.generateChunks) this.handleChunkGeneration()

  // client side only after this point
  if (!process.browser) return

  this.paused = true
  this.initializeRendering()

  for (var chunkIndex in this.voxels.chunks) this.showChunk(this.voxels.chunks[chunkIndex])

  this.initializeControls(opts)
}

inherits(Game, EventEmitter)

// # External API

Game.prototype.cameraPosition = function() {
  var pos = this.view.cameraPosition()
  return [pos.x, pos.y, pos.z]
}

Game.prototype.cameraVector = function() {
  var pos = this.view.cameraVector()
  return [pos.x, pos.y, pos.z]
}

Game.prototype.makePhysical = function(target, envelope, blocksCreation) {
  var obj = physical(target, this.potentialCollisionSet(), envelope || [1/2, 1.5, 1/2])
  obj.blocksCreation = !!blocksCreation
  return obj
}

Game.prototype.addItem = function(item) {
  if (!item.tick) {
    var newItem = physical(
      item.mesh,
      this.potentialCollisionSet(),
      [item.size, item.size, item.size]
    )

    if (item.velocity) {
      newItem.velocity.copy(item.velocity)
      newItem.subjectTo(this.gravity)
    }

    newItem.repr = function() { return 'debris' }
    newItem.mesh = item.mesh
    newItem.blocksCreation = item.blocksCreation

    item = newItem
  }

  this.items.push(item)
  if (item.mesh) this.scene.add(item.mesh)
}

Game.prototype.removeItem = function(item) {
  var ix = this.items.indexOf(item)
  if (ix < 0) return
  this.items.splice(ix, 1)
  if (item.mesh) this.scene.remove(item.mesh)
}

// only intersects voxels, not items (for now)
Game.prototype.raycast = // backwards compat
Game.prototype.raycastVoxels = function(start, direction, maxDistance) {
  if (!start) return this.raycastVoxels(this.cameraPosition(), this.cameraVector(), 10)

  var hitNormal = [0, 0, 0]
  var hitPosition = [0, 0, 0]
  var cp = start || this.cameraPosition()
  var cv = direction || this.cameraVector()
  var hitBlock = ray(this, cp, cv, maxDistance || 10.0, hitPosition, hitNormal)
  if (hitBlock <= 0) return false
  var adjacentPosition = [0, 0, 0]
  vector.add(adjacentPosition, hitPosition, hitNormal)

  return {
    position: hitPosition,
    direction: direction,
    value: hitBlock,
    normal: hitNormal,
    adjacent: adjacentPosition
  }
}

Game.prototype.canCreateBlock = function(pos) {
  pos = this.parseVectorArguments(arguments)
  var floored = pos.map(function(i) { return Math.floor(i) })
  var bbox = aabb(floored, [1, 1, 1])

  for (var i = 0, len = this.items.length; i < len; ++i) {
    var item = this.items[i]
    var itemInTheWay = item.blocksCreation && item.aabb && bbox.intersects(item.aabb())
    if (itemInTheWay) return false
  }

  return true
}

Game.prototype.createBlock = function(pos, val) {
  if (typeof val === 'string') val = this.materials.find(val) + 1
  if (pos.chunkMatrix) return this.chunkGroups.createBlock(pos, val)
  if (!this.canCreateBlock(pos)) return false
  this.setBlock(pos, val)
  return true
}

Game.prototype.setBlock = function(pos, val) {
  if (typeof val === 'string') val = this.materials.find(val) + 1
  if (pos.chunkMatrix) return this.chunkGroups.setBlock(pos, val)
  var old = this.voxels.voxelAtPosition(pos, val)
  var c = this.voxels.chunkAtPosition(pos)
  this.addChunkToNextUpdate(this.voxels.chunks[c.join('|')])
  this.spatial.emit('change-block', pos, old, val)
}

Game.prototype.getBlock = function(pos) {
  pos = this.parseVectorArguments(arguments)
  if (pos.chunkMatrix) return this.chunkGroups.getBlock(pos)
  return this.voxels.voxelAtPosition(pos)
}

Game.prototype.blockPosition = function(pos) {
  pos = this.parseVectorArguments(arguments)
  if (pos.chunkMatrix) return this.chunkGroups.blockPosition(pos)
  var ox = Math.floor(pos[0])
  var oy = Math.floor(pos[1])
  var oz = Math.floor(pos[2])
  return [ox, oy, oz]
}

// backwards compat
Game.prototype.createAdjacent = function(hit, val) {
  this.createBlock(hit.adjacent, val)
}

Game.prototype.appendTo = function (element) {
  this.view.appendTo(element)
}

// # Defaults/options parsing

Game.prototype.gravity = [0, -0.0000036, 0]
Game.prototype.friction = 0.4

Game.prototype.defaultButtons = {
  'W': 'forward'
, 'A': 'left'
, 'S': 'backward'
, 'D': 'right'
, '<mouse 1>': 'fire'
, '<mouse 2>': 'firealt'
, '<space>': 'jump'
, '<shift>': 'crouch'
, '<control>': 'alt'
}

// used in methods that have identity function(pos) {}
Game.prototype.parseVectorArguments = function(args) {
  if (!args) return false
  if (args[0] instanceof Array) return args[0]
  return [args[0], args[1], args[2]]
}

Game.prototype.setConfigurablePositions = function(opts) {
  var sp = opts.startingPosition
  this.startingPosition = sp || [35, 1024, 35]
  var wo = opts.worldOrigin
  this.worldOrigin = wo || [0, 0, 0]
}

Game.prototype.notCapable = function() {
  if( !Detector().webgl ) {
    var wrapper = document.createElement('div')
    wrapper.className = "errorMessage"
    var a = document.createElement('a')
    a.title = "You need WebGL and Pointer Lock (Chrome 23/Firefox 14) to play this game. Click here for more information."
    a.innerHTML = a.title
    a.href = "http://get.webgl.org"
    wrapper.appendChild(a)
    this.view.element = wrapper
    return true
  }
  return false
}

Game.prototype.onWindowResize = function() {
  this.view.resizeWindow(window.innerWidth, window.innerHeight)
}

// # Physics/collision related methods

Game.prototype.control = function(target) {
  this.controlling = target
  return this.controls.target(target)
}

Game.prototype.potentialCollisionSet = function() {
  return [{ collide: this.collideTerrain.bind(this) }]
}

Game.prototype.playerPosition = function() {
  var target = this.controls.target()
  if (!target) return false
  var position = target.avatar.position
  return [position.x, position.y, position.z]
}

Game.prototype.playerAABB = function(position) {
  var pos = position || this.playerPosition()
  var lower = []
  var upper = [1/2, this.playerHeight, 1/2]
  var playerBottom = [1/4, this.playerHeight, 1/4]
  vector.subtract(lower, pos, playerBottom)
  var bbox = aabb(lower, upper)
  return bbox
}

Game.prototype.collideTerrain = function(other, bbox, vec, resting) {
  var self = this
  var axes = ['x', 'y', 'z']
  var vec3 = [vec.x, vec.y, vec.z]
  this.collideVoxels(bbox, vec3, function hit(axis, tile, coords, dir, edge) {
    if (!tile) return
    if (Math.abs(vec3[axis]) < Math.abs(edge)) return
    vec3[axis] = vec[axes[axis]] = edge
    other.acceleration[axes[axis]] = 0
    resting[axes[axis]] = dir
    other.friction[axes[(axis + 1) % 3]] = other.friction[axes[(axis + 2) % 3]] = axis === 1 ? self.friction  : 1
    return true
  })
}

// # Three.js specific methods

Game.prototype.addStats = function() {
  stats = new Stats()
  stats.domElement.style.position  = 'absolute'
  stats.domElement.style.bottom  = '0px'
  document.body.appendChild( stats.domElement )
}

Game.prototype.addLights = function(scene) {
  var ambientLight, directionalLight
  ambientLight = new THREE.AmbientLight(0xcccccc)
  scene.add(ambientLight)
  var light	= new THREE.DirectionalLight( 0xffffff , 1)
  light.position.set( 1, 1, 0.5 ).normalize()
  scene.add( light )
}

// # Chunk related methods

Game.prototype.configureChunkLoading = function(opts) {
  var self = this
  if (!opts.generateChunks) return
  if (!opts.generate) {
    this.generate = function(x,y,z) {
      return x*x+y*y+z*z <= 15*15 ? 1 : 0 // sphere world
    }
  } else {
    this.generate = opts.generate
  }
  if (opts.generateVoxelChunk) {
    this.generateVoxelChunk = opts.generateVoxelChunk
  } else {
    this.generateVoxelChunk = function(low, high) {
      return voxel.generate(low, high, self.generate, self)
    }
  }
}

Game.prototype.worldWidth = function() {
  return this.chunkSize * 2 * this.chunkDistance
}

Game.prototype.chunkToWorld = function(pos) {
  return [
    pos[0] * this.chunkSize,
    pos[1] * this.chunkSize,
    pos[2] * this.chunkSize
  ]
}

Game.prototype.removeFarChunks = function(playerPosition) {
  var self = this
  playerPosition = playerPosition || this.playerPosition()
  var nearbyChunks = this.voxels.nearbyChunks(playerPosition, this.removeDistance).map(function(chunkPos) {
    return chunkPos.join('|')
  })
  Object.keys(self.voxels.chunks).map(function(chunkIndex) {
    if (nearbyChunks.indexOf(chunkIndex) > -1) return
    var chunk = self.voxels.meshes[chunkIndex]

    if (!chunk) return

    self.scene.remove(chunk[self.meshType])
    chunk[self.meshType].geometry.dispose()

    delete chunk.data
    delete chunk.geometry
    delete chunk.meshed
    delete chunk.surfaceMesh
    delete self.voxels.chunks[chunkIndex]
  })
  self.voxels.requestMissingChunks(playerPosition)
}

Game.prototype.addChunkToNextUpdate = function(chunk) {
  this.chunksNeedsUpdate[chunk.position.join('|')] = chunk
}

Game.prototype.updateDirtyChunks = function() {
  var self = this
  Object.keys(this.chunksNeedsUpdate).forEach(function showChunkAtIndex(chunkIndex) {
    var chunk = self.chunksNeedsUpdate[chunkIndex]
    self.showChunk(chunk)
  })
  this.chunksNeedsUpdate = {}
}

Game.prototype.getChunkAtPosition = function(pos) {
  var chunkID = this.voxels.chunkAtPosition(pos).join('|')
  var chunk = this.voxels.chunks[chunkID]
  return chunk
}

Game.prototype.showChunk = function(chunk) {
  var chunkIndex = chunk.position.join('|')
  var bounds = this.voxels.getBounds.apply(this.voxels, chunk.position)
  var scale = new THREE.Vector3(1, 1, 1)
  var mesh = voxelMesh(chunk, this.mesher, scale)
  this.voxels.chunks[chunkIndex] = chunk
  if (this.voxels.meshes[chunkIndex]) this.scene.remove(this.voxels.meshes[chunkIndex][this.meshType])
  this.voxels.meshes[chunkIndex] = mesh
  if (process.browser) {
    if (this.meshType === 'wireMesh') mesh.createWireMesh()
    else mesh.createSurfaceMesh(new THREE.MeshFaceMaterial(this.materials.get()))
    this.materials.paint(mesh.geometry)
  }
  mesh.setPosition(bounds[0][0], bounds[0][1], bounds[0][2])
  mesh.addToScene(this.scene)
  return mesh
}

// # Debugging methods

Game.prototype.addMarker = function(position) {
  var geometry = new THREE.SphereGeometry( 0.5, 10, 10 )
  var material = new THREE.MeshPhongMaterial( { color: 0xffffff, shading: THREE.FlatShading } )
  var mesh = new THREE.Mesh( geometry, material )
  mesh.position.copy(position)
  this.scene.add(mesh)
}

Game.prototype.addAABBMarker = function(aabb, color) {
  var geometry = new THREE.CubeGeometry(aabb.width(), aabb.height(), aabb.depth())
  var material = new THREE.MeshBasicMaterial({ color: color || 0xffffff, wireframe: true, transparent: true, opacity: 0.5, side: THREE.DoubleSide })
  var mesh = new THREE.Mesh(geometry, material)
  mesh.position.set(aabb.x0() + aabb.width() / 2, aabb.y0() + aabb.height() / 2, aabb.z0() + aabb.depth() / 2)
  this.scene.add(mesh)
  return mesh
}

Game.prototype.addVoxelMarker = function(x, y, z, color) {
  var bbox = aabb([x, y, z], [1, 1, 1])
  return this.addAABBMarker(bbox, color)
}

Game.prototype.pin = pin

// # Misc internal methods

Game.prototype.onControlChange = function(gained, stream) {
  this.paused = false

  if (!gained && !this.optout) {
    this.buttons.disable()
    return
  }

  this.buttons.enable()
  stream.pipe(this.controls.createWriteRotationStream())
}

Game.prototype.onControlOptOut = function() {
  this.optout = true
}

Game.prototype.onFire = function(state) {
  this.emit('fire', this.controlling, state)
}

Game.prototype.tick = function(delta) {
  for(var i = 0, len = this.items.length; i < len; ++i) {
    this.items[i].tick(delta)
  }

  if (this.materials) this.materials.tick()

  if (Object.keys(this.chunksNeedsUpdate).length > 0) this.updateDirtyChunks()

  this.emit('tick', delta)

  if (!this.controls) return
  var playerPos = this.playerPosition()
  this.spatial.emit('position', playerPos, playerPos)
}

Game.prototype.render = function(delta) {
  this.view.render(this.scene)
}

Game.prototype.initializeTimer = function(rate) {
  var self = this
  var accum = 0
  var now = 0
  var last = null
  var dt = 0
  var wholeTick

  self.frameUpdated = true
  self.interval = setInterval(timer, 0)
  return self.interval

  function timer() {
    if (self.paused) {
      last = Date.now()
      accum = 0
      return
    }
    now = Date.now()
    dt = now - (last || now)
    last = now
    accum += dt
    if (accum < rate) return
    wholeTick = ((accum / rate)|0)
    if (wholeTick <= 0) return

    wholeTick *= rate

    self.tick(wholeTick)
    accum -= wholeTick

    self.frameUpdated = true
  }
}

Game.prototype.initializeRendering = function() {
  var self = this

  if (!self.statsDisabled) self.addStats()

  window.addEventListener('resize', self.onWindowResize.bind(self), false)

  requestAnimationFrame(window).on('data', function(dt) {
    self.render(dt)
    stats.update()
  })
}

Game.prototype.initializeControls = function(opts) {
  // player control
  this.buttons = kb(document.body, opts.keybindings || this.defaultButtons)
  this.buttons.disable()
  this.optout = false
  this.interact = interact(this.view.element)
  this.interact
      .on('attain', this.onControlChange.bind(this, true))
      .on('release', this.onControlChange.bind(this, false))
      .on('opt-out', this.onControlOptOut.bind(this))
  this.hookupControls(this.buttons, opts)
}

Game.prototype.hookupControls = function(buttons, opts) {
  opts = opts || {}
  opts.controls = opts.controls || {}
  opts.controls.onfire = this.onFire.bind(this)
  this.controls = control(buttons, opts.controls)
  this.items.push(this.controls)
  this.controlling = null
}

Game.prototype.handleChunkGeneration = function() {
  var self = this
  this.voxels.on('missingChunk', function(chunkPos) {
    var chunk = self.voxels.generateChunk(chunkPos[0], chunkPos[1], chunkPos[2])
    if (process.browser) self.showChunk(chunk)
  })
  this.voxels.requestMissingChunks(this.worldOrigin)
}

// teardown methods
Game.prototype.destroy = function() {
  clearInterval(this.timer)
}

Game.THREE = THREE;

}).call(this,require('_process'))
},{"./lib/detector":41,"./lib/stats":42,"_process":18,"aabb-3d":43,"collide-3d-tilemap":44,"events":14,"gl-matrix":45,"inherits":46,"interact":47,"kb-controls":56,"path":17,"pin-it":61,"raf":62,"spatial-events":63,"voxel":84,"voxel-chunks":66,"voxel-control":75,"voxel-mesh":76,"voxel-physical":77,"voxel-raycast":78,"voxel-region-change":79,"voxel-texture":80,"voxel-view":82}],41:[function(require,module,exports){
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mr.doob / http://mrdoob.com/
 */

module.exports = function() {
  return {
  	canvas : !! window.CanvasRenderingContext2D,
  	webgl : ( function () { try { return !! window.WebGLRenderingContext && !! document.createElement( 'canvas' ).getContext( 'experimental-webgl' ); } catch( e ) { return false; } } )(),
  	workers : !! window.Worker,
  	fileapi : window.File && window.FileReader && window.FileList && window.Blob,

  	getWebGLErrorMessage : function () {

  		var domElement = document.createElement( 'div' );

  		domElement.style.fontFamily = 'monospace';
  		domElement.style.fontSize = '13px';
  		domElement.style.textAlign = 'center';
  		domElement.style.background = '#eee';
  		domElement.style.color = '#000';
  		domElement.style.padding = '1em';
  		domElement.style.width = '475px';
  		domElement.style.margin = '5em auto 0';

  		if ( ! this.webgl ) {

  			domElement.innerHTML = window.WebGLRenderingContext ? [
  				'Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">WebGL</a>.<br />',
  				'Find out how to get it <a href="http://get.webgl.org/">here</a>.'
  			].join( '\n' ) : [
  				'Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation">WebGL</a>.<br/>',
  				'Find out how to get it <a href="http://get.webgl.org/">here</a>.'
  			].join( '\n' );

  		}

  		return domElement;

  	},

  	addGetWebGLMessage : function ( parameters ) {

  		var parent, id, domElement;

  		parameters = parameters || {};

  		parent = parameters.parent !== undefined ? parameters.parent : document.body;
  		id = parameters.id !== undefined ? parameters.id : 'oldie';

  		domElement = Detector.getWebGLErrorMessage();
  		domElement.id = id;

  		parent.appendChild( domElement );

  	}

  };
}

},{}],42:[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */

var Stats = function () {

	var startTime = Date.now(), prevTime = startTime;
	var ms = 0, msMin = Infinity, msMax = 0;
	var fps = 0, fpsMin = Infinity, fpsMax = 0;
	var frames = 0, mode = 0;

	var container = document.createElement( 'div' );
	container.id = 'stats';
	container.addEventListener( 'mousedown', function ( event ) { event.preventDefault(); setMode( ++ mode % 2 ) }, false );
	container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';

	var fpsDiv = document.createElement( 'div' );
	fpsDiv.id = 'fps';
	fpsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#002';
	container.appendChild( fpsDiv );

	var fpsText = document.createElement( 'div' );
	fpsText.id = 'fpsText';
	fpsText.style.cssText = 'color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';
	fpsText.innerHTML = 'FPS';
	fpsDiv.appendChild( fpsText );

	var fpsGraph = document.createElement( 'div' );
	fpsGraph.id = 'fpsGraph';
	fpsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0ff';
	fpsDiv.appendChild( fpsGraph );

	while ( fpsGraph.children.length < 74 ) {

		var bar = document.createElement( 'span' );
		bar.style.cssText = 'width:1px;height:30px;float:left;background-color:#113';
		fpsGraph.appendChild( bar );

	}

	var msDiv = document.createElement( 'div' );
	msDiv.id = 'ms';
	msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#020;display:none';
	container.appendChild( msDiv );

	var msText = document.createElement( 'div' );
	msText.id = 'msText';
	msText.style.cssText = 'color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';
	msText.innerHTML = 'MS';
	msDiv.appendChild( msText );

	var msGraph = document.createElement( 'div' );
	msGraph.id = 'msGraph';
	msGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0f0';
	msDiv.appendChild( msGraph );

	while ( msGraph.children.length < 74 ) {

		var bar = document.createElement( 'span' );
		bar.style.cssText = 'width:1px;height:30px;float:left;background-color:#131';
		msGraph.appendChild( bar );

	}

	var setMode = function ( value ) {

		mode = value;

		switch ( mode ) {

			case 0:
				fpsDiv.style.display = 'block';
				msDiv.style.display = 'none';
				break;
			case 1:
				fpsDiv.style.display = 'none';
				msDiv.style.display = 'block';
				break;
		}

	}

	var updateGraph = function ( dom, value ) {

		var child = dom.appendChild( dom.firstChild );
		child.style.height = value + 'px';

	}

	return {

		REVISION: 11,

		domElement: container,

		setMode: setMode,

		begin: function () {

			startTime = Date.now();

		},

		end: function () {

			var time = Date.now();

			ms = time - startTime;
			msMin = Math.min( msMin, ms );
			msMax = Math.max( msMax, ms );

			msText.textContent = ms + ' MS (' + msMin + '-' + msMax + ')';
			updateGraph( msGraph, Math.min( 30, 30 - ( ms / 200 ) * 30 ) );

			frames ++;

			if ( time > prevTime + 1000 ) {

				fps = Math.round( ( frames * 1000 ) / ( time - prevTime ) );
				fpsMin = Math.min( fpsMin, fps );
				fpsMax = Math.max( fpsMax, fps );

				fpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';
				updateGraph( fpsGraph, Math.min( 30, 30 - ( fps / 100 ) * 30 ) );

				prevTime = time;
				frames = 0;

			}

			return time;

		},

		update: function () {

			startTime = this.end();

		}

	}

};

module.exports = Stats
},{}],43:[function(require,module,exports){
module.exports = AABB

var vec3 = require('gl-matrix').vec3

function AABB(pos, vec) {
  if(!(this instanceof AABB)) {
    return new AABB(pos, vec)
  }

  this.base = pos
  this.vec = vec

  this.mag = vec3.length(this.vec)

  this.max = vec3.create()
  vec3.add(this.max, this.base, this.vec)
}

var cons = AABB
  , proto = cons.prototype

proto.width = function() {
  return this.vec[0]
}

proto.height = function() {
  return this.vec[1]
}

proto.depth = function() {
  return this.vec[2]
}

proto.x0 = function() {
  return this.base[0]
}

proto.y0 = function() {
  return this.base[1]
}

proto.z0 = function() {
  return this.base[2]
}

proto.x1 = function() {
  return this.max[0]
}

proto.y1 = function() {
  return this.max[1]
}

proto.z1 = function() {
  return this.max[2]
}

proto.translate = function(by) {
  vec3.add(this.max, this.max, by)
  vec3.add(this.base, this.base, by)
  return this
}

proto.expand = function(aabb) {
  var max = vec3.create()
    , min = vec3.create()

  vec3.max(max, aabb.max, this.max)
  vec3.min(min, aabb.base, this.base)
  vec3.sub(max, max, min)

  return new AABB(min, max)
}

proto.intersects = function(aabb) {
  if(aabb.base[0] > this.max[0]) return false
  if(aabb.base[1] > this.max[1]) return false
  if(aabb.base[2] > this.max[2]) return false
  if(aabb.max[0] < this.base[0]) return false
  if(aabb.max[1] < this.base[1]) return false
  if(aabb.max[2] < this.base[2]) return false

  return true
}

proto.union = function(aabb) {
  if(!this.intersects(aabb)) return null

  var base_x = Math.max(aabb.base[0], this.base[0])
    , base_y = Math.max(aabb.base[1], this.base[1])
    , base_z = Math.max(aabb.base[2], this.base[2])
    , max_x = Math.min(aabb.max[0], this.max[0])
    , max_y = Math.min(aabb.max[1], this.max[1])
    , max_z = Math.min(aabb.max[2], this.max[2])

  return new AABB([base_x, base_y, base_z], [max_x - base_x, max_y - base_y, max_z - base_z])
}

},{"gl-matrix":45}],44:[function(require,module,exports){
module.exports = function(field, tilesize, dimensions, offset) {
  dimensions = dimensions || [ 
    Math.sqrt(field.length) >> 0
  , Math.sqrt(field.length) >> 0
  , Math.sqrt(field.length) >> 0
  ] 

  offset = offset || [
    0
  , 0
  , 0
  ]

  field = typeof field === 'function' ? field : function(x, y, z) {
    return this[x + y * dimensions[1] + (z * dimensions[1] * dimensions[2])]
  }.bind(field) 

  var coords

  coords = [0, 0, 0]

  return collide

  function collide(box, vec, oncollision) {
    if(vec[0] === 0 && vec[1] === 0 && vec[2] === 0) return

    // collide x, then y
    collideaxis(0)
    collideaxis(1)
    collideaxis(2)

    function collideaxis(i_axis) {
      var j_axis = (i_axis + 1) % 3
        , k_axis = (i_axis + 2) % 3 
        , posi = vec[i_axis] > 0
        , leading = box[posi ? 'max' : 'base'][i_axis] 
        , dir = posi ? 1 : -1
        , i_start = Math.floor(leading / tilesize)
        , i_end = (Math.floor((leading + vec[i_axis]) / tilesize)) + dir
        , j_start = Math.floor(box.base[j_axis] / tilesize)
        , j_end = Math.ceil(box.max[j_axis] / tilesize)
        , k_start = Math.floor(box.base[k_axis] / tilesize) 
        , k_end = Math.ceil(box.max[k_axis] / tilesize)
        , done = false
        , edge_vector
        , edge
        , tile

      // loop from the current tile coord to the dest tile coord
      //    -> loop on the opposite axis to get the other candidates
      //      -> if `oncollision` return `true` we've hit something and
      //         should break out of the loops entirely.
      //         NB: `oncollision` is where the client gets the chance
      //         to modify the `vec` in-flight.
      // once we're done translate the box to the vec results

      var step = 0
      for(var i = i_start; !done && i !== i_end; ++step, i += dir) {
        if(i < offset[i_axis] || i >= dimensions[i_axis]) continue
        for(var j = j_start; !done && j !== j_end; ++j) {
          if(j < offset[j_axis] || j >= dimensions[j_axis]) continue
          for(var k = k_start; k !== k_end; ++k) {
            if(k < offset[k_axis] || k >= dimensions[k_axis]) continue
            coords[i_axis] = i
            coords[j_axis] = j
            coords[k_axis] = k
            tile = field.apply(field, coords)

            if(tile === undefined) continue

            edge = dir > 0 ? i * tilesize : (i + 1) * tilesize
            edge_vector = edge - leading

            if(oncollision(i_axis, tile, coords, dir, edge_vector)) {
              done = true
              break
            }
          } 
        }
      }

      coords[0] = coords[1] = coords[2] = 0
      coords[i_axis] = vec[i_axis]
      box.translate(coords)
    }
  }  
}

},{}],45:[function(require,module,exports){
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.0.0
 */

/* Copyright (c) 2012, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */


(function() {
  "use strict";

  var shim = {};
  if (typeof(exports) === 'undefined') {
    if(typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
      shim.exports = {};
      define(function() {
        return shim.exports;
      });
    } else {
      // gl-matrix lives in a browser, define its namespaces in global
      shim.exports = window;
    }    
  }
  else {
    // gl-matrix lives in commonjs, define its namespaces in exports
    shim.exports = exports;
  }

  (function(exports) {
    /* Copyright (c) 2012, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 2 Dimensional Vector
 * @name vec2
 */

var vec2 = {};

if(!GLMAT_EPSILON) {
    var GLMAT_EPSILON = 0.000001;
}
 
/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
vec2.create = function() {
    return new Float32Array(2);
};

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
vec2.clone = function(a) {
    var out = new Float32Array(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
vec2.fromValues = function(x, y) {
    var out = new Float32Array(2);
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};

/**
 * Subtracts two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.sub = vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.mul = vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.div = vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {vec2} b amount to scale the vector by
 * @returns {vec2} out
 */
vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
vec2.dist = vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec2.sqrDist = vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x*x + y*y;
};

/**
 * Caclulates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
vec2.len = vec2.length = function (a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Caclulates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec2.sqrLen = vec2.squaredLength = function (a) {
    var x = a[0],
        y = a[1];
    return x*x + y*y;
};

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x*x + y*y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};

/**
 * Caclulates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
vec2.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
vec2.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = x * m[0] + y * m[1];
    out[1] = x * m[2] + y * m[3];
    return out;
};

/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 */
vec2.forEach = (function() {
    var vec = new Float32Array(2);

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 2;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec2.str = function (a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec2 = vec2;
}
;
/* Copyright (c) 2012, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 3 Dimensional Vector
 * @name vec3
 */

var vec3 = {};

if(!GLMAT_EPSILON) {
    var GLMAT_EPSILON = 0.000001;
}
 
/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
vec3.create = function() {
    return new Float32Array(3);
};

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
vec3.clone = function(a) {
    var out = new Float32Array(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
vec3.fromValues = function(x, y, z) {
    var out = new Float32Array(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
};

/**
 * Subtracts two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.sub = vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
};

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.mul = vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
};

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.div = vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
};

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
};

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
};

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {vec3} b amount to scale the vector by
 * @returns {vec3} out
 */
vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
};

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
vec3.dist = vec3.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec3.sqrDist = vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return x*x + y*y + z*z;
};

/**
 * Caclulates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
vec3.len = vec3.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Caclulates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec3.sqrLen = vec3.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return x*x + y*y + z*z;
};

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
};

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
vec3.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var len = x*x + y*y + z*z;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
    }
    return out;
};

/**
 * Caclulates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
vec3.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.cross = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2];

    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
};

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
};

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12];
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13];
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14];
    return out;
};

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
vec3.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 */
vec3.forEach = (function() {
    var vec = new Float32Array(3);

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 3;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec3.str = function (a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec3 = vec3;
}
;
/* Copyright (c) 2012, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 4 Dimensional Vector
 * @name vec4
 */

var vec4 = {};

if(!GLMAT_EPSILON) {
    var GLMAT_EPSILON = 0.000001;
}

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
vec4.create = function() {
    return new Float32Array(4);
};

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
vec4.clone = function(a) {
    var out = new Float32Array(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
vec4.fromValues = function(x, y, z, w) {
    var out = new Float32Array(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.sub = vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.mul = vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
};

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.div = vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
};

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
};

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
};

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {vec4} b amount to scale the vector by
 * @returns {vec4} out
 */
vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
vec4.dist = vec4.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec4.sqrDist = vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Caclulates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
vec4.len = vec4.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Caclulates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec4.sqrLen = vec4.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
};

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
vec4.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    var len = x*x + y*y + z*z + w*w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
        out[3] = a[3] * len;
    }
    return out;
};

/**
 * Caclulates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
vec4.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
vec4.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
};

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
vec4.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
};

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
vec4.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 */
vec4.forEach = (function() {
    var vec = new Float32Array(4);

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 4;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec4.str = function (a) {
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.vec4 = vec4;
}
;
/* Copyright (c) 2012, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 2x2 Matrix
 * @name mat2
 */

var mat2 = {};

var mat2Identity = new Float32Array([
    1, 0,
    0, 1
]);

if(!GLMAT_EPSILON) {
    var GLMAT_EPSILON = 0.000001;
}

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
mat2.create = function() {
    return new Float32Array(mat2Identity);
};

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
mat2.clone = function(a) {
    var out = new Float32Array(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
    } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
    }
    
    return out;
};

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],

        // Calculate the determinant
        det = a0 * a3 - a2 * a1;

    if (!det) {
        return null;
    }
    det = 1.0 / det;
    
    out[0] =  a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] =  a0 * det;

    return out;
};

/**
 * Caclulates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.adjoint = function(out, a) {
    // Caching this value is nessecary if out == a
    var a0 = a[0];
    out[0] =  a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] =  a0;

    return out;
};

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
mat2.determinant = function (a) {
    return a[0] * a[3] - a[2] * a[1];
};

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.mul = mat2.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a1 * b2;
    out[1] = a0 * b1 + a1 * b3;
    out[2] = a2 * b0 + a3 * b2;
    out[3] = a2 * b1 + a3 * b3;
    return out;
};

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {mat2} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a1 * s;
    out[1] = a0 * -s + a1 * c;
    out[2] = a2 *  c + a3 * s;
    out[3] = a2 * -s + a3 * c;
    return out;
};

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {mat2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
mat2.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v1;
    out[2] = a2 * v0;
    out[3] = a3 * v1;
    return out;
};

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2.str = function (a) {
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat2 = mat2;
}
;
/* Copyright (c) 2012, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 3x3 Matrix
 * @name mat3
 */

var mat3 = {};

var mat3Identity = new Float32Array([
    1, 0, 0,
    0, 1, 0,
    0, 0, 1
]);

if(!GLMAT_EPSILON) {
    var GLMAT_EPSILON = 0.000001;
}

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
mat3.create = function() {
    return new Float32Array(mat3Identity);
};

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
mat3.clone = function(a) {
    var out = new Float32Array(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }
    
    return out;
};

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,

        // Calculate the determinant
        det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
};

/**
 * Caclulates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    out[0] = (a11 * a22 - a12 * a21);
    out[1] = (a02 * a21 - a01 * a22);
    out[2] = (a01 * a12 - a02 * a11);
    out[3] = (a12 * a20 - a10 * a22);
    out[4] = (a00 * a22 - a02 * a20);
    out[5] = (a02 * a10 - a00 * a12);
    out[6] = (a10 * a21 - a11 * a20);
    out[7] = (a01 * a20 - a00 * a21);
    out[8] = (a00 * a11 - a01 * a10);
    return out;
};

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
mat3.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
};

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.mul = mat3.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b00 = b[0], b01 = b[1], b02 = b[2],
        b10 = b[3], b11 = b[4], b12 = b[5],
        b20 = b[6], b21 = b[7], b22 = b[8];

    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;

    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;

    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
};

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat3.str = function (a) {
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + 
                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat3 = mat3;
}
;
/* Copyright (c) 2012, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class 4x4 Matrix
 * @name mat4
 */

var mat4 = {};

var mat4Identity = new Float32Array([
    1, 0, 0, 0,
    0, 1, 0, 0,
    0, 0, 1, 0,
    0, 0, 0, 1
]);

if(!GLMAT_EPSILON) {
    var GLMAT_EPSILON = 0.000001;
}

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
mat4.create = function() {
    return new Float32Array(mat4Identity);
};

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
mat4.clone = function(a) {
    var out = new Float32Array(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/**
 * Caclulates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
mat4.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.mul = mat4.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.translate = function (out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.scale = function(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Rotates a mat4 by the given angle
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.rotate = function (out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < GLMAT_EPSILON) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateX = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateY = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateZ = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslation = function (out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.frustum = function (out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspective = function (out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.ortho = function (out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
mat4.lookAt = function (out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&
        Math.abs(eyey - centery) < GLMAT_EPSILON &&
        Math.abs(eyez - centerz) < GLMAT_EPSILON) {
        return mat4.identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat4.str = function (a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.mat4 = mat4;
}
;
/* Copyright (c) 2012, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation 
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * @class Quaternion
 * @name quat
 */

var quat = {};

var quatIdentity = new Float32Array([0, 0, 0, 1]);

if(!GLMAT_EPSILON) {
    var GLMAT_EPSILON = 0.000001;
}

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
quat.create = function() {
    return new Float32Array(quatIdentity);
};

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 */
quat.clone = vec4.clone;

/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 */
quat.fromValues = vec4.fromValues;

/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 */
quat.copy = vec4.copy;

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 */
quat.set = vec4.set;

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
};

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
quat.add = vec4.add;

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
quat.mul = quat.multiply = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
};

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {quat} b amount to scale the vector by
 * @returns {quat} out
 */
quat.scale = vec4.scale;

/**
 * Rotates a quaternion by the given angle around the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateX = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
};

/**
 * Rotates a quaternion by the given angle around the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateY = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        by = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
};

/**
 * Rotates a quaternion by the given angle around the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateZ = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bz = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
};

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
quat.calculateW = function (out, a) {
    var x = a[0], y = a[1], z = a[2];

    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
};

/**
 * Caclulates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 */
quat.dot = vec4.dot;

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
quat.lerp = vec4.lerp;

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
quat.slerp = function (out, a, b, t) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = a[3];

    var cosHalfTheta = ax * bx + ay * by + az * bz + aw * bw,
        halfTheta,
        sinHalfTheta,
        ratioA,
        ratioB;

    if (Math.abs(cosHalfTheta) >= 1.0) {
        if (out !== a) {
            out[0] = ax;
            out[1] = ay;
            out[2] = az;
            out[3] = aw;
        }
        return out;
    }

    halfTheta = Math.acos(cosHalfTheta);
    sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    if (Math.abs(sinHalfTheta) < 0.001) {
        out[0] = (ax * 0.5 + bx * 0.5);
        out[1] = (ay * 0.5 + by * 0.5);
        out[2] = (az * 0.5 + bz * 0.5);
        out[3] = (aw * 0.5 + bw * 0.5);
        return out;
    }

    ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;
    ratioB = Math.sin(t * halfTheta) / sinHalfTheta;

    out[0] = (ax * ratioA + bx * ratioB);
    out[1] = (ay * ratioA + by * ratioB);
    out[2] = (az * ratioA + bz * ratioB);
    out[3] = (aw * ratioA + bw * ratioB);

    return out;
};

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
quat.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
        invDot = dot ? 1.0/dot : 0;
    
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

    out[0] = -a0*invDot;
    out[1] = -a1*invDot;
    out[2] = -a2*invDot;
    out[3] = a3*invDot;
    return out;
};

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
quat.conjugate = function (out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
};

/**
 * Caclulates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 */
quat.len = quat.length = vec4.length;

/**
 * Caclulates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
quat.sqrLen = quat.squaredLength = vec4.squaredLength;

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 */
quat.normalize = vec4.normalize;

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
quat.str = function (a) {
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

if(typeof(exports) !== 'undefined') {
    exports.quat = quat;
}
;










  })(shim.exports);
})();

},{}],46:[function(require,module,exports){
module.exports = inherits

function inherits (c, p, proto) {
  proto = proto || {}
  var e = {}
  ;[c.prototype, proto].forEach(function (s) {
    Object.getOwnPropertyNames(s).forEach(function (k) {
      e[k] = Object.getOwnPropertyDescriptor(s, k)
    })
  })
  c.prototype = Object.create(p.prototype, e)
  c.super = p
}

//function Child () {
//  Child.super.call(this)
//  console.error([this
//                ,this.constructor
//                ,this.constructor === Child
//                ,this.constructor.super === Parent
//                ,Object.getPrototypeOf(this) === Child.prototype
//                ,Object.getPrototypeOf(Object.getPrototypeOf(this))
//                 === Parent.prototype
//                ,this instanceof Child
//                ,this instanceof Parent])
//}
//function Parent () {}
//inherits(Child, Parent)
//new Child

},{}],47:[function(require,module,exports){
var lock = require('pointer-lock')
  , drag = require('drag-stream')
  , full = require('fullscreen')

var EE = require('events').EventEmitter
  , Stream = require('stream').Stream

module.exports = interact

function interact(el, skiplock) {
  var ee = new EE
    , internal

  if(!lock.available() || skiplock) {
    internal = usedrag(el)
  } else {
    internal = uselock(el, politelydeclined)
  }

  ee.release = function() { internal.release && internal.release() }
  ee.request = function() { internal.request && internal.request() }
  ee.destroy = function() { internal.destroy && internal.destroy() }
  ee.pointerAvailable = function() { return lock.available() }
  ee.fullscreenAvailable = function() { return full.available() }

  forward()

  return ee

  function politelydeclined() {
    ee.emit('opt-out')
    internal.destroy()
    internal = usedrag(el)
    forward()
  }

  function forward() {
    internal.on('attain', function(stream) {
      ee.emit('attain', stream)
    })

    internal.on('release', function() {
      ee.emit('release')
    })
  }
}

function uselock(el, declined) {
  var pointer = lock(el)
    , fs = full(el)

  pointer.on('needs-fullscreen', function() {
    fs.once('attain', function() {
      pointer.request()
    })
    fs.request()
  })

  pointer.on('error', declined)

  return pointer
}

function usedrag(el) {
  var ee = new EE
    , d = drag(el)
    , stream

  d.paused = true

  d.on('resume', function() {
    stream = new Stream
    stream.readable = true
    stream.initial = null
  })

  d.on('data', function(datum) {
    if(!stream) {
      stream = new Stream
      stream.readable = true
      stream.initial = null
    }

    if(!stream.initial) {
      stream.initial = {
        x: datum.dx
      , y: datum.dy
      , t: datum.dt
      }
      return ee.emit('attain', stream)
    }

    if(stream.paused) {
      ee.emit('release')
      stream.emit('end')
      stream.readable = false
      stream.emit('close')
      stream = null
    }

    stream.emit('data', datum)
  })

  return ee
}

},{"drag-stream":48,"events":14,"fullscreen":54,"pointer-lock":55,"stream":31}],48:[function(require,module,exports){
module.exports = dragstream

var Stream = require('stream')
  , read = require('domnode-dom').createReadStream
  , through = require('through')

function dragstream(el) {
  var body = el.ownerDocument.body
    , down = read(el, 'mousedown')
    , up = read(body, 'mouseup', false)
    , move = read(body, 'mousemove', false)
    , anchor = {x: 0, y: 0, t: 0}
    , drag = through(on_move)

  // default to "paused"
  drag.pause()

  down.on('data', on_down)
  up.on('data', on_up)

  return move.pipe(drag)

  // listeners:

  function on_move(ev) {
    if(drag.paused) return

    drag.emit('data', datum(
        ev.screenX - anchor.x
      , ev.screenY - anchor.y
      , +new Date
    ))

    anchor.x = ev.screenX
    anchor.y = ev.screenY
  }

  function on_down(ev) {
    anchor.x = ev.screenX
    anchor.y = ev.screenY
    anchor.t = +new Date
    drag.resume()
    drag.emit('data', datum(
        anchor.x
      , anchor.y
      , anchor.t
    ))
  }

  function on_up(ev) {
    drag.pause()
    drag.emit('data', datum(
        ev.screenX - anchor.x
      , ev.screenY - anchor.y
      , +new Date
    ))
  }

  function datum(dx, dy, when) {
    return {
      dx: dx
    , dy: dy
    , dt: when - anchor.t
    }
  }
}

},{"domnode-dom":49,"stream":31,"through":53}],49:[function(require,module,exports){
module.exports = require('./lib/index')

},{"./lib/index":50}],50:[function(require,module,exports){
var WriteStream = require('./writable')
  , ReadStream = require('./readable')
  , DOMStream = {}

DOMStream.WriteStream = WriteStream
DOMStream.ReadStream = ReadStream

DOMStream.createAppendStream = function(el, mimetype) {
  return new DOMStream.WriteStream(
      el
    , DOMStream.WriteStream.APPEND
    , mimetype
  )
}

DOMStream.createWriteStream = function(el, mimetype) {
  return new DOMStream.WriteStream(
      el
    , DOMStream.WriteStream.WRITE
    , mimetype
  )
}

DOMStream.createReadStream =
DOMStream.createEventStream = function(el, type, preventDefault) {
  preventDefault = preventDefault === undefined ? true : preventDefault

  return new DOMStream.ReadStream(
      el
    , type
    , preventDefault
  )
}

module.exports = DOMStream


},{"./readable":51,"./writable":52}],51:[function(require,module,exports){
module.exports = DOMStream

var Stream = require('stream').Stream

var listener = function(el, type, onmsg) {
  return el.addEventListener(type, onmsg, false)
}

if(typeof $ !== 'undefined')
  listener = function(el, type, onmsg) {
    return el = $(el)[type](onmsg)
  }

if(typeof document !== 'undefined' && !document.createElement('div').addEventListener)
  listener = function(el, type, onmsg) {
    return el.attachEvent('on'+type, onmsg)
  }

function DOMStream(el, eventType, shouldPreventDefault) {
  this.el = el
  this.eventType = eventType
  this.shouldPreventDefault = shouldPreventDefault

  var self = this

  if(el && this.eventType)
    listener(
        this.el
      , this.eventType
      , function() { return self.listen.apply(self, arguments) }
    )

  Stream.call(this)
}

var cons = DOMStream
  , proto = cons.prototype = Object.create(Stream.prototype)

proto.constructor = cons

proto.listen = function(ev) {
  if(this.shouldPreventDefault)
    ev.preventDefault ? ev.preventDefault() : (ev.returnValue = false)

  var collectData =
    this.eventType === 'submit' ||
    this.eventType === 'change' ||
    this.eventType === 'keydown' ||
    this.eventType === 'keyup' ||
    this.eventType === 'input'

  if(collectData) {
    if(this.el.tagName.toUpperCase() === 'FORM')
      return this.handleFormSubmit(ev)

    return this.emit('data', valueFromElement(this.el))
  }

  this.emit('data', ev)
}

proto.handleFormSubmit = function(ev) {
  var elements = []

  if(this.el.querySelectorAll) {
    elements = this.el.querySelectorAll('input,textarea,select')
  } else {
    var inputs = {'INPUT':true, 'TEXTAREA':true, 'SELECT':true}

    var recurse = function(el) {
      for(var i = 0, len = el.childNodes.length; i < len; ++i) {
        if(el.childNodes[i].tagName) {
          if(inputs[el.childNodes[i].tagName.toUpperCase()]) {
            elements.push(el)
          } else {
            recurse(el.childNodes[i])
          }
        }
      }
    }

    recurse(this.el)
  }

  var output = {}
    , attr
    , val

  for(var i = 0, len = elements.length; i < len; ++i) {
    attr = elements[i].getAttribute('name')
    val = valueFromElement(elements[i])

    if(val !== null) {
      output[attr] = val
    }
  }

  return this.emit('data', output)
}

function valueFromElement(el) {
  switch(el.getAttribute('type')) {
    case 'radio':
      return el.checked ? el.value : null
    case 'checkbox':
      return 'data', el.checked
  }
  return el.value
}

},{"stream":31}],52:[function(require,module,exports){
module.exports = DOMStream

var Stream = require('stream').Stream

function DOMStream(el, mode, mimetype) {
  this.el = el
  this.mode = mode
  this.mimetype = mimetype || 'text/html'

  Stream.call(this)
}

var cons = DOMStream
  , proto = cons.prototype = Object.create(Stream.prototype)

proto.constructor = cons

cons.APPEND = 0
cons.WRITE = 1

proto.writable = true

proto.setMimetype = function(mime) {
  this.mimetype = mime
}

proto.write = function(data) {
  var result = (this.mode === cons.APPEND) ? this.append(data) : this.insert(data)
  this.emit('data', this.el.childNodes)
  return result
}

proto.end = function() {

}

proto.insert = function(data) {
  this.el.innerHTML = ''
  return this.append(data)
}

proto.append = function(data) {
  var result = this[this.resolveMimetypeHandler()](data)

  for(var i = 0, len = result.length; i < len; ++i) {
    this.el.appendChild(result[i])
  }

  return true
}

proto.resolveMimetypeHandler = function() {
  var type = this.mimetype.replace(/(\/\w)/, function(x) {
    return x.slice(1).toUpperCase()
  })
  type = type.charAt(0).toUpperCase() + type.slice(1)

  return 'construct'+type
}

proto.constructTextHtml = function(data) {
  var isTableFragment = /(tr|td|th)/.test(data) && !/table/.test(data)
    , div

  if(isTableFragment) {
    // wuh-oh.
    div = document.createElement('table')
  }

  div = div || document.createElement('div')
  div.innerHTML = data 

  return [].slice.call(div.childNodes)
}

proto.constructTextPlain = function(data) {
  var textNode = document.createTextNode(data)

  return [textNode]
}

},{"stream":31}],53:[function(require,module,exports){
(function (process){
var Stream = require('stream')

// through
//
// a stream that does nothing but re-emit the input.
// useful for aggregating a series of changing but not ending streams into one stream)



exports = module.exports = through
through.through = through

//create a readable writable stream.

function through (write, end) {
  write = write || function (data) { this.emit('data', data) }
  end = end || function () { this.emit('end') }

  var ended = false, destroyed = false
  var stream = new Stream(), buffer = []
  stream.buffer = buffer
  stream.readable = stream.writable = true
  stream.paused = false
  stream.write = function (data) {
    write.call(this, data)
    return !stream.paused
  }

  function drain() {
    while(buffer.length && !stream.paused) {
      var data = buffer.shift()
      if(null === data)
        return stream.emit('end')
      else
        stream.emit('data', data)
    }
  }

  stream.queue = function (data) {
    buffer.push(data)
    drain()
  }

  //this will be registered as the first 'end' listener
  //must call destroy next tick, to make sure we're after any
  //stream piped from here.
  //this is only a problem if end is not emitted synchronously.
  //a nicer way to do this is to make sure this is the last listener for 'end'

  stream.on('end', function () {
    stream.readable = false
    if(!stream.writable)
      process.nextTick(function () {
        stream.destroy()
      })
  })

  function _end () {
    stream.writable = false
    end.call(stream)
    if(!stream.readable)
      stream.destroy()
  }

  stream.end = function (data) {
    if(ended) return
    ended = true
    if(arguments.length) stream.write(data)
    _end() // will emit or queue
  }

  stream.destroy = function () {
    if(destroyed) return
    destroyed = true
    ended = true
    buffer.length = 0
    stream.writable = stream.readable = false
    stream.emit('close')
  }

  stream.pause = function () {
    if(stream.paused) return
    stream.paused = true
    stream.emit('pause')
  }
  stream.resume = function () {
    if(stream.paused) {
      stream.paused = false
    }
    drain()
    //may have become paused again,
    //as drain emits 'data'.
    if(!stream.paused)
      stream.emit('drain')
  }
  return stream
}


}).call(this,require('_process'))
},{"_process":18,"stream":31}],54:[function(require,module,exports){
module.exports = fullscreen
fullscreen.available = available

var EE = require('events').EventEmitter

function available() {
  return !!shim(document.body)
}

function fullscreen(el) {
  var ael = el.addEventListener || el.attachEvent
    , doc = el.ownerDocument
    , body = doc.body
    , rfs = shim(el)
    , ee = new EE

  var vendors = ['', 'webkit', 'moz', 'ms', 'o']

  for(var i = 0, len = vendors.length; i < len; ++i) {
    ael.call(doc, vendors[i]+'fullscreenchange', onfullscreenchange)
    ael.call(doc, vendors[i]+'fullscreenerror', onfullscreenerror)
  }

  ee.release = release
  ee.request = request
  ee.target = fullscreenelement

  if(!shim) {
    setTimeout(function() {
      ee.emit('error', new Error('fullscreen is not supported'))
    }, 0)
  }
  return ee

  function onfullscreenchange() {
    if(!fullscreenelement()) {
      return ee.emit('release')
    }
    ee.emit('attain')
  }

  function onfullscreenerror() {
    ee.emit('error')
  }

  function request() {
    return rfs.call(el)
  }

  function release() {
    (el.exitFullscreen ||
    el.exitFullscreen ||
    el.webkitExitFullScreen ||
    el.webkitExitFullscreen ||
    el.mozExitFullScreen ||
    el.mozExitFullscreen ||
    el.msExitFullScreen ||
    el.msExitFullscreen ||
    el.oExitFullScreen ||
    el.oExitFullscreen).call(el)
  } 

  function fullscreenelement() {
    return 0 ||
      doc.fullScreenElement ||
      doc.fullscreenElement ||
      doc.webkitFullScreenElement ||
      doc.webkitFullscreenElement ||
      doc.mozFullScreenElement ||
      doc.mozFullscreenElement ||
      doc.msFullScreenElement ||
      doc.msFullscreenElement ||
      doc.oFullScreenElement ||
      doc.oFullscreenElement ||
      null
  }
}

function shim(el) {
  return (el.requestFullscreen ||
    el.webkitRequestFullscreen ||
    el.webkitRequestFullScreen ||
    el.mozRequestFullscreen ||
    el.mozRequestFullScreen ||
    el.msRequestFullscreen ||
    el.msRequestFullScreen ||
    el.oRequestFullscreen ||
    el.oRequestFullScreen)
}

},{"events":14}],55:[function(require,module,exports){
module.exports = pointer

pointer.available = available

var EE = require('events').EventEmitter
  , Stream = require('stream').Stream

function available() {
  return !!shim(document.body)
}

function pointer(el) {
  var ael = el.addEventListener || el.attachEvent
    , rel = el.removeEventListener || el.detachEvent
    , doc = el.ownerDocument
    , body = doc.body
    , rpl = shim(el) 
    , out = {dx: 0, dy: 0, dt: 0}
    , ee = new EE
    , stream = null
    , lastPageX, lastPageY
    , needsFullscreen = false
    , mouseDownMS

  ael.call(el, 'mousedown', onmousedown, false)
  ael.call(el, 'mouseup', onmouseup, false)
  ael.call(body, 'mousemove', onmove, false)

  var vendors = ['', 'webkit', 'moz', 'ms', 'o']

  for(var i = 0, len = vendors.length; i < len; ++i) {
    ael.call(doc, vendors[i]+'pointerlockchange', onpointerlockchange)
    ael.call(doc, vendors[i]+'pointerlockerror', onpointerlockerror)
  }

  ee.release = release
  ee.target = pointerlockelement
  ee.request = onmousedown
  ee.destroy = function() {
    rel.call(el, 'mouseup', onmouseup, false)
    rel.call(el, 'mousedown', onmousedown, false)
    rel.call(el, 'mousemove', onmove, false)
  }

  if(!shim) {
    setTimeout(function() {
      ee.emit('error', new Error('pointer lock is not supported'))
    }, 0)
  }
  return ee

  function onmousedown(ev) {
    if(pointerlockelement()) {
      return
    }
    mouseDownMS = +new Date
    rpl.call(el)
  }

  function onmouseup(ev) {
    if(!needsFullscreen) {
      return
    }

    ee.emit('needs-fullscreen')
    needsFullscreen = false
  }

  function onpointerlockchange(ev) {
    if(!pointerlockelement()) {
      if(stream) release()
      return
    }

    stream = new Stream
    stream.readable = true
    stream.initial = {x: lastPageX, y: lastPageY, t: Date.now()}

    ee.emit('attain', stream)
  }

  function onpointerlockerror(ev) {
    var dt = +(new Date) - mouseDownMS
    if(dt < 100) {
      // we errored immediately, we need to do fullscreen first.
      needsFullscreen = true
      return
    }

    if(stream) {
      stream.emit('error', ev)
      stream = null
    }
  }

  function release() {
    ee.emit('release')

    if(stream) {
      stream.emit('end')
      stream.readable = false
      stream.emit('close')
      stream = null
    }

    var pel = pointerlockelement()
    if(!pel) {
      return
    }

    (doc.exitPointerLock ||
    doc.mozExitPointerLock ||
    doc.webkitExitPointerLock ||
    doc.msExitPointerLock ||
    doc.oExitPointerLock).call(doc)
  }

  function onmove(ev) {
    lastPageX = ev.pageX
    lastPageY = ev.pageY

    if(!stream) return

    // we're reusing a single object
    // because I'd like to avoid piling up
    // a ton of objects for the garbage
    // collector.
    out.dx =
      ev.movementX || ev.webkitMovementX ||
      ev.mozMovementX || ev.msMovementX ||
      ev.oMovementX || 0

    out.dy = 
      ev.movementY || ev.webkitMovementY ||
      ev.mozMovementY || ev.msMovementY ||
      ev.oMovementY || 0

    out.dt = Date.now() - stream.initial.t

    ee.emit('data', out)
    stream.emit('data', out)
  }

  function pointerlockelement() {
    return 0 ||
      doc.pointerLockElement ||
      doc.mozPointerLockElement ||
      doc.webkitPointerLockElement ||
      doc.msPointerLockElement ||
      doc.oPointerLockElement ||
      null
  }
}

function shim(el) {
  return el.requestPointerLock ||
    el.webkitRequestPointerLock ||
    el.mozRequestPointerLock ||
    el.msRequestPointerLock ||
    el.oRequestPointerLock ||
    null
}

},{"events":14,"stream":31}],56:[function(require,module,exports){
var ever = require('ever')
  , vkey = require('vkey')
  , max = Math.max

module.exports = function(el, bindings, state) {
  if(bindings === undefined || !el.ownerDocument) {
    state = bindings
    bindings = el
    el = this.document.body
  }

  var ee = ever(el)
    , measured = {}
    , enabled = true

  state = state || {}

  // always initialize the state.
  for(var key in bindings) {
    if(bindings[key] === 'enabled' ||
       bindings[key] === 'enable' ||
       bindings[key] === 'disable' ||
       bindings[key] === 'destroy') {
      throw new Error(bindings[key]+' is reserved')
    }
    state[bindings[key]] = 0
    measured[key] = 1
  }

  ee.on('keyup', wrapped(onoff(kb, false)))
  ee.on('keydown', wrapped(onoff(kb, true)))
  ee.on('mouseup', wrapped(onoff(mouse, false)))
  ee.on('mousedown', wrapped(onoff(mouse, true)))

  state.enabled = function() {
    return enabled
  }

  state.enable = enable_disable(true)
  state.disable = enable_disable(false)
  state.destroy = function() {
    ee.removeAllListeners()
  } 
  return state

  function clear() {
    // always initialize the state.
    for(var key in bindings) {
      state[bindings[key]] = 0
      measured[key] = 1
    }
  }

  function enable_disable(on_or_off) {
    return function() {
      clear()
      enabled = on_or_off
      return this
    }
  }

  function wrapped(fn) {
    return function(ev) {
      if(enabled) {
        ev.preventDefault()
        fn(ev)
      } else {
        return
      }
    }
  }

  function onoff(find, on_or_off) {
    return function(ev) {
      var key = find(ev)
        , binding = bindings[key]

      if(binding) {
        state[binding] += on_or_off ? max(measured[key]--, 0) : -(measured[key] = 1)

        if(!on_or_off && state[binding] < 0) {
          state[binding] = 0
        }
      }
    }
  }

  function mouse(ev) {
    return '<mouse '+ev.which+'>'
  }

  function kb(ev) {
    return vkey[ev.keyCode] || ev.char
  }
}

},{"ever":57,"vkey":60}],57:[function(require,module,exports){
module.exports=require(33)
},{"./init.json":58,"./types.json":59,"/Users/phil/github/fun/game-editor/node_modules/kb-controls/node_modules/ever/index.js":33,"events":14}],58:[function(require,module,exports){
module.exports=require(34)
},{"/Users/phil/github/fun/game-editor/node_modules/kb-controls/node_modules/ever/init.json":34}],59:[function(require,module,exports){
module.exports=require(35)
},{"/Users/phil/github/fun/game-editor/node_modules/kb-controls/node_modules/ever/types.json":35}],60:[function(require,module,exports){
module.exports=require(36)
},{"/Users/phil/github/fun/game-editor/node_modules/kb-controls/node_modules/vkey/index.js":36}],61:[function(require,module,exports){
module.exports = pin

var pins = {}
  , stack_holder = {}
  , pin_holder

function make_pin_for(name, obj) {
  var container = document.createElement('div')
    , header = document.createElement('h4')
    , body = document.createElement('pre')

  container.style.background = 'white'
  container.style.marginBottom = '4px'
  container.appendChild(header)
  container.appendChild(body)
  header.textContents = header.innerText = obj && obj.repr ? obj.repr() : name
  body.style.padding = '8px'


  if(!pin_holder) {
    pin_holder = document.createElement('div')
    pin_holder.style.position = 'absolute'
    pin_holder.style.top =
    pin_holder.style.right = '4px'

    document.body.appendChild(pin_holder)
  }

  pin_holder.appendChild(container)

  return (pins[name] = pins[name] || []).push({body: body, last: -Infinity, for_object: obj}), pins[name]
}

function update_pin(item, into, retain, depth) {
  if(!retain) into.innerHTML = ''
  if(depth > 1) return
  depth = depth || 0

  switch(typeof item) {
    case 'number': into.innerText += item.toFixed(3); break
    case 'string': into.innerText += '"'+item+'"'; break
    case 'undefined':
    case 'object':
      if(item) {
        for(var key in item) if(item.hasOwnProperty(key)) {
          into.innerText += key +':'
          update_pin(item[key], into, true, depth+1)
          into.innerText += '\n'
        } 
        break
      }
    case 'boolean': into.innerText += ''+item; break
  }  
}

function pin(item, every, obj, name) {
  if(!name) Error.captureStackTrace(stack_holder)
  var location = name || stack_holder.stack.split('\n').slice(2)[0].replace(/^\s+at /g, '')
    , target = pins[location] || make_pin_for(location, obj)
    , now = Date.now()
    , every = every || 0

  if(arguments.length < 3) target = target[0]
  else {
    for(var i = 0, len = target.length; i < len; ++i) {
    if(target[i].for_object === obj) {
      target = target[i]
      break   
    }
  }
    if(i === len) {
      pins[location].push(target = make_pin_for(location, obj))
    }
  }

  if(now - target.last > every) {
    update_pin(item, target.body)
    target.last = now 
  }
}

},{}],62:[function(require,module,exports){
module.exports=require(38)
},{"/Users/phil/github/fun/game-editor/node_modules/raf/index.js":38,"events":14}],63:[function(require,module,exports){
module.exports = SpatialEventEmitter

var slice = [].slice
  , Tree = require('./tree')
  , aabb = require('aabb-3d')

function SpatialEventEmitter() {
  this.root = null
  this.infinites = {}
}

var cons = SpatialEventEmitter
  , proto = cons.prototype

proto.size = 16

proto.addListener = 
proto.addEventListener = 
proto.on = function(event, bbox, listener) {
  if(!finite(bbox)) {
    (this.infinites[event] = this.infinites[event] || []).push({
      bbox: bbox
    , func: listener
    })
    return this
  }

  (this.root = this.root || this.create_root(bbox))
    .add(event, bbox, listener)

  return this
}

proto.once = function(event, bbox, listener) {
  var self = this

  self.on(event, bbox, function once() {
    listener.apply(null, arguments)
    self.remove(event, once)
  })

  return self
}

proto.removeListener =
proto.removeEventListener =
proto.remove = function(event, listener) {
  if(this.root) {
    this.root.remove(event, listener)
  }

  if(!this.infinites[event]) {
    return this
  }

  for(var i = 0, len = this.infinites[event].length; i < len; ++i) {
    if(this.infinites[event][i].func === listener) {
      break
    }
  }

  if(i !== len) {
    this.infinites[event].splice(i, 1)
  }

  return this
}

proto.emit = function(event, bbox/*, ...args */) {
  var args = slice.call(arguments, 2)

  // support point emitting
  if('0' in bbox) {
    bbox = aabb(bbox, [0, 0, 0]) 
  }

  if(this.root) {
    this.root.send(event, bbox, args)
  }

  if(!this.infinites[event]) {
    return this
  }

  var list = this.infinites[event].slice()
  for(var i = 0, len = list.length; i < len; ++i) {
    if(list[i].bbox.intersects(bbox)) {
      list[i].func.apply(null, args) 
    }
  }

  return this
}

proto.rootSize = function(size) {
  proto.size = size
}

proto.create_root = function(bbox) {
  var self = this
    , size = self.size
    , base = [
        Math.floor(bbox.x0() / size) * size
      , Math.floor(bbox.y0() / size) * size
      , Math.floor(bbox.z0() / size) * size
      ]
    , tree_bbox = new bbox.constructor(base, [size, size, size])

  function OurTree(size, bbox) {
    Tree.call(this, size, bbox, null)
  }

  OurTree.prototype = Object.create(Tree.prototype)
  OurTree.prototype.constructor = OurTree
  OurTree.prototype.grow = function(new_root) {
    self.root = new_root
  }
  OurTree.prototype.min_size = size

  return new OurTree(size, tree_bbox) 
}

function finite(bbox) {
  return isFinite(bbox.x0()) &&
         isFinite(bbox.x1()) &&
         isFinite(bbox.y0()) &&
         isFinite(bbox.y1()) &&
         isFinite(bbox.z0()) &&
         isFinite(bbox.z1())
}

},{"./tree":64,"aabb-3d":43}],64:[function(require,module,exports){
module.exports = Tree

var aabb = require('aabb-3d')

function Tree(size, bbox, parent) {
  this.listeners = {}
  this.size = size
  this.bbox = bbox
  this.parent = parent
  this.children = []
}

var cons = Tree
  , proto = cons.prototype

proto.add = function(event, bbox, listener) {
  if(!this.parent && !this.contains(bbox)) {
    return this.expand(bbox).add(event, bbox, listener)
  }

  for(var i = 0, len = this.children.length; i < len; ++i) {
    if(this.children[i].contains(bbox)) {
      return this.children[i].add(event, bbox, listener)
    }
  }

  var size = this.size / 2

  if(size > this.min_size && bbox.vec[0] < size && bbox.vec[1] < size && bbox.vec[2] < size) {
    // if it fits into a child node, make that childnode
    if(Math.floor(bbox.x0() / size) === Math.floor(bbox.x1() / size) &&
       Math.floor(bbox.y0() / size) === Math.floor(bbox.y1() / size) &&
       Math.floor(bbox.z0() / size) === Math.floor(bbox.z1() / size)) {
      var inst = new this.constructor(
          size
        , aabb([
              Math.floor(bbox.x0() / size) * size
            , Math.floor(bbox.y0() / size) * size
            , Math.floor(bbox.z0() / size) * size
            ]
          , [size, size, size]
          )
        , this
      )
      this.children.push(inst)
      return inst.add(event, bbox, listener)
    }
  }

  (this.listeners[event] = this.listeners[event] || [])
    .push({bbox: bbox, func: listener})
}

proto.contains = function(bbox) {
  return bbox.x0() >= this.bbox.x0() &&
         bbox.y0() >= this.bbox.y0() &&
         bbox.z0() >= this.bbox.z0() &&
         bbox.x1() <= this.bbox.x1() &&
         bbox.y1() <= this.bbox.y1() &&
         bbox.z1() <= this.bbox.z1()
}

proto.expand = function(bbox) {
  var size = this.size
    , new_size = size * 2
    , expanded = this.bbox.expand(bbox)
    , new_i = Math.floor(bbox.x0() / size)
    , new_j = Math.floor(bbox.y0() / size)
    , new_k = Math.floor(bbox.z0() / size)
    , cur_i = Math.floor(this.bbox.x0() / size)
    , cur_j = Math.floor(this.bbox.y0() / size)
    , cur_k = Math.floor(this.bbox.z0() / size)
    , new_base = [
        new_i - cur_i >= 0 ? cur_i : cur_i - 1
      , new_j - cur_j >= 0 ? cur_j : cur_j - 1
      , new_k - cur_k >= 0 ? cur_k : cur_k - 1
      ].map(function(ii) { return ii * size })
    , new_bbox = aabb(new_base, [new_size, new_size, new_size])
    , new_root = new this.constructor(new_size, new_bbox)
    , self = this

  this.parent = new_root
  this.grow(this.parent)

  new_root.children.push(self)

  return new_root
}

proto.remove = function(event, listener) {
  var list = this.listeners[event]
  if(list) {
    for(var i = 0, len = list.length; i < len; ++i) {
      if(list[i].func === listener)
        break
    }

    if(i !== len) {
      list.splice(i, 1)
    }
  }
  for(var i = 0, len = this.children.length; i < len; ++i) {
    this.children[i].remove(event, listener)
  }
}

proto.send = function(event, bbox, args) {
  for(var i = 0, len = this.children.length; i < len; ++i) {
    if(bbox.intersects(this.children[i].bbox)) {
      this.children[i].send(event, bbox, args)
    }
  }

  var list = this.listeners[event]
  if(!list) {
    return
  }

  for(var i = 0, len = list.length; i < len; ++i) {
    if(list[i].bbox.intersects(bbox)) {
      list[i].func.apply(null, args)
    }
  }
}

},{"aabb-3d":43}],65:[function(require,module,exports){

var window = window || {};
var self = self || {};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author Larry Battle / http://bateru.com/news
 */

var THREE = THREE || { REVISION: '54' };

self.console = self.console || {

	info: function () {},
	log: function () {},
	debug: function () {},
	warn: function () {},
	error: function () {}

};

self.Int32Array = self.Int32Array || Array;
self.Float32Array = self.Float32Array || Array;

// Shims for "startsWith", "endsWith", and "trim" for browsers where this is not yet implemented
// not sure we should have this, or at least not have it here

// http://stackoverflow.com/questions/646628/javascript-startswith
// http://stackoverflow.com/questions/498970/how-do-i-trim-a-string-in-javascript
// http://wiki.ecmascript.org/doku.php?id=harmony%3astring_extras

String.prototype.startsWith = String.prototype.startsWith || function ( str ) {

	return this.slice( 0, str.length ) === str;

};

String.prototype.endsWith = String.prototype.endsWith || function ( str ) {

	var t = String( str );
	var index = this.lastIndexOf( t );
	return ( -1 < index && index ) === (this.length - t.length);

};

String.prototype.trim = String.prototype.trim || function () {

	return this.replace( /^\s+|\s+$/g, '' );

};


// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

// requestAnimationFrame polyfill by Erik Möller
// fixes from Paul Irish and Tino Zijdel

( function () {

	var lastTime = 0;
	var vendors = [ 'ms', 'moz', 'webkit', 'o' ];

	for ( var x = 0; x < vendors.length && !window.requestAnimationFrame; ++ x ) {

		window.requestAnimationFrame = window[ vendors[ x ] + 'RequestAnimationFrame' ];
		window.cancelAnimationFrame = window[ vendors[ x ] + 'CancelAnimationFrame' ] || window[ vendors[ x ] + 'CancelRequestAnimationFrame' ];

	}

	if ( window.requestAnimationFrame === undefined ) {

		window.requestAnimationFrame = function ( callback, element ) {

			var currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );
			var id = window.setTimeout( function() { callback( currTime + timeToCall ); }, timeToCall );
			lastTime = currTime + timeToCall;
			return id;

		};

	}

	window.cancelAnimationFrame = window.cancelAnimationFrame || function ( id ) { window.clearTimeout( id ) };

}() );

// GL STATE CONSTANTS

THREE.CullFaceNone = 0;
THREE.CullFaceBack = 1;
THREE.CullFaceFront = 2;
THREE.CullFaceFrontBack = 3;

THREE.FrontFaceDirectionCW = 0;
THREE.FrontFaceDirectionCCW = 1;

// SHADOWING TYPES

THREE.BasicShadowMap = 0;
THREE.PCFShadowMap = 1;
THREE.PCFSoftShadowMap = 2;

// MATERIAL CONSTANTS

// side

THREE.FrontSide = 0;
THREE.BackSide = 1;
THREE.DoubleSide = 2;

// shading

THREE.NoShading = 0;
THREE.FlatShading = 1;
THREE.SmoothShading = 2;

// colors

THREE.NoColors = 0;
THREE.FaceColors = 1;
THREE.VertexColors = 2;

// blending modes

THREE.NoBlending = 0;
THREE.NormalBlending = 1;
THREE.AdditiveBlending = 2;
THREE.SubtractiveBlending = 3;
THREE.MultiplyBlending = 4;
THREE.CustomBlending = 5;

// custom blending equations
// (numbers start from 100 not to clash with other
//  mappings to OpenGL constants defined in Texture.js)

THREE.AddEquation = 100;
THREE.SubtractEquation = 101;
THREE.ReverseSubtractEquation = 102;

// custom blending destination factors

THREE.ZeroFactor = 200;
THREE.OneFactor = 201;
THREE.SrcColorFactor = 202;
THREE.OneMinusSrcColorFactor = 203;
THREE.SrcAlphaFactor = 204;
THREE.OneMinusSrcAlphaFactor = 205;
THREE.DstAlphaFactor = 206;
THREE.OneMinusDstAlphaFactor = 207;

// custom blending source factors

//THREE.ZeroFactor = 200;
//THREE.OneFactor = 201;
//THREE.SrcAlphaFactor = 204;
//THREE.OneMinusSrcAlphaFactor = 205;
//THREE.DstAlphaFactor = 206;
//THREE.OneMinusDstAlphaFactor = 207;
THREE.DstColorFactor = 208;
THREE.OneMinusDstColorFactor = 209;
THREE.SrcAlphaSaturateFactor = 210;


// TEXTURE CONSTANTS

THREE.MultiplyOperation = 0;
THREE.MixOperation = 1;
THREE.AddOperation = 2;

// Mapping modes

THREE.UVMapping = function () {};

THREE.CubeReflectionMapping = function () {};
THREE.CubeRefractionMapping = function () {};

THREE.SphericalReflectionMapping = function () {};
THREE.SphericalRefractionMapping = function () {};

// Wrapping modes

THREE.RepeatWrapping = 1000;
THREE.ClampToEdgeWrapping = 1001;
THREE.MirroredRepeatWrapping = 1002;

// Filters

THREE.NearestFilter = 1003;
THREE.NearestMipMapNearestFilter = 1004;
THREE.NearestMipMapLinearFilter = 1005;
THREE.LinearFilter = 1006;
THREE.LinearMipMapNearestFilter = 1007;
THREE.LinearMipMapLinearFilter = 1008;

// Data types

THREE.UnsignedByteType = 1009;
THREE.ByteType = 1010;
THREE.ShortType = 1011;
THREE.UnsignedShortType = 1012;
THREE.IntType = 1013;
THREE.UnsignedIntType = 1014;
THREE.FloatType = 1015;

// Pixel types

//THREE.UnsignedByteType = 1009;
THREE.UnsignedShort4444Type = 1016;
THREE.UnsignedShort5551Type = 1017;
THREE.UnsignedShort565Type = 1018;

// Pixel formats

THREE.AlphaFormat = 1019;
THREE.RGBFormat = 1020;
THREE.RGBAFormat = 1021;
THREE.LuminanceFormat = 1022;
THREE.LuminanceAlphaFormat = 1023;

// Compressed texture formats

THREE.RGB_S3TC_DXT1_Format = 2001;
THREE.RGBA_S3TC_DXT1_Format = 2002;
THREE.RGBA_S3TC_DXT3_Format = 2003;
THREE.RGBA_S3TC_DXT5_Format = 2004;

/*
// Potential future PVRTC compressed texture formats
THREE.RGB_PVRTC_4BPPV1_Format = 2100;
THREE.RGB_PVRTC_2BPPV1_Format = 2101;
THREE.RGBA_PVRTC_4BPPV1_Format = 2102;
THREE.RGBA_PVRTC_2BPPV1_Format = 2103;
*/
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Color = function ( value ) {

	if ( value !== undefined ) this.set( value );

	return this;

};

THREE.Color.prototype = {

	constructor: THREE.Color,

	r: 1, g: 1, b: 1,

	copy: function ( color ) {

		this.r = color.r;
		this.g = color.g;
		this.b = color.b;

		return this;

	},

	copyGammaToLinear: function ( color ) {

		this.r = color.r * color.r;
		this.g = color.g * color.g;
		this.b = color.b * color.b;

		return this;

	},

	copyLinearToGamma: function ( color ) {

		this.r = Math.sqrt( color.r );
		this.g = Math.sqrt( color.g );
		this.b = Math.sqrt( color.b );

		return this;

	},

	convertGammaToLinear: function () {

		var r = this.r, g = this.g, b = this.b;

		this.r = r * r;
		this.g = g * g;
		this.b = b * b;

		return this;

	},

	convertLinearToGamma: function () {

		this.r = Math.sqrt( this.r );
		this.g = Math.sqrt( this.g );
		this.b = Math.sqrt( this.b );

		return this;

	},

	set: function ( value ) {

		switch ( typeof value ) {

			case "number":
				this.setHex( value );
				break;

			case "string":
				this.setStyle( value );
				break;

		}

	},

	setRGB: function ( r, g, b ) {

		this.r = r;
		this.g = g;
		this.b = b;

		return this;

	},

	setHSV: function ( h, s, v ) {

		// based on MochiKit implementation by Bob Ippolito
		// h,s,v ranges are < 0.0 - 1.0 >

		var i, f, p, q, t;

		if ( v === 0 ) {

			this.r = this.g = this.b = 0;

		} else {

			i = Math.floor( h * 6 );
			f = ( h * 6 ) - i;
			p = v * ( 1 - s );
			q = v * ( 1 - ( s * f ) );
			t = v * ( 1 - ( s * ( 1 - f ) ) );

			if ( i === 0 ) {

				this.r = v;
				this.g = t;
				this.b = p;

			} else if ( i === 1 ) {

				this.r = q;
				this.g = v;
				this.b = p;

			} else if ( i === 2 ) {

				this.r = p;
				this.g = v;
				this.b = t;

			} else if ( i === 3 ) {

				this.r = p;
				this.g = q;
				this.b = v;

			} else if ( i === 4 ) {

				this.r = t;
				this.g = p;
				this.b = v;

			} else if ( i === 5 ) {

				this.r = v;
				this.g = p;
				this.b = q;

			}

		}

		return this;

	},

	getHex: function () {

		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

	},

	setHex: function ( hex ) {

		hex = Math.floor( hex );

		this.r = ( hex >> 16 & 255 ) / 255;
		this.g = ( hex >> 8 & 255 ) / 255;
		this.b = ( hex & 255 ) / 255;

		return this;

	},

	getHexString: function () {

		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

	},

	getStyle: function () {

		return 'rgb(' + ( ( this.r * 255 ) | 0 )  + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

	},

	setStyle: function ( style ) {

		// rgb(255,0,0)

		if ( /^rgb\((\d+),(\d+),(\d+)\)$/i.test( style ) ) {

			var color = /^rgb\((\d+),(\d+),(\d+)\)$/i.exec( style );

			this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
			this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
			this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

			return this;

		}

		// rgb(100%,0%,0%)

		if ( /^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.test( style ) ) {

			var color = /^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.exec( style );

			this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
			this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
			this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

			return this;

		}

		// #ff0000

		if ( /^\#([0-9a-f]{6})$/i.test( style ) ) {

			var color = /^\#([0-9a-f]{6})$/i.exec( style );

			this.setHex( parseInt( color[ 1 ], 16 ) );

			return this;

		}

		// #f00

		if ( /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test( style ) ) {

			var color = /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec( style );

			this.setHex( parseInt( color[ 1 ] + color[ 1 ] + color[ 2 ] + color[ 2 ] + color[ 3 ] + color[ 3 ], 16 ) );

			return this;

		}

		// red

		if ( /^(\w+)$/i.test( style ) ) {

			this.setHex( THREE.ColorKeywords[ style ] );

			return this;

		}


	},

	getHSV: function ( hsv ) {

		// based on MochiKit implementation by Bob Ippolito
		// h,s,v ranges are < 0.0 - 1.0 >

		var r = this.r;
		var g = this.g;
		var b = this.b;

		var max = Math.max( Math.max( r, g ), b );
		var min = Math.min( Math.min( r, g ), b );

		var hue;
		var saturation;
		var value = max;

		if ( min === max )	{

			hue = 0;
			saturation = 0;

		} else {

			var delta = ( max - min );
			saturation = delta / max;

			if ( r === max ) {

				hue = ( g - b ) / delta;

			} else if ( g === max ) {

				hue = 2 + ( ( b - r ) / delta );

			} else	{

				hue = 4 + ( ( r - g ) / delta );
			}

			hue /= 6;

			if ( hue < 0 ) {

				hue += 1;

			}

			if ( hue > 1 ) {

				hue -= 1;

			}

		}

		if ( hsv === undefined ) {

			hsv = { h: 0, s: 0, v: 0 };

		}

		hsv.h = hue;
		hsv.s = saturation;
		hsv.v = value;

		return hsv;

	},

	lerpSelf: function ( color, alpha ) {

		this.r += ( color.r - this.r ) * alpha;
		this.g += ( color.g - this.g ) * alpha;
		this.b += ( color.b - this.b ) * alpha;

		return this;

	},

	clone: function () {

		return new THREE.Color().setRGB( this.r, this.g, this.b );

	}

};

THREE.ColorKeywords = { "aliceblue": 0xF0F8FF, "antiquewhite": 0xFAEBD7, "aqua": 0x00FFFF, "aquamarine": 0x7FFFD4, "azure": 0xF0FFFF,
"beige": 0xF5F5DC, "bisque": 0xFFE4C4, "black": 0x000000, "blanchedalmond": 0xFFEBCD, "blue": 0x0000FF, "blueviolet": 0x8A2BE2,
"brown": 0xA52A2A, "burlywood": 0xDEB887, "cadetblue": 0x5F9EA0, "chartreuse": 0x7FFF00, "chocolate": 0xD2691E, "coral": 0xFF7F50,
"cornflowerblue": 0x6495ED, "cornsilk": 0xFFF8DC, "crimson": 0xDC143C, "cyan": 0x00FFFF, "darkblue": 0x00008B, "darkcyan": 0x008B8B,
"darkgoldenrod": 0xB8860B, "darkgray": 0xA9A9A9, "darkgreen": 0x006400, "darkgrey": 0xA9A9A9, "darkkhaki": 0xBDB76B, "darkmagenta": 0x8B008B,
"darkolivegreen": 0x556B2F, "darkorange": 0xFF8C00, "darkorchid": 0x9932CC, "darkred": 0x8B0000, "darksalmon": 0xE9967A, "darkseagreen": 0x8FBC8F,
"darkslateblue": 0x483D8B, "darkslategray": 0x2F4F4F, "darkslategrey": 0x2F4F4F, "darkturquoise": 0x00CED1, "darkviolet": 0x9400D3,
"deeppink": 0xFF1493, "deepskyblue": 0x00BFFF, "dimgray": 0x696969, "dimgrey": 0x696969, "dodgerblue": 0x1E90FF, "firebrick": 0xB22222,
"floralwhite": 0xFFFAF0, "forestgreen": 0x228B22, "fuchsia": 0xFF00FF, "gainsboro": 0xDCDCDC, "ghostwhite": 0xF8F8FF, "gold": 0xFFD700,
"goldenrod": 0xDAA520, "gray": 0x808080, "green": 0x008000, "greenyellow": 0xADFF2F, "grey": 0x808080, "honeydew": 0xF0FFF0, "hotpink": 0xFF69B4,
"indianred": 0xCD5C5C, "indigo": 0x4B0082, "ivory": 0xFFFFF0, "khaki": 0xF0E68C, "lavender": 0xE6E6FA, "lavenderblush": 0xFFF0F5, "lawngreen": 0x7CFC00,
"lemonchiffon": 0xFFFACD, "lightblue": 0xADD8E6, "lightcoral": 0xF08080, "lightcyan": 0xE0FFFF, "lightgoldenrodyellow": 0xFAFAD2, "lightgray": 0xD3D3D3,
"lightgreen": 0x90EE90, "lightgrey": 0xD3D3D3, "lightpink": 0xFFB6C1, "lightsalmon": 0xFFA07A, "lightseagreen": 0x20B2AA, "lightskyblue": 0x87CEFA,
"lightslategray": 0x778899, "lightslategrey": 0x778899, "lightsteelblue": 0xB0C4DE, "lightyellow": 0xFFFFE0, "lime": 0x00FF00, "limegreen": 0x32CD32,
"linen": 0xFAF0E6, "magenta": 0xFF00FF, "maroon": 0x800000, "mediumaquamarine": 0x66CDAA, "mediumblue": 0x0000CD, "mediumorchid": 0xBA55D3,
"mediumpurple": 0x9370DB, "mediumseagreen": 0x3CB371, "mediumslateblue": 0x7B68EE, "mediumspringgreen": 0x00FA9A, "mediumturquoise": 0x48D1CC,
"mediumvioletred": 0xC71585, "midnightblue": 0x191970, "mintcream": 0xF5FFFA, "mistyrose": 0xFFE4E1, "moccasin": 0xFFE4B5, "navajowhite": 0xFFDEAD,
"navy": 0x000080, "oldlace": 0xFDF5E6, "olive": 0x808000, "olivedrab": 0x6B8E23, "orange": 0xFFA500, "orangered": 0xFF4500, "orchid": 0xDA70D6,
"palegoldenrod": 0xEEE8AA, "palegreen": 0x98FB98, "paleturquoise": 0xAFEEEE, "palevioletred": 0xDB7093, "papayawhip": 0xFFEFD5, "peachpuff": 0xFFDAB9,
"peru": 0xCD853F, "pink": 0xFFC0CB, "plum": 0xDDA0DD, "powderblue": 0xB0E0E6, "purple": 0x800080, "red": 0xFF0000, "rosybrown": 0xBC8F8F,
"royalblue": 0x4169E1, "saddlebrown": 0x8B4513, "salmon": 0xFA8072, "sandybrown": 0xF4A460, "seagreen": 0x2E8B57, "seashell": 0xFFF5EE,
"sienna": 0xA0522D, "silver": 0xC0C0C0, "skyblue": 0x87CEEB, "slateblue": 0x6A5ACD, "slategray": 0x708090, "slategrey": 0x708090, "snow": 0xFFFAFA,
"springgreen": 0x00FF7F, "steelblue": 0x4682B4, "tan": 0xD2B48C, "teal": 0x008080, "thistle": 0xD8BFD8, "tomato": 0xFF6347, "turquoise": 0x40E0D0,
"violet": 0xEE82EE, "wheat": 0xF5DEB3, "white": 0xFFFFFF, "whitesmoke": 0xF5F5F5, "yellow": 0xFFFF00, "yellowgreen": 0x9ACD32 };
/**
 * @author mrdoob / http://mrdoob.com/
 * @author philogb / http://blog.thejit.org/
 * @author egraether / http://egraether.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

THREE.Vector2 = function ( x, y ) {

	this.x = x || 0;
	this.y = y || 0;

};

THREE.Vector2.prototype = {

	constructor: THREE.Vector2,

	set: function ( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},


    setComponent: function ( index, value ) {

        switch( index ) {

            case 0: this.x = value; break;
            case 1: this.y = value; break;
            default: throw new Error( "index is out of range: " + index );

        }

    },

    getComponent: function ( index ) {

        switch( index ) {

            case 0: return this.x;
            case 1: return this.y;
            default: throw new Error( "index is out of range: " + index );

    	}
    },

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;

		return this;

	},

	add: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	},

	addSelf: function ( v ) {

		this.x += v.x;
		this.y += v.y;

		return this;

	},

	sub: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	},

	subSelf: function ( v ) {

		this.x -= v.x;
		this.y -= v.y;

		return this;

	},

	multiplyScalar: function ( s ) {

		this.x *= s;
		this.y *= s;

		return this;

	},

	divideScalar: function ( s ) {

		if ( s !== 0 ) {

			this.x /= s;
			this.y /= s;

		} else {

			this.set( 0, 0 );

		}

		return this;

	},

	minSelf: function ( v ) {

		if ( this.x > v.x ) {

			this.x = v.x;

		}

		if ( this.y > v.y ) {

			this.y = v.y;

		}

		return this;

	},

	maxSelf: function ( v ) {

		if ( this.x < v.x ) {

			this.x = v.x;

		}

		if ( this.y < v.y ) {

			this.y = v.y;

		}

		return this;

	},

	clampSelf: function ( min, max ) {

		// This function assumes min < max, if this assumption isn't true it will not operate correctly

		if ( this.x < min.x ) {

			this.x = min.x;

		} else if ( this.x > max.x ) {

			this.x = max.x;

		}

		if ( this.y < min.y ) {

			this.y = min.y;

		} else if ( this.y > max.y ) {

			this.y = max.y;

		}

		return this;

	},

	negate: function() {

		return this.multiplyScalar( - 1 );

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	},

	normalize: function () {

		return this.divideScalar( this.length() );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	},

	setLength: function ( l ) {

		var oldLength = this.length();
		
		if ( oldLength !== 0 && l !== oldLength  ) {

			this.multiplyScalar( l / oldLength );
		}

		return this;

	},

	lerpSelf: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	},

	equals: function( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	},

	clone: function () {

		return new THREE.Vector2( this.x, this.y );

	}

};/**
 * @author mrdoob / http://mrdoob.com/
 * @author *kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Vector3 = function ( x, y, z ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;

};


THREE.Vector3.prototype = {

	constructor: THREE.Vector3,

	set: function ( x, y, z ) {

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

    setComponent: function ( index, value ) {

        switch( index ) {

            case 0: this.x = value; break;
            case 1: this.y = value; break;
            case 2: this.z = value; break;
            default: throw new Error( "index is out of range: " + index );

        }

    },

    getComponent: function ( index ) {

        switch( index ) {

            case 0: return this.x;
            case 1: return this.y;
            case 2: return this.z;
            default: throw new Error( "index is out of range: " + index );

        }

    },

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	},

	add: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	},

	addSelf: function ( v ) {

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	},

	sub: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	},

	subSelf: function ( v ) {

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	},

	multiply: function ( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	},

	multiplySelf: function ( v ) {

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	},

	multiplyScalar: function ( s ) {

		this.x *= s;
		this.y *= s;
		this.z *= s;

		return this;

	},

	divideSelf: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	},

	divideScalar: function ( s ) {

		if ( s !== 0 ) {

			this.x /= s;
			this.y /= s;
			this.z /= s;

		} else {

			this.x = 0;
			this.y = 0;
			this.z = 0;

		}

		return this;

	},

	minSelf: function ( v ) {

		if ( this.x > v.x ) {

			this.x = v.x;

		}

		if ( this.y > v.y ) {

			this.y = v.y;

		}

		if ( this.z > v.z ) {

			this.z = v.z;

		}

		return this;

	},

	maxSelf: function ( v ) {

		if ( this.x < v.x ) {

			this.x = v.x;

		}

		if ( this.y < v.y ) {

			this.y = v.y;

		}

		if ( this.z < v.z ) {

			this.z = v.z;

		}

		return this;

	},

	clampSelf: function ( min, max ) {

		// This function assumes min < max, if this assumption isn't true it will not operate correctly

		if ( this.x < min.x ) {

			this.x = min.x;

		} else if ( this.x > max.x ) {

			this.x = max.x;

		}

		if ( this.y < min.y ) {

			this.y = min.y;

		} else if ( this.y > max.y ) {

			this.y = max.y;

		}

		if ( this.z < min.z ) {

			this.z = min.z;

		} else if ( this.z > max.z ) {

			this.z = max.z;

		}

		return this;

	},

	negate: function() {

		return this.multiplyScalar( - 1 );

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	},

	lengthManhattan: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	},

	normalize: function () {

		return this.divideScalar( this.length() );

	},

	setLength: function ( l ) {

		var oldLength = this.length();
		
		if ( oldLength !== 0 && l !== oldLength  ) {

			this.multiplyScalar( l / oldLength );
		}

		return this;

	},

	lerpSelf: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	},

	cross: function ( a, b ) {

		this.x = a.y * b.z - a.z * b.y;
		this.y = a.z * b.x - a.x * b.z;
		this.z = a.x * b.y - a.y * b.x;

		return this;

	},

	crossSelf: function ( v ) {

		var x = this.x, y = this.y, z = this.z;

		this.x = y * v.z - z * v.y;
		this.y = z * v.x - x * v.z;
		this.z = x * v.y - y * v.x;

		return this;

	},

	angleTo: function ( v ) {

		return Math.acos( this.dot( v ) / this.length() / v.length() );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x;
		var dy = this.y - v.y;
		var dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	},

	getPositionFromMatrix: function ( m ) {

		this.x = m.elements[12];
		this.y = m.elements[13];
		this.z = m.elements[14];

		return this;

	},

	setEulerFromRotationMatrix: function ( m, order ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		// clamp, to handle numerical problems

		function clamp( x ) {

			return Math.min( Math.max( x, -1 ), 1 );

		}

		var te = m.elements;
		var m11 = te[0], m12 = te[4], m13 = te[8];
		var m21 = te[1], m22 = te[5], m23 = te[9];
		var m31 = te[2], m32 = te[6], m33 = te[10];

		if ( order === undefined || order === 'XYZ' ) {

			this.y = Math.asin( clamp( m13 ) );

			if ( Math.abs( m13 ) < 0.99999 ) {

				this.x = Math.atan2( - m23, m33 );
				this.z = Math.atan2( - m12, m11 );

			} else {

				this.x = Math.atan2( m32, m22 );
				this.z = 0;

			}

		} else if ( order === 'YXZ' ) {

			this.x = Math.asin( - clamp( m23 ) );

			if ( Math.abs( m23 ) < 0.99999 ) {

				this.y = Math.atan2( m13, m33 );
				this.z = Math.atan2( m21, m22 );

			} else {

				this.y = Math.atan2( - m31, m11 );
				this.z = 0;

			}

		} else if ( order === 'ZXY' ) {

			this.x = Math.asin( clamp( m32 ) );

			if ( Math.abs( m32 ) < 0.99999 ) {

				this.y = Math.atan2( - m31, m33 );
				this.z = Math.atan2( - m12, m22 );

			} else {

				this.y = 0;
				this.z = Math.atan2( m21, m11 );

			}

		} else if ( order === 'ZYX' ) {

			this.y = Math.asin( - clamp( m31 ) );

			if ( Math.abs( m31 ) < 0.99999 ) {

				this.x = Math.atan2( m32, m33 );
				this.z = Math.atan2( m21, m11 );

			} else {

				this.x = 0;
				this.z = Math.atan2( - m12, m22 );

			}

		} else if ( order === 'YZX' ) {

			this.z = Math.asin( clamp( m21 ) );

			if ( Math.abs( m21 ) < 0.99999 ) {

				this.x = Math.atan2( - m23, m22 );
				this.y = Math.atan2( - m31, m11 );

			} else {

				this.x = 0;
				this.y = Math.atan2( m13, m33 );

			}

		} else if ( order === 'XZY' ) {

			this.z = Math.asin( - clamp( m12 ) );

			if ( Math.abs( m12 ) < 0.99999 ) {

				this.x = Math.atan2( m32, m22 );
				this.y = Math.atan2( m13, m11 );

			} else {

				this.x = Math.atan2( - m23, m33 );
				this.y = 0;

			}

		}

		return this;

	},

	setEulerFromQuaternion: function ( q, order ) {

		// q is assumed to be normalized

		// clamp, to handle numerical problems

		function clamp( x ) {

			return Math.min( Math.max( x, -1 ), 1 );

		}

		// http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m

		var sqx = q.x * q.x;
		var sqy = q.y * q.y;
		var sqz = q.z * q.z;
		var sqw = q.w * q.w;

		if ( order === undefined || order === 'XYZ' ) {

			this.x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );
			this.y = Math.asin(  clamp( 2 * ( q.x * q.z + q.y * q.w ) ) );
			this.z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );

		} else if ( order ===  'YXZ' ) {

			this.x = Math.asin(  clamp( 2 * ( q.x * q.w - q.y * q.z ) ) );
			this.y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );
			this.z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );

		} else if ( order === 'ZXY' ) {

			this.x = Math.asin(  clamp( 2 * ( q.x * q.w + q.y * q.z ) ) );
			this.y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );
			this.z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );

		} else if ( order === 'ZYX' ) {

			this.x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );
			this.y = Math.asin(  clamp( 2 * ( q.y * q.w - q.x * q.z ) ) );
			this.z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );

		} else if ( order === 'YZX' ) {

			this.x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );
			this.y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );
			this.z = Math.asin(  clamp( 2 * ( q.x * q.y + q.z * q.w ) ) );

		} else if ( order === 'XZY' ) {

			this.x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );
			this.y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );
			this.z = Math.asin(  clamp( 2 * ( q.z * q.w - q.x * q.y ) ) );

		}

		return this;

	},

	getScaleFromMatrix: function ( m ) {

		var sx = this.set( m.elements[0], m.elements[1], m.elements[2] ).length();
		var sy = this.set( m.elements[4], m.elements[5], m.elements[6] ).length();
		var sz = this.set( m.elements[8], m.elements[9], m.elements[10] ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;
	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	},

	clone: function () {

		return new THREE.Vector3( this.x, this.y, this.z );

	}

};/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Vector4 = function ( x, y, z, w ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;
	this.w = ( w !== undefined ) ? w : 1;

};

THREE.Vector4.prototype = {

	constructor: THREE.Vector4,

	set: function ( x, y, z, w ) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setW: function ( w ) {

		this.w = w;

		return this;

	},

    setComponent: function ( index, value ) {

        switch( index ) {

            case 0: this.x = value; break;
            case 1: this.y = value; break;
            case 2: this.z = value; break;
            case 3: this.w = value; break;
            default: throw new Error( "index is out of range: " + index );

        }

    },

    getComponent: function ( index ) {

        switch( index ) {

            case 0: return this.x;
            case 1: return this.y;
            case 2: return this.z;
            case 3: return this.w;
            default: throw new Error( "index is out of range: " + index );

        }

    },

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = ( v.w !== undefined ) ? v.w : 1;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;
		this.w += s;

		return this;

	},

	add: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		this.w = a.w + b.w;

		return this;

	},

	addSelf: function ( v ) {

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		this.w += v.w;

		return this;

	},

	sub: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		this.w = a.w - b.w;

		return this;

	},

	subSelf: function ( v ) {

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		this.w -= v.w;

		return this;

	},

	multiplyScalar: function ( s ) {

		this.x *= s;
		this.y *= s;
		this.z *= s;
		this.w *= s;

		return this;

	},

	divideScalar: function ( s ) {

		if ( s !== 0 ) {

			this.x /= s;
			this.y /= s;
			this.z /= s;
			this.w /= s;

		} else {

			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 1;

		}

		return this;

	},

	minSelf: function ( v ) {

		if ( this.x > v.x ) {

			this.x = v.x;

		}

		if ( this.y > v.y ) {

			this.y = v.y;

		}

		if ( this.z > v.z ) {

			this.z = v.z;

		}

		if ( this.w > v.w ) {

			this.w = v.w;

		}

		return this;

	},

	maxSelf: function ( v ) {

		if ( this.x < v.x ) {

			this.x = v.x;

		}

		if ( this.y < v.y ) {

			this.y = v.y;

		}

		if ( this.z < v.z ) {

			this.z = v.z;

		}

		if ( this.w < v.w ) {

			this.w = v.w;

		}

		return this;

	},

	clampSelf: function ( min, max ) {

		// This function assumes min < max, if this assumption isn't true it will not operate correctly

		if ( this.x < min.x ) {

			this.x = min.x;

		} else if ( this.x > max.x ) {

			this.x = max.x;

		}

		if ( this.y < min.y ) {

			this.y = min.y;

		} else if ( this.y > max.y ) {

			this.y = max.y;

		}

		if ( this.z < min.z ) {

			this.z = min.z;

		} else if ( this.z > max.z ) {

			this.z = max.z;

		}

		if ( this.w < min.w ) {

			this.w = min.w;

		} else if ( this.w > max.w ) {

			this.w = max.w;

		}

		return this;

	},

	negate: function() {

		return this.multiplyScalar( -1 );

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

	},

	lengthManhattan: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

	},

	normalize: function () {

		return this.divideScalar( this.length() );

	},

	setLength: function ( l ) {

		var oldLength = this.length();
		
		if ( oldLength !== 0 && l !== oldLength  ) {

			this.multiplyScalar( l / oldLength );
		}

		return this;
		
	},

	lerpSelf: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;
		this.w += ( v.w - this.w ) * alpha;

		return this;

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

	},

	clone: function () {

		return new THREE.Vector4( this.x, this.y, this.z, this.w );

	},

	setAxisAngleFromQuaternion: function ( q ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

		// q is assumed to be normalized

		this.w = 2 * Math.acos( q.w );

		var s = Math.sqrt( 1 - q.w * q.w );

		if ( s < 0.0001 ) {

			 this.x = 1;
			 this.y = 0;
			 this.z = 0;

		} else {

			 this.x = q.x / s;
			 this.y = q.y / s;
			 this.z = q.z / s;

		}

		return this;

	},

	setAxisAngleFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var angle, x, y, z,		// variables for result
			epsilon = 0.01,		// margin to allow for rounding errors
			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

			te = m.elements,

			m11 = te[0], m12 = te[4], m13 = te[8],
			m21 = te[1], m22 = te[5], m23 = te[9],
			m31 = te[2], m32 = te[6], m33 = te[10];

		if ( ( Math.abs( m12 - m21 ) < epsilon )
		  && ( Math.abs( m13 - m31 ) < epsilon )
		  && ( Math.abs( m23 - m32 ) < epsilon ) ) {

			// singularity found
			// first check for identity matrix which must have +1 for all terms
			// in leading diagonal and zero in other terms

			if ( ( Math.abs( m12 + m21 ) < epsilon2 )
			  && ( Math.abs( m13 + m31 ) < epsilon2 )
			  && ( Math.abs( m23 + m32 ) < epsilon2 )
			  && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

				// this singularity is identity matrix so angle = 0

				this.set( 1, 0, 0, 0 );

				return this; // zero angle, arbitrary axis

			}

			// otherwise this singularity is angle = 180

			angle = Math.PI;

			var xx = ( m11 + 1 ) / 2;
			var yy = ( m22 + 1 ) / 2;
			var zz = ( m33 + 1 ) / 2;
			var xy = ( m12 + m21 ) / 4;
			var xz = ( m13 + m31 ) / 4;
			var yz = ( m23 + m32 ) / 4;

			if ( ( xx > yy ) && ( xx > zz ) ) { // m11 is the largest diagonal term

				if ( xx < epsilon ) {

					x = 0;
					y = 0.707106781;
					z = 0.707106781;

				} else {

					x = Math.sqrt( xx );
					y = xy / x;
					z = xz / x;

				}

			} else if ( yy > zz ) { // m22 is the largest diagonal term

				if ( yy < epsilon ) {

					x = 0.707106781;
					y = 0;
					z = 0.707106781;

				} else {

					y = Math.sqrt( yy );
					x = xy / y;
					z = yz / y;

				}

			} else { // m33 is the largest diagonal term so base result on this

				if ( zz < epsilon ) {

					x = 0.707106781;
					y = 0.707106781;
					z = 0;

				} else {

					z = Math.sqrt( zz );
					x = xz / z;
					y = yz / z;

				}

			}

			this.set( x, y, z, angle );

			return this; // return 180 deg rotation

		}

		// as we have reached here there are no singularities so we can handle normally

		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )
						 + ( m13 - m31 ) * ( m13 - m31 )
						 + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

		if ( Math.abs( s ) < 0.001 ) s = 1;

		// prevent divide by zero, should not happen if matrix is orthogonal and should be
		// caught by singularity test above, but I've left it in just in case

		this.x = ( m32 - m23 ) / s;
		this.y = ( m13 - m31 ) / s;
		this.z = ( m21 - m12 ) / s;
		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

		return this;

	}

};/**
 * @author bhouston / http://exocortex.com
 */

THREE.Box2 = function ( min, max ) {

	this.min = min !== undefined ? min.clone() : new THREE.Vector2( Infinity, Infinity );
	this.max = max !== undefined ? max.clone() : new THREE.Vector2( -Infinity, -Infinity );

};

THREE.Box2.prototype = {

	constructor: THREE.Box2,

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromPoints: function ( points ) {

		if ( points.length > 0 ) {

			var point = points[ 0 ];

			this.min.copy( point );
			this.max.copy( point );

			for ( var i = 1, il = points.length; i < il; i ++ ) {

				point = points[ i ];

				if ( point.x < this.min.x ) {

					this.min.x = point.x;

				} else if ( point.x > this.max.x ) {

					this.max.x = point.x;

				}

				if ( point.y < this.min.y ) {

					this.min.y = point.y;

				} else if ( point.y > this.max.y ) {

					this.max.y = point.y;

				}

			}

		} else {

			this.makeEmpty();

		}

		return this;

	},

	setFromCenterAndSize: function ( center, size ) {

		var halfSize = THREE.Box2.__v1.copy( size ).multiplyScalar( 0.5 );
		this.min.copy( center ).subSelf( halfSize );
		this.max.copy( center ).addSelf( halfSize );

		return this;

	},

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = Infinity;
		this.max.x = this.max.y = -Infinity;

		return this;

	},

	empty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

	},

	center: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector2();
		return result.add( this.min, this.max ).multiplyScalar( 0.5 );

	},

	size: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector2();
		return result.sub( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.minSelf( point );
		this.max.maxSelf( point );

		return this;
	},

	expandByVector: function ( vector ) {

		this.min.subSelf( vector );
		this.max.addSelf( vector );

		return this;
	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( -scalar );
		this.max.addScalar( scalar );

		return this;
	},

	containsPoint: function ( point ) {

		if ( ( this.min.x <= point.x ) && ( point.x <= this.max.x ) &&
		     ( this.min.y <= point.y ) && ( point.y <= this.max.y ) ) {

			return true;

		}

		return false;

	},

	containsBox: function ( box ) {

		if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
		     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

			return true;

		}

		return false;

	},

	getParameter: function ( point ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		return new THREE.Vector2(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y )
		);

	},

	isIntersectionBox: function ( box ) {

		// using 6 splitting planes to rule out intersections.

		if ( ( box.max.x < this.min.x ) ||
		     ( box.min.x > this.max.x ) ||
		     ( box.max.y < this.min.y ) ||
		     ( box.min.y > this.max.y ) ) {

			return false;

		}

		return true;

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector2();
		return result.copy( point ).clampSelf( this.min, this.max );

	},

	distanceToPoint: function ( point ) {

		var clampedPoint = THREE.Box2.__v1.copy( point ).clampSelf( this.min, this.max );
		return clampedPoint.subSelf( point ).length();

	},

	intersect: function ( box ) {

		this.min.maxSelf( box.min );
		this.max.minSelf( box.max );

		return this;

	},

	union: function ( box ) {

		this.min.minSelf( box.min );
		this.max.maxSelf( box.max );

		return this;

	},

	translate: function ( offset ) {

		this.min.addSelf( offset );
		this.max.addSelf( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	},

	clone: function () {

		return new THREE.Box2().copy( this );

	}

};

THREE.Box2.__v1 = new THREE.Vector2();
/**
 * @author bhouston / http://exocortex.com
 */

THREE.Box3 = function ( min, max ) {

	this.min = min !== undefined ? min.clone() : new THREE.Vector3( Infinity, Infinity, Infinity );
	this.max = max !== undefined ? max.clone() : new THREE.Vector3( -Infinity, -Infinity, -Infinity );

};

THREE.Box3.prototype = {

	constructor: THREE.Box3,

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromPoints: function ( points ) {

		if ( points.length > 0 ) {

			var p = points[ 0 ];

			this.min.copy( p );
			this.max.copy( p );

			for ( var i = 1, il = points.length; i < il; i ++ ) {

				p = points[ i ];

				if ( p.x < this.min.x ) {

					this.min.x = p.x;

				} else if ( p.x > this.max.x ) {

					this.max.x = p.x;

				}

				if ( p.y < this.min.y ) {

					this.min.y = p.y;

				} else if ( p.y > this.max.y ) {

					this.max.y = p.y;

				}

				if ( p.z < this.min.z ) {

					this.min.z = p.z;

				} else if ( p.z > this.max.z ) {

					this.max.z = p.z;

				}

			}

		} else {

			this.makeEmpty();

		}

		return this;

	},

	setFromCenterAndSize: function ( center, size ) {

		var halfSize = THREE.Box3.__v1.copy( size ).multiplyScalar( 0.5 );

		this.min.copy( center ).subSelf( halfSize );
		this.max.copy( center ).addSelf( halfSize );

		return this;

	},

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = this.min.z = Infinity;
		this.max.x = this.max.y = this.max.z = -Infinity;

		return this;

	},

	empty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

	},

	center: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.add( this.min, this.max ).multiplyScalar( 0.5 );

	},

	size: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.sub( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.minSelf( point );
		this.max.maxSelf( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.subSelf( vector );
		this.max.addSelf( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( -scalar );
		this.max.addScalar( scalar );

		return this;

	},

	containsPoint: function ( point ) {

		if ( ( this.min.x <= point.x ) && ( point.x <= this.max.x ) &&
			 ( this.min.y <= point.y ) && ( point.y <= this.max.y ) &&
			 ( this.min.z <= point.z ) && ( point.z <= this.max.z ) ) {

			return true;

		}

		return false;

	},

	containsBox: function ( box ) {

		if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
			 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
			 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

			return true;

		}

		return false;

	},

	getParameter: function ( point ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		return new THREE.Vector3(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
			( point.z - this.min.z ) / ( this.max.z - this.min.z )
		);

	},

	isIntersectionBox: function ( box ) {

		// using 6 splitting planes to rule out intersections.

		if ( ( box.max.x < this.min.x ) || ( box.min.x > this.max.x ) ||
			 ( box.max.y < this.min.y ) || ( box.min.y > this.max.y ) ||
			 ( box.max.z < this.min.z ) || ( box.min.z > this.max.z ) ) {

			return false;

		}

		return true;

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return new THREE.Vector3().copy( point ).clampSelf( this.min, this.max );

	},

	distanceToPoint: function ( point ) {

		var clampedPoint = THREE.Box3.__v1.copy( point ).clampSelf( this.min, this.max );
		return clampedPoint.subSelf( point ).length();

	},

	getBoundingSphere: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Sphere();
		
		result.center = this.center();
		result.radius = this.size( THREE.Box3.__v0 ).length() * 0.5;;

		return result;

	},

	intersect: function ( box ) {

		this.min.maxSelf( box.min );
		this.max.minSelf( box.max );

		return this;

	},

	union: function ( box ) {

		this.min.minSelf( box.min );
		this.max.maxSelf( box.max );

		return this;

	},

	transform: function ( matrix ) {
		
		// NOTE: I am using a binary pattern to specify all 2^3 combinations below
		var newPoints = [
			matrix.multiplyVector3( THREE.Box3.__v0.set( this.min.x, this.min.y, this.min.z ) ), // 000
			matrix.multiplyVector3( THREE.Box3.__v1.set( this.min.x, this.min.y, this.max.z ) ), // 001
			matrix.multiplyVector3( THREE.Box3.__v2.set( this.min.x, this.max.y, this.min.z ) ), // 010
			matrix.multiplyVector3( THREE.Box3.__v3.set( this.min.x, this.max.y, this.max.z ) ), // 011
			matrix.multiplyVector3( THREE.Box3.__v4.set( this.max.x, this.min.y, this.min.z ) ), // 100
			matrix.multiplyVector3( THREE.Box3.__v5.set( this.max.x, this.min.y, this.max.z ) ), // 101
			matrix.multiplyVector3( THREE.Box3.__v6.set( this.max.x, this.max.y, this.min.z ) ), // 110
			matrix.multiplyVector3( THREE.Box3.__v7.set( this.max.x, this.max.y, this.max.z ) )  // 111
		];

		this.makeEmpty();
		this.setFromPoints( newPoints );

		return this;

	},

	translate: function ( offset ) {

		this.min.addSelf( offset );
		this.max.addSelf( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	},

	clone: function () {

		return new THREE.Box3().copy( this );

	}

};

THREE.Box3.__v0 = new THREE.Vector3();
THREE.Box3.__v1 = new THREE.Vector3();
THREE.Box3.__v2 = new THREE.Vector3();
THREE.Box3.__v3 = new THREE.Vector3();
THREE.Box3.__v4 = new THREE.Vector3();
THREE.Box3.__v5 = new THREE.Vector3();
THREE.Box3.__v6 = new THREE.Vector3();
THREE.Box3.__v7 = new THREE.Vector3();
/**
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Matrix3 = function () {

	this.elements = new Float32Array(9);

};

THREE.Matrix3.prototype = {

	constructor: THREE.Matrix3,

	multiplyVector3: function ( v ) {

		var te = this.elements;

		var vx = v.x, vy = v.y, vz = v.z;

		v.x = te[0] * vx + te[3] * vy + te[6] * vz;
		v.y = te[1] * vx + te[4] * vy + te[7] * vz;
		v.z = te[2] * vx + te[5] * vy + te[8] * vz;

		return v;

	},

	multiplyVector3Array: function ( a ) {

		var tmp = THREE.Matrix3.__v1;

		for ( var i = 0, il = a.length; i < il; i += 3 ) {

			tmp.x = a[ i ];
			tmp.y = a[ i + 1 ];
			tmp.z = a[ i + 2 ];

			this.multiplyVector3( tmp );

			a[ i ]     = tmp.x;
			a[ i + 1 ] = tmp.y;
			a[ i + 2 ] = tmp.z;

		}

		return a;

	},

	getInverse: function ( matrix ) {

		// input: THREE.Matrix4
		// ( based on http://code.google.com/p/webgl-mjs/ )

		var me = matrix.elements;

		var a11 =   me[10] * me[5] - me[6] * me[9];
		var a21 = - me[10] * me[1] + me[2] * me[9];
		var a31 =   me[6] * me[1] - me[2] * me[5];
		var a12 = - me[10] * me[4] + me[6] * me[8];
		var a22 =   me[10] * me[0] - me[2] * me[8];
		var a32 = - me[6] * me[0] + me[2] * me[4];
		var a13 =   me[9] * me[4] - me[5] * me[8];
		var a23 = - me[9] * me[0] + me[1] * me[8];
		var a33 =   me[5] * me[0] - me[1] * me[4];

		var det = me[0] * a11 + me[1] * a12 + me[2] * a13;

		// no inverse

		if ( det === 0 ) {

			console.warn( "Matrix3.getInverse(): determinant == 0" );

		}

		var idet = 1.0 / det;

		var m = this.elements;

		m[ 0 ] = idet * a11; m[ 1 ] = idet * a21; m[ 2 ] = idet * a31;
		m[ 3 ] = idet * a12; m[ 4 ] = idet * a22; m[ 5 ] = idet * a32;
		m[ 6 ] = idet * a13; m[ 7 ] = idet * a23; m[ 8 ] = idet * a33;

		return this;

	},


	transpose: function () {

		var tmp, m = this.elements;

		tmp = m[1]; m[1] = m[3]; m[3] = tmp;
		tmp = m[2]; m[2] = m[6]; m[6] = tmp;
		tmp = m[5]; m[5] = m[7]; m[7] = tmp;

		return this;

	},


	transposeIntoArray: function ( r ) {

		var m = this.elements;

		r[ 0 ] = m[ 0 ];
		r[ 1 ] = m[ 3 ];
		r[ 2 ] = m[ 6 ];
		r[ 3 ] = m[ 1 ];
		r[ 4 ] = m[ 4 ];
		r[ 5 ] = m[ 7 ];
		r[ 6 ] = m[ 2 ];
		r[ 7 ] = m[ 5 ];
		r[ 8 ] = m[ 8 ];

		return this;

	}

};

THREE.Matrix3.__v1 = new THREE.Vector3();/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 */


THREE.Matrix4 = function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

	this.elements = new Float32Array( 16 );

	this.set(

		( n11 !== undefined ) ? n11 : 1, n12 || 0, n13 || 0, n14 || 0,
		n21 || 0, ( n22 !== undefined ) ? n22 : 1, n23 || 0, n24 || 0,
		n31 || 0, n32 || 0, ( n33 !== undefined ) ? n33 : 1, n34 || 0,
		n41 || 0, n42 || 0, n43 || 0, ( n44 !== undefined ) ? n44 : 1

	);

};

THREE.Matrix4.prototype = {

	constructor: THREE.Matrix4,

	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		var te = this.elements;

		te[0] = n11; te[4] = n12; te[8] = n13; te[12] = n14;
		te[1] = n21; te[5] = n22; te[9] = n23; te[13] = n24;
		te[2] = n31; te[6] = n32; te[10] = n33; te[14] = n34;
		te[3] = n41; te[7] = n42; te[11] = n43; te[15] = n44;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	copy: function ( m ) {

		var me = m.elements;

		this.set(

			me[0], me[4], me[8], me[12],
			me[1], me[5], me[9], me[13],
			me[2], me[6], me[10], me[14],
			me[3], me[7], me[11], me[15]

		);

		return this;

	},

	setRotationFromEuler: function ( v, order ) {

		var te = this.elements;

		var x = v.x, y = v.y, z = v.z;
		var a = Math.cos( x ), b = Math.sin( x );
		var c = Math.cos( y ), d = Math.sin( y );
		var e = Math.cos( z ), f = Math.sin( z );

		if ( order === undefined || order === 'XYZ' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[0] = c * e;
			te[4] = - c * f;
			te[8] = d;

			te[1] = af + be * d;
			te[5] = ae - bf * d;
			te[9] = - b * c;

			te[2] = bf - ae * d;
			te[6] = be + af * d;
			te[10] = a * c;

		} else if ( order === 'YXZ' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[0] = ce + df * b;
			te[4] = de * b - cf;
			te[8] = a * d;

			te[1] = a * f;
			te[5] = a * e;
			te[9] = - b;

			te[2] = cf * b - de;
			te[6] = df + ce * b;
			te[10] = a * c;

		} else if ( order === 'ZXY' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[0] = ce - df * b;
			te[4] = - a * f;
			te[8] = de + cf * b;

			te[1] = cf + de * b;
			te[5] = a * e;
			te[9] = df - ce * b;

			te[2] = - a * d;
			te[6] = b;
			te[10] = a * c;

		} else if ( order === 'ZYX' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[0] = c * e;
			te[4] = be * d - af;
			te[8] = ae * d + bf;

			te[1] = c * f;
			te[5] = bf * d + ae;
			te[9] = af * d - be;

			te[2] = - d;
			te[6] = b * c;
			te[10] = a * c;

		} else if ( order === 'YZX' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[0] = c * e;
			te[4] = bd - ac * f;
			te[8] = bc * f + ad;

			te[1] = f;
			te[5] = a * e;
			te[9] = - b * e;

			te[2] = - d * e;
			te[6] = ad * f + bc;
			te[10] = ac - bd * f;

		} else if ( order === 'XZY' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[0] = c * e;
			te[4] = - f;
			te[8] = d * e;

			te[1] = ac * f + bd;
			te[5] = a * e;
			te[9] = ad * f - bc;

			te[2] = bc * f - ad;
			te[6] = b * e;
			te[10] = bd * f + ac;

		}

		return this;

	},

	setRotationFromQuaternion: function ( q ) {

		var te = this.elements;

		var x = q.x, y = q.y, z = q.z, w = q.w;
		var x2 = x + x, y2 = y + y, z2 = z + z;
		var xx = x * x2, xy = x * y2, xz = x * z2;
		var yy = y * y2, yz = y * z2, zz = z * z2;
		var wx = w * x2, wy = w * y2, wz = w * z2;

		te[0] = 1 - ( yy + zz );
		te[4] = xy - wz;
		te[8] = xz + wy;

		te[1] = xy + wz;
		te[5] = 1 - ( xx + zz );
		te[9] = yz - wx;

		te[2] = xz - wy;
		te[6] = yz + wx;
		te[10] = 1 - ( xx + yy );

		return this;

	},

	lookAt: function ( eye, target, up ) {

		var te = this.elements;

		var x = THREE.Matrix4.__v1;
		var y = THREE.Matrix4.__v2;
		var z = THREE.Matrix4.__v3;

		z.sub( eye, target ).normalize();

		if ( z.length() === 0 ) {

			z.z = 1;

		}

		x.cross( up, z ).normalize();

		if ( x.length() === 0 ) {

			z.x += 0.0001;
			x.cross( up, z ).normalize();

		}

		y.cross( z, x );


		te[0] = x.x; te[4] = y.x; te[8] = z.x;
		te[1] = x.y; te[5] = y.y; te[9] = z.y;
		te[2] = x.z; te[6] = y.z; te[10] = z.z;

		return this;

	},

	multiply: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
		var a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
		var a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
		var a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];

		var b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
		var b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
		var b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
		var b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];

		te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	},

	multiplySelf: function ( m ) {

		return this.multiply( this, m );

	},

	multiplyToArray: function ( a, b, r ) {

		var te = this.elements;

		this.multiply( a, b );

		r[ 0 ] = te[0]; r[ 1 ] = te[1]; r[ 2 ] = te[2]; r[ 3 ] = te[3];
		r[ 4 ] = te[4]; r[ 5 ] = te[5]; r[ 6 ] = te[6]; r[ 7 ] = te[7];
		r[ 8 ]  = te[8]; r[ 9 ]  = te[9]; r[ 10 ] = te[10]; r[ 11 ] = te[11];
		r[ 12 ] = te[12]; r[ 13 ] = te[13]; r[ 14 ] = te[14]; r[ 15 ] = te[15];

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[0] *= s; te[4] *= s; te[8] *= s; te[12] *= s;
		te[1] *= s; te[5] *= s; te[9] *= s; te[13] *= s;
		te[2] *= s; te[6] *= s; te[10] *= s; te[14] *= s;
		te[3] *= s; te[7] *= s; te[11] *= s; te[15] *= s;

		return this;

	},

	multiplyVector3: function ( v ) {

		var te = this.elements;

		var vx = v.x, vy = v.y, vz = v.z;
		var d = 1 / ( te[3] * vx + te[7] * vy + te[11] * vz + te[15] );

		v.x = ( te[0] * vx + te[4] * vy + te[8] * vz + te[12] ) * d;
		v.y = ( te[1] * vx + te[5] * vy + te[9] * vz + te[13] ) * d;
		v.z = ( te[2] * vx + te[6] * vy + te[10] * vz + te[14] ) * d;

		return v;

	},

	multiplyVector4: function ( v ) {

		var te = this.elements;
		var vx = v.x, vy = v.y, vz = v.z, vw = v.w;

		v.x = te[0] * vx + te[4] * vy + te[8] * vz + te[12] * vw;
		v.y = te[1] * vx + te[5] * vy + te[9] * vz + te[13] * vw;
		v.z = te[2] * vx + te[6] * vy + te[10] * vz + te[14] * vw;
		v.w = te[3] * vx + te[7] * vy + te[11] * vz + te[15] * vw;

		return v;

	},

	multiplyVector3Array: function ( a ) {

		var tmp = THREE.Matrix4.__v1;

		for ( var i = 0, il = a.length; i < il; i += 3 ) {

			tmp.x = a[ i ];
			tmp.y = a[ i + 1 ];
			tmp.z = a[ i + 2 ];

			this.multiplyVector3( tmp );

			a[ i ]     = tmp.x;
			a[ i + 1 ] = tmp.y;
			a[ i + 2 ] = tmp.z;

		}

		return a;

	},

	rotateAxis: function ( v ) {

		var te = this.elements;
		var vx = v.x, vy = v.y, vz = v.z;

		v.x = vx * te[0] + vy * te[4] + vz * te[8];
		v.y = vx * te[1] + vy * te[5] + vz * te[9];
		v.z = vx * te[2] + vy * te[6] + vz * te[10];

		v.normalize();

		return v;

	},

	crossVector: function ( a ) {

		var te = this.elements;
		var v = new THREE.Vector4();

		v.x = te[0] * a.x + te[4] * a.y + te[8] * a.z + te[12] * a.w;
		v.y = te[1] * a.x + te[5] * a.y + te[9] * a.z + te[13] * a.w;
		v.z = te[2] * a.x + te[6] * a.y + te[10] * a.z + te[14] * a.w;

		v.w = ( a.w ) ? te[3] * a.x + te[7] * a.y + te[11] * a.z + te[15] * a.w : 1;

		return v;

	},

	determinant: function () {

		var te = this.elements;

		var n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
		var n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
		var n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
		var n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n14 * n23 * n32 * n41-
			n13 * n24 * n32 * n41-
			n14 * n22 * n33 * n41+
			n12 * n24 * n33 * n41+

			n13 * n22 * n34 * n41-
			n12 * n23 * n34 * n41-
			n14 * n23 * n31 * n42+
			n13 * n24 * n31 * n42+

			n14 * n21 * n33 * n42-
			n11 * n24 * n33 * n42-
			n13 * n21 * n34 * n42+
			n11 * n23 * n34 * n42+

			n14 * n22 * n31 * n43-
			n12 * n24 * n31 * n43-
			n14 * n21 * n32 * n43+
			n11 * n24 * n32 * n43+

			n12 * n21 * n34 * n43-
			n11 * n22 * n34 * n43-
			n13 * n22 * n31 * n44+
			n12 * n23 * n31 * n44+

			n13 * n21 * n32 * n44-
			n11 * n23 * n32 * n44-
			n12 * n21 * n33 * n44+
			n11 * n22 * n33 * n44
		);

	},

	transpose: function () {

		var te = this.elements;
		var tmp;

		tmp = te[1]; te[1] = te[4]; te[4] = tmp;
		tmp = te[2]; te[2] = te[8]; te[8] = tmp;
		tmp = te[6]; te[6] = te[9]; te[9] = tmp;

		tmp = te[3]; te[3] = te[12]; te[12] = tmp;
		tmp = te[7]; te[7] = te[13]; te[13] = tmp;
		tmp = te[11]; te[11] = te[14]; te[14] = tmp;

		return this;

	},

	flattenToArray: function ( flat ) {

		var te = this.elements;
		flat[ 0 ] = te[0]; flat[ 1 ] = te[1]; flat[ 2 ] = te[2]; flat[ 3 ] = te[3];
		flat[ 4 ] = te[4]; flat[ 5 ] = te[5]; flat[ 6 ] = te[6]; flat[ 7 ] = te[7];
		flat[ 8 ]  = te[8]; flat[ 9 ]  = te[9]; flat[ 10 ] = te[10]; flat[ 11 ] = te[11];
		flat[ 12 ] = te[12]; flat[ 13 ] = te[13]; flat[ 14 ] = te[14]; flat[ 15 ] = te[15];

		return flat;

	},

	flattenToArrayOffset: function( flat, offset ) {

		var te = this.elements;
		flat[ offset ] = te[0];
		flat[ offset + 1 ] = te[1];
		flat[ offset + 2 ] = te[2];
		flat[ offset + 3 ] = te[3];

		flat[ offset + 4 ] = te[4];
		flat[ offset + 5 ] = te[5];
		flat[ offset + 6 ] = te[6];
		flat[ offset + 7 ] = te[7];

		flat[ offset + 8 ]  = te[8];
		flat[ offset + 9 ]  = te[9];
		flat[ offset + 10 ] = te[10];
		flat[ offset + 11 ] = te[11];

		flat[ offset + 12 ] = te[12];
		flat[ offset + 13 ] = te[13];
		flat[ offset + 14 ] = te[14];
		flat[ offset + 15 ] = te[15];

		return flat;

	},

	getPosition: function () {

		var te = this.elements;
		return THREE.Matrix4.__v1.set( te[12], te[13], te[14] );

	},

	setPosition: function ( v ) {

		var te = this.elements;

		te[12] = v.x;
		te[13] = v.y;
		te[14] = v.z;

		return this;

	},

	getColumnX: function () {

		var te = this.elements;
		return THREE.Matrix4.__v1.set( te[0], te[1], te[2] );

	},

	getColumnY: function () {

		var te = this.elements;
		return THREE.Matrix4.__v1.set( te[4], te[5], te[6] );

	},

	getColumnZ: function() {

		var te = this.elements;
		return THREE.Matrix4.__v1.set( te[8], te[9], te[10] );

	},

	getInverse: function ( m ) {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		var te = this.elements;
		var me = m.elements;

		var n11 = me[0], n12 = me[4], n13 = me[8], n14 = me[12];
		var n21 = me[1], n22 = me[5], n23 = me[9], n24 = me[13];
		var n31 = me[2], n32 = me[6], n33 = me[10], n34 = me[14];
		var n41 = me[3], n42 = me[7], n43 = me[11], n44 = me[15];

		te[0] = n23*n34*n42 - n24*n33*n42 + n24*n32*n43 - n22*n34*n43 - n23*n32*n44 + n22*n33*n44;
		te[4] = n14*n33*n42 - n13*n34*n42 - n14*n32*n43 + n12*n34*n43 + n13*n32*n44 - n12*n33*n44;
		te[8] = n13*n24*n42 - n14*n23*n42 + n14*n22*n43 - n12*n24*n43 - n13*n22*n44 + n12*n23*n44;
		te[12] = n14*n23*n32 - n13*n24*n32 - n14*n22*n33 + n12*n24*n33 + n13*n22*n34 - n12*n23*n34;
		te[1] = n24*n33*n41 - n23*n34*n41 - n24*n31*n43 + n21*n34*n43 + n23*n31*n44 - n21*n33*n44;
		te[5] = n13*n34*n41 - n14*n33*n41 + n14*n31*n43 - n11*n34*n43 - n13*n31*n44 + n11*n33*n44;
		te[9] = n14*n23*n41 - n13*n24*n41 - n14*n21*n43 + n11*n24*n43 + n13*n21*n44 - n11*n23*n44;
		te[13] = n13*n24*n31 - n14*n23*n31 + n14*n21*n33 - n11*n24*n33 - n13*n21*n34 + n11*n23*n34;
		te[2] = n22*n34*n41 - n24*n32*n41 + n24*n31*n42 - n21*n34*n42 - n22*n31*n44 + n21*n32*n44;
		te[6] = n14*n32*n41 - n12*n34*n41 - n14*n31*n42 + n11*n34*n42 + n12*n31*n44 - n11*n32*n44;
		te[10] = n12*n24*n41 - n14*n22*n41 + n14*n21*n42 - n11*n24*n42 - n12*n21*n44 + n11*n22*n44;
		te[14] = n14*n22*n31 - n12*n24*n31 - n14*n21*n32 + n11*n24*n32 + n12*n21*n34 - n11*n22*n34;
		te[3] = n23*n32*n41 - n22*n33*n41 - n23*n31*n42 + n21*n33*n42 + n22*n31*n43 - n21*n32*n43;
		te[7] = n12*n33*n41 - n13*n32*n41 + n13*n31*n42 - n11*n33*n42 - n12*n31*n43 + n11*n32*n43;
		te[11] = n13*n22*n41 - n12*n23*n41 - n13*n21*n42 + n11*n23*n42 + n12*n21*n43 - n11*n22*n43;
		te[15] = n12*n23*n31 - n13*n22*n31 + n13*n21*n32 - n11*n23*n32 - n12*n21*n33 + n11*n22*n33;
		this.multiplyScalar( 1 / m.determinant() );

		return this;

	},

	compose: function ( translation, rotation, scale ) {

		var te = this.elements;
		var mRotation = THREE.Matrix4.__m1;
		var mScale = THREE.Matrix4.__m2;

		mRotation.identity();
		mRotation.setRotationFromQuaternion( rotation );

		mScale.makeScale( scale );

		this.multiply( mRotation, mScale );

		te[12] = translation.x;
		te[13] = translation.y;
		te[14] = translation.z;

		return this;

	},

	decompose: function ( translation, rotation, scale ) {

		var te = this.elements;

		// grab the axis vectors
		var x = THREE.Matrix4.__v1;
		var y = THREE.Matrix4.__v2;
		var z = THREE.Matrix4.__v3;

		x.set( te[0], te[1], te[2] );
		y.set( te[4], te[5], te[6] );
		z.set( te[8], te[9], te[10] );

		translation = ( translation instanceof THREE.Vector3 ) ? translation : new THREE.Vector3();
		rotation = ( rotation instanceof THREE.Quaternion ) ? rotation : new THREE.Quaternion();
		scale = ( scale instanceof THREE.Vector3 ) ? scale : new THREE.Vector3();

		scale.x = x.length();
		scale.y = y.length();
		scale.z = z.length();

		translation.x = te[12];
		translation.y = te[13];
		translation.z = te[14];

		// scale the rotation part

		var matrix = THREE.Matrix4.__m1;

		matrix.copy( this );

		matrix.elements[0] /= scale.x;
		matrix.elements[1] /= scale.x;
		matrix.elements[2] /= scale.x;

		matrix.elements[4] /= scale.y;
		matrix.elements[5] /= scale.y;
		matrix.elements[6] /= scale.y;

		matrix.elements[8] /= scale.z;
		matrix.elements[9] /= scale.z;
		matrix.elements[10] /= scale.z;

		rotation.setFromRotationMatrix( matrix );

		return [ translation, rotation, scale ];

	},

	extractPosition: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[12] = me[12];
		te[13] = me[13];
		te[14] = me[14];

		return this;

	},

	extractRotation: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		var vector = THREE.Matrix4.__v1;

		var scaleX = 1 / vector.set( me[0], me[1], me[2] ).length();
		var scaleY = 1 / vector.set( me[4], me[5], me[6] ).length();
		var scaleZ = 1 / vector.set( me[8], me[9], me[10] ).length();

		te[0] = me[0] * scaleX;
		te[1] = me[1] * scaleX;
		te[2] = me[2] * scaleX;

		te[4] = me[4] * scaleY;
		te[5] = me[5] * scaleY;
		te[6] = me[6] * scaleY;

		te[8] = me[8] * scaleZ;
		te[9] = me[9] * scaleZ;
		te[10] = me[10] * scaleZ;

		return this;

	},

	//

	translate: function ( v ) {

		var te = this.elements;
		var x = v.x, y = v.y, z = v.z;

		te[12] = te[0] * x + te[4] * y + te[8] * z + te[12];
		te[13] = te[1] * x + te[5] * y + te[9] * z + te[13];
		te[14] = te[2] * x + te[6] * y + te[10] * z + te[14];
		te[15] = te[3] * x + te[7] * y + te[11] * z + te[15];

		return this;

	},

	rotateX: function ( angle ) {

		var te = this.elements;
		var m12 = te[4];
		var m22 = te[5];
		var m32 = te[6];
		var m42 = te[7];
		var m13 = te[8];
		var m23 = te[9];
		var m33 = te[10];
		var m43 = te[11];
		var c = Math.cos( angle );
		var s = Math.sin( angle );

		te[4] = c * m12 + s * m13;
		te[5] = c * m22 + s * m23;
		te[6] = c * m32 + s * m33;
		te[7] = c * m42 + s * m43;

		te[8] = c * m13 - s * m12;
		te[9] = c * m23 - s * m22;
		te[10] = c * m33 - s * m32;
		te[11] = c * m43 - s * m42;

		return this;

	},

	rotateY: function ( angle ) {

		var te = this.elements;
		var m11 = te[0];
		var m21 = te[1];
		var m31 = te[2];
		var m41 = te[3];
		var m13 = te[8];
		var m23 = te[9];
		var m33 = te[10];
		var m43 = te[11];
		var c = Math.cos( angle );
		var s = Math.sin( angle );

		te[0] = c * m11 - s * m13;
		te[1] = c * m21 - s * m23;
		te[2] = c * m31 - s * m33;
		te[3] = c * m41 - s * m43;

		te[8] = c * m13 + s * m11;
		te[9] = c * m23 + s * m21;
		te[10] = c * m33 + s * m31;
		te[11] = c * m43 + s * m41;

		return this;

	},

	rotateZ: function ( angle ) {

		var te = this.elements;
		var m11 = te[0];
		var m21 = te[1];
		var m31 = te[2];
		var m41 = te[3];
		var m12 = te[4];
		var m22 = te[5];
		var m32 = te[6];
		var m42 = te[7];
		var c = Math.cos( angle );
		var s = Math.sin( angle );

		te[0] = c * m11 + s * m12;
		te[1] = c * m21 + s * m22;
		te[2] = c * m31 + s * m32;
		te[3] = c * m41 + s * m42;

		te[4] = c * m12 - s * m11;
		te[5] = c * m22 - s * m21;
		te[6] = c * m32 - s * m31;
		te[7] = c * m42 - s * m41;

		return this;

	},

	rotateByAxis: function ( axis, angle ) {

		var te = this.elements;

		// optimize by checking axis

		if ( axis.x === 1 && axis.y === 0 && axis.z === 0 ) {

			return this.rotateX( angle );

		} else if ( axis.x === 0 && axis.y === 1 && axis.z === 0 ) {

			return this.rotateY( angle );

		} else if ( axis.x === 0 && axis.y === 0 && axis.z === 1 ) {

			return this.rotateZ( angle );

		}

		var x = axis.x, y = axis.y, z = axis.z;
		var n = Math.sqrt(x * x + y * y + z * z);

		x /= n;
		y /= n;
		z /= n;

		var xx = x * x, yy = y * y, zz = z * z;
		var c = Math.cos( angle );
		var s = Math.sin( angle );
		var oneMinusCosine = 1 - c;
		var xy = x * y * oneMinusCosine;
		var xz = x * z * oneMinusCosine;
		var yz = y * z * oneMinusCosine;
		var xs = x * s;
		var ys = y * s;
		var zs = z * s;

		var r11 = xx + (1 - xx) * c;
		var r21 = xy + zs;
		var r31 = xz - ys;
		var r12 = xy - zs;
		var r22 = yy + (1 - yy) * c;
		var r32 = yz + xs;
		var r13 = xz + ys;
		var r23 = yz - xs;
		var r33 = zz + (1 - zz) * c;

		var m11 = te[0], m21 = te[1], m31 = te[2], m41 = te[3];
		var m12 = te[4], m22 = te[5], m32 = te[6], m42 = te[7];
		var m13 = te[8], m23 = te[9], m33 = te[10], m43 = te[11];
		var m14 = te[12], m24 = te[13], m34 = te[14], m44 = te[15];

		te[0] = r11 * m11 + r21 * m12 + r31 * m13;
		te[1] = r11 * m21 + r21 * m22 + r31 * m23;
		te[2] = r11 * m31 + r21 * m32 + r31 * m33;
		te[3] = r11 * m41 + r21 * m42 + r31 * m43;

		te[4] = r12 * m11 + r22 * m12 + r32 * m13;
		te[5] = r12 * m21 + r22 * m22 + r32 * m23;
		te[6] = r12 * m31 + r22 * m32 + r32 * m33;
		te[7] = r12 * m41 + r22 * m42 + r32 * m43;

		te[8] = r13 * m11 + r23 * m12 + r33 * m13;
		te[9] = r13 * m21 + r23 * m22 + r33 * m23;
		te[10] = r13 * m31 + r23 * m32 + r33 * m33;
		te[11] = r13 * m41 + r23 * m42 + r33 * m43;

		return this;

	},

	scale: function ( v ) {

		var te = this.elements;
		var x = v.x, y = v.y, z = v.z;

		te[0] *= x; te[4] *= y; te[8] *= z;
		te[1] *= x; te[5] *= y; te[9] *= z;
		te[2] *= x; te[6] *= y; te[10] *= z;
		te[3] *= x; te[7] *= y; te[11] *= z;

		return this;

	},

	getMaxScaleOnAxis: function () {

		var te = this.elements;

		var scaleXSq =  te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
		var scaleYSq =  te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
		var scaleZSq =  te[8] * te[8] + te[9] * te[9] + te[10] * te[10];

		return Math.sqrt( Math.max( scaleXSq, Math.max( scaleYSq, scaleZSq ) ) );

	},

	//

	makeTranslation: function ( offset ) {

		this.set(

			1, 0, 0, offset.x,
			0, 1, 0, offset.y,
			0, 0, 1, offset.z,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationX: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0,  0, 0,
			0, c, -s, 0,
			0, s,  c, 0,
			0, 0,  0, 1

		);

		return this;

	},

	makeRotationY: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			-s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	},

	makeRotationZ: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, -s, 0, 0,
			s,  c, 0, 0,
			0,  0, 1, 0,
			0,  0, 0, 1

		);

		return this;

	},

	makeRotationAxis: function ( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		var c = Math.cos( angle );
		var s = Math.sin( angle );
		var t = 1 - c;
		var x = axis.x, y = axis.y, z = axis.z;
		var tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		 return this;

	},

	makeScale: function ( factor ) {

		this.set(

			factor.x, 0, 0, 0,
			0, factor.y, 0, 0,
			0, 0, factor.z, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeFrustum: function ( left, right, bottom, top, near, far ) {

		var te = this.elements;
		var x = 2 * near / ( right - left );
		var y = 2 * near / ( top - bottom );

		var a = ( right + left ) / ( right - left );
		var b = ( top + bottom ) / ( top - bottom );
		var c = - ( far + near ) / ( far - near );
		var d = - 2 * far * near / ( far - near );

		te[0] = x;  te[4] = 0;  te[8] = a;   te[12] = 0;
		te[1] = 0;  te[5] = y;  te[9] = b;   te[13] = 0;
		te[2] = 0;  te[6] = 0;  te[10] = c;   te[14] = d;
		te[3] = 0;  te[7] = 0;  te[11] = - 1; te[15] = 0;

		return this;

	},

	makePerspective: function ( fov, aspect, near, far ) {

		var ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );
		var ymin = - ymax;
		var xmin = ymin * aspect;
		var xmax = ymax * aspect;

		return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

	},

	makeOrthographic: function ( left, right, top, bottom, near, far ) {

		var te = this.elements;
		var w = right - left;
		var h = top - bottom;
		var p = far - near;

		var x = ( right + left ) / w;
		var y = ( top + bottom ) / h;
		var z = ( far + near ) / p;

		te[0] = 2 / w; te[4] = 0;     te[8] = 0;      te[12] = -x;
		te[1] = 0;     te[5] = 2 / h; te[9] = 0;      te[13] = -y;
		te[2] = 0;     te[6] = 0;     te[10] = -2 / p; te[14] = -z;
		te[3] = 0;     te[7] = 0;     te[11] = 0;      te[15] = 1;

		return this;

	},


	clone: function () {

		var te = this.elements;

		return new THREE.Matrix4(

			te[0], te[4], te[8], te[12],
			te[1], te[5], te[9], te[13],
			te[2], te[6], te[10], te[14],
			te[3], te[7], te[11], te[15]

		);

	}

};

THREE.Matrix4.__v1 = new THREE.Vector3();
THREE.Matrix4.__v2 = new THREE.Vector3();
THREE.Matrix4.__v3 = new THREE.Vector3();

THREE.Matrix4.__m1 = new THREE.Matrix4();
THREE.Matrix4.__m2 = new THREE.Matrix4();
/**
 * @author bhouston / http://exocortex.com
 */

THREE.Ray = function ( origin, direction ) {


	this.origin = origin !== undefined ? origin.clone() : new THREE.Vector3();
	this.direction = direction !== undefined ? direction.clone() : new THREE.Vector3();

};

THREE.Ray.prototype = {

	constructor: THREE.Ray,

	set: function ( origin, direction ) {

		this.origin.copy( origin );
		this.direction.copy( direction );

		return this;

	},

	copy: function ( ray ) {

		this.origin.copy( ray.origin );
		this.direction.copy( ray.direction );

		return this;

	},

	at: function( t, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();

		return result.copy( this.direction ).multiplyScalar( t ).addSelf( this.origin );

	},

	recastSelf: function ( t ) {

		this.origin.copy( this.at( t, THREE.Ray.__v1 ) );

		return this;

	},

	closestPointToPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		result.sub( point, this.origin );
		var directionDistance = result.dot( this.direction );

		return result.copy( this.direction ).multiplyScalar( directionDistance ).addSelf( this.origin );

	},

	distanceToPoint: function ( point ) {

		var directionDistance = THREE.Ray.__v1.sub( point, this.origin ).dot( this.direction );		
		THREE.Ray.__v1.copy( this.direction ).multiplyScalar( directionDistance ).addSelf( this.origin );

		return THREE.Ray.__v1.distanceTo( point );

	},

	isIntersectionSphere: function( sphere ) {

		return ( this.distanceToPoint( sphere.center ) <= sphere.radius );

	},

	isIntersectionPlane: function ( plane ) {

		// check if the line and plane are non-perpendicular, if they
		// eventually they will intersect.
		var denominator = plane.normal.dot( this.direction );
		if ( denominator != 0 ) {

			return true;

		}

		// line is coplanar, return origin
		if( plane.distanceToPoint( this.origin ) == 0 ) {

			return true;

		}

		return false;

	},

	distanceToPlane: function ( plane ) {

		var denominator = plane.normal.dot( this.direction );
		if ( denominator == 0 ) {

			// line is coplanar, return origin
			if( plane.distanceToPoint( this.origin ) == 0 ) {

				return 0;

			}

			// Unsure if this is the correct method to handle this case.
			return undefined;

		}

		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

		return t;

	},

	intersectPlane: function ( plane, optionalTarget ) {

		var t = this.distanceToPlane( plane );

		if( t === undefined ) {

			return undefined;
		}

		return this.at( t, optionalTarget );

	},

	transform: function ( matrix4 ) {

		this.direction = matrix4.multiplyVector3( this.direction.addSelf( this.origin ) );
		this.origin = matrix4.multiplyVector3( this.origin );
		this.direction.subSelf( this.origin );

		return this;
	},

	equals: function ( ray ) {

		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

	},

	clone: function () {

		return new THREE.Ray().copy( this );

	}

};

THREE.Ray.__v1 = new THREE.Vector3();
THREE.Ray.__v2 = new THREE.Vector3();/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / http://exocortex.com
 */

THREE.Frustum = function ( ) {

	this.planes = [

		new THREE.Plane(),
		new THREE.Plane(),
		new THREE.Plane(),
		new THREE.Plane(),
		new THREE.Plane(),
		new THREE.Plane()

	];

};

THREE.Frustum.prototype.setFromMatrix = function ( m ) {

	var planes = this.planes;

	var me = m.elements;
	var me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
	var me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
	var me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
	var me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];

	planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 );
	planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 );
	planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 );
	planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 );
	planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 );
	planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 );

	for ( var i = 0; i < 6; i ++ ) {

		planes[ i ].normalize();

	}

};

THREE.Frustum.prototype.contains = function ( object ) {

	var planes = this.planes;

	var matrix = object.matrixWorld;
	var matrixPosition = matrix.getPosition();
	var radius = - object.geometry.boundingSphere.radius * matrix.getMaxScaleOnAxis();

	var distance = 0.0;

	for ( var i = 0; i < 6; i ++ ) {

		distance = planes[ i ].distanceToPoint( matrixPosition );
		if ( distance <= radius ) return false;

	}

	return true;

};

THREE.Frustum.__v1 = new THREE.Vector3();
/**
 * @author bhouston / http://exocortex.com
 */

THREE.Plane = function ( normal, constant ) {

	this.normal = normal !== undefined ? normal.clone() : new THREE.Vector3( 1, 0, 0 );
	this.constant = constant !== undefined ? constant : 0;

};

THREE.Plane.prototype = {

	constructor: THREE.Plane,

	set: function ( normal, constant ) {

		this.normal.copy( normal );
		this.constant = constant;

		return this;

	},

	setComponents: function ( x, y, z, w ) {

		this.normal.set( x, y, z );
		this.constant = w;

		return this;

	},

	setFromNormalAndCoplanarPoint: function ( normal, point ) {

		this.normal.copy( normal ).normalize();
		this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

		return this;

	},

	setFromCoplanarPoints: function ( a, b, c ) {

		var normal = THREE.Plane.__v1.sub( c, b ).crossSelf(
					 THREE.Plane.__v2.sub( a, b ) ).normalize();

		// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

		this.setFromNormalAndCoplanarPoint( normal, a );

		return this;

	},

	copy: function ( plane ) {

		this.normal.copy( plane.normal );
		this.constant = plane.constant;

		return this;

	},

	normalize: function () {

		// Note: will lead to a divide by zero if the plane is invalid.

		var inverseNormalLength = 1.0 / this.normal.length();
		this.normal.multiplyScalar( inverseNormalLength );
		this.constant *= inverseNormalLength;

		return this;

	},

	distanceToPoint: function ( point ) {

		return this.normal.dot( point ) + this.constant;

	},

	distanceToSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) - sphere.radius;

	},

	projectPoint: function ( point, optionalTarget ) {

		return this.orthoPoint( point, optionalTarget ).subSelf( point ).negate();

	},

	orthoPoint: function ( point, optionalTarget ) {

		var perpendicularMagnitude = this.distanceToPoint( point );

		var result = optionalTarget || new THREE.Vector3();
		return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

	},

	isIntersectionLine: function ( startPoint, endPoint ) {

		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

		var startSign = this.distanceToPoint( startPoint );
		var endSign = this.distanceToPoint( endPoint );

		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

	},

	coplanarPoint: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.copy( this.normal ).multiplyScalar( - this.constant );

	},

	transform: function( matrix, optionalNormalMatrix ) {

		var newNormal = THREE.Plane.__v1, newCoplanarPoint = THREE.Plane.__v2;

		// compute new normal based on theory here:
		// http://www.songho.ca/opengl/gl_normaltransform.html
		optionalNormalMatrix = optionalNormalMatrix || new THREE.Matrix3().getInverse( matrix ).transpose();
		newNormal = optionalNormalMatrix.multiplyVector3( newNormal.copy( this.normal ) );

		newCoplanarPoint = this.coplanarPoint( newCoplanarPoint );
		newCoplanarPoint = matrix.multiplyVector3( newCoplanarPoint );

		this.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );

		return this;
		
	},

	translate: function ( offset ) {

		this.constant = this.constant - offset.dot( this.normal );

		return this;

	},

	equals: function ( plane ) {

		return plane.normal.equals( this.normal ) && ( plane.constant == this.constant );

	},

	clone: function () {

		return new THREE.Plane().copy( this );

	}

};

THREE.Plane.__vZero = new THREE.Vector3( 0, 0, 0 );
THREE.Plane.__v1 = new THREE.Vector3();
THREE.Plane.__v2 = new THREE.Vector3();
/**
 * @author bhouston / http://exocortex.com
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Sphere = function ( center, radius ) {

	this.center = center === undefined ? new THREE.Vector3() : center.clone();
	this.radius = radius === undefined ? 0 : radius;

};

THREE.Sphere.prototype = {

	constructor: THREE.Sphere,

	set: function ( center, radius ) {

		this.center.copy( center );
		this.radius = radius;

		return this;
	},

	setFromCenterAndPoints: function ( center, points ) {

		var maxRadiusSq = 0;

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			var radiusSq = center.distanceToSquared( points[ i ] );
			maxRadiusSq = Math.max( maxRadiusSq, radiusSq );

		}

		this.center = center;
		this.radius = Math.sqrt( maxRadiusSq );

		return this;

	},

	copy: function ( sphere ) {

		this.center.copy( sphere.center );
		this.radius = sphere.radius;

		return this;

	},

	empty: function () {

		return ( this.radius <= 0 );

	},

	containsPoint: function ( point ) {

		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

	},

	distanceToPoint: function ( point ) {

		return ( point.distanceTo( this.center ) - this.radius );

	},

	clampPoint: function ( point, optionalTarget ) {

		var deltaLengthSq = this.center.distanceToSquared( point );

		var result = optionalTarget || new THREE.Vector3();
		result.copy( point );

		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

			result.subSelf( this.center ).normalize();
			result.multiplyScalar( this.radius ).addSelf( this.center );

		}

		return result;

	},

	getBoundingBox: function ( optionalTarget ) {

		var box = optionalTarget || new THREE.Box3();

		box.set( this.center, this.center );
		box.expandByScalar( this.radius );

		return box;

	},

	transform: function ( matrix ) {
		
		this.center = matrix.multiplyVector3( this.center );
		this.radius = this.radius * matrix.getMaxScaleOnAxis();

		return this;

	},

	translate: function ( offset ) {

		this.center.addSelf( offset );

		return this;

	},

	equals: function ( sphere ) {

		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

	},

	clone: function () {

		return new THREE.Sphere().copy( this );

	}

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Math = {

	// Clamp value to range <a, b>

	clamp: function ( x, a, b ) {

		return ( x < a ) ? a : ( ( x > b ) ? b : x );

	},

	// Clamp value to range <a, inf)

	clampBottom: function ( x, a ) {

		return x < a ? a : x;

	},

	// Linear mapping from range <a1, a2> to range <b1, b2>

	mapLinear: function ( x, a1, a2, b1, b2 ) {

		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

	},

	// Random float from <0, 1> with 16 bits of randomness
	// (standard Math.random() creates repetitive patterns when applied over larger space)

	random16: function () {

		return ( 65280 * Math.random() + 255 * Math.random() ) / 65535;

	},

	// Random integer from <low, high> interval

	randInt: function ( low, high ) {

		return low + Math.floor( Math.random() * ( high - low + 1 ) );

	},

	// Random float from <low, high> interval

	randFloat: function ( low, high ) {

		return low + Math.random() * ( high - low );

	},

	// Random float from <-range/2, range/2> interval

	randFloatSpread: function ( range ) {

		return range * ( 0.5 - Math.random() );

	},

	sign: function ( x ) {

		return ( x < 0 ) ? -1 : ( ( x > 0 ) ? 1 : 0 );

	},

	degToRad: function ( degrees ) {

		return degrees * THREE.Math.__d2r;

	},

	radToDeg: function ( radians ) {

		return radians * THREE.Math.__r2d;

	}

};

THREE.Math.__d2r =  Math.PI / 180;
THREE.Math.__r2d =  180 / Math.PI;
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://exocortex.com
 */

THREE.Quaternion = function( x, y, z, w ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;
	this.w = ( w !== undefined ) ? w : 1;

};

THREE.Quaternion.prototype = {

	constructor: THREE.Quaternion,

	set: function ( x, y, z, w ) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

		return this;

	},

	copy: function ( q ) {

		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;

		return this;

	},

	setFromEuler: function ( v, order ) {

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m
	
		var c1 = Math.cos( v.x / 2 );
		var c2 = Math.cos( v.y / 2 );
		var c3 = Math.cos( v.z / 2 );
		var s1 = Math.sin( v.x / 2 );
		var s2 = Math.sin( v.y / 2 );
		var s3 = Math.sin( v.z / 2 );

		if ( order === undefined || order === 'XYZ' ) {

			this.x = s1 * c2 * c3 + c1 * s2 * s3;
			this.y = c1 * s2 * c3 - s1 * c2 * s3;
			this.z = c1 * c2 * s3 + s1 * s2 * c3;
			this.w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'YXZ' ) {
	
			this.x = s1 * c2 * c3 + c1 * s2 * s3;
			this.y = c1 * s2 * c3 - s1 * c2 * s3;
			this.z = c1 * c2 * s3 - s1 * s2 * c3;
			this.w = c1 * c2 * c3 + s1 * s2 * s3;
				
		} else if ( order === 'ZXY' ) {
	
			this.x = s1 * c2 * c3 - c1 * s2 * s3;
			this.y = c1 * s2 * c3 + s1 * c2 * s3;
			this.z = c1 * c2 * s3 + s1 * s2 * c3;
			this.w = c1 * c2 * c3 - s1 * s2 * s3;
				
		} else if ( order === 'ZYX' ) {
	
			this.x = s1 * c2 * c3 - c1 * s2 * s3;
			this.y = c1 * s2 * c3 + s1 * c2 * s3;
			this.z = c1 * c2 * s3 - s1 * s2 * c3;
			this.w = c1 * c2 * c3 + s1 * s2 * s3;
				
		} else if ( order === 'YZX' ) {
			
			this.x = s1 * c2 * c3 + c1 * s2 * s3;
			this.y = c1 * s2 * c3 + s1 * c2 * s3;
			this.z = c1 * c2 * s3 - s1 * s2 * c3;
			this.w = c1 * c2 * c3 - s1 * s2 * s3;
				
		} else if ( order === 'XZY' ) {
			
			this.x = s1 * c2 * c3 - c1 * s2 * s3;
			this.y = c1 * s2 * c3 - s1 * c2 * s3;
			this.z = c1 * c2 * s3 + s1 * s2 * c3;
			this.w = c1 * c2 * c3 + s1 * s2 * s3;
				
		}
		
		return this;

	},

	setFromAxisAngle: function ( axis, angle ) {

		// from http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
		// axis have to be normalized

		var halfAngle = angle / 2,
			s = Math.sin( halfAngle );

		this.x = axis.x * s;
		this.y = axis.y * s;
		this.z = axis.z * s;
		this.w = Math.cos( halfAngle );

		return this;

	},

	setFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
		
		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
		
		var te = m.elements,
			
			m11 = te[0], m12 = te[4], m13 = te[8],
			m21 = te[1], m22 = te[5], m23 = te[9],
			m31 = te[2], m32 = te[6], m33 = te[10],
			
			trace = m11 + m22 + m33,
			s;
		
		if( trace > 0 ) {
		
			s = 0.5 / Math.sqrt( trace + 1.0 );
			
			this.w = 0.25 / s;
			this.x = ( m32 - m23 ) * s;
			this.y = ( m13 - m31 ) * s;
			this.z = ( m21 - m12 ) * s;
		
		} else if ( m11 > m22 && m11 > m33 ) {
		
			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );
			
			this.w = (m32 - m23 ) / s;
			this.x = 0.25 * s;
			this.y = (m12 + m21 ) / s;
			this.z = (m13 + m31 ) / s;
		
		} else if (m22 > m33) {
		
			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );
			
			this.w = (m13 - m31 ) / s;
			this.x = (m12 + m21 ) / s;
			this.y = 0.25 * s;
			this.z = (m23 + m32 ) / s;
		
		} else {
		
			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );
			
			this.w = ( m21 - m12 ) / s;
			this.x = ( m13 + m31 ) / s;
			this.y = ( m23 + m32 ) / s;
			this.z = 0.25 * s;
		
		}
	
		return this;

	},

	inverse: function () {

		this.conjugate().normalize();

		return this;

	},

	conjugate: function () {

		this.x *= -1;
		this.y *= -1;
		this.z *= -1;

		return this;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

	},

	normalize: function () {

		var l = this.length();

		if ( l === 0 ) {

			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 1;

		} else {

			l = 1 / l;

			this.x = this.x * l;
			this.y = this.y * l;
			this.z = this.z * l;
			this.w = this.w * l;

		}

		return this;

	},

	multiply: function ( a, b ) {

		this.copy( a );
		return this.multiplySelf( b );

	},

	multiplySelf: function ( b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
		var qax = this.x, qay = this.y, qaz = this.z, qaw = this.w,
		qbx = b.x, qby = b.y, qbz = b.z, qbw = b.w;

		this.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		return this;

	},

	multiplyVector3: function ( vector, dest ) {

		if ( !dest ) { dest = vector; }

		var x    = vector.x,  y  = vector.y,  z  = vector.z,
			qx   = this.x, qy = this.y, qz = this.z, qw = this.w;

		// calculate quat * vector

		var ix =  qw * x + qy * z - qz * y,
			iy =  qw * y + qz * x - qx * z,
			iz =  qw * z + qx * y - qy * x,
			iw = -qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		dest.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
		dest.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
		dest.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;

		return dest;

	},

	slerpSelf: function ( qb, t ) {

		var x = this.x, y = this.y, z = this.z, w = this.w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		var cosHalfTheta = w * qb.w + x * qb.x + y * qb.y + z * qb.z;

		if ( cosHalfTheta < 0 ) {

			this.w = -qb.w;
			this.x = -qb.x;
			this.y = -qb.y;
			this.z = -qb.z;

			cosHalfTheta = -cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this.w = w;
			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		}

		var halfTheta = Math.acos( cosHalfTheta );
		var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

		if ( Math.abs( sinHalfTheta ) < 0.001 ) {

			this.w = 0.5 * ( w + this.w );
			this.x = 0.5 * ( x + this.x );
			this.y = 0.5 * ( y + this.y );
			this.z = 0.5 * ( z + this.z );

			return this;

		}

		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
		ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this.w = ( w * ratioA + this.w * ratioB );
		this.x = ( x * ratioA + this.x * ratioB );
		this.y = ( y * ratioA + this.y * ratioB );
		this.z = ( z * ratioA + this.z * ratioB );

		return this;

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

	},

	clone: function () {

		return new THREE.Quaternion( this.x, this.y, this.z, this.w );

	}

}

THREE.Quaternion.slerp = function ( qa, qb, qm, t ) {

	return qm.copy( qa ).slerpSelf( qb, t );

}
/**
 * Spline from Tween.js, slightly optimized (and trashed)
 * http://sole.github.com/tween.js/examples/05_spline.html
 *
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Spline = function ( points ) {

	this.points = points;

	var c = [], v3 = { x: 0, y: 0, z: 0 },
	point, intPoint, weight, w2, w3,
	pa, pb, pc, pd;

	this.initFromArray = function( a ) {

		this.points = [];

		for ( var i = 0; i < a.length; i++ ) {

			this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

		}

	};

	this.getPoint = function ( k ) {

		point = ( this.points.length - 1 ) * k;
		intPoint = Math.floor( point );
		weight = point - intPoint;

		c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
		c[ 1 ] = intPoint;
		c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
		c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

		pa = this.points[ c[ 0 ] ];
		pb = this.points[ c[ 1 ] ];
		pc = this.points[ c[ 2 ] ];
		pd = this.points[ c[ 3 ] ];

		w2 = weight * weight;
		w3 = weight * w2;

		v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
		v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
		v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

		return v3;

	};

	this.getControlPointsArray = function () {

		var i, p, l = this.points.length,
			coords = [];

		for ( i = 0; i < l; i ++ ) {

			p = this.points[ i ];
			coords[ i ] = [ p.x, p.y, p.z ];

		}

		return coords;

	};

	// approximate length by summing linear segments

	this.getLength = function ( nSubDivisions ) {

		var i, index, nSamples, position,
			point = 0, intPoint = 0, oldIntPoint = 0,
			oldPosition = new THREE.Vector3(),
			tmpVec = new THREE.Vector3(),
			chunkLengths = [],
			totalLength = 0;

		// first point has 0 length

		chunkLengths[ 0 ] = 0;

		if ( !nSubDivisions ) nSubDivisions = 100;

		nSamples = this.points.length * nSubDivisions;

		oldPosition.copy( this.points[ 0 ] );

		for ( i = 1; i < nSamples; i ++ ) {

			index = i / nSamples;

			position = this.getPoint( index );
			tmpVec.copy( position );

			totalLength += tmpVec.distanceTo( oldPosition );

			oldPosition.copy( position );

			point = ( this.points.length - 1 ) * index;
			intPoint = Math.floor( point );

			if ( intPoint != oldIntPoint ) {

				chunkLengths[ intPoint ] = totalLength;
				oldIntPoint = intPoint;

			}

		}

		// last point ends with total length

		chunkLengths[ chunkLengths.length ] = totalLength;

		return { chunks: chunkLengths, total: totalLength };

	};

	this.reparametrizeByArcLength = function ( samplingCoef ) {

		var i, j,
			index, indexCurrent, indexNext,
			linearDistance, realDistance,
			sampling, position,
			newpoints = [],
			tmpVec = new THREE.Vector3(),
			sl = this.getLength();

		newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

		for ( i = 1; i < this.points.length; i++ ) {

			//tmpVec.copy( this.points[ i - 1 ] );
			//linearDistance = tmpVec.distanceTo( this.points[ i ] );

			realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

			sampling = Math.ceil( samplingCoef * realDistance / sl.total );

			indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
			indexNext = i / ( this.points.length - 1 );

			for ( j = 1; j < sampling - 1; j++ ) {

				index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

				position = this.getPoint( index );
				newpoints.push( tmpVec.copy( position ).clone() );

			}

			newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

		}

		this.points = newpoints;

	};

	// Catmull-Rom

	function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

		var v0 = ( p2 - p0 ) * 0.5,
			v1 = ( p3 - p1 ) * 0.5;

		return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	};

};
/**
 * @author bhouston / http://exocortex.com
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Triangle = function ( a, b, c ) {

	this.a = new THREE.Vector3();
	this.b = new THREE.Vector3();
	this.c = new THREE.Vector3();

	if( a !== undefined && b !== undefined && c !== undefined ) {

		this.a.copy( a );
		this.b.copy( b );
		this.c.copy( c );

	}

};

THREE.Triangle.normal = function( a, b, c, optionalTarget ) {

	var result = optionalTarget || new THREE.Vector3();

	result.sub( c, b );
	THREE.Triangle.__v0.sub( a, b );
	result.crossSelf( THREE.Triangle.__v0 );

	var resultLengthSq = result.lengthSq();
	if( resultLengthSq > 0 ) {

		return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

	}

	return result.set( 0, 0, 0 );

};

// static/instance method to calculate barycoordinates
THREE.Triangle.barycoordFromPoint = function ( point, a, b, c, optionalTarget ) {

	THREE.Triangle.__v0.sub( c, a );
	THREE.Triangle.__v1.sub( b, a );
	THREE.Triangle.__v2.sub( point, a );

	var dot00 = THREE.Triangle.__v0.dot( THREE.Triangle.__v0 );
	var dot01 = THREE.Triangle.__v0.dot( THREE.Triangle.__v1 );
	var dot02 = THREE.Triangle.__v0.dot( THREE.Triangle.__v2 );
	var dot11 = THREE.Triangle.__v1.dot( THREE.Triangle.__v1 );
	var dot12 = THREE.Triangle.__v1.dot( THREE.Triangle.__v2 );

	var denom = ( dot00 * dot11 - dot01 * dot01 );

	var result = optionalTarget || new THREE.Vector3();

	// colinear or singular triangle
	if( denom == 0 ) {
		// arbitrary location outside of triangle?
		// not sure if this is the best idea, maybe should be returning undefined
		return result.set( -2, -1, -1 );
	}

	var invDenom = 1 / denom;
	var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
	var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

	// barycoordinates must always sum to 1
	return result.set( 1 - u - v, v, u );

};

THREE.Triangle.containsPoint = function ( point, a, b, c ) {

	// NOTE: need to use __v3 here because __v0, __v1 and __v2 are used in barycoordFromPoint.
	var result = THREE.Triangle.barycoordFromPoint( point, a, b, c, THREE.Triangle.__v3 );

	return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

};

THREE.Triangle.prototype = {

	constructor: THREE.Triangle,

	set: function ( a, b, c ) {

		this.a.copy( a );
		this.b.copy( b );
		this.c.copy( c );

		return this;

	},

	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

		this.a.copy( points[i0] );
		this.b.copy( points[i1] );
		this.c.copy( points[i2] );

		return this;

	},

	copy: function ( triangle ) {

		this.a.copy( triangle.a );
		this.b.copy( triangle.b );
		this.c.copy( triangle.c );

		return this;

	},

	area: function () {

		THREE.Triangle.__v0.sub( this.c, this.b );
		THREE.Triangle.__v1.sub( this.a, this.b );

		return THREE.Triangle.__v0.crossSelf( THREE.Triangle.__v1 ).length() * 0.5;

	},

	midpoint: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.add( this.a, this.b ).addSelf( this.c ).multiplyScalar( 1 / 3 );

	},

	normal: function ( optionalTarget ) {

		return THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );

	},

	plane: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Plane();

		return result.setFromCoplanarPoints( this.a, this.b, this.c );

	},

	barycoordFromPoint: function ( point, optionalTarget ) {

		return THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

	},

	containsPoint: function ( point ) {

		return THREE.Triangle.containsPoint( point, this.a, this.b, this.c );

	},

	equals: function ( triangle ) {

		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

	},

	clone: function () {

		return new THREE.Triangle().copy( this );

	}

};

THREE.Triangle.__v0 = new THREE.Vector3();
THREE.Triangle.__v1 = new THREE.Vector3();
THREE.Triangle.__v2 = new THREE.Vector3();
THREE.Triangle.__v3 = new THREE.Vector3();
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Vertex = function ( v ) {

	console.warn( 'THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.')
	return v;

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.UV = function ( u, v ) {

	console.warn( 'THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.')
	return new THREE.Vector2( u, v );

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Clock = function ( autoStart ) {

	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

	this.startTime = 0;
	this.oldTime = 0;
	this.elapsedTime = 0;

	this.running = false;

};

THREE.Clock.prototype.start = function () {

	this.startTime = Date.now();
	this.oldTime = this.startTime;

	this.running = true;

};

THREE.Clock.prototype.stop = function () {

	this.getElapsedTime();

	this.running = false;

};

THREE.Clock.prototype.getElapsedTime = function () {

	this.getDelta();

	return this.elapsedTime;

};


THREE.Clock.prototype.getDelta = function () {

	var diff = 0;

	if ( this.autoStart && ! this.running ) {

		this.start();

	}

	if ( this.running ) {

		var newTime = Date.now();
		diff = 0.001 * ( newTime - this.oldTime );
		this.oldTime = newTime;

		this.elapsedTime += diff;

	}

	return diff;

};/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

THREE.EventDispatcher = function () {

	var listeners = {};

	this.addEventListener = function ( type, listener ) {

		if ( listeners[ type ] === undefined ) {

			listeners[ type ] = [];

		}

		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

			listeners[ type ].push( listener );

		}

	};

	this.removeEventListener = function ( type, listener ) {

		var index = listeners[ type ].indexOf( listener );

		if ( index !== - 1 ) {

			listeners[ type ].splice( index, 1 );

		}

	};

	this.dispatchEvent = function ( event ) {

		var listenerArray = listeners[ event.type ];

		if ( listenerArray !== undefined ) {

			event.target = this;

			for ( var i = 0, l = listenerArray.length; i < l; i ++ ) {

				listenerArray[ i ].call( this, event );

			}

		}

	};

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author bhouston / http://exocortex.com/
 */

( function ( THREE ) {

	THREE.Raycaster = function ( origin, direction, near, far ) {

		this.ray = new THREE.Ray( origin, direction );
		
		// normalized ray.direction required for accurate distance calculations
		if( this.ray.direction.length() > 0 ) {

			this.ray.direction.normalize();

		}

		this.near = near || 0;
		this.far = far || Infinity;

	};

	var sphere = new THREE.Sphere();
	var localRay = new THREE.Ray();
	var facePlane = new THREE.Plane();
	var intersectPoint = new THREE.Vector3();

	var inverseMatrix = new THREE.Matrix4();

	var descSort = function ( a, b ) {

		return a.distance - b.distance;

	};

	var v0 = new THREE.Vector3(), v1 = new THREE.Vector3(), v2 = new THREE.Vector3();

	// http://www.blackpawn.com/texts/pointinpoly/default.html

	var intersectObject = function ( object, raycaster, intersects ) {

		if ( object instanceof THREE.Particle ) {

			var distance = raycaster.ray.distanceToPoint( object.matrixWorld.getPosition() );

			if ( distance > object.scale.x ) {

				return intersects;

			}

			intersects.push( {

				distance: distance,
				point: object.position,
				face: null,
				object: object

			} );

		} else if ( object instanceof THREE.Mesh ) {

			// Checking boundingSphere distance to ray
			sphere.set(
				object.matrixWorld.getPosition(),
				object.geometry.boundingSphere.radius* object.matrixWorld.getMaxScaleOnAxis() );

			if ( ! raycaster.ray.isIntersectionSphere( sphere ) ) {

				return intersects;

			}

			// Checking faces

			var geometry = object.geometry;
			var vertices = geometry.vertices;

			var isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;
			var objectMaterials = isFaceMaterial === true ? object.material.materials : null;

			var side = object.material.side;

			var a, b, c, d;
			var precision = raycaster.precision;

			object.matrixRotationWorld.extractRotation( object.matrixWorld );

			inverseMatrix.getInverse( object.matrixWorld );

			localRay.copy( raycaster.ray ).transform( inverseMatrix );
	
			for ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {

				var face = geometry.faces[ f ];

				var material = isFaceMaterial === true ? objectMaterials[ face.materialIndex ] : object.material;

				if ( material === undefined ) continue;
				
				facePlane.setFromNormalAndCoplanarPoint( face.normal, vertices[face.a] );

				var planeDistance = localRay.distanceToPlane( facePlane );
	
				// bail if raycaster and plane are parallel
				if ( Math.abs( planeDistance ) < precision ) continue;
	
				// if negative distance, then plane is behind raycaster
				if ( planeDistance < 0 ) continue;

				// check if we hit the wrong side of a single sided face
				side = material.side;
				if( side !== THREE.DoubleSide ) {

					var planeSign = localRay.direction.dot( facePlane.normal );

					if( ! ( side === THREE.FrontSide ? planeSign < 0 : planeSign > 0 ) ) continue;

				}

				// this can be done using the planeDistance from localRay because localRay wasn't normalized, but ray was
				if ( planeDistance < raycaster.near || planeDistance > raycaster.far ) continue;
				
				intersectPoint = localRay.at( planeDistance, intersectPoint ); // passing in intersectPoint avoids a copy

				if ( face instanceof THREE.Face3 ) {

					a = vertices[ face.a ];
					b = vertices[ face.b ];
					c = vertices[ face.c ];

					if ( ! THREE.Triangle.containsPoint( intersectPoint, a, b, c ) ) continue;

				} else if ( face instanceof THREE.Face4 ) {

					a = vertices[ face.a ];
					b = vertices[ face.b ];
					c = vertices[ face.c ];
					d = vertices[ face.d ];

					if ( ( ! THREE.Triangle.containsPoint( intersectPoint, a, b, d ) ) &&
						 ( ! THREE.Triangle.containsPoint( intersectPoint, b, c, d ) ) ) continue;

				} else {

					// This is added because if we call out of this if/else group when none of the cases
					//    match it will add a point to the intersection list erroneously.
					throw Error( "face type not supported" );

				}

				intersects.push( {

					distance: planeDistance,	// this works because the original ray was normalized, and the transformed localRay wasn't
					point: raycaster.ray.at( planeDistance ),
					face: face,
					faceIndex: f,
					object: object

				} );

			}

		}

	};

	var intersectDescendants = function ( object, raycaster, intersects ) {

		var descendants = object.getDescendants();

		for ( var i = 0, l = descendants.length; i < l; i ++ ) {

			intersectObject( descendants[ i ], raycaster, intersects );

		}
	};

	//

	THREE.Raycaster.prototype.precision = 0.0001;

	THREE.Raycaster.prototype.set = function ( origin, direction ) {

		this.ray.set( origin, direction );

		// normalized ray.direction required for accurate distance calculations
		if( this.ray.direction.length() > 0 ) {

			this.ray.direction.normalize();

		}

	};

	THREE.Raycaster.prototype.intersectObject = function ( object, recursive ) {

		var intersects = [];

		if ( recursive === true ) {

			intersectDescendants( object, this, intersects );

		}

		intersectObject( object, this, intersects );

		intersects.sort( descSort );

		return intersects;

	};

	THREE.Raycaster.prototype.intersectObjects = function ( objects, recursive ) {

		var intersects = [];

		for ( var i = 0, l = objects.length; i < l; i ++ ) {

			intersectObject( objects[ i ], this, intersects );

			if ( recursive === true ) {

				intersectDescendants( objects[ i ], this, intersects );

			}
		}

		intersects.sort( descSort );

		return intersects;

	};

}( THREE ) );
/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Object3D = function () {

	this.id = THREE.Object3DIdCount ++;

	this.name = '';
	this.properties = {};

	this.parent = undefined;
	this.children = [];

	this.up = new THREE.Vector3( 0, 1, 0 );

	this.position = new THREE.Vector3();
	this.rotation = new THREE.Vector3();
	this.eulerOrder = THREE.Object3D.defaultEulerOrder;
	this.scale = new THREE.Vector3( 1, 1, 1 );

	this.renderDepth = null;

	this.rotationAutoUpdate = true;

	this.matrix = new THREE.Matrix4();
	this.matrixWorld = new THREE.Matrix4();
	this.matrixRotationWorld = new THREE.Matrix4();

	this.matrixAutoUpdate = true;
	this.matrixWorldNeedsUpdate = true;

	this.quaternion = new THREE.Quaternion();
	this.useQuaternion = false;

	this.visible = true;

	this.castShadow = false;
	this.receiveShadow = false;

	this.frustumCulled = true;

	this._vector = new THREE.Vector3();

};


THREE.Object3D.prototype = {

	constructor: THREE.Object3D,

	applyMatrix: function ( matrix ) {

		this.matrix.multiply( matrix, this.matrix );

		this.scale.getScaleFromMatrix( this.matrix );

		var mat = new THREE.Matrix4().extractRotation( this.matrix );
		this.rotation.setEulerFromRotationMatrix( mat, this.eulerOrder );

		this.position.getPositionFromMatrix( this.matrix );

	},

	translate: function ( distance, axis ) {

		this.matrix.rotateAxis( axis );
		this.position.addSelf( axis.multiplyScalar( distance ) );

	},

	translateX: function ( distance ) {

		this.translate( distance, this._vector.set( 1, 0, 0 ) );

	},

	translateY: function ( distance ) {

		this.translate( distance, this._vector.set( 0, 1, 0 ) );

	},

	translateZ: function ( distance ) {

		this.translate( distance, this._vector.set( 0, 0, 1 ) );

	},

	localToWorld: function ( vector ) {

		return this.matrixWorld.multiplyVector3( vector );

	},

	worldToLocal: function ( vector ) {

		return THREE.Object3D.__m1.getInverse( this.matrixWorld ).multiplyVector3( vector );

	},

	lookAt: function ( vector ) {

		// TODO: Add hierarchy support.

		this.matrix.lookAt( vector, this.position, this.up );

		if ( this.rotationAutoUpdate ) {

			if ( this.useQuaternion === false )  {

				this.rotation.setEulerFromRotationMatrix( this.matrix, this.eulerOrder );

			} else {

				this.quaternion.copy( this.matrix.decompose()[ 1 ] );

			}

		}

	},

	add: function ( object ) {

		if ( object === this ) {

			console.warn( 'THREE.Object3D.add: An object can\'t be added as a child of itself.' );
			return;

		}

		if ( object instanceof THREE.Object3D ) {

			if ( object.parent !== undefined ) {

				object.parent.remove( object );

			}

			object.parent = this;
			this.children.push( object );

			// add to scene

			var scene = this;

			while ( scene.parent !== undefined ) {

				scene = scene.parent;

			}

			if ( scene !== undefined && scene instanceof THREE.Scene )  {

				scene.__addObject( object );

			}

		}

	},

	remove: function ( object ) {

		var index = this.children.indexOf( object );

		if ( index !== - 1 ) {

			object.parent = undefined;
			this.children.splice( index, 1 );

			// remove from scene

			var scene = this;

			while ( scene.parent !== undefined ) {

				scene = scene.parent;

			}

			if ( scene !== undefined && scene instanceof THREE.Scene ) {

				scene.__removeObject( object );

			}

		}

	},

	traverse: function ( callback ) {

		callback( this );

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			this.children[ i ].traverse( callback );

		}

	},

	getChildByName: function ( name, recursive ) {

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			var child = this.children[ i ];

			if ( child.name === name ) {

				return child;

			}

			if ( recursive === true ) {

				child = child.getChildByName( name, recursive );

				if ( child !== undefined ) {

					return child;

				}

			}

		}

		return undefined;

	},

	getDescendants: function ( array ) {

		if ( array === undefined ) array = [];

		Array.prototype.push.apply( array, this.children );

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			this.children[ i ].getDescendants( array );

		}

		return array;

	},

	updateMatrix: function () {

		this.matrix.setPosition( this.position );

		if ( this.useQuaternion === false )  {

			this.matrix.setRotationFromEuler( this.rotation, this.eulerOrder );

		} else {

			this.matrix.setRotationFromQuaternion( this.quaternion );

		}

		if ( this.scale.x !== 1 || this.scale.y !== 1 || this.scale.z !== 1 ) {

			this.matrix.scale( this.scale );

		}

		this.matrixWorldNeedsUpdate = true;

	},

	updateMatrixWorld: function ( force ) {

		if ( this.matrixAutoUpdate === true ) this.updateMatrix();

		if ( this.matrixWorldNeedsUpdate === true || force === true ) {

			if ( this.parent === undefined ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiply( this.parent.matrixWorld, this.matrix );

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			this.children[ i ].updateMatrixWorld( force );

		}

	},

	clone: function ( object ) {

		if ( object === undefined ) object = new THREE.Object3D();

		object.name = this.name;

		object.up.copy( this.up );

		object.position.copy( this.position );
		if ( object.rotation instanceof THREE.Vector3 ) object.rotation.copy( this.rotation ); // because of Sprite madness
		object.eulerOrder = this.eulerOrder;
		object.scale.copy( this.scale );

		object.renderDepth = this.renderDepth;

		object.rotationAutoUpdate = this.rotationAutoUpdate;

		object.matrix.copy( this.matrix );
		object.matrixWorld.copy( this.matrixWorld );
		object.matrixRotationWorld.copy( this.matrixRotationWorld );

		object.matrixAutoUpdate = this.matrixAutoUpdate;
		object.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;

		object.quaternion.copy( this.quaternion );
		object.useQuaternion = this.useQuaternion;

		object.visible = this.visible;

		object.castShadow = this.castShadow;
		object.receiveShadow = this.receiveShadow;

		object.frustumCulled = this.frustumCulled;

		for ( var i = 0; i < this.children.length; i ++ ) {

			var child = this.children[ i ];
			object.add( child.clone() );

		}

		return object;

	}

};

THREE.Object3D.__m1 = new THREE.Matrix4();
THREE.Object3D.defaultEulerOrder = 'XYZ',

THREE.Object3DIdCount = 0;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author julianwa / https://github.com/julianwa
 */

THREE.Projector = function() {

	var _object, _objectCount, _objectPool = [], _objectPoolLength = 0,
	_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,
	_face, _face3Count, _face3Pool = [], _face3PoolLength = 0,
	_face4Count, _face4Pool = [], _face4PoolLength = 0,
	_line, _lineCount, _linePool = [], _linePoolLength = 0,
	_particle, _particleCount, _particlePool = [], _particlePoolLength = 0,

	_renderData = { objects: [], sprites: [], lights: [], elements: [] },

	_vector3 = new THREE.Vector3(),
	_vector4 = new THREE.Vector4(),

	_viewProjectionMatrix = new THREE.Matrix4(),
	_modelViewProjectionMatrix = new THREE.Matrix4(),
	_normalMatrix = new THREE.Matrix3(),

	_frustum = new THREE.Frustum(),

	_clippedVertex1PositionScreen = new THREE.Vector4(),
	_clippedVertex2PositionScreen = new THREE.Vector4(),

	_face3VertexNormals;

	this.projectVector = function ( vector, camera ) {

		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		_viewProjectionMatrix.multiply( camera.projectionMatrix, camera.matrixWorldInverse );
		_viewProjectionMatrix.multiplyVector3( vector );

		return vector;

	};

	this.unprojectVector = function ( vector, camera ) {

		camera.projectionMatrixInverse.getInverse( camera.projectionMatrix );

		_viewProjectionMatrix.multiply( camera.matrixWorld, camera.projectionMatrixInverse );
		_viewProjectionMatrix.multiplyVector3( vector );

		return vector;

	};

	this.pickingRay = function ( vector, camera ) {

		// set two vectors with opposing z values
		vector.z = -1.0;
		var end = new THREE.Vector3( vector.x, vector.y, 1.0 );

		this.unprojectVector( vector, camera );
		this.unprojectVector( end, camera );

		// find direction from vector to end
		end.subSelf( vector ).normalize();

		return new THREE.Raycaster( vector, end );

	};

	var projectGraph = function ( root, sortObjects ) {

		_objectCount = 0;

		_renderData.objects.length = 0;
		_renderData.sprites.length = 0;
		_renderData.lights.length = 0;

		var projectObject = function ( parent ) {

			for ( var c = 0, cl = parent.children.length; c < cl; c ++ ) {

				var object = parent.children[ c ];

				if ( object.visible === false ) continue;

				if ( object instanceof THREE.Light ) {

					_renderData.lights.push( object );

				} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line ) {

					if ( object.frustumCulled === false || _frustum.contains( object ) === true ) {

						_object = getNextObjectInPool();
						_object.object = object;

						if ( object.renderDepth !== null ) {

							_object.z = object.renderDepth;

						} else {

							_vector3.copy( object.matrixWorld.getPosition() );
							_viewProjectionMatrix.multiplyVector3( _vector3 );
							_object.z = _vector3.z;

						}

						_renderData.objects.push( _object );

					}

				} else if ( object instanceof THREE.Sprite || object instanceof THREE.Particle ) {

					_object = getNextObjectInPool();
					_object.object = object;

					// TODO: Find an elegant and performant solution and remove this dupe code.

					if ( object.renderDepth !== null ) {

						_object.z = object.renderDepth;

					} else {

						_vector3.copy( object.matrixWorld.getPosition() );
						_viewProjectionMatrix.multiplyVector3( _vector3 );
						_object.z = _vector3.z;

					}

					_renderData.sprites.push( _object );

				} else {

					_object = getNextObjectInPool();
					_object.object = object;

					if ( object.renderDepth !== null ) {

						_object.z = object.renderDepth;

					} else {

						_vector3.copy( object.matrixWorld.getPosition() );
						_viewProjectionMatrix.multiplyVector3( _vector3 );
						_object.z = _vector3.z;

					}

					_renderData.objects.push( _object );

				}

				projectObject( object );

			}

		};

		projectObject( root );

		if ( sortObjects === true ) _renderData.objects.sort( painterSort );

		return _renderData;

	};

	this.projectScene = function ( scene, camera, sortObjects, sortElements ) {

		var near = camera.near, far = camera.far, visible = false,
		o, ol, v, vl, f, fl, n, nl, c, cl, u, ul, object, modelMatrix,
		geometry, vertices, vertex, vertexPositionScreen,
		faces, face, faceVertexNormals, normal, faceVertexUvs, uvs,
		v1, v2, v3, v4, isFaceMaterial, objectMaterials, material, side;

		_face3Count = 0;
		_face4Count = 0;
		_lineCount = 0;
		_particleCount = 0;

		_renderData.elements.length = 0;

		scene.updateMatrixWorld();

		if ( camera.parent === undefined ) camera.updateMatrixWorld();

		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		_viewProjectionMatrix.multiply( camera.projectionMatrix, camera.matrixWorldInverse );

		_frustum.setFromMatrix( _viewProjectionMatrix );

		_renderData = projectGraph( scene, sortObjects );

		for ( o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {

			object = _renderData.objects[ o ].object;

			modelMatrix = object.matrixWorld;

			_vertexCount = 0;

			if ( object instanceof THREE.Mesh ) {

				geometry = object.geometry;

				vertices = geometry.vertices;
				faces = geometry.faces;
				faceVertexUvs = geometry.faceVertexUvs;

				_normalMatrix.getInverse( modelMatrix );
				_normalMatrix.transpose();

				isFaceMaterial = object.material instanceof THREE.MeshFaceMaterial;
				objectMaterials = isFaceMaterial === true ? object.material : null;

				side = object.material.side;

				for ( v = 0, vl = vertices.length; v < vl; v ++ ) {

					_vertex = getNextVertexInPool();
					_vertex.positionWorld.copy( vertices[ v ] );

					modelMatrix.multiplyVector3( _vertex.positionWorld );

					_vertex.positionScreen.copy( _vertex.positionWorld );
					_viewProjectionMatrix.multiplyVector4( _vertex.positionScreen );

					_vertex.positionScreen.x /= _vertex.positionScreen.w;
					_vertex.positionScreen.y /= _vertex.positionScreen.w;

					_vertex.visible = _vertex.positionScreen.z > near && _vertex.positionScreen.z < far;

				}

				for ( f = 0, fl = faces.length; f < fl; f ++ ) {

					face = faces[ f ];

					material = isFaceMaterial === true ? objectMaterials.materials[ face.materialIndex ] : object.material;

					if ( material === undefined ) continue;

					side = material.side;

					if ( face instanceof THREE.Face3 ) {

						v1 = _vertexPool[ face.a ];
						v2 = _vertexPool[ face.b ];
						v3 = _vertexPool[ face.c ];

						if ( v1.visible === true && v2.visible === true && v3.visible === true ) {

							visible = ( ( v3.positionScreen.x - v1.positionScreen.x ) * ( v2.positionScreen.y - v1.positionScreen.y ) -
								( v3.positionScreen.y - v1.positionScreen.y ) * ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;

							if ( side === THREE.DoubleSide || visible === ( side === THREE.FrontSide ) ) {

								_face = getNextFace3InPool();

								_face.v1.copy( v1 );
								_face.v2.copy( v2 );
								_face.v3.copy( v3 );

							} else {

								continue;

							}

						} else {

							continue;

						}

					} else if ( face instanceof THREE.Face4 ) {

						v1 = _vertexPool[ face.a ];
						v2 = _vertexPool[ face.b ];
						v3 = _vertexPool[ face.c ];
						v4 = _vertexPool[ face.d ];

						if ( v1.visible === true && v2.visible === true && v3.visible === true && v4.visible === true ) {

							visible = ( v4.positionScreen.x - v1.positionScreen.x ) * ( v2.positionScreen.y - v1.positionScreen.y ) -
								( v4.positionScreen.y - v1.positionScreen.y ) * ( v2.positionScreen.x - v1.positionScreen.x ) < 0 ||
								( v2.positionScreen.x - v3.positionScreen.x ) * ( v4.positionScreen.y - v3.positionScreen.y ) -
								( v2.positionScreen.y - v3.positionScreen.y ) * ( v4.positionScreen.x - v3.positionScreen.x ) < 0;


							if ( side === THREE.DoubleSide || visible === ( side === THREE.FrontSide ) ) {

								_face = getNextFace4InPool();

								_face.v1.copy( v1 );
								_face.v2.copy( v2 );
								_face.v3.copy( v3 );
								_face.v4.copy( v4 );

							} else {

								continue;

							}

						} else {

							continue;

						}

					}

					_face.normalWorld.copy( face.normal );

					if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) _face.normalWorld.negate();
					_normalMatrix.multiplyVector3( _face.normalWorld ).normalize();

					_face.centroidWorld.copy( face.centroid );
					modelMatrix.multiplyVector3( _face.centroidWorld );

					_face.centroidScreen.copy( _face.centroidWorld );
					_viewProjectionMatrix.multiplyVector3( _face.centroidScreen );

					faceVertexNormals = face.vertexNormals;

					for ( n = 0, nl = faceVertexNormals.length; n < nl; n ++ ) {

						normal = _face.vertexNormalsWorld[ n ];
						normal.copy( faceVertexNormals[ n ] );

						if ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) normal.negate();

						_normalMatrix.multiplyVector3( normal ).normalize();

					}

					_face.vertexNormalsLength = faceVertexNormals.length;

					for ( c = 0, cl = faceVertexUvs.length; c < cl; c ++ ) {

						uvs = faceVertexUvs[ c ][ f ];

						if ( uvs === undefined ) continue;

						for ( u = 0, ul = uvs.length; u < ul; u ++ ) {

							_face.uvs[ c ][ u ] = uvs[ u ];

						}

					}

					_face.color = face.color;
					_face.material = material;

					_face.z = _face.centroidScreen.z;

					_renderData.elements.push( _face );

				}

			} else if ( object instanceof THREE.Line ) {

				_modelViewProjectionMatrix.multiply( _viewProjectionMatrix, modelMatrix );

				vertices = object.geometry.vertices;

				v1 = getNextVertexInPool();
				v1.positionScreen.copy( vertices[ 0 ] );
				_modelViewProjectionMatrix.multiplyVector4( v1.positionScreen );

				// Handle LineStrip and LinePieces
				var step = object.type === THREE.LinePieces ? 2 : 1;

				for ( v = 1, vl = vertices.length; v < vl; v ++ ) {

					v1 = getNextVertexInPool();
					v1.positionScreen.copy( vertices[ v ] );
					_modelViewProjectionMatrix.multiplyVector4( v1.positionScreen );

					if ( ( v + 1 ) % step > 0 ) continue;

					v2 = _vertexPool[ _vertexCount - 2 ];

					_clippedVertex1PositionScreen.copy( v1.positionScreen );
					_clippedVertex2PositionScreen.copy( v2.positionScreen );

					if ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {

						// Perform the perspective divide
						_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );
						_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );

						_line = getNextLineInPool();
						_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );
						_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );

						_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );

						_line.material = object.material;

						_renderData.elements.push( _line );

					}

				}

			}

		}

		for ( o = 0, ol = _renderData.sprites.length; o < ol; o++ ) {

			object = _renderData.sprites[ o ].object;

			modelMatrix = object.matrixWorld;

			if ( object instanceof THREE.Particle ) {

				_vector4.set( modelMatrix.elements[12], modelMatrix.elements[13], modelMatrix.elements[14], 1 );
				_viewProjectionMatrix.multiplyVector4( _vector4 );

				_vector4.z /= _vector4.w;

				if ( _vector4.z > 0 && _vector4.z < 1 ) {

					_particle = getNextParticleInPool();
					_particle.object = object;
					_particle.x = _vector4.x / _vector4.w;
					_particle.y = _vector4.y / _vector4.w;
					_particle.z = _vector4.z;

					_particle.rotation = object.rotation.z;

					_particle.scale.x = object.scale.x * Math.abs( _particle.x - ( _vector4.x + camera.projectionMatrix.elements[0] ) / ( _vector4.w + camera.projectionMatrix.elements[12] ) );
					_particle.scale.y = object.scale.y * Math.abs( _particle.y - ( _vector4.y + camera.projectionMatrix.elements[5] ) / ( _vector4.w + camera.projectionMatrix.elements[13] ) );

					_particle.material = object.material;

					_renderData.elements.push( _particle );

				}

			}

		}

		if ( sortElements === true ) _renderData.elements.sort( painterSort );

		return _renderData;

	};

	// Pools

	function getNextObjectInPool() {

		if ( _objectCount === _objectPoolLength ) {

			var object = new THREE.RenderableObject();
			_objectPool.push( object );
			_objectPoolLength ++;
			_objectCount ++;
			return object;

		}

		return _objectPool[ _objectCount ++ ];

	}

	function getNextVertexInPool() {

		if ( _vertexCount === _vertexPoolLength ) {

			var vertex = new THREE.RenderableVertex();
			_vertexPool.push( vertex );
			_vertexPoolLength ++;
			_vertexCount ++;
			return vertex;

		}

		return _vertexPool[ _vertexCount ++ ];

	}

	function getNextFace3InPool() {

		if ( _face3Count === _face3PoolLength ) {

			var face = new THREE.RenderableFace3();
			_face3Pool.push( face );
			_face3PoolLength ++;
			_face3Count ++;
			return face;

		}

		return _face3Pool[ _face3Count ++ ];


	}

	function getNextFace4InPool() {

		if ( _face4Count === _face4PoolLength ) {

			var face = new THREE.RenderableFace4();
			_face4Pool.push( face );
			_face4PoolLength ++;
			_face4Count ++;
			return face;

		}

		return _face4Pool[ _face4Count ++ ];

	}

	function getNextLineInPool() {

		if ( _lineCount === _linePoolLength ) {

			var line = new THREE.RenderableLine();
			_linePool.push( line );
			_linePoolLength ++;
			_lineCount ++
			return line;

		}

		return _linePool[ _lineCount ++ ];

	}

	function getNextParticleInPool() {

		if ( _particleCount === _particlePoolLength ) {

			var particle = new THREE.RenderableParticle();
			_particlePool.push( particle );
			_particlePoolLength ++;
			_particleCount ++
			return particle;

		}

		return _particlePool[ _particleCount ++ ];

	}

	//

	function painterSort( a, b ) {

		return b.z - a.z;

	}

	function clipLine( s1, s2 ) {

		var alpha1 = 0, alpha2 = 1,

		// Calculate the boundary coordinate of each vertex for the near and far clip planes,
		// Z = -1 and Z = +1, respectively.
		bc1near =  s1.z + s1.w,
		bc2near =  s2.z + s2.w,
		bc1far =  - s1.z + s1.w,
		bc2far =  - s2.z + s2.w;

		if ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {

			// Both vertices lie entirely within all clip planes.
			return true;

		} else if ( ( bc1near < 0 && bc2near < 0) || (bc1far < 0 && bc2far < 0 ) ) {

			// Both vertices lie entirely outside one of the clip planes.
			return false;

		} else {

			// The line segment spans at least one clip plane.

			if ( bc1near < 0 ) {

				// v1 lies outside the near plane, v2 inside
				alpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );

			} else if ( bc2near < 0 ) {

				// v2 lies outside the near plane, v1 inside
				alpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );

			}

			if ( bc1far < 0 ) {

				// v1 lies outside the far plane, v2 inside
				alpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );

			} else if ( bc2far < 0 ) {

				// v2 lies outside the far plane, v2 inside
				alpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );

			}

			if ( alpha2 < alpha1 ) {

				// The line segment spans two boundaries, but is outside both of them.
				// (This can't happen when we're only clipping against just near/far but good
				//  to leave the check here for future usage if other clip planes are added.)
				return false;

			} else {

				// Update the s1 and s2 vertices to match the clipped line segment.
				s1.lerpSelf( s2, alpha1 );
				s2.lerpSelf( s1, 1 - alpha2 );

				return true;

			}

		}

	}

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {

	this.a = a;
	this.b = b;
	this.c = c;

	this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
	this.vertexNormals = normal instanceof Array ? normal : [ ];

	this.color = color instanceof THREE.Color ? color : new THREE.Color();
	this.vertexColors = color instanceof Array ? color : [];

	this.vertexTangents = [];

	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	this.centroid = new THREE.Vector3();

};

THREE.Face3.prototype = {

	constructor: THREE.Face3,

	clone: function () {

		var face = new THREE.Face3( this.a, this.b, this.c );

		face.normal.copy( this.normal );
		face.color.copy( this.color );
		face.centroid.copy( this.centroid );

		face.materialIndex = this.materialIndex;

		var i, il;
		for ( i = 0, il = this.vertexNormals.length; i < il; i ++ ) face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();
		for ( i = 0, il = this.vertexColors.length; i < il; i ++ ) face.vertexColors[ i ] = this.vertexColors[ i ].clone();
		for ( i = 0, il = this.vertexTangents.length; i < il; i ++ ) face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();

		return face;

	}

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {

	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;

	this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
	this.vertexNormals = normal instanceof Array ? normal : [ ];

	this.color = color instanceof THREE.Color ? color : new THREE.Color();
	this.vertexColors = color instanceof Array ? color : [];

	this.vertexTangents = [];

	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

	this.centroid = new THREE.Vector3();

};

THREE.Face4.prototype = {

	constructor: THREE.Face4,

	clone: function () {

		var face = new THREE.Face4( this.a, this.b, this.c, this.d );

		face.normal.copy( this.normal );
		face.color.copy( this.color );
		face.centroid.copy( this.centroid );

		face.materialIndex = this.materialIndex;

		var i, il;
		for ( i = 0, il = this.vertexNormals.length; i < il; i ++ ) face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();
		for ( i = 0, il = this.vertexColors.length; i < il; i ++ ) face.vertexColors[ i ] = this.vertexColors[ i ].clone();
		for ( i = 0, il = this.vertexTangents.length; i < il; i ++ ) face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();

		return face;

	}

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author bhouston / http://exocortex.com
 */

THREE.Geometry = function () {

	THREE.EventDispatcher.call( this );

	this.id = THREE.GeometryIdCount ++;

	this.name = '';

	this.vertices = [];
	this.colors = [];  // one-to-one vertex colors, used in ParticleSystem, Line and Ribbon
	this.normals = []; // one-to-one vertex normals, used in Ribbon

	this.faces = [];

	this.faceUvs = [[]];
	this.faceVertexUvs = [[]];

	this.morphTargets = [];
	this.morphColors = [];
	this.morphNormals = [];

	this.skinWeights = [];
	this.skinIndices = [];

	this.lineDistances = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	this.hasTangents = false;

	this.dynamic = true; // the intermediate typed arrays will be deleted when set to false

	// update flags

	this.verticesNeedUpdate = false;
	this.elementsNeedUpdate = false;
	this.uvsNeedUpdate = false;
	this.normalsNeedUpdate = false;
	this.tangentsNeedUpdate = false;
	this.colorsNeedUpdate = false;
	this.lineDistancesNeedUpdate = false;

	this.buffersNeedUpdate = false;

};

THREE.Geometry.prototype = {

	constructor: THREE.Geometry,

	applyMatrix: function ( matrix ) {

		var normalMatrix = new THREE.Matrix3();

		normalMatrix.getInverse( matrix ).transpose();

		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

			var vertex = this.vertices[ i ];

			matrix.multiplyVector3( vertex );

		}

		for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

			var face = this.faces[ i ];

			normalMatrix.multiplyVector3( face.normal ).normalize();

			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

				normalMatrix.multiplyVector3( face.vertexNormals[ j ] ).normalize();

			}

			matrix.multiplyVector3( face.centroid );

		}

	},

	computeCentroids: function () {

		var f, fl, face;

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];
			face.centroid.set( 0, 0, 0 );

			if ( face instanceof THREE.Face3 ) {

				face.centroid.addSelf( this.vertices[ face.a ] );
				face.centroid.addSelf( this.vertices[ face.b ] );
				face.centroid.addSelf( this.vertices[ face.c ] );
				face.centroid.divideScalar( 3 );

			} else if ( face instanceof THREE.Face4 ) {

				face.centroid.addSelf( this.vertices[ face.a ] );
				face.centroid.addSelf( this.vertices[ face.b ] );
				face.centroid.addSelf( this.vertices[ face.c ] );
				face.centroid.addSelf( this.vertices[ face.d ] );
				face.centroid.divideScalar( 4 );

			}

		}

	},

	computeFaceNormals: function () {

		var n, nl, v, vl, vertex, f, fl, face, vA, vB, vC,
		cb = new THREE.Vector3(), ab = new THREE.Vector3();

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			vA = this.vertices[ face.a ];
			vB = this.vertices[ face.b ];
			vC = this.vertices[ face.c ];

			cb.sub( vC, vB );
			ab.sub( vA, vB );
			cb.crossSelf( ab );

			cb.normalize();

			face.normal.copy( cb );

		}

	},

	computeVertexNormals: function ( areaWeighted ) {

		var v, vl, f, fl, face, vertices;

		// create internal buffers for reuse when calling this method repeatedly
		// (otherwise memory allocation / deallocation every frame is big resource hog)

		if ( this.__tmpVertices === undefined ) {

			this.__tmpVertices = new Array( this.vertices.length );
			vertices = this.__tmpVertices;

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ] = new THREE.Vector3();

			}

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( face instanceof THREE.Face3 ) {

					face.vertexNormals = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];

				} else if ( face instanceof THREE.Face4 ) {

					face.vertexNormals = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];

				}

			}

		} else {

			vertices = this.__tmpVertices;

			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

				vertices[ v ].set( 0, 0, 0 );

			}

		}

		if ( areaWeighted ) {

			// vertex normals weighted by triangle areas
			// http://www.iquilezles.org/www/articles/normals/normals.htm

			var vA, vB, vC, vD;
			var cb = new THREE.Vector3(), ab = new THREE.Vector3(),
				db = new THREE.Vector3(), dc = new THREE.Vector3(), bc = new THREE.Vector3();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( face instanceof THREE.Face3 ) {

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];

					cb.sub( vC, vB );
					ab.sub( vA, vB );
					cb.crossSelf( ab );

					vertices[ face.a ].addSelf( cb );
					vertices[ face.b ].addSelf( cb );
					vertices[ face.c ].addSelf( cb );

				} else if ( face instanceof THREE.Face4 ) {

					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];
					vD = this.vertices[ face.d ];

					// abd

					db.sub( vD, vB );
					ab.sub( vA, vB );
					db.crossSelf( ab );

					vertices[ face.a ].addSelf( db );
					vertices[ face.b ].addSelf( db );
					vertices[ face.d ].addSelf( db );

					// bcd

					dc.sub( vD, vC );
					bc.sub( vB, vC );
					dc.crossSelf( bc );

					vertices[ face.b ].addSelf( dc );
					vertices[ face.c ].addSelf( dc );
					vertices[ face.d ].addSelf( dc );

				}

			}

		} else {

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				if ( face instanceof THREE.Face3 ) {

					vertices[ face.a ].addSelf( face.normal );
					vertices[ face.b ].addSelf( face.normal );
					vertices[ face.c ].addSelf( face.normal );

				} else if ( face instanceof THREE.Face4 ) {

					vertices[ face.a ].addSelf( face.normal );
					vertices[ face.b ].addSelf( face.normal );
					vertices[ face.c ].addSelf( face.normal );
					vertices[ face.d ].addSelf( face.normal );

				}

			}

		}

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ].normalize();

		}

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			if ( face instanceof THREE.Face3 ) {

				face.vertexNormals[ 0 ].copy( vertices[ face.a ] );
				face.vertexNormals[ 1 ].copy( vertices[ face.b ] );
				face.vertexNormals[ 2 ].copy( vertices[ face.c ] );

			} else if ( face instanceof THREE.Face4 ) {

				face.vertexNormals[ 0 ].copy( vertices[ face.a ] );
				face.vertexNormals[ 1 ].copy( vertices[ face.b ] );
				face.vertexNormals[ 2 ].copy( vertices[ face.c ] );
				face.vertexNormals[ 3 ].copy( vertices[ face.d ] );

			}

		}

	},

	computeMorphNormals: function () {

		var i, il, f, fl, face;

		// save original normals
		// - create temp variables on first access
		//   otherwise just copy (for faster repeated calls)

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			if ( ! face.__originalFaceNormal ) {

				face.__originalFaceNormal = face.normal.clone();

			} else {

				face.__originalFaceNormal.copy( face.normal );

			}

			if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

			for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

				if ( ! face.__originalVertexNormals[ i ] ) {

					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

				} else {

					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

				}

			}

		}

		// use temp geometry to compute face and vertex normals for each morph

		var tmpGeo = new THREE.Geometry();
		tmpGeo.faces = this.faces;

		for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

			// create on first access

			if ( ! this.morphNormals[ i ] ) {

				this.morphNormals[ i ] = {};
				this.morphNormals[ i ].faceNormals = [];
				this.morphNormals[ i ].vertexNormals = [];

				var dstNormalsFace = this.morphNormals[ i ].faceNormals;
				var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					face = this.faces[ f ];

					faceNormal = new THREE.Vector3();

					if ( face instanceof THREE.Face3 ) {

						vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };

					} else {

						vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3(), d: new THREE.Vector3() };

					}

					dstNormalsFace.push( faceNormal );
					dstNormalsVertex.push( vertexNormals );

				}

			}

			var morphNormals = this.morphNormals[ i ];

			// set vertices to morph target

			tmpGeo.vertices = this.morphTargets[ i ].vertices;

			// compute morph normals

			tmpGeo.computeFaceNormals();
			tmpGeo.computeVertexNormals();

			// store morph normals

			var faceNormal, vertexNormals;

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				faceNormal = morphNormals.faceNormals[ f ];
				vertexNormals = morphNormals.vertexNormals[ f ];

				faceNormal.copy( face.normal );

				if ( face instanceof THREE.Face3 ) {

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );

				} else {

					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );
					vertexNormals.d.copy( face.vertexNormals[ 3 ] );

				}

			}

		}

		// restore original normals

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			face.normal = face.__originalFaceNormal;
			face.vertexNormals = face.__originalVertexNormals;

		}

	},

	computeTangents: function () {

		// based on http://www.terathon.com/code/tangent.html
		// tangents go to vertices

		var f, fl, v, vl, i, il, vertexIndex,
			face, uv, vA, vB, vC, uvA, uvB, uvC,
			x1, x2, y1, y2, z1, z2,
			s1, s2, t1, t2, r, t, test,
			tan1 = [], tan2 = [],
			sdir = new THREE.Vector3(), tdir = new THREE.Vector3(),
			tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3(),
			n = new THREE.Vector3(), w;

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			tan1[ v ] = new THREE.Vector3();
			tan2[ v ] = new THREE.Vector3();

		}

		function handleTriangle( context, a, b, c, ua, ub, uc ) {

			vA = context.vertices[ a ];
			vB = context.vertices[ b ];
			vC = context.vertices[ c ];

			uvA = uv[ ua ];
			uvB = uv[ ub ];
			uvC = uv[ uc ];

			x1 = vB.x - vA.x;
			x2 = vC.x - vA.x;
			y1 = vB.y - vA.y;
			y2 = vC.y - vA.y;
			z1 = vB.z - vA.z;
			z2 = vC.z - vA.z;

			s1 = uvB.x - uvA.x;
			s2 = uvC.x - uvA.x;
			t1 = uvB.y - uvA.y;
			t2 = uvC.y - uvA.y;

			r = 1.0 / ( s1 * t2 - s2 * t1 );
			sdir.set( ( t2 * x1 - t1 * x2 ) * r,
					  ( t2 * y1 - t1 * y2 ) * r,
					  ( t2 * z1 - t1 * z2 ) * r );
			tdir.set( ( s1 * x2 - s2 * x1 ) * r,
					  ( s1 * y2 - s2 * y1 ) * r,
					  ( s1 * z2 - s2 * z1 ) * r );

			tan1[ a ].addSelf( sdir );
			tan1[ b ].addSelf( sdir );
			tan1[ c ].addSelf( sdir );

			tan2[ a ].addSelf( tdir );
			tan2[ b ].addSelf( tdir );
			tan2[ c ].addSelf( tdir );

		}

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];
			uv = this.faceVertexUvs[ 0 ][ f ]; // use UV layer 0 for tangents

			if ( face instanceof THREE.Face3 ) {

				handleTriangle( this, face.a, face.b, face.c, 0, 1, 2 );

			} else if ( face instanceof THREE.Face4 ) {

				handleTriangle( this, face.a, face.b, face.d, 0, 1, 3 );
				handleTriangle( this, face.b, face.c, face.d, 1, 2, 3 );

			}

		}

		var faceIndex = [ 'a', 'b', 'c', 'd' ];

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			for ( i = 0; i < face.vertexNormals.length; i++ ) {

				n.copy( face.vertexNormals[ i ] );

				vertexIndex = face[ faceIndex[ i ] ];

				t = tan1[ vertexIndex ];

				// Gram-Schmidt orthogonalize

				tmp.copy( t );
				tmp.subSelf( n.multiplyScalar( n.dot( t ) ) ).normalize();

				// Calculate handedness

				tmp2.cross( face.vertexNormals[ i ], t );
				test = tmp2.dot( tan2[ vertexIndex ] );
				w = (test < 0.0) ? -1.0 : 1.0;

				face.vertexTangents[ i ] = new THREE.Vector4( tmp.x, tmp.y, tmp.z, w );

			}

		}

		this.hasTangents = true;

	},

	computeLineDistances: function ( ) {

		var d = 0;
		var vertices = this.vertices;

		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

			if ( i > 0 ) {

				d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

			}

			this.lineDistances[ i ] = d;

		}

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new THREE.Box3();

		}

		this.boundingBox.setFromPoints( this.vertices );

	},

	computeBoundingSphere: function () {

		if ( this.boundingSphere === null ) {

			this.boundingSphere = new THREE.Sphere();

		}

		this.boundingSphere.setFromCenterAndPoints( this.boundingSphere.center, this.vertices );

	},

	/*
	 * Checks for duplicate vertices with hashmap.
	 * Duplicated vertices are removed
	 * and faces' vertices are updated.
	 */

	mergeVertices: function () {

		var verticesMap = {}; // Hashmap for looking up vertice by position coordinates (and making sure they are unique)
		var unique = [], changes = [];

		var v, key;
		var precisionPoints = 4; // number of decimal points, eg. 4 for epsilon of 0.0001
		var precision = Math.pow( 10, precisionPoints );
		var i,il, face;
		var abcd = 'abcd', o, k, j, jl, u;

		for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

			v = this.vertices[ i ];
			key = [ Math.round( v.x * precision ), Math.round( v.y * precision ), Math.round( v.z * precision ) ].join( '_' );

			if ( verticesMap[ key ] === undefined ) {

				verticesMap[ key ] = i;
				unique.push( this.vertices[ i ] );
				changes[ i ] = unique.length - 1;

			} else {

				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
				changes[ i ] = changes[ verticesMap[ key ] ];

			}

		};


		// Start to patch face indices

		for( i = 0, il = this.faces.length; i < il; i ++ ) {

			face = this.faces[ i ];

			if ( face instanceof THREE.Face3 ) {

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];

			} else if ( face instanceof THREE.Face4 ) {

				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];
				face.d = changes[ face.d ];

				// check dups in (a, b, c, d) and convert to -> face3

				o = [ face.a, face.b, face.c, face.d ];

				for ( k = 3; k > 0; k -- ) {

					if ( o.indexOf( face[ abcd[ k ] ] ) !== k ) {

						// console.log('faces', face.a, face.b, face.c, face.d, 'dup at', k);

						o.splice( k, 1 );

						this.faces[ i ] = new THREE.Face3( o[0], o[1], o[2], face.normal, face.color, face.materialIndex );

						for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

							u = this.faceVertexUvs[ j ][ i ];
							if ( u ) u.splice( k, 1 );

						}

						this.faces[ i ].vertexColors = face.vertexColors;

						break;
					}

				}

			}

		}

		// Use unique set of vertices

		var diff = this.vertices.length - unique.length;
		this.vertices = unique;
		return diff;

	},

	clone: function () {

		var geometry = new THREE.Geometry();

		var vertices = this.vertices;

		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

			geometry.vertices.push( vertices[ i ].clone() );

		}

		var faces = this.faces;

		for ( var i = 0, il = faces.length; i < il; i ++ ) {

			geometry.faces.push( faces[ i ].clone() );

		}

		var uvs = this.faceVertexUvs[ 0 ];

		for ( var i = 0, il = uvs.length; i < il; i ++ ) {

			var uv = uvs[ i ], uvCopy = [];

			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

				uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );

			}

			geometry.faceVertexUvs[ 0 ].push( uvCopy );

		}

		return geometry;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.GeometryIdCount = 0;
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.BufferGeometry = function () {

	THREE.EventDispatcher.call( this );

	this.id = THREE.GeometryIdCount ++;

	// attributes

	this.attributes = {};

	// attributes typed arrays are kept only if dynamic flag is set

	this.dynamic = false;

	// offsets for chunks when using indexed elements

	this.offsets = [];

	// boundings

	this.boundingBox = null;
	this.boundingSphere = null;

	this.hasTangents = false;

	// for compatibility

	this.morphTargets = [];

};

THREE.BufferGeometry.prototype = {

	constructor : THREE.BufferGeometry,

	applyMatrix: function ( matrix ) {

		var positionArray;
		var normalArray;

		if ( this.attributes[ "position" ] ) positionArray = this.attributes[ "position" ].array;
		if ( this.attributes[ "normal" ] ) normalArray = this.attributes[ "normal" ].array;

		if ( positionArray !== undefined ) {

			matrix.multiplyVector3Array( positionArray );
			this.verticesNeedUpdate = true;

		}

		if ( normalArray !== undefined ) {

			var normalMatrix = new THREE.Matrix3();
			normalMatrix.getInverse( matrix ).transpose();

			normalMatrix.multiplyVector3Array( normalArray );

			this.normalizeNormals();

			this.normalsNeedUpdate = true;

		}

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new THREE.Box3();

		}

		var positions = this.attributes[ "position" ].array;

		if ( positions ) {

			var bb = this.boundingBox;
			var x, y, z;

			if( positions.length >= 3 ) {
				bb.min.x = bb.max.x = positions[ 0 ];
				bb.min.y = bb.max.y = positions[ 1 ];
				bb.min.z = bb.max.z = positions[ 2 ];
			}

			for ( var i = 3, il = positions.length; i < il; i += 3 ) {

				x = positions[ i ];
				y = positions[ i + 1 ];
				z = positions[ i + 2 ];

				// bounding box

				if ( x < bb.min.x ) {

					bb.min.x = x;

				} else if ( x > bb.max.x ) {

					bb.max.x = x;

				}

				if ( y < bb.min.y ) {

					bb.min.y = y;

				} else if ( y > bb.max.y ) {

					bb.max.y = y;

				}

				if ( z < bb.min.z ) {

					bb.min.z = z;

				} else if ( z > bb.max.z ) {

					bb.max.z = z;

				}

			}

		}

		if ( positions === undefined || positions.length === 0 ) {

			this.boundingBox.min.set( 0, 0, 0 );
			this.boundingBox.max.set( 0, 0, 0 );

		}

	},

	computeBoundingSphere: function () {

		if ( this.boundingSphere === null ) {

			this.boundingSphere = new THREE.Sphere();

		}

		var positions = this.attributes[ "position" ].array;

		if ( positions ) {

			var radiusSq, maxRadiusSq = 0;
			var x, y, z;

			for ( var i = 0, il = positions.length; i < il; i += 3 ) {

				x = positions[ i ];
				y = positions[ i + 1 ];
				z = positions[ i + 2 ];

				radiusSq =  x * x + y * y + z * z;
				if ( radiusSq > maxRadiusSq ) maxRadiusSq = radiusSq;

			}

			this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

		}

	},

	computeVertexNormals: function () {

		if ( this.attributes[ "position" ] ) {

			var i, il;
			var j, jl;

			var nVertexElements = this.attributes[ "position" ].array.length;

			if ( this.attributes[ "normal" ] === undefined ) {

				this.attributes[ "normal" ] = {

					itemSize: 3,
					array: new Float32Array( nVertexElements ),
					numItems: nVertexElements

				};

			} else {

				// reset existing normals to zero

				for ( i = 0, il = this.attributes[ "normal" ].array.length; i < il; i ++ ) {

					this.attributes[ "normal" ].array[ i ] = 0;

				}

			}

			var positions = this.attributes[ "position" ].array;
			var normals = this.attributes[ "normal" ].array;

			var vA, vB, vC, x, y, z,

			pA = new THREE.Vector3(),
			pB = new THREE.Vector3(),
			pC = new THREE.Vector3(),

			cb = new THREE.Vector3(),
			ab = new THREE.Vector3();

			// indexed elements

			if ( this.attributes[ "index" ] ) {

				var indices = this.attributes[ "index" ].array;

				var offsets = this.offsets;

				for ( j = 0, jl = offsets.length; j < jl; ++ j ) {

					var start = offsets[ j ].start;
					var count = offsets[ j ].count;
					var index = offsets[ j ].index;

					for ( i = start, il = start + count; i < il; i += 3 ) {

						vA = index + indices[ i ];
						vB = index + indices[ i + 1 ];
						vC = index + indices[ i + 2 ];

						x = positions[ vA * 3 ];
						y = positions[ vA * 3 + 1 ];
						z = positions[ vA * 3 + 2 ];
						pA.set( x, y, z );

						x = positions[ vB * 3 ];
						y = positions[ vB * 3 + 1 ];
						z = positions[ vB * 3 + 2 ];
						pB.set( x, y, z );

						x = positions[ vC * 3 ];
						y = positions[ vC * 3 + 1 ];
						z = positions[ vC * 3 + 2 ];
						pC.set( x, y, z );

						cb.sub( pC, pB );
						ab.sub( pA, pB );
						cb.crossSelf( ab );

						normals[ vA * 3 ]     += cb.x;
						normals[ vA * 3 + 1 ] += cb.y;
						normals[ vA * 3 + 2 ] += cb.z;

						normals[ vB * 3 ]     += cb.x;
						normals[ vB * 3 + 1 ] += cb.y;
						normals[ vB * 3 + 2 ] += cb.z;

						normals[ vC * 3 ]     += cb.x;
						normals[ vC * 3 + 1 ] += cb.y;
						normals[ vC * 3 + 2 ] += cb.z;

					}

				}

			// non-indexed elements (unconnected triangle soup)

			} else {

				for ( i = 0, il = positions.length; i < il; i += 9 ) {

					x = positions[ i ];
					y = positions[ i + 1 ];
					z = positions[ i + 2 ];
					pA.set( x, y, z );

					x = positions[ i + 3 ];
					y = positions[ i + 4 ];
					z = positions[ i + 5 ];
					pB.set( x, y, z );

					x = positions[ i + 6 ];
					y = positions[ i + 7 ];
					z = positions[ i + 8 ];
					pC.set( x, y, z );

					cb.sub( pC, pB );
					ab.sub( pA, pB );
					cb.crossSelf( ab );

					normals[ i ] 	 = cb.x;
					normals[ i + 1 ] = cb.y;
					normals[ i + 2 ] = cb.z;

					normals[ i + 3 ] = cb.x;
					normals[ i + 4 ] = cb.y;
					normals[ i + 5 ] = cb.z;

					normals[ i + 6 ] = cb.x;
					normals[ i + 7 ] = cb.y;
					normals[ i + 8 ] = cb.z;

				}

			}

			this.normalizeNormals();

			this.normalsNeedUpdate = true;

		}

	},

	normalizeNormals: function () {

		var normals = this.attributes[ "normal" ].array;

		var x, y, z, n;

		for ( var i = 0, il = normals.length; i < il; i += 3 ) {

			x = normals[ i ];
			y = normals[ i + 1 ];
			z = normals[ i + 2 ];

			n = 1.0 / Math.sqrt( x * x + y * y + z * z );

			normals[ i ] 	 *= n;
			normals[ i + 1 ] *= n;
			normals[ i + 2 ] *= n;

		}

	},

	computeTangents: function () {

		// based on http://www.terathon.com/code/tangent.html
		// (per vertex tangents)

		if ( this.attributes[ "index" ] === undefined ||
			 this.attributes[ "position" ] === undefined ||
			 this.attributes[ "normal" ] === undefined ||
			 this.attributes[ "uv" ] === undefined ) {

			console.warn( "Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()" );
			return;

		}

		var indices = this.attributes[ "index" ].array;
		var positions = this.attributes[ "position" ].array;
		var normals = this.attributes[ "normal" ].array;
		var uvs = this.attributes[ "uv" ].array;

		var nVertices = positions.length / 3;

		if ( this.attributes[ "tangent" ] === undefined ) {

			var nTangentElements = 4 * nVertices;

			this.attributes[ "tangent" ] = {

				itemSize: 4,
				array: new Float32Array( nTangentElements ),
				numItems: nTangentElements

			};

		}

		var tangents = this.attributes[ "tangent" ].array;

		var tan1 = [], tan2 = [];

		for ( var k = 0; k < nVertices; k ++ ) {

			tan1[ k ] = new THREE.Vector3();
			tan2[ k ] = new THREE.Vector3();

		}

		var xA, yA, zA,
			xB, yB, zB,
			xC, yC, zC,

			uA, vA,
			uB, vB,
			uC, vC,

			x1, x2, y1, y2, z1, z2,
			s1, s2, t1, t2, r;

		var sdir = new THREE.Vector3(), tdir = new THREE.Vector3();

		function handleTriangle( a, b, c ) {

			xA = positions[ a * 3 ];
			yA = positions[ a * 3 + 1 ];
			zA = positions[ a * 3 + 2 ];

			xB = positions[ b * 3 ];
			yB = positions[ b * 3 + 1 ];
			zB = positions[ b * 3 + 2 ];

			xC = positions[ c * 3 ];
			yC = positions[ c * 3 + 1 ];
			zC = positions[ c * 3 + 2 ];

			uA = uvs[ a * 2 ];
			vA = uvs[ a * 2 + 1 ];

			uB = uvs[ b * 2 ];
			vB = uvs[ b * 2 + 1 ];

			uC = uvs[ c * 2 ];
			vC = uvs[ c * 2 + 1 ];

			x1 = xB - xA;
			x2 = xC - xA;

			y1 = yB - yA;
			y2 = yC - yA;

			z1 = zB - zA;
			z2 = zC - zA;

			s1 = uB - uA;
			s2 = uC - uA;

			t1 = vB - vA;
			t2 = vC - vA;

			r = 1.0 / ( s1 * t2 - s2 * t1 );

			sdir.set(
				( t2 * x1 - t1 * x2 ) * r,
				( t2 * y1 - t1 * y2 ) * r,
				( t2 * z1 - t1 * z2 ) * r
			);

			tdir.set(
				( s1 * x2 - s2 * x1 ) * r,
				( s1 * y2 - s2 * y1 ) * r,
				( s1 * z2 - s2 * z1 ) * r
			);

			tan1[ a ].addSelf( sdir );
			tan1[ b ].addSelf( sdir );
			tan1[ c ].addSelf( sdir );

			tan2[ a ].addSelf( tdir );
			tan2[ b ].addSelf( tdir );
			tan2[ c ].addSelf( tdir );

		}

		var i, il;
		var j, jl;
		var iA, iB, iC;

		var offsets = this.offsets;

		for ( j = 0, jl = offsets.length; j < jl; ++ j ) {

			var start = offsets[ j ].start;
			var count = offsets[ j ].count;
			var index = offsets[ j ].index;

			for ( i = start, il = start + count; i < il; i += 3 ) {

				iA = index + indices[ i ];
				iB = index + indices[ i + 1 ];
				iC = index + indices[ i + 2 ];

				handleTriangle( iA, iB, iC );

			}

		}

		var tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();
		var n = new THREE.Vector3(), n2 = new THREE.Vector3();
		var w, t, test;
		var nx, ny, nz;

		function handleVertex( v ) {

			n.x = normals[ v * 3 ];
			n.y = normals[ v * 3 + 1 ];
			n.z = normals[ v * 3 + 2 ];

			n2.copy( n );

			t = tan1[ v ];

			// Gram-Schmidt orthogonalize

			tmp.copy( t );
			tmp.subSelf( n.multiplyScalar( n.dot( t ) ) ).normalize();

			// Calculate handedness

			tmp2.cross( n2, t );
			test = tmp2.dot( tan2[ v ] );
			w = ( test < 0.0 ) ? -1.0 : 1.0;

			tangents[ v * 4 ] 	  = tmp.x;
			tangents[ v * 4 + 1 ] = tmp.y;
			tangents[ v * 4 + 2 ] = tmp.z;
			tangents[ v * 4 + 3 ] = w;

		}

		for ( j = 0, jl = offsets.length; j < jl; ++ j ) {

			var start = offsets[ j ].start;
			var count = offsets[ j ].count;
			var index = offsets[ j ].index;

			for ( i = start, il = start + count; i < il; i += 3 ) {

				iA = index + indices[ i ];
				iB = index + indices[ i + 1 ];
				iC = index + indices[ i + 2 ];

				handleVertex( iA );
				handleVertex( iB );
				handleVertex( iC );

			}

		}

		this.hasTangents = true;
		this.tangentsNeedUpdate = true;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */

THREE.Camera = function () {

	THREE.Object3D.call( this );

	this.matrixWorldInverse = new THREE.Matrix4();

	this.projectionMatrix = new THREE.Matrix4();
	this.projectionMatrixInverse = new THREE.Matrix4();

};

THREE.Camera.prototype = Object.create( THREE.Object3D.prototype );

THREE.Camera.prototype.lookAt = function ( vector ) {

	// TODO: Add hierarchy support.

	this.matrix.lookAt( this.position, vector, this.up );

	if ( this.rotationAutoUpdate === true ) {

		if ( this.useQuaternion === false )  {

			this.rotation.setEulerFromRotationMatrix( this.matrix, this.eulerOrder );

		} else {

			this.quaternion.copy( this.matrix.decompose()[ 1 ] );

		}

	}

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {

	THREE.Camera.call( this );

	this.left = left;
	this.right = right;
	this.top = top;
	this.bottom = bottom;

	this.near = ( near !== undefined ) ? near : 0.1;
	this.far = ( far !== undefined ) ? far : 2000;

	this.updateProjectionMatrix();

};

THREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );

THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {

	this.projectionMatrix.makeOrthographic( this.left, this.right, this.top, this.bottom, this.near, this.far );

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author greggman / http://games.greggman.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

THREE.PerspectiveCamera = function ( fov, aspect, near, far ) {

	THREE.Camera.call( this );

	this.fov = fov !== undefined ? fov : 50;
	this.aspect = aspect !== undefined ? aspect : 1;
	this.near = near !== undefined ? near : 0.1;
	this.far = far !== undefined ? far : 2000;

	this.updateProjectionMatrix();

};

THREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );


/**
 * Uses Focal Length (in mm) to estimate and set FOV
 * 35mm (fullframe) camera is used if frame size is not specified;
 * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html
 */

THREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {

	if ( frameHeight === undefined ) frameHeight = 24;

	this.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );
	this.updateProjectionMatrix();

}


/**
 * Sets an offset in a larger frustum. This is useful for multi-window or
 * multi-monitor/multi-machine setups.
 *
 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
 * the monitors are in grid like this
 *
 *   +---+---+---+
 *   | A | B | C |
 *   +---+---+---+
 *   | D | E | F |
 *   +---+---+---+
 *
 * then for each monitor you would call it like this
 *
 *   var w = 1920;
 *   var h = 1080;
 *   var fullWidth = w * 3;
 *   var fullHeight = h * 2;
 *
 *   --A--
 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
 *   --B--
 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
 *   --C--
 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
 *   --D--
 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
 *   --E--
 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
 *   --F--
 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
 *
 *   Note there is no reason monitors have to be the same size or in a grid.
 */

THREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {

	this.fullWidth = fullWidth;
	this.fullHeight = fullHeight;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;

	this.updateProjectionMatrix();

};


THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {

	if ( this.fullWidth ) {

		var aspect = this.fullWidth / this.fullHeight;
		var top = Math.tan( THREE.Math.degToRad( this.fov * 0.5 ) ) * this.near;
		var bottom = -top;
		var left = aspect * bottom;
		var right = aspect * top;
		var width = Math.abs( right - left );
		var height = Math.abs( top - bottom );

		this.projectionMatrix.makeFrustum(
			left + this.x * width / this.fullWidth,
			left + ( this.x + this.width ) * width / this.fullWidth,
			top - ( this.y + this.height ) * height / this.fullHeight,
			top - this.y * height / this.fullHeight,
			this.near,
			this.far
		);

	} else {

		this.projectionMatrix.makePerspective( this.fov, this.aspect, this.near, this.far );

	}

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */
 
THREE.Light = function ( hex ) {

	THREE.Object3D.call( this );

	this.color = new THREE.Color( hex );

};

THREE.Light.prototype = Object.create( THREE.Object3D.prototype );
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.AmbientLight = function ( hex ) {

	THREE.Light.call( this, hex );

};

THREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );
/**
 * @author MPanknin / http://www.redplant.de/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.AreaLight = function ( hex, intensity ) {

	THREE.Light.call( this, hex );

	this.normal = new THREE.Vector3( 0, -1, 0 );
	this.right = new THREE.Vector3( 1, 0, 0 );

	this.intensity = ( intensity !== undefined ) ? intensity : 1;

	this.width = 1.0;
	this.height = 1.0;

	this.constantAttenuation = 1.5;
	this.linearAttenuation = 0.5;
	this.quadraticAttenuation = 0.1;

};

THREE.AreaLight.prototype = Object.create( THREE.Light.prototype );

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.DirectionalLight = function ( hex, intensity ) {

	THREE.Light.call( this, hex );

	this.position = new THREE.Vector3( 0, 1, 0 );
	this.target = new THREE.Object3D();

	this.intensity = ( intensity !== undefined ) ? intensity : 1;

	this.castShadow = false;
	this.onlyShadow = false;

	//

	this.shadowCameraNear = 50;
	this.shadowCameraFar = 5000;

	this.shadowCameraLeft = -500;
	this.shadowCameraRight = 500;
	this.shadowCameraTop = 500;
	this.shadowCameraBottom = -500;

	this.shadowCameraVisible = false;

	this.shadowBias = 0;
	this.shadowDarkness = 0.5;

	this.shadowMapWidth = 512;
	this.shadowMapHeight = 512;

	//

	this.shadowCascade = false;

	this.shadowCascadeOffset = new THREE.Vector3( 0, 0, -1000 );
	this.shadowCascadeCount = 2;

	this.shadowCascadeBias = [ 0, 0, 0 ];
	this.shadowCascadeWidth = [ 512, 512, 512 ];
	this.shadowCascadeHeight = [ 512, 512, 512 ];

	this.shadowCascadeNearZ = [ -1.000, 0.990, 0.998 ];
	this.shadowCascadeFarZ  = [  0.990, 0.998, 1.000 ];

	this.shadowCascadeArray = [];

	//

	this.shadowMap = null;
	this.shadowMapSize = null;
	this.shadowCamera = null;
	this.shadowMatrix = null;

};

THREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.HemisphereLight = function ( skyColorHex, groundColorHex, intensity ) {

	THREE.Light.call( this, skyColorHex );

	this.groundColor = new THREE.Color( groundColorHex );

	this.position = new THREE.Vector3( 0, 100, 0 );

	this.intensity = ( intensity !== undefined ) ? intensity : 1;

};

THREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.PointLight = function ( hex, intensity, distance ) {

	THREE.Light.call( this, hex );

	this.position = new THREE.Vector3( 0, 0, 0 );
	this.intensity = ( intensity !== undefined ) ? intensity : 1;
	this.distance = ( distance !== undefined ) ? distance : 0;

};

THREE.PointLight.prototype = Object.create( THREE.Light.prototype );
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SpotLight = function ( hex, intensity, distance, angle, exponent ) {

	THREE.Light.call( this, hex );

	this.position = new THREE.Vector3( 0, 1, 0 );
	this.target = new THREE.Object3D();

	this.intensity = ( intensity !== undefined ) ? intensity : 1;
	this.distance = ( distance !== undefined ) ? distance : 0;
	this.angle = ( angle !== undefined ) ? angle : Math.PI / 2;
	this.exponent = ( exponent !== undefined ) ? exponent : 10;

	this.castShadow = false;
	this.onlyShadow = false;

	//

	this.shadowCameraNear = 50;
	this.shadowCameraFar = 5000;
	this.shadowCameraFov = 50;

	this.shadowCameraVisible = false;

	this.shadowBias = 0;
	this.shadowDarkness = 0.5;

	this.shadowMapWidth = 512;
	this.shadowMapHeight = 512;

	//

	this.shadowMap = null;
	this.shadowMapSize = null;
	this.shadowCamera = null;
	this.shadowMatrix = null;

};

THREE.SpotLight.prototype = Object.create( THREE.Light.prototype );
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Loader = function ( showStatus ) {

	this.showStatus = showStatus;
	this.statusDomElement = showStatus ? THREE.Loader.prototype.addStatusElement() : null;

	this.onLoadStart = function () {};
	this.onLoadProgress = function () {};
	this.onLoadComplete = function () {};

};

THREE.Loader.prototype = {

	constructor: THREE.Loader,

	crossOrigin: 'anonymous',

	addStatusElement: function () {

		var e = document.createElement( "div" );

		e.style.position = "absolute";
		e.style.right = "0px";
		e.style.top = "0px";
		e.style.fontSize = "0.8em";
		e.style.textAlign = "left";
		e.style.background = "rgba(0,0,0,0.25)";
		e.style.color = "#fff";
		e.style.width = "120px";
		e.style.padding = "0.5em 0.5em 0.5em 0.5em";
		e.style.zIndex = 1000;

		e.innerHTML = "Loading ...";

		return e;

	},

	updateProgress: function ( progress ) {

		var message = "Loaded ";

		if ( progress.total ) {

			message += ( 100 * progress.loaded / progress.total ).toFixed(0) + "%";


		} else {

			message += ( progress.loaded / 1000 ).toFixed(2) + " KB";

		}

		this.statusDomElement.innerHTML = message;

	},

	extractUrlBase: function ( url ) {

		var parts = url.split( '/' );
		parts.pop();
		return ( parts.length < 1 ? '.' : parts.join( '/' ) ) + '/';

	},

	initMaterials: function ( materials, texturePath ) {

		var array = [];

		for ( var i = 0; i < materials.length; ++ i ) {

			array[ i ] = THREE.Loader.prototype.createMaterial( materials[ i ], texturePath );

		}

		return array;

	},

	needsTangents: function ( materials ) {

		for( var i = 0, il = materials.length; i < il; i ++ ) {

			var m = materials[ i ];

			if ( m instanceof THREE.ShaderMaterial ) return true;

		}

		return false;

	},

	createMaterial: function ( m, texturePath ) {

		var _this = this;

		function is_pow2( n ) {

			var l = Math.log( n ) / Math.LN2;
			return Math.floor( l ) == l;

		}

		function nearest_pow2( n ) {

			var l = Math.log( n ) / Math.LN2;
			return Math.pow( 2, Math.round(  l ) );

		}

		function load_image( where, url ) {

			var image = new Image();

			image.onload = function () {

				if ( !is_pow2( this.width ) || !is_pow2( this.height ) ) {

					var width = nearest_pow2( this.width );
					var height = nearest_pow2( this.height );

					where.image.width = width;
					where.image.height = height;
					where.image.getContext( '2d' ).drawImage( this, 0, 0, width, height );

				} else {

					where.image = this;

				}

				where.needsUpdate = true;

			};

			image.crossOrigin = _this.crossOrigin;
			image.src = url;

		}

		function create_texture( where, name, sourceFile, repeat, offset, wrap, anisotropy ) {

			var isCompressed = sourceFile.toLowerCase().endsWith( ".dds" );
			var fullPath = texturePath + "/" + sourceFile;

			if ( isCompressed ) {

				var texture = THREE.ImageUtils.loadCompressedTexture( fullPath );

				where[ name ] = texture;

			} else {

				var texture = document.createElement( 'canvas' );

				where[ name ] = new THREE.Texture( texture );

			}

			where[ name ].sourceFile = sourceFile;

			if( repeat ) {

				where[ name ].repeat.set( repeat[ 0 ], repeat[ 1 ] );

				if ( repeat[ 0 ] !== 1 ) where[ name ].wrapS = THREE.RepeatWrapping;
				if ( repeat[ 1 ] !== 1 ) where[ name ].wrapT = THREE.RepeatWrapping;

			}

			if ( offset ) {

				where[ name ].offset.set( offset[ 0 ], offset[ 1 ] );

			}

			if ( wrap ) {

				var wrapMap = {
					"repeat": THREE.RepeatWrapping,
					"mirror": THREE.MirroredRepeatWrapping
				}

				if ( wrapMap[ wrap[ 0 ] ] !== undefined ) where[ name ].wrapS = wrapMap[ wrap[ 0 ] ];
				if ( wrapMap[ wrap[ 1 ] ] !== undefined ) where[ name ].wrapT = wrapMap[ wrap[ 1 ] ];

			}

			if ( anisotropy ) {

				where[ name ].anisotropy = anisotropy;

			}

			if ( ! isCompressed ) {

				load_image( where[ name ], fullPath );

			}

		}

		function rgb2hex( rgb ) {

			return ( rgb[ 0 ] * 255 << 16 ) + ( rgb[ 1 ] * 255 << 8 ) + rgb[ 2 ] * 255;

		}

		// defaults

		var mtype = "MeshLambertMaterial";
		var mpars = { color: 0xeeeeee, opacity: 1.0, map: null, lightMap: null, normalMap: null, bumpMap: null, wireframe: false };

		// parameters from model file

		if ( m.shading ) {

			var shading = m.shading.toLowerCase();

			if ( shading === "phong" ) mtype = "MeshPhongMaterial";
			else if ( shading === "basic" ) mtype = "MeshBasicMaterial";

		}

		if ( m.blending !== undefined && THREE[ m.blending ] !== undefined ) {

			mpars.blending = THREE[ m.blending ];

		}

		if ( m.transparent !== undefined || m.opacity < 1.0 ) {

			mpars.transparent = m.transparent;

		}

		if ( m.depthTest !== undefined ) {

			mpars.depthTest = m.depthTest;

		}

		if ( m.depthWrite !== undefined ) {

			mpars.depthWrite = m.depthWrite;

		}

		if ( m.visible !== undefined ) {

			mpars.visible = m.visible;

		}

		if ( m.flipSided !== undefined ) {

			mpars.side = THREE.BackSide;

		}

		if ( m.doubleSided !== undefined ) {

			mpars.side = THREE.DoubleSide;

		}

		if ( m.wireframe !== undefined ) {

			mpars.wireframe = m.wireframe;

		}

		if ( m.vertexColors !== undefined ) {

			if ( m.vertexColors === "face" ) {

				mpars.vertexColors = THREE.FaceColors;

			} else if ( m.vertexColors ) {

				mpars.vertexColors = THREE.VertexColors;

			}

		}

		// colors

		if ( m.colorDiffuse ) {

			mpars.color = rgb2hex( m.colorDiffuse );

		} else if ( m.DbgColor ) {

			mpars.color = m.DbgColor;

		}

		if ( m.colorSpecular ) {

			mpars.specular = rgb2hex( m.colorSpecular );

		}

		if ( m.colorAmbient ) {

			mpars.ambient = rgb2hex( m.colorAmbient );

		}

		// modifiers

		if ( m.transparency ) {

			mpars.opacity = m.transparency;

		}

		if ( m.specularCoef ) {

			mpars.shininess = m.specularCoef;

		}

		// textures

		if ( m.mapDiffuse && texturePath ) {

			create_texture( mpars, "map", m.mapDiffuse, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );

		}

		if ( m.mapLight && texturePath ) {

			create_texture( mpars, "lightMap", m.mapLight, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );

		}

		if ( m.mapBump && texturePath ) {

			create_texture( mpars, "bumpMap", m.mapBump, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );

		}

		if ( m.mapNormal && texturePath ) {

			create_texture( mpars, "normalMap", m.mapNormal, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );

		}

		if ( m.mapSpecular && texturePath ) {

			create_texture( mpars, "specularMap", m.mapSpecular, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );

		}

		//

		if ( m.mapBumpScale ) {

			mpars.bumpScale = m.mapBumpScale;

		}

		// special case for normal mapped material

		if ( m.mapNormal ) {

			var shader = THREE.ShaderUtils.lib[ "normal" ];
			var uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			uniforms[ "tNormal" ].value = mpars.normalMap;

			if ( m.mapNormalFactor ) {

				uniforms[ "uNormalScale" ].value.set( m.mapNormalFactor, m.mapNormalFactor );

			}

			if ( mpars.map ) {

				uniforms[ "tDiffuse" ].value = mpars.map;
				uniforms[ "enableDiffuse" ].value = true;

			}

			if ( mpars.specularMap ) {

				uniforms[ "tSpecular" ].value = mpars.specularMap;
				uniforms[ "enableSpecular" ].value = true;

			}

			if ( mpars.lightMap ) {

				uniforms[ "tAO" ].value = mpars.lightMap;
				uniforms[ "enableAO" ].value = true;

			}

			// for the moment don't handle displacement texture

			uniforms[ "uDiffuseColor" ].value.setHex( mpars.color );
			uniforms[ "uSpecularColor" ].value.setHex( mpars.specular );
			uniforms[ "uAmbientColor" ].value.setHex( mpars.ambient );

			uniforms[ "uShininess" ].value = mpars.shininess;

			if ( mpars.opacity !== undefined ) {

				uniforms[ "uOpacity" ].value = mpars.opacity;

			}

			var parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };
			var material = new THREE.ShaderMaterial( parameters );

			if ( mpars.transparent ) {

				material.transparent = true;

			}

		} else {

			var material = new THREE[ mtype ]( mpars );

		}

		if ( m.DbgName !== undefined ) material.name = m.DbgName;

		return material;

	}

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.BinaryLoader = function ( showStatus ) {

	THREE.Loader.call( this, showStatus );

};

THREE.BinaryLoader.prototype = Object.create( THREE.Loader.prototype );

// Load models generated by slim OBJ converter with BINARY option (converter_obj_three_slim.py -t binary)
//  - binary models consist of two files: JS and BIN
//  - parameters
//		- url (required)
//		- callback (required)
//		- texturePath (optional: if not specified, textures will be assumed to be in the same folder as JS model file)
//		- binaryPath (optional: if not specified, binary file will be assumed to be in the same folder as JS model file)

THREE.BinaryLoader.prototype.load = function( url, callback, texturePath, binaryPath ) {

	// todo: unify load API to for easier SceneLoader use

	texturePath = texturePath && ( typeof texturePath === "string" ) ? texturePath : this.extractUrlBase( url );
	binaryPath = binaryPath && ( typeof binaryPath === "string" ) ? binaryPath : this.extractUrlBase( url );

	var callbackProgress = this.showProgress ? THREE.Loader.prototype.updateProgress : null;

	this.onLoadStart();

	// #1 load JS part via web worker

	this.loadAjaxJSON( this, url, callback, texturePath, binaryPath, callbackProgress );

};

THREE.BinaryLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, binaryPath, callbackProgress ) {

	var xhr = new XMLHttpRequest();

	xhr.onreadystatechange = function () {

		if ( xhr.readyState == 4 ) {

			if ( xhr.status == 200 || xhr.status == 0 ) {

				var json = JSON.parse( xhr.responseText );
				context.loadAjaxBuffers( json, callback, binaryPath, texturePath, callbackProgress );

			} else {

				console.error( "THREE.BinaryLoader: Couldn't load [" + url + "] [" + xhr.status + "]" );

			}

		}

	};

	xhr.open( "GET", url, true );
	xhr.send( null );

};

THREE.BinaryLoader.prototype.loadAjaxBuffers = function ( json, callback, binaryPath, texturePath, callbackProgress ) {

	var xhr = new XMLHttpRequest(),
		url = binaryPath + "/" + json.buffers;

	var length = 0;

	xhr.onreadystatechange = function () {

		if ( xhr.readyState == 4 ) {

			if ( xhr.status == 200 || xhr.status == 0 ) {

				var buffer = xhr.response;
				if ( buffer === undefined ) buffer = ( new Uint8Array( xhr.responseBody ) ).buffer; // IEWEBGL needs this
				THREE.BinaryLoader.prototype.createBinModel( buffer, callback, texturePath, json.materials );

			} else {

				console.error( "THREE.BinaryLoader: Couldn't load [" + url + "] [" + xhr.status + "]" );

			}

		} else if ( xhr.readyState == 3 ) {

			if ( callbackProgress ) {

				if ( length == 0 ) {

					length = xhr.getResponseHeader( "Content-Length" );

				}

				callbackProgress( { total: length, loaded: xhr.responseText.length } );

			}

		} else if ( xhr.readyState == 2 ) {

			length = xhr.getResponseHeader( "Content-Length" );

		}

	};

	xhr.open( "GET", url, true );
	xhr.responseType = "arraybuffer";
	xhr.send( null );

};

// Binary AJAX parser

THREE.BinaryLoader.prototype.createBinModel = function ( data, callback, texturePath, jsonMaterials ) {

	var Model = function ( texturePath ) {

		var scope = this,
			currentOffset = 0,
			md,
			normals = [],
			uvs = [],
			start_tri_flat, start_tri_smooth, start_tri_flat_uv, start_tri_smooth_uv,
			start_quad_flat, start_quad_smooth, start_quad_flat_uv, start_quad_smooth_uv,
			tri_size, quad_size,
			len_tri_flat, len_tri_smooth, len_tri_flat_uv, len_tri_smooth_uv,
			len_quad_flat, len_quad_smooth, len_quad_flat_uv, len_quad_smooth_uv;


		THREE.Geometry.call( this );

		md = parseMetaData( data, currentOffset );

		currentOffset += md.header_bytes;
/*
		md.vertex_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
		md.material_index_bytes = Uint16Array.BYTES_PER_ELEMENT;
		md.normal_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
		md.uv_index_bytes = Uint32Array.BYTES_PER_ELEMENT;
*/
		// buffers sizes

		tri_size =  md.vertex_index_bytes * 3 + md.material_index_bytes;
		quad_size = md.vertex_index_bytes * 4 + md.material_index_bytes;

		len_tri_flat      = md.ntri_flat      * ( tri_size );
		len_tri_smooth    = md.ntri_smooth    * ( tri_size + md.normal_index_bytes * 3 );
		len_tri_flat_uv   = md.ntri_flat_uv   * ( tri_size + md.uv_index_bytes * 3 );
		len_tri_smooth_uv = md.ntri_smooth_uv * ( tri_size + md.normal_index_bytes * 3 + md.uv_index_bytes * 3 );

		len_quad_flat      = md.nquad_flat      * ( quad_size );
		len_quad_smooth    = md.nquad_smooth    * ( quad_size + md.normal_index_bytes * 4 );
		len_quad_flat_uv   = md.nquad_flat_uv   * ( quad_size + md.uv_index_bytes * 4 );
		len_quad_smooth_uv = md.nquad_smooth_uv * ( quad_size + md.normal_index_bytes * 4 + md.uv_index_bytes * 4 );

		// read buffers

		currentOffset += init_vertices( currentOffset );

		currentOffset += init_normals( currentOffset );
		currentOffset += handlePadding( md.nnormals * 3 );

		currentOffset += init_uvs( currentOffset );

		start_tri_flat 		= currentOffset;
		start_tri_smooth    = start_tri_flat    + len_tri_flat    + handlePadding( md.ntri_flat * 2 );
		start_tri_flat_uv   = start_tri_smooth  + len_tri_smooth  + handlePadding( md.ntri_smooth * 2 );
		start_tri_smooth_uv = start_tri_flat_uv + len_tri_flat_uv + handlePadding( md.ntri_flat_uv * 2 );

		start_quad_flat     = start_tri_smooth_uv + len_tri_smooth_uv  + handlePadding( md.ntri_smooth_uv * 2 );
		start_quad_smooth   = start_quad_flat     + len_quad_flat	   + handlePadding( md.nquad_flat * 2 );
		start_quad_flat_uv  = start_quad_smooth   + len_quad_smooth    + handlePadding( md.nquad_smooth * 2 );
		start_quad_smooth_uv= start_quad_flat_uv  + len_quad_flat_uv   + handlePadding( md.nquad_flat_uv * 2 );

		// have to first process faces with uvs
		// so that face and uv indices match

		init_triangles_flat_uv( start_tri_flat_uv );
		init_triangles_smooth_uv( start_tri_smooth_uv );

		init_quads_flat_uv( start_quad_flat_uv );
		init_quads_smooth_uv( start_quad_smooth_uv );

		// now we can process untextured faces

		init_triangles_flat( start_tri_flat );
		init_triangles_smooth( start_tri_smooth );

		init_quads_flat( start_quad_flat );
		init_quads_smooth( start_quad_smooth );

		this.computeCentroids();
		this.computeFaceNormals();

		function handlePadding( n ) {

			return ( n % 4 ) ? ( 4 - n % 4 ) : 0;

		};

		function parseMetaData( data, offset ) {

			var metaData = {

				'signature'               :parseString( data, offset,  12 ),
				'header_bytes'            :parseUChar8( data, offset + 12 ),

				'vertex_coordinate_bytes' :parseUChar8( data, offset + 13 ),
				'normal_coordinate_bytes' :parseUChar8( data, offset + 14 ),
				'uv_coordinate_bytes'     :parseUChar8( data, offset + 15 ),

				'vertex_index_bytes'      :parseUChar8( data, offset + 16 ),
				'normal_index_bytes'      :parseUChar8( data, offset + 17 ),
				'uv_index_bytes'          :parseUChar8( data, offset + 18 ),
				'material_index_bytes'    :parseUChar8( data, offset + 19 ),

				'nvertices'    :parseUInt32( data, offset + 20 ),
				'nnormals'     :parseUInt32( data, offset + 20 + 4*1 ),
				'nuvs'         :parseUInt32( data, offset + 20 + 4*2 ),

				'ntri_flat'      :parseUInt32( data, offset + 20 + 4*3 ),
				'ntri_smooth'    :parseUInt32( data, offset + 20 + 4*4 ),
				'ntri_flat_uv'   :parseUInt32( data, offset + 20 + 4*5 ),
				'ntri_smooth_uv' :parseUInt32( data, offset + 20 + 4*6 ),

				'nquad_flat'      :parseUInt32( data, offset + 20 + 4*7 ),
				'nquad_smooth'    :parseUInt32( data, offset + 20 + 4*8 ),
				'nquad_flat_uv'   :parseUInt32( data, offset + 20 + 4*9 ),
				'nquad_smooth_uv' :parseUInt32( data, offset + 20 + 4*10 )

			};
/*
			console.log( "signature: " + metaData.signature );

			console.log( "header_bytes: " + metaData.header_bytes );
			console.log( "vertex_coordinate_bytes: " + metaData.vertex_coordinate_bytes );
			console.log( "normal_coordinate_bytes: " + metaData.normal_coordinate_bytes );
			console.log( "uv_coordinate_bytes: " + metaData.uv_coordinate_bytes );

			console.log( "vertex_index_bytes: " + metaData.vertex_index_bytes );
			console.log( "normal_index_bytes: " + metaData.normal_index_bytes );
			console.log( "uv_index_bytes: " + metaData.uv_index_bytes );
			console.log( "material_index_bytes: " + metaData.material_index_bytes );

			console.log( "nvertices: " + metaData.nvertices );
			console.log( "nnormals: " + metaData.nnormals );
			console.log( "nuvs: " + metaData.nuvs );

			console.log( "ntri_flat: " + metaData.ntri_flat );
			console.log( "ntri_smooth: " + metaData.ntri_smooth );
			console.log( "ntri_flat_uv: " + metaData.ntri_flat_uv );
			console.log( "ntri_smooth_uv: " + metaData.ntri_smooth_uv );

			console.log( "nquad_flat: " + metaData.nquad_flat );
			console.log( "nquad_smooth: " + metaData.nquad_smooth );
			console.log( "nquad_flat_uv: " + metaData.nquad_flat_uv );
			console.log( "nquad_smooth_uv: " + metaData.nquad_smooth_uv );

			var total = metaData.header_bytes
					  + metaData.nvertices * metaData.vertex_coordinate_bytes * 3
					  + metaData.nnormals * metaData.normal_coordinate_bytes * 3
					  + metaData.nuvs * metaData.uv_coordinate_bytes * 2
					  + metaData.ntri_flat * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes )
					  + metaData.ntri_smooth * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes + metaData.normal_index_bytes*3 )
					  + metaData.ntri_flat_uv * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes + metaData.uv_index_bytes*3 )
					  + metaData.ntri_smooth_uv * ( metaData.vertex_index_bytes*3 + metaData.material_index_bytes + metaData.normal_index_bytes*3 + metaData.uv_index_bytes*3 )
					  + metaData.nquad_flat * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes )
					  + metaData.nquad_smooth * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes + metaData.normal_index_bytes*4 )
					  + metaData.nquad_flat_uv * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes + metaData.uv_index_bytes*4 )
					  + metaData.nquad_smooth_uv * ( metaData.vertex_index_bytes*4 + metaData.material_index_bytes + metaData.normal_index_bytes*4 + metaData.uv_index_bytes*4 );
			console.log( "total bytes: " + total );
*/

			return metaData;

		};

		function parseString( data, offset, length ) {

			var charArray = new Uint8Array( data, offset, length );

			var text = "";

			for ( var i = 0; i < length; i ++ ) {

				text += String.fromCharCode( charArray[ offset + i ] );

			}

			return text;

		};

		function parseUChar8( data, offset ) {

			var charArray = new Uint8Array( data, offset, 1 );

			return charArray[ 0 ];

		};

		function parseUInt32( data, offset ) {

			var intArray = new Uint32Array( data, offset, 1 );

			return intArray[ 0 ];

		};

		function init_vertices( start ) {

			var nElements = md.nvertices;

			var coordArray = new Float32Array( data, start, nElements * 3 );

			var i, x, y, z;

			for( i = 0; i < nElements; i ++ ) {

				x = coordArray[ i * 3 ];
				y = coordArray[ i * 3 + 1 ];
				z = coordArray[ i * 3 + 2 ];

				vertex( scope, x, y, z );

			}

			return nElements * 3 * Float32Array.BYTES_PER_ELEMENT;

		};

		function init_normals( start ) {

			var nElements = md.nnormals;

			if ( nElements ) {

				var normalArray = new Int8Array( data, start, nElements * 3 );

				var i, x, y, z;

				for( i = 0; i < nElements; i ++ ) {

					x = normalArray[ i * 3 ];
					y = normalArray[ i * 3 + 1 ];
					z = normalArray[ i * 3 + 2 ];

					normals.push( x/127, y/127, z/127 );

				}

			}

			return nElements * 3 * Int8Array.BYTES_PER_ELEMENT;

		};

		function init_uvs( start ) {

			var nElements = md.nuvs;

			if ( nElements ) {

				var uvArray = new Float32Array( data, start, nElements * 2 );

				var i, u, v;

				for( i = 0; i < nElements; i ++ ) {

					u = uvArray[ i * 2 ];
					v = uvArray[ i * 2 + 1 ];

					uvs.push( u, v );

				}

			}

			return nElements * 2 * Float32Array.BYTES_PER_ELEMENT;

		};

		function init_uvs3( nElements, offset ) {

			var i, uva, uvb, uvc, u1, u2, u3, v1, v2, v3;

			var uvIndexBuffer = new Uint32Array( data, offset, 3 * nElements );

			for( i = 0; i < nElements; i ++ ) {

				uva = uvIndexBuffer[ i * 3 ];
				uvb = uvIndexBuffer[ i * 3 + 1 ];
				uvc = uvIndexBuffer[ i * 3 + 2 ];

				u1 = uvs[ uva*2 ];
				v1 = uvs[ uva*2 + 1 ];

				u2 = uvs[ uvb*2 ];
				v2 = uvs[ uvb*2 + 1 ];

				u3 = uvs[ uvc*2 ];
				v3 = uvs[ uvc*2 + 1 ];

				uv3( scope.faceVertexUvs[ 0 ], u1, v1, u2, v2, u3, v3 );

			}

		};

		function init_uvs4( nElements, offset ) {

			var i, uva, uvb, uvc, uvd, u1, u2, u3, u4, v1, v2, v3, v4;

			var uvIndexBuffer = new Uint32Array( data, offset, 4 * nElements );

			for( i = 0; i < nElements; i ++ ) {

				uva = uvIndexBuffer[ i * 4 ];
				uvb = uvIndexBuffer[ i * 4 + 1 ];
				uvc = uvIndexBuffer[ i * 4 + 2 ];
				uvd = uvIndexBuffer[ i * 4 + 3 ];

				u1 = uvs[ uva*2 ];
				v1 = uvs[ uva*2 + 1 ];

				u2 = uvs[ uvb*2 ];
				v2 = uvs[ uvb*2 + 1 ];

				u3 = uvs[ uvc*2 ];
				v3 = uvs[ uvc*2 + 1 ];

				u4 = uvs[ uvd*2 ];
				v4 = uvs[ uvd*2 + 1 ];

				uv4( scope.faceVertexUvs[ 0 ], u1, v1, u2, v2, u3, v3, u4, v4 );

			}

		};

		function init_faces3_flat( nElements, offsetVertices, offsetMaterials ) {

			var i, a, b, c, m;

			var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 3 * nElements );
			var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

			for( i = 0; i < nElements; i ++ ) {

				a = vertexIndexBuffer[ i * 3 ];
				b = vertexIndexBuffer[ i * 3 + 1 ];
				c = vertexIndexBuffer[ i * 3 + 2 ];

				m = materialIndexBuffer[ i ];

				f3( scope, a, b, c, m );

			}

		};

		function init_faces4_flat( nElements, offsetVertices, offsetMaterials ) {

			var i, a, b, c, d, m;

			var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 4 * nElements );
			var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

			for( i = 0; i < nElements; i ++ ) {

				a = vertexIndexBuffer[ i * 4 ];
				b = vertexIndexBuffer[ i * 4 + 1 ];
				c = vertexIndexBuffer[ i * 4 + 2 ];
				d = vertexIndexBuffer[ i * 4 + 3 ];

				m = materialIndexBuffer[ i ];

				f4( scope, a, b, c, d, m );

			}

		};

		function init_faces3_smooth( nElements, offsetVertices, offsetNormals, offsetMaterials ) {

			var i, a, b, c, m;
			var na, nb, nc;

			var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 3 * nElements );
			var normalIndexBuffer = new Uint32Array( data, offsetNormals, 3 * nElements );
			var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

			for( i = 0; i < nElements; i ++ ) {

				a = vertexIndexBuffer[ i * 3 ];
				b = vertexIndexBuffer[ i * 3 + 1 ];
				c = vertexIndexBuffer[ i * 3 + 2 ];

				na = normalIndexBuffer[ i * 3 ];
				nb = normalIndexBuffer[ i * 3 + 1 ];
				nc = normalIndexBuffer[ i * 3 + 2 ];

				m = materialIndexBuffer[ i ];

				f3n( scope, normals, a, b, c, m, na, nb, nc );

			}

		};

		function init_faces4_smooth( nElements, offsetVertices, offsetNormals, offsetMaterials ) {

			var i, a, b, c, d, m;
			var na, nb, nc, nd;

			var vertexIndexBuffer = new Uint32Array( data, offsetVertices, 4 * nElements );
			var normalIndexBuffer = new Uint32Array( data, offsetNormals, 4 * nElements );
			var materialIndexBuffer = new Uint16Array( data, offsetMaterials, nElements );

			for( i = 0; i < nElements; i ++ ) {

				a = vertexIndexBuffer[ i * 4 ];
				b = vertexIndexBuffer[ i * 4 + 1 ];
				c = vertexIndexBuffer[ i * 4 + 2 ];
				d = vertexIndexBuffer[ i * 4 + 3 ];

				na = normalIndexBuffer[ i * 4 ];
				nb = normalIndexBuffer[ i * 4 + 1 ];
				nc = normalIndexBuffer[ i * 4 + 2 ];
				nd = normalIndexBuffer[ i * 4 + 3 ];

				m = materialIndexBuffer[ i ];

				f4n( scope, normals, a, b, c, d, m, na, nb, nc, nd );

			}

		};

		function init_triangles_flat( start ) {

			var nElements = md.ntri_flat;

			if ( nElements ) {

				var offsetMaterials = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
				init_faces3_flat( nElements, start, offsetMaterials );

			}

		};

		function init_triangles_flat_uv( start ) {

			var nElements = md.ntri_flat_uv;

			if ( nElements ) {

				var offsetUvs = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
				var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

				init_faces3_flat( nElements, start, offsetMaterials );
				init_uvs3( nElements, offsetUvs );

			}

		};

		function init_triangles_smooth( start ) {

			var nElements = md.ntri_smooth;

			if ( nElements ) {

				var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
				var offsetMaterials = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

				init_faces3_smooth( nElements, start, offsetNormals, offsetMaterials );

			}

		};

		function init_triangles_smooth_uv( start ) {

			var nElements = md.ntri_smooth_uv;

			if ( nElements ) {

				var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
				var offsetUvs = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;
				var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 3;

				init_faces3_smooth( nElements, start, offsetNormals, offsetMaterials );
				init_uvs3( nElements, offsetUvs );

			}

		};

		function init_quads_flat( start ) {

			var nElements = md.nquad_flat;

			if ( nElements ) {

				var offsetMaterials = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
				init_faces4_flat( nElements, start, offsetMaterials );

			}

		};

		function init_quads_flat_uv( start ) {

			var nElements = md.nquad_flat_uv;

			if ( nElements ) {

				var offsetUvs = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
				var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

				init_faces4_flat( nElements, start, offsetMaterials );
				init_uvs4( nElements, offsetUvs );

			}

		};

		function init_quads_smooth( start ) {

			var nElements = md.nquad_smooth;

			if ( nElements ) {

				var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
				var offsetMaterials = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

				init_faces4_smooth( nElements, start, offsetNormals, offsetMaterials );

			}

		};

		function init_quads_smooth_uv( start ) {

			var nElements = md.nquad_smooth_uv;

			if ( nElements ) {

				var offsetNormals = start + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
				var offsetUvs = offsetNormals + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;
				var offsetMaterials = offsetUvs + nElements * Uint32Array.BYTES_PER_ELEMENT * 4;

				init_faces4_smooth( nElements, start, offsetNormals, offsetMaterials );
				init_uvs4( nElements, offsetUvs );

			}

		};

	};

	function vertex ( scope, x, y, z ) {

		scope.vertices.push( new THREE.Vector3( x, y, z ) );

	};

	function f3 ( scope, a, b, c, mi ) {

		scope.faces.push( new THREE.Face3( a, b, c, null, null, mi ) );

	};

	function f4 ( scope, a, b, c, d, mi ) {

		scope.faces.push( new THREE.Face4( a, b, c, d, null, null, mi ) );

	};

	function f3n ( scope, normals, a, b, c, mi, na, nb, nc ) {

		var nax = normals[ na*3     ],
			nay = normals[ na*3 + 1 ],
			naz = normals[ na*3 + 2 ],

			nbx = normals[ nb*3     ],
			nby = normals[ nb*3 + 1 ],
			nbz = normals[ nb*3 + 2 ],

			ncx = normals[ nc*3     ],
			ncy = normals[ nc*3 + 1 ],
			ncz = normals[ nc*3 + 2 ];

		scope.faces.push( new THREE.Face3( a, b, c,
						  [new THREE.Vector3( nax, nay, naz ),
						   new THREE.Vector3( nbx, nby, nbz ),
						   new THREE.Vector3( ncx, ncy, ncz )],
						  null,
						  mi ) );

	};

	function f4n ( scope, normals, a, b, c, d, mi, na, nb, nc, nd ) {

		var nax = normals[ na*3     ],
			nay = normals[ na*3 + 1 ],
			naz = normals[ na*3 + 2 ],

			nbx = normals[ nb*3     ],
			nby = normals[ nb*3 + 1 ],
			nbz = normals[ nb*3 + 2 ],

			ncx = normals[ nc*3     ],
			ncy = normals[ nc*3 + 1 ],
			ncz = normals[ nc*3 + 2 ],

			ndx = normals[ nd*3     ],
			ndy = normals[ nd*3 + 1 ],
			ndz = normals[ nd*3 + 2 ];

		scope.faces.push( new THREE.Face4( a, b, c, d,
						  [new THREE.Vector3( nax, nay, naz ),
						   new THREE.Vector3( nbx, nby, nbz ),
						   new THREE.Vector3( ncx, ncy, ncz ),
						   new THREE.Vector3( ndx, ndy, ndz )],
						  null,
						  mi ) );

	};

	function uv3 ( where, u1, v1, u2, v2, u3, v3 ) {

		where.push( [
			new THREE.Vector2( u1, v1 ),
			new THREE.Vector2( u2, v2 ),
			new THREE.Vector2( u3, v3 )
		] );

	};

	function uv4 ( where, u1, v1, u2, v2, u3, v3, u4, v4 ) {

		where.push( [
			new THREE.Vector2( u1, v1 ),
			new THREE.Vector2( u2, v2 ),
			new THREE.Vector2( u3, v3 ),
			new THREE.Vector2( u4, v4 )
		] );
	};

	Model.prototype = Object.create( THREE.Geometry.prototype );

	var geometry = new Model( texturePath );
	var materials = this.initMaterials( jsonMaterials, texturePath );

	if ( this.needsTangents( materials ) ) geometry.computeTangents();

	callback( geometry, materials );

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ImageLoader = function () {

	THREE.EventDispatcher.call( this );

	this.crossOrigin = null;

};

THREE.ImageLoader.prototype = {

	constructor: THREE.ImageLoader,

	load: function ( url, image ) {

		var scope = this;

		if ( image === undefined ) image = new Image();

		image.addEventListener( 'load', function () {

			scope.dispatchEvent( { type: 'load', content: image } );

		}, false );

		image.addEventListener( 'error', function () {

			scope.dispatchEvent( { type: 'error', message: 'Couldn\'t load URL [' + url + ']' } );

		}, false );

		if ( scope.crossOrigin ) image.crossOrigin = scope.crossOrigin;

		image.src = url;

	}

}
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.JSONLoader = function ( showStatus ) {

	THREE.Loader.call( this, showStatus );

	this.withCredentials = false;

};

THREE.JSONLoader.prototype = Object.create( THREE.Loader.prototype );

THREE.JSONLoader.prototype.load = function ( url, callback, texturePath ) {

	var scope = this;

	// todo: unify load API to for easier SceneLoader use

	texturePath = texturePath && ( typeof texturePath === "string" ) ? texturePath : this.extractUrlBase( url );

	this.onLoadStart();
	this.loadAjaxJSON( this, url, callback, texturePath );

};

THREE.JSONLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, callbackProgress ) {

	var xhr = new XMLHttpRequest();

	var length = 0;

	xhr.withCredentials = this.withCredentials;

	xhr.onreadystatechange = function () {

		if ( xhr.readyState === xhr.DONE ) {

			if ( xhr.status === 200 || xhr.status === 0 ) {

				if ( xhr.responseText ) {

					var json = JSON.parse( xhr.responseText );
					context.createModel( json, callback, texturePath );

				} else {

					console.warn( "THREE.JSONLoader: [" + url + "] seems to be unreachable or file there is empty" );

				}

				// in context of more complex asset initialization
				// do not block on single failed file
				// maybe should go even one more level up

				context.onLoadComplete();

			} else {

				console.error( "THREE.JSONLoader: Couldn't load [" + url + "] [" + xhr.status + "]" );

			}

		} else if ( xhr.readyState === xhr.LOADING ) {

			if ( callbackProgress ) {

				if ( length === 0 ) {

					length = xhr.getResponseHeader( "Content-Length" );

				}

				callbackProgress( { total: length, loaded: xhr.responseText.length } );

			}

		} else if ( xhr.readyState === xhr.HEADERS_RECEIVED ) {

			length = xhr.getResponseHeader( "Content-Length" );

		}

	};

	xhr.open( "GET", url, true );
	xhr.send( null );

};

THREE.JSONLoader.prototype.createModel = function ( json, callback, texturePath ) {

	var scope = this,
	geometry = new THREE.Geometry(),
	scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

	parseModel( scale );

	parseSkin();
	parseMorphing( scale );

	geometry.computeCentroids();
	geometry.computeFaceNormals();

	function parseModel( scale ) {

		function isBitSet( value, position ) {

			return value & ( 1 << position );

		}

		var i, j, fi,

		offset, zLength, nVertices,

		colorIndex, normalIndex, uvIndex, materialIndex,

		type,
		isQuad,
		hasMaterial,
		hasFaceUv, hasFaceVertexUv,
		hasFaceNormal, hasFaceVertexNormal,
		hasFaceColor, hasFaceVertexColor,

		vertex, face, color, normal,

		uvLayer, uvs, u, v,

		faces = json.faces,
		vertices = json.vertices,
		normals = json.normals,
		colors = json.colors,

		nUvLayers = 0;

		// disregard empty arrays

		for ( i = 0; i < json.uvs.length; i++ ) {

			if ( json.uvs[ i ].length ) nUvLayers ++;

		}

		for ( i = 0; i < nUvLayers; i++ ) {

			geometry.faceUvs[ i ] = [];
			geometry.faceVertexUvs[ i ] = [];

		}

		offset = 0;
		zLength = vertices.length;

		while ( offset < zLength ) {

			vertex = new THREE.Vector3();

			vertex.x = vertices[ offset ++ ] * scale;
			vertex.y = vertices[ offset ++ ] * scale;
			vertex.z = vertices[ offset ++ ] * scale;

			geometry.vertices.push( vertex );

		}

		offset = 0;
		zLength = faces.length;

		while ( offset < zLength ) {

			type = faces[ offset ++ ];


			isQuad          	= isBitSet( type, 0 );
			hasMaterial         = isBitSet( type, 1 );
			hasFaceUv           = isBitSet( type, 2 );
			hasFaceVertexUv     = isBitSet( type, 3 );
			hasFaceNormal       = isBitSet( type, 4 );
			hasFaceVertexNormal = isBitSet( type, 5 );
			hasFaceColor	    = isBitSet( type, 6 );
			hasFaceVertexColor  = isBitSet( type, 7 );

			//console.log("type", type, "bits", isQuad, hasMaterial, hasFaceUv, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

			if ( isQuad ) {

				face = new THREE.Face4();

				face.a = faces[ offset ++ ];
				face.b = faces[ offset ++ ];
				face.c = faces[ offset ++ ];
				face.d = faces[ offset ++ ];

				nVertices = 4;

			} else {

				face = new THREE.Face3();

				face.a = faces[ offset ++ ];
				face.b = faces[ offset ++ ];
				face.c = faces[ offset ++ ];

				nVertices = 3;

			}

			if ( hasMaterial ) {

				materialIndex = faces[ offset ++ ];
				face.materialIndex = materialIndex;

			}

			// to get face <=> uv index correspondence

			fi = geometry.faces.length;

			if ( hasFaceUv ) {

				for ( i = 0; i < nUvLayers; i++ ) {

					uvLayer = json.uvs[ i ];

					uvIndex = faces[ offset ++ ];

					u = uvLayer[ uvIndex * 2 ];
					v = uvLayer[ uvIndex * 2 + 1 ];

					geometry.faceUvs[ i ][ fi ] = new THREE.Vector2( u, v );

				}

			}

			if ( hasFaceVertexUv ) {

				for ( i = 0; i < nUvLayers; i++ ) {

					uvLayer = json.uvs[ i ];

					uvs = [];

					for ( j = 0; j < nVertices; j ++ ) {

						uvIndex = faces[ offset ++ ];

						u = uvLayer[ uvIndex * 2 ];
						v = uvLayer[ uvIndex * 2 + 1 ];

						uvs[ j ] = new THREE.Vector2( u, v );

					}

					geometry.faceVertexUvs[ i ][ fi ] = uvs;

				}

			}

			if ( hasFaceNormal ) {

				normalIndex = faces[ offset ++ ] * 3;

				normal = new THREE.Vector3();

				normal.x = normals[ normalIndex ++ ];
				normal.y = normals[ normalIndex ++ ];
				normal.z = normals[ normalIndex ];

				face.normal = normal;

			}

			if ( hasFaceVertexNormal ) {

				for ( i = 0; i < nVertices; i++ ) {

					normalIndex = faces[ offset ++ ] * 3;

					normal = new THREE.Vector3();

					normal.x = normals[ normalIndex ++ ];
					normal.y = normals[ normalIndex ++ ];
					normal.z = normals[ normalIndex ];

					face.vertexNormals.push( normal );

				}

			}


			if ( hasFaceColor ) {

				colorIndex = faces[ offset ++ ];

				color = new THREE.Color( colors[ colorIndex ] );
				face.color = color;

			}


			if ( hasFaceVertexColor ) {

				for ( i = 0; i < nVertices; i++ ) {

					colorIndex = faces[ offset ++ ];

					color = new THREE.Color( colors[ colorIndex ] );
					face.vertexColors.push( color );

				}

			}

			geometry.faces.push( face );

		}

	};

	function parseSkin() {

		var i, l, x, y, z, w, a, b, c, d;

		if ( json.skinWeights ) {

			for ( i = 0, l = json.skinWeights.length; i < l; i += 2 ) {

				x = json.skinWeights[ i     ];
				y = json.skinWeights[ i + 1 ];
				z = 0;
				w = 0;

				geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );

			}

		}

		if ( json.skinIndices ) {

			for ( i = 0, l = json.skinIndices.length; i < l; i += 2 ) {

				a = json.skinIndices[ i     ];
				b = json.skinIndices[ i + 1 ];
				c = 0;
				d = 0;

				geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );

			}

		}

		geometry.bones = json.bones;
		geometry.animation = json.animation;

	};

	function parseMorphing( scale ) {

		if ( json.morphTargets !== undefined ) {

			var i, l, v, vl, dstVertices, srcVertices;

			for ( i = 0, l = json.morphTargets.length; i < l; i ++ ) {

				geometry.morphTargets[ i ] = {};
				geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
				geometry.morphTargets[ i ].vertices = [];

				dstVertices = geometry.morphTargets[ i ].vertices;
				srcVertices = json.morphTargets [ i ].vertices;

				for( v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

					var vertex = new THREE.Vector3();
					vertex.x = srcVertices[ v ] * scale;
					vertex.y = srcVertices[ v + 1 ] * scale;
					vertex.z = srcVertices[ v + 2 ] * scale;

					dstVertices.push( vertex );

				}

			}

		}

		if ( json.morphColors !== undefined ) {

			var i, l, c, cl, dstColors, srcColors, color;

			for ( i = 0, l = json.morphColors.length; i < l; i++ ) {

				geometry.morphColors[ i ] = {};
				geometry.morphColors[ i ].name = json.morphColors[ i ].name;
				geometry.morphColors[ i ].colors = [];

				dstColors = geometry.morphColors[ i ].colors;
				srcColors = json.morphColors [ i ].colors;

				for ( c = 0, cl = srcColors.length; c < cl; c += 3 ) {

					color = new THREE.Color( 0xffaa00 );
					color.setRGB( srcColors[ c ], srcColors[ c + 1 ], srcColors[ c + 2 ] );
					dstColors.push( color );

				}

			}

		}

	};

	var materials = this.initMaterials( json.materials, texturePath );

	if ( this.needsTangents( materials ) ) geometry.computeTangents();

	callback( geometry, materials );

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.LoadingMonitor = function () {

	THREE.EventDispatcher.call( this );

	var scope = this;

	var loaded = 0;
	var total = 0;

	var onLoad = function ( event ) {

		loaded ++;

		scope.dispatchEvent( { type: 'progress', loaded: loaded, total: total } );

		if ( loaded === total ) {

			scope.dispatchEvent( { type: 'load' } );

		}

	};

	this.add = function ( loader ) {

		total ++;

		loader.addEventListener( 'load', onLoad, false );

	};

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SceneLoader = function () {

	this.onLoadStart = function () {};
	this.onLoadProgress = function() {};
	this.onLoadComplete = function () {};

	this.callbackSync = function () {};
	this.callbackProgress = function () {};

	this.geometryHandlerMap = {};
	this.hierarchyHandlerMap = {};

	this.addGeometryHandler( "ascii", THREE.JSONLoader );
	this.addGeometryHandler( "binary", THREE.BinaryLoader );

};

THREE.SceneLoader.prototype.constructor = THREE.SceneLoader;

THREE.SceneLoader.prototype.load = function ( url, callbackFinished ) {

	var scope = this;

	var xhr = new XMLHttpRequest();

	xhr.onreadystatechange = function () {

		if ( xhr.readyState === 4 ) {

			if ( xhr.status === 200 || xhr.status === 0 ) {

				var json = JSON.parse( xhr.responseText );
				scope.parse( json, callbackFinished, url );

			} else {

				console.error( "THREE.SceneLoader: Couldn't load [" + url + "] [" + xhr.status + "]" );

			}

		}

	};

	xhr.open( "GET", url, true );
	xhr.send( null );

};

THREE.SceneLoader.prototype.addGeometryHandler = function ( typeID, loaderClass ) {

	this.geometryHandlerMap[ typeID ] = { "loaderClass": loaderClass };

};

THREE.SceneLoader.prototype.addHierarchyHandler = function ( typeID, loaderClass ) {

	this.hierarchyHandlerMap[ typeID ] = { "loaderClass": loaderClass };

};

THREE.SceneLoader.prototype.parse = function ( json, callbackFinished, url ) {

	var scope = this;

	var urlBase = THREE.Loader.prototype.extractUrlBase( url );

	var geometry, material, camera, fog,
		texture, images, color,
		light, hex, intensity,
		counter_models, counter_textures,
		total_models, total_textures,
		result;

	var target_array = [];

	var data = json;

	// async geometry loaders

	for ( var typeID in this.geometryHandlerMap ) {

		var loaderClass = this.geometryHandlerMap[ typeID ][ "loaderClass" ];
		this.geometryHandlerMap[ typeID ][ "loaderObject" ] = new loaderClass();

	}

	// async hierachy loaders

	for ( var typeID in this.hierarchyHandlerMap ) {

		var loaderClass = this.hierarchyHandlerMap[ typeID ][ "loaderClass" ];
		this.hierarchyHandlerMap[ typeID ][ "loaderObject" ] = new loaderClass();

	}

	counter_models = 0;
	counter_textures = 0;

	result = {

		scene: new THREE.Scene(),
		geometries: {},
		face_materials: {},
		materials: {},
		textures: {},
		objects: {},
		cameras: {},
		lights: {},
		fogs: {},
		empties: {}

	};

	if ( data.transform ) {

		var position = data.transform.position,
			rotation = data.transform.rotation,
			scale = data.transform.scale;

		if ( position )
			result.scene.position.set( position[ 0 ], position[ 1 ], position [ 2 ] );

		if ( rotation )
			result.scene.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation [ 2 ] );

		if ( scale )
			result.scene.scale.set( scale[ 0 ], scale[ 1 ], scale [ 2 ] );

		if ( position || rotation || scale ) {

			result.scene.updateMatrix();
			result.scene.updateMatrixWorld();

		}

	}

	function get_url( source_url, url_type ) {

		if ( url_type == "relativeToHTML" ) {

			return source_url;

		} else {

			return urlBase + "/" + source_url;

		}

	};

	// toplevel loader function, delegates to handle_children

	function handle_objects() {

		handle_children( result.scene, data.objects );

	}

	// handle all the children from the loaded json and attach them to given parent

	function handle_children( parent, children ) {

		var mat, dst, pos, rot, scl, quat;

		for ( var objID in children ) {

			// check by id if child has already been handled,
			// if not, create new object

			if ( result.objects[ objID ] === undefined ) {

				var objJSON = children[ objID ];

				var object = null;

				// meshes

				if ( objJSON.type && ( objJSON.type in scope.hierarchyHandlerMap ) ) {

					if ( objJSON.loading === undefined ) {

						var reservedTypes = { "type": 1, "url": 1, "material": 1,
											  "position": 1, "rotation": 1, "scale" : 1,
											  "visible": 1, "children": 1, "properties": 1,
											  "skin": 1, "morph": 1, "mirroredLoop": 1, "duration": 1 };

						var loaderParameters = {};

						for ( var parType in objJSON ) {

							if ( ! ( parType in reservedTypes ) ) {

								loaderParameters[ parType ] = objJSON[ parType ];

							}

						}

						material = result.materials[ objJSON.material ];

						objJSON.loading = true;

						var loader = scope.hierarchyHandlerMap[ objJSON.type ][ "loaderObject" ];

						// ColladaLoader

						if ( loader.options ) {

							loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ) );

						// UTF8Loader
						// OBJLoader

						} else {

							loader.load( get_url( objJSON.url, data.urlBaseType ), create_callback_hierachy( objID, parent, material, objJSON ), loaderParameters );

						}

					}

				} else if ( objJSON.geometry !== undefined ) {

					geometry = result.geometries[ objJSON.geometry ];

					// geometry already loaded

					if ( geometry ) {

						var needsTangents = false;

						material = result.materials[ objJSON.material ];
						needsTangents = material instanceof THREE.ShaderMaterial;

						pos = objJSON.position;
						rot = objJSON.rotation;
						scl = objJSON.scale;
						mat = objJSON.matrix;
						quat = objJSON.quaternion;

						// use materials from the model file
						// if there is no material specified in the object

						if ( ! objJSON.material ) {

							material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );

						}

						// use materials from the model file
						// if there is just empty face material
						// (must create new material as each model has its own face material)

						if ( ( material instanceof THREE.MeshFaceMaterial ) && material.materials.length === 0 ) {

							material = new THREE.MeshFaceMaterial( result.face_materials[ objJSON.geometry ] );

						}

						if ( material instanceof THREE.MeshFaceMaterial ) {

							for ( var i = 0; i < material.materials.length; i ++ ) {

								needsTangents = needsTangents || ( material.materials[ i ] instanceof THREE.ShaderMaterial );

							}

						}

						if ( needsTangents ) {

							geometry.computeTangents();

						}

						if ( objJSON.skin ) {

							object = new THREE.SkinnedMesh( geometry, material );

						} else if ( objJSON.morph ) {

							object = new THREE.MorphAnimMesh( geometry, material );

							if ( objJSON.duration !== undefined ) {

								object.duration = objJSON.duration;

							}

							if ( objJSON.time !== undefined ) {

								object.time = objJSON.time;

							}

							if ( objJSON.mirroredLoop !== undefined ) {

								object.mirroredLoop = objJSON.mirroredLoop;

							}

							if ( material.morphNormals ) {

								geometry.computeMorphNormals();

							}

						} else {

							object = new THREE.Mesh( geometry, material );

						}

						object.name = objID;

						if ( mat ) {

							object.matrixAutoUpdate = false;
							object.matrix.set(
								mat[0],  mat[1],  mat[2],  mat[3],
								mat[4],  mat[5],  mat[6],  mat[7],
								mat[8],  mat[9],  mat[10], mat[11],
								mat[12], mat[13], mat[14], mat[15]
							);

						} else {

							object.position.set( pos[0], pos[1], pos[2] );

							if ( quat ) {

								object.quaternion.set( quat[0], quat[1], quat[2], quat[3] );
								object.useQuaternion = true;

							} else {

								object.rotation.set( rot[0], rot[1], rot[2] );

							}

							object.scale.set( scl[0], scl[1], scl[2] );

						}

						object.visible = objJSON.visible;
						object.castShadow = objJSON.castShadow;
						object.receiveShadow = objJSON.receiveShadow;

						parent.add( object );

						result.objects[ objID ] = object;

					}

				// lights

				} else if ( objJSON.type === "DirectionalLight" || objJSON.type === "PointLight" || objJSON.type === "AmbientLight" ) {

					hex = ( objJSON.color !== undefined ) ? objJSON.color : 0xffffff;
					intensity = ( objJSON.intensity !== undefined ) ? objJSON.intensity : 1;

					if ( objJSON.type === "DirectionalLight" ) {

						pos = objJSON.direction;

						light = new THREE.DirectionalLight( hex, intensity );
						light.position.set( pos[0], pos[1], pos[2] );

						if ( objJSON.target ) {

							target_array.push( { "object": light, "targetName" : objJSON.target } );

							// kill existing default target
							// otherwise it gets added to scene when parent gets added

							light.target = null;

						}

					} else if ( objJSON.type === "PointLight" ) {

						pos = objJSON.position;
						dst = objJSON.distance;

						light = new THREE.PointLight( hex, intensity, dst );
						light.position.set( pos[0], pos[1], pos[2] );

					} else if ( objJSON.type === "AmbientLight" ) {

						light = new THREE.AmbientLight( hex );

					}

					parent.add( light );

					light.name = objID;
					result.lights[ objID ] = light;
					result.objects[ objID ] = light;

				// cameras

				} else if ( objJSON.type === "PerspectiveCamera" || objJSON.type === "OrthographicCamera" ) {

					if ( objJSON.type === "PerspectiveCamera" ) {

						camera = new THREE.PerspectiveCamera( objJSON.fov, objJSON.aspect, objJSON.near, objJSON.far );

					} else if ( objJSON.type === "OrthographicCamera" ) {

						camera = new THREE.OrthographicCamera( objJSON.left, objJSON.right, objJSON.top, objJSON.bottom, objJSON.near, objJSON.far );

					}

					pos = objJSON.position;
					camera.position.set( pos[0], pos[1], pos[2] );
					parent.add( camera );

					camera.name = objID;
					result.cameras[ objID ] = camera;
					result.objects[ objID ] = camera;

				// pure Object3D

				} else {

					pos = objJSON.position;
					rot = objJSON.rotation;
					scl = objJSON.scale;
					quat = objJSON.quaternion;

					object = new THREE.Object3D();
					object.name = objID;
					object.position.set( pos[0], pos[1], pos[2] );

					if ( quat ) {

						object.quaternion.set( quat[0], quat[1], quat[2], quat[3] );
						object.useQuaternion = true;

					} else {

						object.rotation.set( rot[0], rot[1], rot[2] );

					}

					object.scale.set( scl[0], scl[1], scl[2] );
					object.visible = ( objJSON.visible !== undefined ) ? objJSON.visible : false;

					parent.add( object );

					result.objects[ objID ] = object;
					result.empties[ objID ] = object;

				}

				if ( object ) {

					if ( objJSON.properties !== undefined )  {

						for ( var key in objJSON.properties ) {

							var value = objJSON.properties[ key ];
							object.properties[ key ] = value;

						}

					}

					if ( objJSON.children !== undefined ) {

						handle_children( object, objJSON.children );

					}

				}

			}

		}

	};

	function handle_mesh( geo, mat, id ) {

		result.geometries[ id ] = geo;
		result.face_materials[ id ] = mat;
		handle_objects();

	};

	function handle_hierarchy( node, id, parent, material, obj ) {

		var p = obj.position;
		var r = obj.rotation;
		var q = obj.quaternion;
		var s = obj.scale;

		node.position.set( p[0], p[1], p[2] );

		if ( q ) {

			node.quaternion.set( q[0], q[1], q[2], q[3] );
			node.useQuaternion = true;

		} else {

			node.rotation.set( r[0], r[1], r[2] );

		}

		node.scale.set( s[0], s[1], s[2] );

		// override children materials
		// if object material was specified in JSON explicitly

		if ( material ) {

			node.traverse( function ( child )  {

				child.material = material;

			} );

		}

		// override children visibility
		// with root node visibility as specified in JSON

		var visible = ( obj.visible !== undefined ) ? obj.visible : true;

		node.traverse( function ( child )  {

			child.visible = visible;

		} );

		parent.add( node );

		node.name = id;

		result.objects[ id ] = node;
		handle_objects();

	};

	function create_callback_geometry( id ) {

		return function( geo, mat ) {

			handle_mesh( geo, mat, id );

			counter_models -= 1;

			scope.onLoadComplete();

			async_callback_gate();

		}

	};

	function create_callback_hierachy( id, parent, material, obj ) {

		return function( event ) {

			var result;

			// loaders which use EventDispatcher

			if ( event.content ) {

				result = event.content;

			// ColladaLoader

			} else if ( event.dae ) {

				result = event.scene;


			// UTF8Loader

			} else {

				result = event;

			}

			handle_hierarchy( result, id, parent, material, obj );

			counter_models -= 1;

			scope.onLoadComplete();

			async_callback_gate();

		}

	};

	function create_callback_embed( id ) {

		return function( geo, mat ) {

			result.geometries[ id ] = geo;
			result.face_materials[ id ] = mat;

		}

	};

	function async_callback_gate() {

		var progress = {

			totalModels : total_models,
			totalTextures : total_textures,
			loadedModels : total_models - counter_models,
			loadedTextures : total_textures - counter_textures

		};

		scope.callbackProgress( progress, result );

		scope.onLoadProgress();

		if ( counter_models === 0 && counter_textures === 0 ) {

			finalize();
			callbackFinished( result );

		}

	};

	function finalize() {

		// take care of targets which could be asynchronously loaded objects

		for ( var i = 0; i < target_array.length; i ++ ) {

			var ta = target_array[ i ];

			var target = result.objects[ ta.targetName ];

			if ( target ) {

				ta.object.target = target;

			} else {

				// if there was error and target of specified name doesn't exist in the scene file
				// create instead dummy target
				// (target must be added to scene explicitly as parent is already added)

				ta.object.target = new THREE.Object3D();
				result.scene.add( ta.object.target );

			}

			ta.object.target.properties.targetInverse = ta.object;

		}

	};

	var callbackTexture = function ( count ) {

		counter_textures -= count;
		async_callback_gate();

		scope.onLoadComplete();

	};

	// must use this instead of just directly calling callbackTexture
	// because of closure in the calling context loop

	var generateTextureCallback = function ( count ) {

		return function() {

			callbackTexture( count );

		};

	};

	// first go synchronous elements

	// fogs

	var fogID, fogJSON;

	for ( fogID in data.fogs ) {

		fogJSON = data.fogs[ fogID ];

		if ( fogJSON.type === "linear" ) {

			fog = new THREE.Fog( 0x000000, fogJSON.near, fogJSON.far );

		} else if ( fogJSON.type === "exp2" ) {

			fog = new THREE.FogExp2( 0x000000, fogJSON.density );

		}

		color = fogJSON.color;
		fog.color.setRGB( color[0], color[1], color[2] );

		result.fogs[ fogID ] = fog;

	}

	// now come potentially asynchronous elements

	// geometries

	// count how many geometries will be loaded asynchronously

	var geoID, geoJSON;

	for ( geoID in data.geometries ) {

		geoJSON = data.geometries[ geoID ];

		if ( geoJSON.type in this.geometryHandlerMap ) {

			counter_models += 1;

			scope.onLoadStart();

		}

	}

	// count how many hierarchies will be loaded asynchronously

	var objID, objJSON;

	for ( objID in data.objects ) {

		objJSON = data.objects[ objID ];

		if ( objJSON.type && ( objJSON.type in this.hierarchyHandlerMap ) ) {

			counter_models += 1;

			scope.onLoadStart();

		}

	}

	total_models = counter_models;

	for ( geoID in data.geometries ) {

		geoJSON = data.geometries[ geoID ];

		if ( geoJSON.type === "cube" ) {

			geometry = new THREE.CubeGeometry( geoJSON.width, geoJSON.height, geoJSON.depth, geoJSON.widthSegments, geoJSON.heightSegments, geoJSON.depthSegments );
			result.geometries[ geoID ] = geometry;

		} else if ( geoJSON.type === "plane" ) {

			geometry = new THREE.PlaneGeometry( geoJSON.width, geoJSON.height, geoJSON.widthSegments, geoJSON.heightSegments );
			result.geometries[ geoID ] = geometry;

		} else if ( geoJSON.type === "sphere" ) {

			geometry = new THREE.SphereGeometry( geoJSON.radius, geoJSON.widthSegments, geoJSON.heightSegments );
			result.geometries[ geoID ] = geometry;

		} else if ( geoJSON.type === "cylinder" ) {

			geometry = new THREE.CylinderGeometry( geoJSON.topRad, geoJSON.botRad, geoJSON.height, geoJSON.radSegs, geoJSON.heightSegs );
			result.geometries[ geoID ] = geometry;

		} else if ( geoJSON.type === "torus" ) {

			geometry = new THREE.TorusGeometry( geoJSON.radius, geoJSON.tube, geoJSON.segmentsR, geoJSON.segmentsT );
			result.geometries[ geoID ] = geometry;

		} else if ( geoJSON.type === "icosahedron" ) {

			geometry = new THREE.IcosahedronGeometry( geoJSON.radius, geoJSON.subdivisions );
			result.geometries[ geoID ] = geometry;

		} else if ( geoJSON.type in this.geometryHandlerMap ) {

			var loaderParameters = {};

			for ( var parType in geoJSON ) {

				if ( parType !== "type" && parType !== "url" ) {

					loaderParameters[ parType ] = geoJSON[ parType ];

				}

			}

			var loader = this.geometryHandlerMap[ geoJSON.type ][ "loaderObject" ];
			loader.load( get_url( geoJSON.url, data.urlBaseType ), create_callback_geometry( geoID ), loaderParameters );

		} else if ( geoJSON.type === "embedded" ) {

			var modelJson = data.embeds[ geoJSON.id ],
				texture_path = "";

			// pass metadata along to jsonLoader so it knows the format version

			modelJson.metadata = data.metadata;

			if ( modelJson ) {

				var jsonLoader = this.geometryHandlerMap[ "ascii" ][ "loaderObject" ];
				jsonLoader.createModel( modelJson, create_callback_embed( geoID ), texture_path );

			}

		}

	}

	// textures

	// count how many textures will be loaded asynchronously

	var textureID, textureJSON;

	for ( textureID in data.textures ) {

		textureJSON = data.textures[ textureID ];

		if ( textureJSON.url instanceof Array ) {

			counter_textures += textureJSON.url.length;

			for( var n = 0; n < textureJSON.url.length; n ++ ) {

				scope.onLoadStart();

			}

		} else {

			counter_textures += 1;

			scope.onLoadStart();

		}

	}

	total_textures = counter_textures;

	for ( textureID in data.textures ) {

		textureJSON = data.textures[ textureID ];

		if ( textureJSON.mapping !== undefined && THREE[ textureJSON.mapping ] !== undefined  ) {

			textureJSON.mapping = new THREE[ textureJSON.mapping ]();

		}

		if ( textureJSON.url instanceof Array ) {

			var count = textureJSON.url.length;
			var url_array = [];

			for( var i = 0; i < count; i ++ ) {

				url_array[ i ] = get_url( textureJSON.url[ i ], data.urlBaseType );

			}

			var isCompressed = url_array[ 0 ].endsWith( ".dds" );

			if ( isCompressed ) {

				texture = THREE.ImageUtils.loadCompressedTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );

			} else {

				texture = THREE.ImageUtils.loadTextureCube( url_array, textureJSON.mapping, generateTextureCallback( count ) );

			}

		} else {

			var isCompressed = textureJSON.url.toLowerCase().endsWith( ".dds" );
			var fullUrl = get_url( textureJSON.url, data.urlBaseType );
			var textureCallback = generateTextureCallback( 1 );

			if ( isCompressed ) {

				texture = THREE.ImageUtils.loadCompressedTexture( fullUrl, textureJSON.mapping, textureCallback );

			} else {

				texture = THREE.ImageUtils.loadTexture( fullUrl, textureJSON.mapping, textureCallback );

			}

			if ( THREE[ textureJSON.minFilter ] !== undefined )
				texture.minFilter = THREE[ textureJSON.minFilter ];

			if ( THREE[ textureJSON.magFilter ] !== undefined )
				texture.magFilter = THREE[ textureJSON.magFilter ];

			if ( textureJSON.anisotropy ) texture.anisotropy = textureJSON.anisotropy;

			if ( textureJSON.repeat ) {

				texture.repeat.set( textureJSON.repeat[ 0 ], textureJSON.repeat[ 1 ] );

				if ( textureJSON.repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
				if ( textureJSON.repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;

			}

			if ( textureJSON.offset ) {

				texture.offset.set( textureJSON.offset[ 0 ], textureJSON.offset[ 1 ] );

			}

			// handle wrap after repeat so that default repeat can be overriden

			if ( textureJSON.wrap ) {

				var wrapMap = {
				"repeat" 	: THREE.RepeatWrapping,
				"mirror"	: THREE.MirroredRepeatWrapping
				}

				if ( wrapMap[ textureJSON.wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ textureJSON.wrap[ 0 ] ];
				if ( wrapMap[ textureJSON.wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ textureJSON.wrap[ 1 ] ];

			}

		}

		result.textures[ textureID ] = texture;

	}

	// materials

	var matID, matJSON;
	var parID;

	for ( matID in data.materials ) {

		matJSON = data.materials[ matID ];

		for ( parID in matJSON.parameters ) {

			if ( parID === "envMap" || parID === "map" || parID === "lightMap" || parID === "bumpMap" ) {

				matJSON.parameters[ parID ] = result.textures[ matJSON.parameters[ parID ] ];

			} else if ( parID === "shading" ) {

				matJSON.parameters[ parID ] = ( matJSON.parameters[ parID ] === "flat" ) ? THREE.FlatShading : THREE.SmoothShading;

			} else if ( parID === "side" ) {

				if ( matJSON.parameters[ parID ] == "double" ) {

					matJSON.parameters[ parID ] = THREE.DoubleSide;

				} else if ( matJSON.parameters[ parID ] == "back" ) {

					matJSON.parameters[ parID ] = THREE.BackSide;

				} else {

					matJSON.parameters[ parID ] = THREE.FrontSide;

				}

			} else if ( parID === "blending" ) {

				matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.NormalBlending;

			} else if ( parID === "combine" ) {

				matJSON.parameters[ parID ] = matJSON.parameters[ parID ] in THREE ? THREE[ matJSON.parameters[ parID ] ] : THREE.MultiplyOperation;

			} else if ( parID === "vertexColors" ) {

				if ( matJSON.parameters[ parID ] == "face" ) {

					matJSON.parameters[ parID ] = THREE.FaceColors;

				// default to vertex colors if "vertexColors" is anything else face colors or 0 / null / false

				} else if ( matJSON.parameters[ parID ] )   {

					matJSON.parameters[ parID ] = THREE.VertexColors;

				}

			} else if ( parID === "wrapRGB" ) {

				var v3 = matJSON.parameters[ parID ];
				matJSON.parameters[ parID ] = new THREE.Vector3( v3[ 0 ], v3[ 1 ], v3[ 2 ] );

			}

		}

		if ( matJSON.parameters.opacity !== undefined && matJSON.parameters.opacity < 1.0 ) {

			matJSON.parameters.transparent = true;

		}

		if ( matJSON.parameters.normalMap ) {

			var shader = THREE.ShaderUtils.lib[ "normal" ];
			var uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			var diffuse = matJSON.parameters.color;
			var specular = matJSON.parameters.specular;
			var ambient = matJSON.parameters.ambient;
			var shininess = matJSON.parameters.shininess;

			uniforms[ "tNormal" ].value = result.textures[ matJSON.parameters.normalMap ];

			if ( matJSON.parameters.normalScale ) {

				uniforms[ "uNormalScale" ].value.set( matJSON.parameters.normalScale[ 0 ], matJSON.parameters.normalScale[ 1 ] );

			}

			if ( matJSON.parameters.map ) {

				uniforms[ "tDiffuse" ].value = matJSON.parameters.map;
				uniforms[ "enableDiffuse" ].value = true;

			}

			if ( matJSON.parameters.envMap ) {

				uniforms[ "tCube" ].value = matJSON.parameters.envMap;
				uniforms[ "enableReflection" ].value = true;
				uniforms[ "uReflectivity" ].value = matJSON.parameters.reflectivity;

			}

			if ( matJSON.parameters.lightMap ) {

				uniforms[ "tAO" ].value = matJSON.parameters.lightMap;
				uniforms[ "enableAO" ].value = true;

			}

			if ( matJSON.parameters.specularMap ) {

				uniforms[ "tSpecular" ].value = result.textures[ matJSON.parameters.specularMap ];
				uniforms[ "enableSpecular" ].value = true;

			}

			if ( matJSON.parameters.displacementMap ) {

				uniforms[ "tDisplacement" ].value = result.textures[ matJSON.parameters.displacementMap ];
				uniforms[ "enableDisplacement" ].value = true;

				uniforms[ "uDisplacementBias" ].value = matJSON.parameters.displacementBias;
				uniforms[ "uDisplacementScale" ].value = matJSON.parameters.displacementScale;

			}

			uniforms[ "uDiffuseColor" ].value.setHex( diffuse );
			uniforms[ "uSpecularColor" ].value.setHex( specular );
			uniforms[ "uAmbientColor" ].value.setHex( ambient );

			uniforms[ "uShininess" ].value = shininess;

			if ( matJSON.parameters.opacity ) {

				uniforms[ "uOpacity" ].value = matJSON.parameters.opacity;

			}

			var parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };

			material = new THREE.ShaderMaterial( parameters );

		} else {

			material = new THREE[ matJSON.type ]( matJSON.parameters );

		}

		result.materials[ matID ] = material;

	}

	// second pass through all materials to initialize MeshFaceMaterials
	// that could be referring to other materials out of order

	for ( matID in data.materials ) {

		matJSON = data.materials[ matID ];

		if ( matJSON.parameters.materials ) {

			var materialArray = [];

			for ( var i = 0; i < matJSON.parameters.materials.length; i ++ ) {

				var label = matJSON.parameters.materials[ i ];
				materialArray.push( result.materials[ label ] );

			}

			result.materials[ matID ].materials = materialArray;

		}

	}

	// objects ( synchronous init of procedural primitives )

	handle_objects();

	// defaults

	if ( result.cameras && data.defaults.camera ) {

		result.currentCamera = result.cameras[ data.defaults.camera ];

	}

	if ( result.fogs && data.defaults.fog ) {

		result.scene.fog = result.fogs[ data.defaults.fog ];

	}

	color = data.defaults.bgcolor;
	result.bgColor = new THREE.Color();
	result.bgColor.setRGB( color[0], color[1], color[2] );

	result.bgColorAlpha = data.defaults.bgalpha;

	// synchronous callback

	scope.callbackSync( result );

	// just in case there are no async elements

	async_callback_gate();

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.TextureLoader = function () {

	THREE.EventDispatcher.call( this );

	this.crossOrigin = null;

};

THREE.TextureLoader.prototype = {

	constructor: THREE.TextureLoader,

	load: function ( url ) {

		var scope = this;

		var image = new Image();

		image.addEventListener( 'load', function () {

			var texture = new THREE.Texture( image );
			texture.needsUpdate = true;

			scope.dispatchEvent( { type: 'load', content: texture } );

		}, false );

		image.addEventListener( 'error', function () {

			scope.dispatchEvent( { type: 'error', message: 'Couldn\'t load URL [' + url + ']' } );

		}, false );

		if ( scope.crossOrigin ) image.crossOrigin = scope.crossOrigin;

		image.src = url;

	}

}
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Material = function () {

	THREE.EventDispatcher.call( this );

	this.id = THREE.MaterialIdCount ++;

	this.name = '';

	this.side = THREE.FrontSide;

	this.opacity = 1;
	this.transparent = false;

	this.blending = THREE.NormalBlending;

	this.blendSrc = THREE.SrcAlphaFactor;
	this.blendDst = THREE.OneMinusSrcAlphaFactor;
	this.blendEquation = THREE.AddEquation;

	this.depthTest = true;
	this.depthWrite = true;

	this.polygonOffset = false;
	this.polygonOffsetFactor = 0;
	this.polygonOffsetUnits = 0;

	this.alphaTest = 0;

	this.overdraw = false; // Boolean for fixing antialiasing gaps in CanvasRenderer

	this.visible = true;

	this.needsUpdate = true;

};

THREE.Material.prototype.setValues = function ( values ) {

	if ( values === undefined ) return;

	for ( var key in values ) {

		var newValue = values[ key ];

		if ( newValue === undefined ) {

			console.warn( 'THREE.Material: \'' + key + '\' parameter is undefined.' );
			continue;

		}

		if ( key in this ) {

			var currentValue = this[ key ];

			if ( currentValue instanceof THREE.Color && newValue instanceof THREE.Color ) {

				currentValue.copy( newValue );

			} else if ( currentValue instanceof THREE.Color ) {

				currentValue.set( newValue );

			} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {

				currentValue.copy( newValue );

			} else {

				this[ key ] = newValue;

			}

		}

	}

};

THREE.Material.prototype.clone = function ( material ) {

	if ( material === undefined ) material = new THREE.Material();

	material.name = this.name;

	material.side = this.side;

	material.opacity = this.opacity;
	material.transparent = this.transparent;

	material.blending = this.blending;

	material.blendSrc = this.blendSrc;
	material.blendDst = this.blendDst;
	material.blendEquation = this.blendEquation;

	material.depthTest = this.depthTest;
	material.depthWrite = this.depthWrite;

	material.polygonOffset = this.polygonOffset;
	material.polygonOffsetFactor = this.polygonOffsetFactor;
	material.polygonOffsetUnits = this.polygonOffsetUnits;

	material.alphaTest = this.alphaTest;

	material.overdraw = this.overdraw;

	material.visible = this.visible;

	return material;

};

THREE.Material.prototype.dispose = function () {

	this.dispatchEvent( { type: 'dispose' } );

};

THREE.MaterialIdCount = 0;
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round",
 *
 *  vertexColors: <bool>
 *
 *  fog: <bool>
 * }
 */

THREE.LineBasicMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff );

	this.linewidth = 1;
	this.linecap = 'round';
	this.linejoin = 'round';

	this.vertexColors = false;

	this.fog = true;

	this.setValues( parameters );

};

THREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.LineBasicMaterial.prototype.clone = function () {

	var material = new THREE.LineBasicMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.linewidth = this.linewidth;
	material.linecap = this.linecap;
	material.linejoin = this.linejoin;

	material.vertexColors = this.vertexColors;

	material.fog = this.fog;

	return material;

};
/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>,
 *
 *  vertexColors: <bool>
 *
 *  fog: <bool>
 * }
 */

THREE.LineDashedMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff );

	this.linewidth = 1;

	this.scale = 1;
	this.dashSize = 3;
	this.gapSize = 1;

	this.vertexColors = false;

	this.fog = true;

	this.setValues( parameters );

};

THREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.LineDashedMaterial.prototype.clone = function () {

	var material = new THREE.LineDashedMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.linewidth = this.linewidth;

	material.scale = this.scale;
	material.dashSize = this.dashSize;
	material.gapSize = this.gapSize;

	material.vertexColors = this.vertexColors;

	material.fog = this.fog;

	return material;

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *
 *  fog: <bool>
 * }
 */

THREE.MeshBasicMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff ); // emissive

	this.map = null;

	this.lightMap = null;

	this.specularMap = null;

	this.envMap = null;
	this.combine = THREE.MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.fog = true;

	this.shading = THREE.SmoothShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.vertexColors = THREE.NoColors;

	this.skinning = false;
	this.morphTargets = false;

	this.setValues( parameters );

};

THREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshBasicMaterial.prototype.clone = function () {

	var material = new THREE.MeshBasicMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.map = this.map;

	material.lightMap = this.lightMap;

	material.specularMap = this.specularMap;

	material.envMap = this.envMap;
	material.combine = this.combine;
	material.reflectivity = this.reflectivity;
	material.refractionRatio = this.refractionRatio;

	material.fog = this.fog;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;
	material.wireframeLinecap = this.wireframeLinecap;
	material.wireframeLinejoin = this.wireframeLinejoin;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;
	material.morphTargets = this.morphTargets;

	return material;

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  ambient: <hex>,
 *  emissive: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *	fog: <bool>
 * }
 */

THREE.MeshLambertMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff ); // diffuse
	this.ambient = new THREE.Color( 0xffffff );
	this.emissive = new THREE.Color( 0x000000 );

	this.wrapAround = false;
	this.wrapRGB = new THREE.Vector3( 1, 1, 1 );

	this.map = null;

	this.lightMap = null;

	this.specularMap = null;

	this.envMap = null;
	this.combine = THREE.MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.fog = true;

	this.shading = THREE.SmoothShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.vertexColors = THREE.NoColors;

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

};

THREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshLambertMaterial.prototype.clone = function () {

	var material = new THREE.MeshLambertMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );
	material.ambient.copy( this.ambient );
	material.emissive.copy( this.emissive );

	material.wrapAround = this.wrapAround;
	material.wrapRGB.copy( this.wrapRGB );

	material.map = this.map;

	material.lightMap = this.lightMap;

	material.specularMap = this.specularMap;

	material.envMap = this.envMap;
	material.combine = this.combine;
	material.reflectivity = this.reflectivity;
	material.refractionRatio = this.refractionRatio;

	material.fog = this.fog;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;
	material.wireframeLinecap = this.wireframeLinecap;
	material.wireframeLinejoin = this.wireframeLinejoin;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;
	material.morphTargets = this.morphTargets;
	material.morphNormals = this.morphNormals;

	return material;

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  ambient: <hex>,
 *  emissive: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *	fog: <bool>
 * }
 */

THREE.MeshPhongMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff ); // diffuse
	this.ambient = new THREE.Color( 0xffffff );
	this.emissive = new THREE.Color( 0x000000 );
	this.specular = new THREE.Color( 0x111111 );
	this.shininess = 30;

	this.metal = false;
	this.perPixel = true;

	this.wrapAround = false;
	this.wrapRGB = new THREE.Vector3( 1, 1, 1 );

	this.map = null;

	this.lightMap = null;

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new THREE.Vector2( 1, 1 );

	this.specularMap = null;

	this.envMap = null;
	this.combine = THREE.MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.fog = true;

	this.shading = THREE.SmoothShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.vertexColors = THREE.NoColors;

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

};

THREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshPhongMaterial.prototype.clone = function () {

	var material = new THREE.MeshPhongMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );
	material.ambient.copy( this.ambient );
	material.emissive.copy( this.emissive );
	material.specular.copy( this.specular );
	material.shininess = this.shininess;

	material.metal = this.metal;
	material.perPixel = this.perPixel;

	material.wrapAround = this.wrapAround;
	material.wrapRGB.copy( this.wrapRGB );

	material.map = this.map;

	material.lightMap = this.lightMap;

	material.bumpMap = this.bumpMap;
	material.bumpScale = this.bumpScale;

	material.normalMap = this.normalMap;
	material.normalScale.copy( this.normalScale );

	material.specularMap = this.specularMap;

	material.envMap = this.envMap;
	material.combine = this.combine;
	material.reflectivity = this.reflectivity;
	material.refractionRatio = this.refractionRatio;

	material.fog = this.fog;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;
	material.wireframeLinecap = this.wireframeLinecap;
	material.wireframeLinejoin = this.wireframeLinejoin;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;
	material.morphTargets = this.morphTargets;
	material.morphNormals = this.morphNormals;

	return material;

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

THREE.MeshDepthMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.setValues( parameters );

};

THREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshDepthMaterial.prototype.clone = function () {

	var material = new THREE.LineBasicMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;

	return material;

};
/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  shading: THREE.FlatShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

THREE.MeshNormalMaterial = function ( parameters ) {

	THREE.Material.call( this, parameters );

	this.shading = THREE.FlatShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.setValues( parameters );

};

THREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshNormalMaterial.prototype.clone = function () {

	var material = new THREE.MeshNormalMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;

	return material;

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.MeshFaceMaterial = function ( materials ) {

	this.materials = materials instanceof Array ? materials : [];

};

THREE.MeshFaceMaterial.prototype.clone = function () {

	return new THREE.MeshFaceMaterial( this.materials.slice( 0 ) );

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  vertexColors: <bool>,
 *
 *  fog: <bool>
 * }
 */

THREE.ParticleBasicMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff );

	this.map = null;

	this.size = 1;
	this.sizeAttenuation = true;

	this.vertexColors = false;

	this.fog = true;

	this.setValues( parameters );

};

THREE.ParticleBasicMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.ParticleBasicMaterial.prototype.clone = function () {

	var material = new THREE.ParticleBasicMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.map = this.map;

	material.size = this.size;
	material.sizeAttenuation = this.sizeAttenuation;

	material.vertexColors = this.vertexColors;

	material.fog = this.fog;

	return material;

};
/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  color: <hex>,
 *  program: <function>,
 *  opacity: <float>,
 *  blending: THREE.NormalBlending
 * }
 */

THREE.ParticleCanvasMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.color = new THREE.Color( 0xffffff );
	this.program = function ( context, color ) {};

	this.setValues( parameters );

};

THREE.ParticleCanvasMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.ParticleCanvasMaterial.prototype.clone = function () {

	var material = new THREE.ParticleCanvasMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );
	material.program = this.program;

	return material;

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ParticleDOMMaterial = function ( element ) {

	this.element = element;

};

THREE.ParticleDOMMaterial.prototype.clone = function(){

	return new THREE.ParticleDOMMaterial( this.element );

};
/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  uniforms: { "parameter1": { type: "f", value: 1.0 }, "parameter2": { type: "i" value2: 2 } },
 *
 *  defines: { "label" : "value" },
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *	fog: <bool>
 * }
 */

THREE.ShaderMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.fragmentShader = "void main() {}";
	this.vertexShader = "void main() {}";
	this.uniforms = {};
	this.defines = {};
	this.attributes = null;

	this.shading = THREE.SmoothShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false; // set to use scene fog

	this.lights = false; // set to use scene lights

	this.vertexColors = THREE.NoColors; // set to use "color" attribute stream

	this.skinning = false; // set to use skinning attribute streams

	this.morphTargets = false; // set to use morph targets
	this.morphNormals = false; // set to use morph normals

	this.setValues( parameters );

};

THREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.ShaderMaterial.prototype.clone = function () {

	var material = new THREE.ShaderMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.fragmentShader = this.fragmentShader;
	material.vertexShader = this.vertexShader;

	material.uniforms = THREE.UniformsUtils.clone( this.uniforms );

	material.attributes = this.attributes;
	material.defines = this.defines;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;

	material.fog = this.fog;

	material.lights = this.lights;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;

	material.morphTargets = this.morphTargets;
	material.morphNormals = this.morphNormals;

	return material;

};
/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  useScreenCoordinates: <bool>,
 *  sizeAttenuation: <bool>,
 *  scaleByViewport: <bool>,
 *  alignment: THREE.SpriteAlignment.center,
 *
 *	uvOffset: new THREE.Vector2(),
 *	uvScale: new THREE.Vector2(),
 *
 *  fog: <bool>
 * }
 */

THREE.SpriteMaterial = function ( parameters ) {

	THREE.Material.call( this );

	// defaults

	this.color = new THREE.Color( 0xffffff );
	this.map = new THREE.Texture();

	this.useScreenCoordinates = true;
	this.depthTest = !this.useScreenCoordinates;
	this.sizeAttenuation = !this.useScreenCoordinates;
	this.scaleByViewport = !this.sizeAttenuation;
	this.alignment = THREE.SpriteAlignment.center.clone();

	this.fog = false;

	this.uvOffset = new THREE.Vector2( 0, 0 );
	this.uvScale  = new THREE.Vector2( 1, 1 );

	// set parameters

	this.setValues( parameters );

	// override coupled defaults if not specified explicitly by parameters

	parameters = parameters || {};

	if ( parameters.depthTest === undefined ) this.depthTest = !this.useScreenCoordinates;
	if ( parameters.sizeAttenuation === undefined ) this.sizeAttenuation = !this.useScreenCoordinates;
	if ( parameters.scaleByViewport === undefined ) this.scaleByViewport = !this.sizeAttenuation;

};

THREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.SpriteMaterial.prototype.clone = function () {

	var material = new THREE.SpriteMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );
	material.map = this.map;

	material.useScreenCoordinates = this.useScreenCoordinates;
	material.sizeAttenuation = this.sizeAttenuation;
	material.scaleByViewport = this.scaleByViewport;
	material.alignment.copy( this.alignment );

	material.uvOffset.copy( this.uvOffset );
	material.uvScale.copy( this.uvScale );

	material.fog = this.fog;

	return material;

};

// Alignment enums

THREE.SpriteAlignment = {};
THREE.SpriteAlignment.topLeft = new THREE.Vector2( 1, -1 );
THREE.SpriteAlignment.topCenter = new THREE.Vector2( 0, -1 );
THREE.SpriteAlignment.topRight = new THREE.Vector2( -1, -1 );
THREE.SpriteAlignment.centerLeft = new THREE.Vector2( 1, 0 );
THREE.SpriteAlignment.center = new THREE.Vector2( 0, 0 );
THREE.SpriteAlignment.centerRight = new THREE.Vector2( -1, 0 );
THREE.SpriteAlignment.bottomLeft = new THREE.Vector2( 1, 1 );
THREE.SpriteAlignment.bottomCenter = new THREE.Vector2( 0, 1 );
THREE.SpriteAlignment.bottomRight = new THREE.Vector2( -1, 1 );
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

THREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	THREE.EventDispatcher.call( this );

	this.id = THREE.TextureIdCount ++;

	this.name = '';

	this.image = image;
	this.mipmaps = [];

	this.mapping = mapping !== undefined ? mapping : new THREE.UVMapping();

	this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;
	this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;

	this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;
	this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;

	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

	this.format = format !== undefined ? format : THREE.RGBAFormat;
	this.type = type !== undefined ? type : THREE.UnsignedByteType;

	this.offset = new THREE.Vector2( 0, 0 );
	this.repeat = new THREE.Vector2( 1, 1 );

	this.generateMipmaps = true;
	this.premultiplyAlpha = false;
	this.flipY = true;
	this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

	this.needsUpdate = false;
	this.onUpdate = null;

};

THREE.Texture.prototype = {

	constructor: THREE.Texture,

	clone: function ( texture ) {

		if ( texture === undefined ) texture = new THREE.Texture();

		texture.image = this.image;
		texture.mipmaps = this.mipmaps.slice(0);

		texture.mapping = this.mapping;

		texture.wrapS = this.wrapS;
		texture.wrapT = this.wrapT;

		texture.magFilter = this.magFilter;
		texture.minFilter = this.minFilter;

		texture.anisotropy = this.anisotropy;

		texture.format = this.format;
		texture.type = this.type;

		texture.offset.copy( this.offset );
		texture.repeat.copy( this.repeat );

		texture.generateMipmaps = this.generateMipmaps;
		texture.premultiplyAlpha = this.premultiplyAlpha;
		texture.flipY = this.flipY;
		texture.unpackAlignment = this.unpackAlignment;

		return texture;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.TextureIdCount = 0;
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

	THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.image = { width: width, height: height };
	this.mipmaps = mipmaps;

	this.generateMipmaps = false; // WebGL currently can't generate mipmaps for compressed textures, they must be embedded in DDS file

};

THREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );

THREE.CompressedTexture.prototype.clone = function () {

	var texture = new THREE.CompressedTexture();

	THREE.Texture.prototype.clone.call( this, texture );

	return texture;

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

	THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.image = { data: data, width: width, height: height };

};

THREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );

THREE.DataTexture.prototype.clone = function () {

	var texture = new THREE.DataTexture();

	THREE.Texture.prototype.clone.call( this, texture );

	return texture;

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Particle = function ( material ) {

	THREE.Object3D.call( this );

	this.material = material;

};

THREE.Particle.prototype = Object.create( THREE.Object3D.prototype );

THREE.Particle.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Particle( this.material );

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ParticleSystem = function ( geometry, material ) {

	THREE.Object3D.call( this );

	this.geometry = geometry;
	this.material = ( material !== undefined ) ? material : new THREE.ParticleBasicMaterial( { color: Math.random() * 0xffffff } );

	this.sortParticles = false;

	if ( this.geometry ) {

		// calc bound radius

		if( this.geometry.boundingSphere === null ) {

			this.geometry.computeBoundingSphere();

		}

	}

	this.frustumCulled = false;

};

THREE.ParticleSystem.prototype = Object.create( THREE.Object3D.prototype );

THREE.ParticleSystem.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.ParticleSystem( this.geometry, this.material );
	object.sortParticles = this.sortParticles;

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Line = function ( geometry, material, type ) {

	THREE.Object3D.call( this );

	this.geometry = geometry;
	this.material = ( material !== undefined ) ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );
	this.type = ( type !== undefined ) ? type : THREE.LineStrip;

	if ( this.geometry ) {

		if ( ! this.geometry.boundingSphere ) {

			this.geometry.computeBoundingSphere();

		}

	}

};

THREE.LineStrip = 0;
THREE.LinePieces = 1;

THREE.Line.prototype = Object.create( THREE.Object3D.prototype );

THREE.Line.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Line( this.geometry, this.material, this.type );

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 */

THREE.Mesh = function ( geometry, material ) {

	THREE.Object3D.call( this );

	this.geometry = geometry;
	this.material = ( material !== undefined ) ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff, wireframe: true } );

	if ( this.geometry ) {

		// calc bound radius

		if ( this.geometry.boundingSphere === null ) {

			this.geometry.computeBoundingSphere();

		}

		// setup morph targets

		if ( this.geometry.morphTargets.length ) {

			this.morphTargetBase = -1;
			this.morphTargetForcedOrder = [];
			this.morphTargetInfluences = [];
			this.morphTargetDictionary = {};

			for( var m = 0; m < this.geometry.morphTargets.length; m ++ ) {

				this.morphTargetInfluences.push( 0 );
				this.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;

			}

		}

	}

}

THREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );

THREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {

	if ( this.morphTargetDictionary[ name ] !== undefined ) {

		return this.morphTargetDictionary[ name ];

	}

	console.log( "THREE.Mesh.getMorphTargetIndexByName: morph target " + name + " does not exist. Returning 0." );

	return 0;

};

THREE.Mesh.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Mesh( this.geometry, this.material );

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Bone = function( belongsToSkin ) {

	THREE.Object3D.call( this );

	this.skin = belongsToSkin;
	this.skinMatrix = new THREE.Matrix4();

};

THREE.Bone.prototype = Object.create( THREE.Object3D.prototype );

THREE.Bone.prototype.update = function( parentSkinMatrix, forceUpdate ) {

	// update local

	if ( this.matrixAutoUpdate ) {

		forceUpdate |= this.updateMatrix();

	}

	// update skin matrix

	if ( forceUpdate || this.matrixWorldNeedsUpdate ) {

		if( parentSkinMatrix ) {

			this.skinMatrix.multiply( parentSkinMatrix, this.matrix );

		} else {

			this.skinMatrix.copy( this.matrix );

		}

		this.matrixWorldNeedsUpdate = false;
		forceUpdate = true;

	}

	// update children

	var child, i, l = this.children.length;

	for ( i = 0; i < l; i ++ ) {

		this.children[ i ].update( this.skinMatrix, forceUpdate );

	}

};

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {

	THREE.Mesh.call( this, geometry, material );

	//

	this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

	// init bones

	this.identityMatrix = new THREE.Matrix4();

	this.bones = [];
	this.boneMatrices = [];

	var b, bone, gbone, p, q, s;

	if ( this.geometry && this.geometry.bones !== undefined ) {

		for ( b = 0; b < this.geometry.bones.length; b ++ ) {

			gbone = this.geometry.bones[ b ];

			p = gbone.pos;
			q = gbone.rotq;
			s = gbone.scl;

			bone = this.addBone();

			bone.name = gbone.name;
			bone.position.set( p[0], p[1], p[2] );
			bone.quaternion.set( q[0], q[1], q[2], q[3] );
			bone.useQuaternion = true;

			if ( s !== undefined ) {

				bone.scale.set( s[0], s[1], s[2] );

			} else {

				bone.scale.set( 1, 1, 1 );

			}

		}

		for ( b = 0; b < this.bones.length; b ++ ) {

			gbone = this.geometry.bones[ b ];
			bone = this.bones[ b ];

			if ( gbone.parent === -1 ) {

				this.add( bone );

			} else {

				this.bones[ gbone.parent ].add( bone );

			}

		}

		//

		var nBones = this.bones.length;

		if ( this.useVertexTexture ) {

			// layout (1 matrix = 4 pixels)
			//	RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
			//  with  8x8  pixel texture max   16 bones  (8 * 8  / 4)
			//  	 16x16 pixel texture max   64 bones (16 * 16 / 4)
			//  	 32x32 pixel texture max  256 bones (32 * 32 / 4)
			//  	 64x64 pixel texture max 1024 bones (64 * 64 / 4)

			var size;

			if ( nBones > 256 )
				size = 64;
			else if ( nBones > 64 )
				size = 32;
			else if ( nBones > 16 )
				size = 16;
			else
				size = 8;

			this.boneTextureWidth = size;
			this.boneTextureHeight = size;

			this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
			this.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );
			this.boneTexture.minFilter = THREE.NearestFilter;
			this.boneTexture.magFilter = THREE.NearestFilter;
			this.boneTexture.generateMipmaps = false;
			this.boneTexture.flipY = false;

		} else {

			this.boneMatrices = new Float32Array( 16 * nBones );

		}

		this.pose();

	}

};

THREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.SkinnedMesh.prototype.addBone = function( bone ) {

	if ( bone === undefined ) {

		bone = new THREE.Bone( this );

	}

	this.bones.push( bone );

	return bone;

};

THREE.SkinnedMesh.prototype.updateMatrixWorld = function ( force ) {

	this.matrixAutoUpdate && this.updateMatrix();

	// update matrixWorld

	if ( this.matrixWorldNeedsUpdate || force ) {

		if ( this.parent ) {

			this.matrixWorld.multiply( this.parent.matrixWorld, this.matrix );

		} else {

			this.matrixWorld.copy( this.matrix );

		}

		this.matrixWorldNeedsUpdate = false;

		force = true;

	}

	// update children

	for ( var i = 0, l = this.children.length; i < l; i ++ ) {

		var child = this.children[ i ];

		if ( child instanceof THREE.Bone ) {

			child.update( this.identityMatrix, false );

		} else {

			child.updateMatrixWorld( true );

		}

	}

	// make a snapshot of the bones' rest position

	if ( this.boneInverses == undefined ) {

		this.boneInverses = [];

		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

			var inverse = new THREE.Matrix4();

			inverse.getInverse( this.bones[ b ].skinMatrix );

			this.boneInverses.push( inverse );

		}

	}

	// flatten bone matrices to array

	for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

		// compute the offset between the current and the original transform;

		//TODO: we could get rid of this multiplication step if the skinMatrix
		// was already representing the offset; however, this requires some
		// major changes to the animation system

		THREE.SkinnedMesh.offsetMatrix.multiply( this.bones[ b ].skinMatrix, this.boneInverses[ b ] );

		THREE.SkinnedMesh.offsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );

	}

	if ( this.useVertexTexture ) {

		this.boneTexture.needsUpdate = true;

	}

};

THREE.SkinnedMesh.prototype.pose = function() {

	this.updateMatrixWorld( true );

	for ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {

		// normalize weights

		var sw = this.geometry.skinWeights[ i ];

		var scale = 1.0 / sw.lengthManhattan();

		if ( scale !== Infinity ) {

			sw.multiplyScalar( scale );

		} else {

			sw.set( 1 ); // this will be normalized by the shader anyway

		}

	}

};

THREE.SkinnedMesh.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.SkinnedMesh( this.geometry, this.material, this.useVertexTexture );

	THREE.Mesh.prototype.clone.call( this, object );

	return object;

};

THREE.SkinnedMesh.offsetMatrix = new THREE.Matrix4();
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.MorphAnimMesh = function ( geometry, material ) {

	THREE.Mesh.call( this, geometry, material );

	// API

	this.duration = 1000; // milliseconds
	this.mirroredLoop = false;
	this.time = 0;

	// internals

	this.lastKeyframe = 0;
	this.currentKeyframe = 0;

	this.direction = 1;
	this.directionBackwards = false;

	this.setFrameRange( 0, this.geometry.morphTargets.length - 1 );

};

THREE.MorphAnimMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.MorphAnimMesh.prototype.setFrameRange = function ( start, end ) {

	this.startKeyframe = start;
	this.endKeyframe = end;

	this.length = this.endKeyframe - this.startKeyframe + 1;

};

THREE.MorphAnimMesh.prototype.setDirectionForward = function () {

	this.direction = 1;
	this.directionBackwards = false;

};

THREE.MorphAnimMesh.prototype.setDirectionBackward = function () {

	this.direction = -1;
	this.directionBackwards = true;

};

THREE.MorphAnimMesh.prototype.parseAnimations = function () {

	var geometry = this.geometry;

	if ( ! geometry.animations ) geometry.animations = {};

	var firstAnimation, animations = geometry.animations;

	var pattern = /([a-z]+)(\d+)/;

	for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

		var morph = geometry.morphTargets[ i ];
		var parts = morph.name.match( pattern );

		if ( parts && parts.length > 1 ) {

			var label = parts[ 1 ];
			var num = parts[ 2 ];

			if ( ! animations[ label ] ) animations[ label ] = { start: Infinity, end: -Infinity };

			var animation = animations[ label ];

			if ( i < animation.start ) animation.start = i;
			if ( i > animation.end ) animation.end = i;

			if ( ! firstAnimation ) firstAnimation = label;

		}

	}

	geometry.firstAnimation = firstAnimation;

};

THREE.MorphAnimMesh.prototype.setAnimationLabel = function ( label, start, end ) {

	if ( ! this.geometry.animations ) this.geometry.animations = {};

	this.geometry.animations[ label ] = { start: start, end: end };

};

THREE.MorphAnimMesh.prototype.playAnimation = function ( label, fps ) {

	var animation = this.geometry.animations[ label ];

	if ( animation ) {

		this.setFrameRange( animation.start, animation.end );
		this.duration = 1000 * ( ( animation.end - animation.start ) / fps );
		this.time = 0;

	} else {

		console.warn( "animation[" + label + "] undefined" );

	}

};

THREE.MorphAnimMesh.prototype.updateAnimation = function ( delta ) {

	var frameTime = this.duration / this.length;

	this.time += this.direction * delta;

	if ( this.mirroredLoop ) {

		if ( this.time > this.duration || this.time < 0 ) {

			this.direction *= -1;

			if ( this.time > this.duration ) {

				this.time = this.duration;
				this.directionBackwards = true;

			}

			if ( this.time < 0 ) {

				this.time = 0;
				this.directionBackwards = false;

			}

		}

	} else {

		this.time = this.time % this.duration;

		if ( this.time < 0 ) this.time += this.duration;

	}

	var keyframe = this.startKeyframe + THREE.Math.clamp( Math.floor( this.time / frameTime ), 0, this.length - 1 );

	if ( keyframe !== this.currentKeyframe ) {

		this.morphTargetInfluences[ this.lastKeyframe ] = 0;
		this.morphTargetInfluences[ this.currentKeyframe ] = 1;

		this.morphTargetInfluences[ keyframe ] = 0;

		this.lastKeyframe = this.currentKeyframe;
		this.currentKeyframe = keyframe;

	}

	var mix = ( this.time % frameTime ) / frameTime;

	if ( this.directionBackwards ) {

		mix = 1 - mix;

	}

	this.morphTargetInfluences[ this.currentKeyframe ] = mix;
	this.morphTargetInfluences[ this.lastKeyframe ] = 1 - mix;

};

THREE.MorphAnimMesh.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.MorphAnimMesh( this.geometry, this.material );

	object.duration = this.duration;
	object.mirroredLoop = this.mirroredLoop;
	object.time = this.time;

	object.lastKeyframe = this.lastKeyframe;
	object.currentKeyframe = this.currentKeyframe;

	object.direction = this.direction;
	object.directionBackwards = this.directionBackwards;

	THREE.Mesh.prototype.clone.call( this, object );

	return object;

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Ribbon = function ( geometry, material ) {

	THREE.Object3D.call( this );

	this.geometry = geometry;
	this.material = material;

};

THREE.Ribbon.prototype = Object.create( THREE.Object3D.prototype );

THREE.Ribbon.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Ribbon( this.geometry, this.material );

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.LOD = function () {

	THREE.Object3D.call( this );

	this.LODs = [];

};


THREE.LOD.prototype = Object.create( THREE.Object3D.prototype );

THREE.LOD.prototype.addLevel = function ( object3D, visibleAtDistance ) {

	if ( visibleAtDistance === undefined ) {

		visibleAtDistance = 0;

	}

	visibleAtDistance = Math.abs( visibleAtDistance );

	for ( var l = 0; l < this.LODs.length; l ++ ) {

		if ( visibleAtDistance < this.LODs[ l ].visibleAtDistance ) {

			break;

		}

	}

	this.LODs.splice( l, 0, { visibleAtDistance: visibleAtDistance, object3D: object3D } );
	this.add( object3D );

};

THREE.LOD.prototype.update = function ( camera ) {

	if ( this.LODs.length > 1 ) {

		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		var inverse  = camera.matrixWorldInverse;
		var distance = -( inverse.elements[2] * this.matrixWorld.elements[12] + inverse.elements[6] * this.matrixWorld.elements[13] + inverse.elements[10] * this.matrixWorld.elements[14] + inverse.elements[14] );

		this.LODs[ 0 ].object3D.visible = true;

		for ( var l = 1; l < this.LODs.length; l ++ ) {

			if( distance >= this.LODs[ l ].visibleAtDistance ) {

				this.LODs[ l - 1 ].object3D.visible = false;
				this.LODs[ l     ].object3D.visible = true;

			} else {

				break;

			}

		}

		for( ; l < this.LODs.length; l ++ ) {

			this.LODs[ l ].object3D.visible = false;

		}

	}

};

THREE.LOD.prototype.clone = function () {

	// TODO

};
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Sprite = function ( material ) {

	THREE.Object3D.call( this );

	this.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();

	this.rotation3d = this.rotation;
	this.rotation = 0;

};

THREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );

/*
 * Custom update matrix
 */

THREE.Sprite.prototype.updateMatrix = function () {

	this.matrix.setPosition( this.position );

	this.rotation3d.set( 0, 0, this.rotation );
	this.matrix.setRotationFromEuler( this.rotation3d );

	if ( this.scale.x !== 1 || this.scale.y !== 1 ) {

		this.matrix.scale( this.scale );

	}

	this.matrixWorldNeedsUpdate = true;

};

THREE.Sprite.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Sprite( this.material );

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Scene = function () {

	THREE.Object3D.call( this );

	this.fog = null;
	this.overrideMaterial = null;

	this.matrixAutoUpdate = false;

	this.__objects = [];
	this.__lights = [];

	this.__objectsAdded = [];
	this.__objectsRemoved = [];

};

THREE.Scene.prototype = Object.create( THREE.Object3D.prototype );

THREE.Scene.prototype.__addObject = function ( object ) {

	if ( object instanceof THREE.Light ) {

		if ( this.__lights.indexOf( object ) === - 1 ) {

			this.__lights.push( object );

		}

		if ( object.target && object.target.parent === undefined ) {

			this.add( object.target );

		}

	} else if ( !( object instanceof THREE.Camera || object instanceof THREE.Bone ) ) {

		if ( this.__objects.indexOf( object ) === - 1 ) {

			this.__objects.push( object );
			this.__objectsAdded.push( object );

			// check if previously removed

			var i = this.__objectsRemoved.indexOf( object );

			if ( i !== -1 ) {

				this.__objectsRemoved.splice( i, 1 );

			}

		}

	}

	for ( var c = 0; c < object.children.length; c ++ ) {

		this.__addObject( object.children[ c ] );

	}

};

THREE.Scene.prototype.__removeObject = function ( object ) {

	if ( object instanceof THREE.Light ) {

		var i = this.__lights.indexOf( object );

		if ( i !== -1 ) {

			this.__lights.splice( i, 1 );

		}

	} else if ( !( object instanceof THREE.Camera ) ) {

		var i = this.__objects.indexOf( object );

		if( i !== -1 ) {

			this.__objects.splice( i, 1 );
			this.__objectsRemoved.push( object );

			// check if previously added

			var ai = this.__objectsAdded.indexOf( object );

			if ( ai !== -1 ) {

				this.__objectsAdded.splice( ai, 1 );

			}

		}

	}

	for ( var c = 0; c < object.children.length; c ++ ) {

		this.__removeObject( object.children[ c ] );

	}

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Fog = function ( hex, near, far ) {

	this.name = '';

	this.color = new THREE.Color( hex );

	this.near = ( near !== undefined ) ? near : 1;
	this.far = ( far !== undefined ) ? far : 1000;

};

THREE.Fog.prototype.clone = function () {

	return new THREE.Fog( this.color.getHex(), this.near, this.far );

};
/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.FogExp2 = function ( hex, density ) {

	this.name = '';
	this.color = new THREE.Color( hex );
	this.density = ( density !== undefined ) ? density : 0.00025;

};

THREE.FogExp2.prototype.clone = function () {

	return new THREE.FogExp2( this.color.getHex(), this.density );

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.CanvasRenderer = function ( parameters ) {

	console.log( 'THREE.CanvasRenderer', THREE.REVISION );

	parameters = parameters || {};

	var _this = this,
	_renderData, _elements, _lights,
	_projector = new THREE.Projector(),

	_canvas = parameters.canvas !== undefined
			? parameters.canvas
			: document.createElement( 'canvas' ),

	_canvasWidth, _canvasHeight, _canvasWidthHalf, _canvasHeightHalf,
	_context = _canvas.getContext( '2d' ),

	_clearColor = new THREE.Color( 0x000000 ),
	_clearOpacity = 0,

	_contextGlobalAlpha = 1,
	_contextGlobalCompositeOperation = 0,
	_contextStrokeStyle = null,
	_contextFillStyle = null,
	_contextLineWidth = null,
	_contextLineCap = null,
	_contextLineJoin = null,

	_v1, _v2, _v3, _v4,
	_v5 = new THREE.RenderableVertex(),
	_v6 = new THREE.RenderableVertex(),

	_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,
	_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,

	_color = new THREE.Color(),
	_color1 = new THREE.Color(),
	_color2 = new THREE.Color(),
	_color3 = new THREE.Color(),
	_color4 = new THREE.Color(),

	_diffuseColor = new THREE.Color(),
	_emissiveColor = new THREE.Color(),

	_patterns = {}, _imagedatas = {},

	_near, _far,

	_image, _uvs,
	_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,

	_clipBox = new THREE.Box2(),
	_clearBox = new THREE.Box2(),
	_elemBox = new THREE.Box2(),

	_enableLighting = false,
	_ambientLight = new THREE.Color(),
	_directionalLights = new THREE.Color(),
	_pointLights = new THREE.Color(),

	_pi2 = Math.PI * 2,
	_vector3 = new THREE.Vector3(), // Needed for PointLight

	_pixelMap, _pixelMapContext, _pixelMapImage, _pixelMapData,
	_gradientMap, _gradientMapContext, _gradientMapQuality = 16;

	_pixelMap = document.createElement( 'canvas' );
	_pixelMap.width = _pixelMap.height = 2;

	_pixelMapContext = _pixelMap.getContext( '2d' );
	_pixelMapContext.fillStyle = 'rgba(0,0,0,1)';
	_pixelMapContext.fillRect( 0, 0, 2, 2 );

	_pixelMapImage = _pixelMapContext.getImageData( 0, 0, 2, 2 );
	_pixelMapData = _pixelMapImage.data;

	_gradientMap = document.createElement( 'canvas' );
	_gradientMap.width = _gradientMap.height = _gradientMapQuality;

	_gradientMapContext = _gradientMap.getContext( '2d' );
	_gradientMapContext.translate( - _gradientMapQuality / 2, - _gradientMapQuality / 2 );
	_gradientMapContext.scale( _gradientMapQuality, _gradientMapQuality );

	_gradientMapQuality --; // Fix UVs

	this.domElement = _canvas;

	this.devicePixelRatio = parameters.devicePixelRatio !== undefined
				? parameters.devicePixelRatio
				: window.devicePixelRatio !== undefined
					? window.devicePixelRatio
					: 1;

	this.autoClear = true;
	this.sortObjects = true;
	this.sortElements = true;

	this.info = {

		render: {

			vertices: 0,
			faces: 0

		}

	}

	this.setSize = function ( width, height ) {

		_canvasWidth = width * this.devicePixelRatio;
		_canvasHeight = height * this.devicePixelRatio;

		_canvasWidthHalf = Math.floor( _canvasWidth / 2 );
		_canvasHeightHalf = Math.floor( _canvasHeight / 2 );

		_canvas.width = _canvasWidth;
		_canvas.height = _canvasHeight;

		_canvas.style.width = width + 'px';
		_canvas.style.height = height + 'px';

		_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );
		_clipBox.max.set( _canvasWidthHalf, _canvasHeightHalf );
		_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );
		_clearBox.max.set( _canvasWidthHalf, _canvasHeightHalf );

		_contextGlobalAlpha = 1;
		_contextGlobalCompositeOperation = 0;
		_contextStrokeStyle = null;
		_contextFillStyle = null;
		_contextLineWidth = null;
		_contextLineCap = null;
		_contextLineJoin = null;

	};

	this.setClearColor = function ( color, opacity ) {

		_clearColor.copy( color );
		_clearOpacity = opacity !== undefined ? opacity : 1;

		_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );
		_clearBox.max.set( _canvasWidthHalf, _canvasHeightHalf );

	};

	this.setClearColorHex = function ( hex, opacity ) {

		_clearColor.setHex( hex );
		_clearOpacity = opacity !== undefined ? opacity : 1;

		_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );
		_clearBox.max.set( _canvasWidthHalf, _canvasHeightHalf );

	};

	this.getMaxAnisotropy  = function () {

		return 0;

	};

	this.clear = function () {

		_context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );

		if ( _clearBox.empty() === false ) {

			_clearBox.intersect( _clipBox );
			_clearBox.expandByScalar( 2 );

			if ( _clearOpacity < 1 ) {

				_context.clearRect( _clearBox.min.x | 0, _clearBox.min.y | 0, ( _clearBox.max.x - _clearBox.min.x ) | 0, ( _clearBox.max.y - _clearBox.min.y ) | 0 );

			}

			if ( _clearOpacity > 0 ) {

				setBlending( THREE.NormalBlending );
				setOpacity( 1 );

				setFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearOpacity + ')' );

				_context.fillRect( _clearBox.min.x | 0, _clearBox.min.y | 0, ( _clearBox.max.x - _clearBox.min.x ) | 0, ( _clearBox.max.y - _clearBox.min.y ) | 0 );

			}

			_clearBox.makeEmpty();

		}


	};

	this.render = function ( scene, camera ) {

		if ( camera instanceof THREE.Camera === false ) {

			console.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );
			return;

		}

		if ( this.autoClear === true ) {

			this.clear();

		}

		_context.setTransform( 1, 0, 0, - 1, _canvasWidthHalf, _canvasHeightHalf );

		_this.info.render.vertices = 0;
		_this.info.render.faces = 0;

		_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );
		_elements = _renderData.elements;
		_lights = _renderData.lights;

		/* DEBUG
		_context.fillStyle = 'rgba( 0, 255, 255, 0.5 )';
		_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );
		*/

		_enableLighting = _lights.length > 0;

		if ( _enableLighting === true ) {

			 calculateLights();

		}

		for ( var e = 0, el = _elements.length; e < el; e++ ) {

			var element = _elements[ e ];

			var material = element.material;

			if ( material === undefined || material.visible === false ) continue;

			_elemBox.makeEmpty();

			if ( element instanceof THREE.RenderableParticle ) {

				_v1 = element;
				_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;

				renderParticle( _v1, element, material, scene );

			} else if ( element instanceof THREE.RenderableLine ) {

				_v1 = element.v1; _v2 = element.v2;

				_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;
				_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;

				_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen ] );

				if ( _clipBox.isIntersectionBox( _elemBox ) === true ) {

					renderLine( _v1, _v2, element, material, scene );

				}


			} else if ( element instanceof THREE.RenderableFace3 ) {

				_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;

				_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;
				_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;
				_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;

				if ( material.overdraw === true ) {

					expand( _v1.positionScreen, _v2.positionScreen );
					expand( _v2.positionScreen, _v3.positionScreen );
					expand( _v3.positionScreen, _v1.positionScreen );

				}

				_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ] );

				if ( _clipBox.isIntersectionBox( _elemBox ) === true ) {

					renderFace3( _v1, _v2, _v3, 0, 1, 2, element, material, scene );

				}

			} else if ( element instanceof THREE.RenderableFace4 ) {

				_v1 = element.v1; _v2 = element.v2; _v3 = element.v3; _v4 = element.v4;

				_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;
				_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;
				_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;
				_v4.positionScreen.x *= _canvasWidthHalf; _v4.positionScreen.y *= _canvasHeightHalf;

				_v5.positionScreen.copy( _v2.positionScreen );
				_v6.positionScreen.copy( _v4.positionScreen );

				if ( material.overdraw === true ) {

					expand( _v1.positionScreen, _v2.positionScreen );
					expand( _v2.positionScreen, _v4.positionScreen );
					expand( _v4.positionScreen, _v1.positionScreen );

					expand( _v3.positionScreen, _v5.positionScreen );
					expand( _v3.positionScreen, _v6.positionScreen );

				}

				_elemBox.setFromPoints( [ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen, _v4.positionScreen ] );

				if ( _clipBox.isIntersectionBox( _elemBox ) === true ) {

					renderFace4( _v1, _v2, _v3, _v4, _v5, _v6, element, material, scene );

				}

			}


			/* DEBUG
			_context.lineWidth = 1;
			_context.strokeStyle = 'rgba( 0, 255, 0, 0.5 )';
			_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );
			*/

			_clearBox.union( _elemBox );

		}

		/* DEBUG
		_context.lineWidth = 1;
		_context.strokeStyle = 'rgba( 255, 0, 0, 0.5 )';
		_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );
		*/

		_context.setTransform( 1, 0, 0, 1, 0, 0 );

		//

		function calculateLights() {

			_ambientLight.setRGB( 0, 0, 0 );
			_directionalLights.setRGB( 0, 0, 0 );
			_pointLights.setRGB( 0, 0, 0 );

			for ( var l = 0, ll = _lights.length; l < ll; l ++ ) {

				var light = _lights[ l ];
				var lightColor = light.color;

				if ( light instanceof THREE.AmbientLight ) {

					_ambientLight.r += lightColor.r;
					_ambientLight.g += lightColor.g;
					_ambientLight.b += lightColor.b;

				} else if ( light instanceof THREE.DirectionalLight ) {

					// for particles

					_directionalLights.r += lightColor.r;
					_directionalLights.g += lightColor.g;
					_directionalLights.b += lightColor.b;

				} else if ( light instanceof THREE.PointLight ) {

					// for particles

					_pointLights.r += lightColor.r;
					_pointLights.g += lightColor.g;
					_pointLights.b += lightColor.b;

				}

			}

		}

		function calculateLight( position, normal, color ) {

			for ( var l = 0, ll = _lights.length; l < ll; l ++ ) {

				var light = _lights[ l ];
				var lightColor = light.color;

				if ( light instanceof THREE.DirectionalLight ) {

					var lightPosition = light.matrixWorld.getPosition().normalize();

					var amount = normal.dot( lightPosition );

					if ( amount <= 0 ) continue;

					amount *= light.intensity;

					color.r += lightColor.r * amount;
					color.g += lightColor.g * amount;
					color.b += lightColor.b * amount;

				} else if ( light instanceof THREE.PointLight ) {

					var lightPosition = light.matrixWorld.getPosition();

					var amount = normal.dot( _vector3.sub( lightPosition, position ).normalize() );

					if ( amount <= 0 ) continue;

					amount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );

					if ( amount == 0 ) continue;

					amount *= light.intensity;

					color.r += lightColor.r * amount;
					color.g += lightColor.g * amount;
					color.b += lightColor.b * amount;

				}

			}

		}

		function renderParticle( v1, element, material, scene ) {

			setOpacity( material.opacity );
			setBlending( material.blending );

			var width, height, scaleX, scaleY,
			bitmap, bitmapWidth, bitmapHeight;

			if ( material instanceof THREE.ParticleBasicMaterial ) {

				if ( material.map === null ) {

					scaleX = element.object.scale.x;
					scaleY = element.object.scale.y;

					// TODO: Be able to disable this

					scaleX *= element.scale.x * _canvasWidthHalf;
					scaleY *= element.scale.y * _canvasHeightHalf;

					_elemBox.min.set( v1.x - scaleX, v1.y - scaleY );
					_elemBox.max.set( v1.x + scaleX, v1.y + scaleY );

					if ( _clipBox.isIntersectionBox( _elemBox ) === false ) {

						return;

					}

					setFillStyle( material.color.getStyle() );

					_context.save();
					_context.translate( v1.x, v1.y );
					_context.rotate( - element.rotation );
					_context.scale( scaleX, scaleY );
					_context.fillRect( -1, -1, 2, 2 );
					_context.restore();

				} else {

					bitmap = material.map.image;
					bitmapWidth = bitmap.width >> 1;
					bitmapHeight = bitmap.height >> 1;

					scaleX = element.scale.x * _canvasWidthHalf;
					scaleY = element.scale.y * _canvasHeightHalf;

					width = scaleX * bitmapWidth;
					height = scaleY * bitmapHeight;

					// TODO: Rotations break this...

					_elemBox.min.set( v1.x - width, v1.y - height );
					_elemBox.max.set( v1.x + width, v1.y + height );

					if ( _clipBox.isIntersectionBox( _elemBox ) === false ) {

						return;

					}

					_context.save();
					_context.translate( v1.x, v1.y );
					_context.rotate( - element.rotation );
					_context.scale( scaleX, - scaleY );

					_context.translate( - bitmapWidth, - bitmapHeight );
					_context.drawImage( bitmap, 0, 0 );
					_context.restore();

				}

				/* DEBUG
				setStrokeStyle( 'rgb(255,255,0)' );
				_context.beginPath();
				_context.moveTo( v1.x - 10, v1.y );
				_context.lineTo( v1.x + 10, v1.y );
				_context.moveTo( v1.x, v1.y - 10 );
				_context.lineTo( v1.x, v1.y + 10 );
				_context.stroke();
				*/

			} else if ( material instanceof THREE.ParticleCanvasMaterial ) {

				width = element.scale.x * _canvasWidthHalf;
				height = element.scale.y * _canvasHeightHalf;

				_elemBox.min.set( v1.x - width, v1.y - height );
				_elemBox.max.set( v1.x + width, v1.y + height );

				if ( _clipBox.isIntersectionBox( _elemBox ) === false ) {

					return;

				}

				setStrokeStyle( material.color.getStyle() );
				setFillStyle( material.color.getStyle() );

				_context.save();
				_context.translate( v1.x, v1.y );
				_context.rotate( - element.rotation );
				_context.scale( width, height );

				material.program( _context );

				_context.restore();

			}

		}

		function renderLine( v1, v2, element, material, scene ) {

			setOpacity( material.opacity );
			setBlending( material.blending );

			_context.beginPath();
			_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );
			_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );

			if ( material instanceof THREE.LineBasicMaterial ) {

				setLineWidth( material.linewidth );
				setLineCap( material.linecap );
				setLineJoin( material.linejoin );
				setStrokeStyle( material.color.getStyle() );

				_context.stroke();
				_elemBox.expandByScalar( material.linewidth * 2 );

			}

		}

		function renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material, scene ) {

			_this.info.render.vertices += 3;
			_this.info.render.faces ++;

			setOpacity( material.opacity );
			setBlending( material.blending );

			_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;
			_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;
			_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;

			drawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );

			if ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null && material.map === null ) {

				_diffuseColor.copy( material.color );
				_emissiveColor.copy( material.emissive );

				if ( material.vertexColors === THREE.FaceColors ) {

					_diffuseColor.r *= element.color.r;
					_diffuseColor.g *= element.color.g;
					_diffuseColor.b *= element.color.b;

				}

				if ( _enableLighting === true ) {

					if ( material.wireframe === false && material.shading == THREE.SmoothShading && element.vertexNormalsLength == 3 ) {

						_color1.r = _color2.r = _color3.r = _ambientLight.r;
						_color1.g = _color2.g = _color3.g = _ambientLight.g;
						_color1.b = _color2.b = _color3.b = _ambientLight.b;

						calculateLight( element.v1.positionWorld, element.vertexNormalsWorld[ 0 ], _color1 );
						calculateLight( element.v2.positionWorld, element.vertexNormalsWorld[ 1 ], _color2 );
						calculateLight( element.v3.positionWorld, element.vertexNormalsWorld[ 2 ], _color3 );

						_color1.r = _color1.r * _diffuseColor.r + _emissiveColor.r;
						_color1.g = _color1.g * _diffuseColor.g + _emissiveColor.g;
						_color1.b = _color1.b * _diffuseColor.b + _emissiveColor.b;

						_color2.r = _color2.r * _diffuseColor.r + _emissiveColor.r;
						_color2.g = _color2.g * _diffuseColor.g + _emissiveColor.g;
						_color2.b = _color2.b * _diffuseColor.b + _emissiveColor.b;

						_color3.r = _color3.r * _diffuseColor.r + _emissiveColor.r;
						_color3.g = _color3.g * _diffuseColor.g + _emissiveColor.g;
						_color3.b = _color3.b * _diffuseColor.b + _emissiveColor.b;

						_color4.r = ( _color2.r + _color3.r ) * 0.5;
						_color4.g = ( _color2.g + _color3.g ) * 0.5;
						_color4.b = ( _color2.b + _color3.b ) * 0.5;

						_image = getGradientTexture( _color1, _color2, _color3, _color4 );

						clipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );

					} else {

						_color.r = _ambientLight.r;
						_color.g = _ambientLight.g;
						_color.b = _ambientLight.b;

						calculateLight( element.centroidWorld, element.normalWorld, _color );

						_color.r = _color.r * _diffuseColor.r + _emissiveColor.r;
						_color.g = _color.g * _diffuseColor.g + _emissiveColor.g;
						_color.b = _color.b * _diffuseColor.b + _emissiveColor.b;

						material.wireframe === true
							? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
							: fillPath( _color );

					}

				} else {

					material.wireframe === true
						? strokePath( material.color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
						: fillPath( material.color );

				}

			} else if ( material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) {

				if ( material.map !== null ) {

					if ( material.map.mapping instanceof THREE.UVMapping ) {

						_uvs = element.uvs[ 0 ];
						patternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );

					}


				} else if ( material.envMap !== null ) {

					if ( material.envMap.mapping instanceof THREE.SphericalReflectionMapping ) {

						var cameraMatrix = camera.matrixWorldInverse;

						_vector3.copy( element.vertexNormalsWorld[ uv1 ] );
						_uv1x = ( _vector3.x * cameraMatrix.elements[0] + _vector3.y * cameraMatrix.elements[4] + _vector3.z * cameraMatrix.elements[8] ) * 0.5 + 0.5;
						_uv1y = ( _vector3.x * cameraMatrix.elements[1] + _vector3.y * cameraMatrix.elements[5] + _vector3.z * cameraMatrix.elements[9] ) * 0.5 + 0.5;

						_vector3.copy( element.vertexNormalsWorld[ uv2 ] );
						_uv2x = ( _vector3.x * cameraMatrix.elements[0] + _vector3.y * cameraMatrix.elements[4] + _vector3.z * cameraMatrix.elements[8] ) * 0.5 + 0.5;
						_uv2y = ( _vector3.x * cameraMatrix.elements[1] + _vector3.y * cameraMatrix.elements[5] + _vector3.z * cameraMatrix.elements[9] ) * 0.5 + 0.5;

						_vector3.copy( element.vertexNormalsWorld[ uv3 ] );
						_uv3x = ( _vector3.x * cameraMatrix.elements[0] + _vector3.y * cameraMatrix.elements[4] + _vector3.z * cameraMatrix.elements[8] ) * 0.5 + 0.5;
						_uv3y = ( _vector3.x * cameraMatrix.elements[1] + _vector3.y * cameraMatrix.elements[5] + _vector3.z * cameraMatrix.elements[9] ) * 0.5 + 0.5;

						patternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );

					}/* else if ( material.envMap.mapping == THREE.SphericalRefractionMapping ) {



					}*/


				} else {

					_color.copy( material.color );

					if ( material.vertexColors === THREE.FaceColors ) {

						_color.r *= element.color.r;
						_color.g *= element.color.g;
						_color.b *= element.color.b;

					}

					material.wireframe === true
						? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
						: fillPath( _color );

				}

			} else if ( material instanceof THREE.MeshDepthMaterial ) {

				_near = camera.near;
				_far = camera.far;

				_color1.r = _color1.g = _color1.b = 1 - smoothstep( v1.positionScreen.z, _near, _far );
				_color2.r = _color2.g = _color2.b = 1 - smoothstep( v2.positionScreen.z, _near, _far );
				_color3.r = _color3.g = _color3.b = 1 - smoothstep( v3.positionScreen.z, _near, _far );

				_color4.r = ( _color2.r + _color3.r ) * 0.5;
				_color4.g = ( _color2.g + _color3.g ) * 0.5;
				_color4.b = ( _color2.b + _color3.b ) * 0.5;

				_image = getGradientTexture( _color1, _color2, _color3, _color4 );

				clipImage( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, 0, 0, 1, 0, 0, 1, _image );

			} else if ( material instanceof THREE.MeshNormalMaterial ) {

				_color.r = normalToComponent( element.normalWorld.x );
				_color.g = normalToComponent( element.normalWorld.y );
				_color.b = normalToComponent( element.normalWorld.z );

				material.wireframe === true
					? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
					: fillPath( _color );

			}

		}

		function renderFace4( v1, v2, v3, v4, v5, v6, element, material, scene ) {

			_this.info.render.vertices += 4;
			_this.info.render.faces ++;

			setOpacity( material.opacity );
			setBlending( material.blending );

			if ( ( material.map !== undefined && material.map !== null ) || ( material.envMap !== undefined && material.envMap !== null ) ) {

				// Let renderFace3() handle this

				renderFace3( v1, v2, v4, 0, 1, 3, element, material, scene );
				renderFace3( v5, v3, v6, 1, 2, 3, element, material, scene );

				return;

			}

			_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;
			_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;
			_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;
			_v4x = v4.positionScreen.x; _v4y = v4.positionScreen.y;
			_v5x = v5.positionScreen.x; _v5y = v5.positionScreen.y;
			_v6x = v6.positionScreen.x; _v6y = v6.positionScreen.y;

			if ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) {

				_diffuseColor.copy( material.color );
				_emissiveColor.copy( material.emissive );

				if ( material.vertexColors === THREE.FaceColors ) {

					_diffuseColor.r *= element.color.r;
					_diffuseColor.g *= element.color.g;
					_diffuseColor.b *= element.color.b;

				}

				if ( _enableLighting === true ) {

					if ( material.wireframe === false && material.shading == THREE.SmoothShading && element.vertexNormalsLength == 4 ) {

						_color1.r = _color2.r = _color3.r = _color4.r = _ambientLight.r;
						_color1.g = _color2.g = _color3.g = _color4.g = _ambientLight.g;
						_color1.b = _color2.b = _color3.b = _color4.b = _ambientLight.b;

						calculateLight( element.v1.positionWorld, element.vertexNormalsWorld[ 0 ], _color1 );
						calculateLight( element.v2.positionWorld, element.vertexNormalsWorld[ 1 ], _color2 );
						calculateLight( element.v4.positionWorld, element.vertexNormalsWorld[ 3 ], _color3 );
						calculateLight( element.v3.positionWorld, element.vertexNormalsWorld[ 2 ], _color4 );

						_color1.r = _color1.r * _diffuseColor.r + _emissiveColor.r;
						_color1.g = _color1.g * _diffuseColor.g + _emissiveColor.g;
						_color1.b = _color1.b * _diffuseColor.b + _emissiveColor.b;

						_color2.r = _color2.r * _diffuseColor.r + _emissiveColor.r;
						_color2.g = _color2.g * _diffuseColor.g + _emissiveColor.g;
						_color2.b = _color2.b * _diffuseColor.b + _emissiveColor.b;

						_color3.r = _color3.r * _diffuseColor.r + _emissiveColor.r;
						_color3.g = _color3.g * _diffuseColor.g + _emissiveColor.g;
						_color3.b = _color3.b * _diffuseColor.b + _emissiveColor.b;

						_color4.r = _color4.r * _diffuseColor.r + _emissiveColor.r;
						_color4.g = _color4.g * _diffuseColor.g + _emissiveColor.g;
						_color4.b = _color4.b * _diffuseColor.b + _emissiveColor.b;

						_image = getGradientTexture( _color1, _color2, _color3, _color4 );

						// TODO: UVs are incorrect, v4->v3?

						drawTriangle( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y );
						clipImage( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image );

						drawTriangle( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y );
						clipImage( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image );

					} else {

						_color.r = _ambientLight.r;
						_color.g = _ambientLight.g;
						_color.b = _ambientLight.b;

						calculateLight( element.centroidWorld, element.normalWorld, _color );

						_color.r = _color.r * _diffuseColor.r + _emissiveColor.r;
						_color.g = _color.g * _diffuseColor.g + _emissiveColor.g;
						_color.b = _color.b * _diffuseColor.b + _emissiveColor.b;

						drawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );

						material.wireframe === true
							? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
							: fillPath( _color );

					}

				} else {

					_color.r = _diffuseColor.r + _emissiveColor.r;
					_color.g = _diffuseColor.g + _emissiveColor.g;
					_color.b = _diffuseColor.b + _emissiveColor.b;

					drawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );

					material.wireframe === true
						? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
						: fillPath( _color );

				}

			} else if ( material instanceof THREE.MeshBasicMaterial ) {

				_color.copy( material.color );

				if ( material.vertexColors === THREE.FaceColors ) {

					_color.r *= element.color.r;
					_color.g *= element.color.g;
					_color.b *= element.color.b;

				}

				drawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );

				material.wireframe === true
					? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
					: fillPath( _color );

			} else if ( material instanceof THREE.MeshNormalMaterial ) {

				_color.r = normalToComponent( element.normalWorld.x );
				_color.g = normalToComponent( element.normalWorld.y );
				_color.b = normalToComponent( element.normalWorld.z );

				drawQuad( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y );

				material.wireframe === true
					? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )
					: fillPath( _color );

			} else if ( material instanceof THREE.MeshDepthMaterial ) {

				_near = camera.near;
				_far = camera.far;

				_color1.r = _color1.g = _color1.b = 1 - smoothstep( v1.positionScreen.z, _near, _far );
				_color2.r = _color2.g = _color2.b = 1 - smoothstep( v2.positionScreen.z, _near, _far );
				_color3.r = _color3.g = _color3.b = 1 - smoothstep( v4.positionScreen.z, _near, _far );
				_color4.r = _color4.g = _color4.b = 1 - smoothstep( v3.positionScreen.z, _near, _far );

				_image = getGradientTexture( _color1, _color2, _color3, _color4 );

				// TODO: UVs are incorrect, v4->v3?

				drawTriangle( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y );
				clipImage( _v1x, _v1y, _v2x, _v2y, _v4x, _v4y, 0, 0, 1, 0, 0, 1, _image );

				drawTriangle( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y );
				clipImage( _v5x, _v5y, _v3x, _v3y, _v6x, _v6y, 1, 0, 1, 1, 0, 1, _image );

			}

		}

		//

		function drawTriangle( x0, y0, x1, y1, x2, y2 ) {

			_context.beginPath();
			_context.moveTo( x0, y0 );
			_context.lineTo( x1, y1 );
			_context.lineTo( x2, y2 );
			_context.closePath();

		}

		function drawQuad( x0, y0, x1, y1, x2, y2, x3, y3 ) {

			_context.beginPath();
			_context.moveTo( x0, y0 );
			_context.lineTo( x1, y1 );
			_context.lineTo( x2, y2 );
			_context.lineTo( x3, y3 );
			_context.closePath();

		}

		function strokePath( color, linewidth, linecap, linejoin ) {

			setLineWidth( linewidth );
			setLineCap( linecap );
			setLineJoin( linejoin );
			setStrokeStyle( color.getStyle() );

			_context.stroke();

			_elemBox.expandByScalar( linewidth * 2 );

		}

		function fillPath( color ) {

			setFillStyle( color.getStyle() );
			_context.fill();

		}

		function patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {

			if ( texture instanceof THREE.DataTexture || texture.image === undefined || texture.image.width == 0 ) return;

			if ( texture.needsUpdate === true ) {

				var repeatX = texture.wrapS == THREE.RepeatWrapping;
				var repeatY = texture.wrapT == THREE.RepeatWrapping;

				_patterns[ texture.id ] = _context.createPattern(
					texture.image, repeatX === true && repeatY === true
						? 'repeat'
						: repeatX === true && repeatY === false
							? 'repeat-x'
							: repeatX === false && repeatY === true
								? 'repeat-y'
								: 'no-repeat'
				);

				texture.needsUpdate = false;

			}

			_patterns[ texture.id ] === undefined
				? setFillStyle( 'rgba(0,0,0,1)' )
				: setFillStyle( _patterns[ texture.id ] );

			// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120

			var a, b, c, d, e, f, det, idet,
			offsetX = texture.offset.x / texture.repeat.x,
			offsetY = texture.offset.y / texture.repeat.y,
			width = texture.image.width * texture.repeat.x,
			height = texture.image.height * texture.repeat.y;

			u0 = ( u0 + offsetX ) * width;
			v0 = ( 1.0 - v0 + offsetY ) * height;

			u1 = ( u1 + offsetX ) * width;
			v1 = ( 1.0 - v1 + offsetY ) * height;

			u2 = ( u2 + offsetX ) * width;
			v2 = ( 1.0 - v2 + offsetY ) * height;

			x1 -= x0; y1 -= y0;
			x2 -= x0; y2 -= y0;

			u1 -= u0; v1 -= v0;
			u2 -= u0; v2 -= v0;

			det = u1 * v2 - u2 * v1;

			if ( det === 0 ) {

				if ( _imagedatas[ texture.id ] === undefined ) {

					var canvas = document.createElement( 'canvas' )
					canvas.width = texture.image.width;
					canvas.height = texture.image.height;

					var context = canvas.getContext( '2d' );
					context.drawImage( texture.image, 0, 0 );

					_imagedatas[ texture.id ] = context.getImageData( 0, 0, texture.image.width, texture.image.height ).data;

				}

				var data = _imagedatas[ texture.id ];
				var index = ( Math.floor( u0 ) + Math.floor( v0 ) * texture.image.width ) * 4;

				_color.setRGB( data[ index ] / 255, data[ index + 1 ] / 255, data[ index + 2 ] / 255 );
				fillPath( _color );

				return;

			}

			idet = 1 / det;

			a = ( v2 * x1 - v1 * x2 ) * idet;
			b = ( v2 * y1 - v1 * y2 ) * idet;
			c = ( u1 * x2 - u2 * x1 ) * idet;
			d = ( u1 * y2 - u2 * y1 ) * idet;

			e = x0 - a * u0 - c * v0;
			f = y0 - b * u0 - d * v0;

			_context.save();
			_context.transform( a, b, c, d, e, f );
			_context.fill();
			_context.restore();

		}

		function clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {

			// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120

			var a, b, c, d, e, f, det, idet,
			width = image.width - 1,
			height = image.height - 1;

			u0 *= width; v0 *= height;
			u1 *= width; v1 *= height;
			u2 *= width; v2 *= height;

			x1 -= x0; y1 -= y0;
			x2 -= x0; y2 -= y0;

			u1 -= u0; v1 -= v0;
			u2 -= u0; v2 -= v0;

			det = u1 * v2 - u2 * v1;

			idet = 1 / det;

			a = ( v2 * x1 - v1 * x2 ) * idet;
			b = ( v2 * y1 - v1 * y2 ) * idet;
			c = ( u1 * x2 - u2 * x1 ) * idet;
			d = ( u1 * y2 - u2 * y1 ) * idet;

			e = x0 - a * u0 - c * v0;
			f = y0 - b * u0 - d * v0;

			_context.save();
			_context.transform( a, b, c, d, e, f );
			_context.clip();
			_context.drawImage( image, 0, 0 );
			_context.restore();

		}

		function getGradientTexture( color1, color2, color3, color4 ) {

			// http://mrdoob.com/blog/post/710

			_pixelMapData[ 0 ] = ( color1.r * 255 ) | 0;
			_pixelMapData[ 1 ] = ( color1.g * 255 ) | 0;
			_pixelMapData[ 2 ] = ( color1.b * 255 ) | 0;

			_pixelMapData[ 4 ] = ( color2.r * 255 ) | 0;
			_pixelMapData[ 5 ] = ( color2.g * 255 ) | 0;
			_pixelMapData[ 6 ] = ( color2.b * 255 ) | 0;

			_pixelMapData[ 8 ] = ( color3.r * 255 ) | 0;
			_pixelMapData[ 9 ] = ( color3.g * 255 ) | 0;
			_pixelMapData[ 10 ] = ( color3.b * 255 ) | 0;

			_pixelMapData[ 12 ] = ( color4.r * 255 ) | 0;
			_pixelMapData[ 13 ] = ( color4.g * 255 ) | 0;
			_pixelMapData[ 14 ] = ( color4.b * 255 ) | 0;

			_pixelMapContext.putImageData( _pixelMapImage, 0, 0 );
			_gradientMapContext.drawImage( _pixelMap, 0, 0 );

			return _gradientMap;

		}

		function smoothstep( value, min, max ) {

			var x = ( value - min ) / ( max - min );
			return x * x * ( 3 - 2 * x );

		}

		function normalToComponent( normal ) {

			var component = ( normal + 1 ) * 0.5;
			return component < 0 ? 0 : ( component > 1 ? 1 : component );

		}

		// Hide anti-alias gaps

		function expand( v1, v2 ) {

			var x = v2.x - v1.x, y =  v2.y - v1.y,
			det = x * x + y * y, idet;

			if ( det === 0 ) return;

			idet = 1 / Math.sqrt( det );

			x *= idet; y *= idet;

			v2.x += x; v2.y += y;
			v1.x -= x; v1.y -= y;

		}
	};

	// Context cached methods.

	function setOpacity( value ) {

		if ( _contextGlobalAlpha !== value ) {

			_context.globalAlpha = value;
			_contextGlobalAlpha = value;

		}

	}

	function setBlending( value ) {

		if ( _contextGlobalCompositeOperation !== value ) {

			if ( value === THREE.NormalBlending ) {

				_context.globalCompositeOperation = 'source-over';

			} else if ( value === THREE.AdditiveBlending ) {

				_context.globalCompositeOperation = 'lighter';

			} else if ( value === THREE.SubtractiveBlending ) {

				_context.globalCompositeOperation = 'darker';

			}

			_contextGlobalCompositeOperation = value;

		}

	}

	function setLineWidth( value ) {

		if ( _contextLineWidth !== value ) {

			_context.lineWidth = value;
			_contextLineWidth = value;

		}

	}

	function setLineCap( value ) {

		// "butt", "round", "square"

		if ( _contextLineCap !== value ) {

			_context.lineCap = value;
			_contextLineCap = value;

		}

	}

	function setLineJoin( value ) {

		// "round", "bevel", "miter"

		if ( _contextLineJoin !== value ) {

			_context.lineJoin = value;
			_contextLineJoin = value;

		}

	}

	function setStrokeStyle( value ) {

		if ( _contextStrokeStyle !== value ) {

			_context.strokeStyle = value;
			_contextStrokeStyle = value;

		}

	}

	function setFillStyle( value ) {

		if ( _contextFillStyle !== value ) {

			_context.fillStyle = value;
			_contextFillStyle = value;

		}

	}

};
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */

THREE.ShaderChunk = {

	// FOG

	fog_pars_fragment: [

		"#ifdef USE_FOG",

			"uniform vec3 fogColor;",

			"#ifdef FOG_EXP2",

				"uniform float fogDensity;",

			"#else",

				"uniform float fogNear;",
				"uniform float fogFar;",

			"#endif",

		"#endif"

	].join("\n"),

	fog_fragment: [

		"#ifdef USE_FOG",

			"float depth = gl_FragCoord.z / gl_FragCoord.w;",

			"#ifdef FOG_EXP2",

				"const float LOG2 = 1.442695;",
				"float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );",
				"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );",

			"#else",

				"float fogFactor = smoothstep( fogNear, fogFar, depth );",

			"#endif",

			"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );",

		"#endif"

	].join("\n"),

	// ENVIRONMENT MAP

	envmap_pars_fragment: [

		"#ifdef USE_ENVMAP",

			"uniform float reflectivity;",
			"uniform samplerCube envMap;",
			"uniform float flipEnvMap;",
			"uniform int combine;",

			"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )",

				"uniform bool useRefract;",
				"uniform float refractionRatio;",

			"#else",

				"varying vec3 vReflect;",

			"#endif",

		"#endif"

	].join("\n"),

	envmap_fragment: [

		"#ifdef USE_ENVMAP",

			"vec3 reflectVec;",

			"#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )",

				"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );",

				"if ( useRefract ) {",

					"reflectVec = refract( cameraToVertex, normal, refractionRatio );",

				"} else { ",

					"reflectVec = reflect( cameraToVertex, normal );",

				"}",

			"#else",

				"reflectVec = vReflect;",

			"#endif",

			"#ifdef DOUBLE_SIDED",

				"float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );",
				"vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );",

			"#else",

				"vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );",

			"#endif",

			"#ifdef GAMMA_INPUT",

				"cubeColor.xyz *= cubeColor.xyz;",

			"#endif",

			"if ( combine == 1 ) {",

				"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );",

			"} else if ( combine == 2 ) {",

				"gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;",

			"} else {",

				"gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );",

			"}",

		"#endif"

	].join("\n"),

	envmap_pars_vertex: [

		"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )",

			"varying vec3 vReflect;",

			"uniform float refractionRatio;",
			"uniform bool useRefract;",

		"#endif"

	].join("\n"),

	worldpos_vertex : [

		"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )",

			"#ifdef USE_SKINNING",

				"vec4 worldPosition = modelMatrix * skinned;",

			"#endif",

			"#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )",

				"vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );",

			"#endif",

			"#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )",

				"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",

			"#endif",

		"#endif"

	].join("\n"),

	envmap_vertex : [

		"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )",

			"vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;",
			"worldNormal = normalize( worldNormal );",

			"vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );",

			"if ( useRefract ) {",

				"vReflect = refract( cameraToVertex, worldNormal, refractionRatio );",

			"} else {",

				"vReflect = reflect( cameraToVertex, worldNormal );",

			"}",

		"#endif"

	].join("\n"),

	// COLOR MAP (particles)

	map_particle_pars_fragment: [

		"#ifdef USE_MAP",

			"uniform sampler2D map;",

		"#endif"

	].join("\n"),


	map_particle_fragment: [

		"#ifdef USE_MAP",

			"gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );",

		"#endif"

	].join("\n"),

	// COLOR MAP (triangles)

	map_pars_vertex: [

		"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )",

			"varying vec2 vUv;",
			"uniform vec4 offsetRepeat;",

		"#endif"

	].join("\n"),

	map_pars_fragment: [

		"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )",

			"varying vec2 vUv;",

		"#endif",

		"#ifdef USE_MAP",

			"uniform sampler2D map;",

		"#endif"

	].join("\n"),

	map_vertex: [

		"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )",

			"vUv = uv * offsetRepeat.zw + offsetRepeat.xy;",

		"#endif"

	].join("\n"),

	map_fragment: [

		"#ifdef USE_MAP",

			"vec4 texelColor = texture2D( map, vUv );",

			"#ifdef GAMMA_INPUT",

				"texelColor.xyz *= texelColor.xyz;",

			"#endif",

			"gl_FragColor = gl_FragColor * texelColor;",

		"#endif"

	].join("\n"),

	// LIGHT MAP

	lightmap_pars_fragment: [

		"#ifdef USE_LIGHTMAP",

			"varying vec2 vUv2;",
			"uniform sampler2D lightMap;",

		"#endif"

	].join("\n"),

	lightmap_pars_vertex: [

		"#ifdef USE_LIGHTMAP",

			"varying vec2 vUv2;",

		"#endif"

	].join("\n"),

	lightmap_fragment: [

		"#ifdef USE_LIGHTMAP",

			"gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );",

		"#endif"

	].join("\n"),

	lightmap_vertex: [

		"#ifdef USE_LIGHTMAP",

			"vUv2 = uv2;",

		"#endif"

	].join("\n"),

	// BUMP MAP

	bumpmap_pars_fragment: [

		"#ifdef USE_BUMPMAP",

			"uniform sampler2D bumpMap;",
			"uniform float bumpScale;",

			// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen
			//	http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html

			// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)

			"vec2 dHdxy_fwd() {",

				"vec2 dSTdx = dFdx( vUv );",
				"vec2 dSTdy = dFdy( vUv );",

				"float Hll = bumpScale * texture2D( bumpMap, vUv ).x;",
				"float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;",
				"float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;",

				"return vec2( dBx, dBy );",

			"}",

			"vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {",

				"vec3 vSigmaX = dFdx( surf_pos );",
				"vec3 vSigmaY = dFdy( surf_pos );",
				"vec3 vN = surf_norm;",		// normalized

				"vec3 R1 = cross( vSigmaY, vN );",
				"vec3 R2 = cross( vN, vSigmaX );",

				"float fDet = dot( vSigmaX, R1 );",

				"vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );",
				"return normalize( abs( fDet ) * surf_norm - vGrad );",

			"}",

		"#endif"

	].join("\n"),

	// NORMAL MAP

	normalmap_pars_fragment: [

		"#ifdef USE_NORMALMAP",

			"uniform sampler2D normalMap;",
			"uniform vec2 normalScale;",

			// Per-Pixel Tangent Space Normal Mapping
			// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html

			"vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {",

				"vec3 q0 = dFdx( eye_pos.xyz );",
				"vec3 q1 = dFdy( eye_pos.xyz );",
				"vec2 st0 = dFdx( vUv.st );",
				"vec2 st1 = dFdy( vUv.st );",

				"vec3 S = normalize(  q0 * st1.t - q1 * st0.t );",
				"vec3 T = normalize( -q0 * st1.s + q1 * st0.s );",
				"vec3 N = normalize( surf_norm );",

				"vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;",
				"mapN.xy = normalScale * mapN.xy;",
				"mat3 tsn = mat3( S, T, N );",
				"return normalize( tsn * mapN );",

			"}",

		"#endif"

	].join("\n"),

	// SPECULAR MAP

	specularmap_pars_fragment: [

		"#ifdef USE_SPECULARMAP",

			"uniform sampler2D specularMap;",

		"#endif"

	].join("\n"),

	specularmap_fragment: [

		"float specularStrength;",

		"#ifdef USE_SPECULARMAP",

			"vec4 texelSpecular = texture2D( specularMap, vUv );",
			"specularStrength = texelSpecular.r;",

		"#else",

			"specularStrength = 1.0;",

		"#endif"

	].join("\n"),

	// LIGHTS LAMBERT

	lights_lambert_pars_vertex: [

		"uniform vec3 ambient;",
		"uniform vec3 diffuse;",
		"uniform vec3 emissive;",

		"uniform vec3 ambientLightColor;",

		"#if MAX_DIR_LIGHTS > 0",

			"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
			"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",

		"#endif",

		"#if MAX_HEMI_LIGHTS > 0",

			"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];",
			"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];",
			"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];",

		"#endif",

		"#if MAX_POINT_LIGHTS > 0",

			"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",
			"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
			"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
			"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
			"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",

		"#endif",

		"#ifdef WRAP_AROUND",

			"uniform vec3 wrapRGB;",

		"#endif"

	].join("\n"),

	lights_lambert_vertex: [

		"vLightFront = vec3( 0.0 );",

		"#ifdef DOUBLE_SIDED",

			"vLightBack = vec3( 0.0 );",

		"#endif",

		"transformedNormal = normalize( transformedNormal );",

		"#if MAX_DIR_LIGHTS > 0",

		"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {",

			"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
			"vec3 dirVector = normalize( lDirection.xyz );",

			"float dotProduct = dot( transformedNormal, dirVector );",
			"vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );",

			"#ifdef DOUBLE_SIDED",

				"vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );",

				"#ifdef WRAP_AROUND",

					"vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );",

				"#endif",

			"#endif",

			"#ifdef WRAP_AROUND",

				"vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );",
				"directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );",

				"#ifdef DOUBLE_SIDED",

					"directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );",

				"#endif",

			"#endif",

			"vLightFront += directionalLightColor[ i ] * directionalLightWeighting;",

			"#ifdef DOUBLE_SIDED",

				"vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;",

			"#endif",

		"}",

		"#endif",

		"#if MAX_POINT_LIGHTS > 0",

			"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

				"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
				"vec3 lVector = lPosition.xyz - mvPosition.xyz;",

				"float lDistance = 1.0;",
				"if ( pointLightDistance[ i ] > 0.0 )",
					"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );",

				"lVector = normalize( lVector );",
				"float dotProduct = dot( transformedNormal, lVector );",

				"vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );",

				"#ifdef DOUBLE_SIDED",

					"vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );",

					"#ifdef WRAP_AROUND",

						"vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );",

					"#endif",

				"#endif",

				"#ifdef WRAP_AROUND",

					"vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );",
					"pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );",

					"#ifdef DOUBLE_SIDED",

						"pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );",

					"#endif",

				"#endif",

				"vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;",

				"#ifdef DOUBLE_SIDED",

					"vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;",

				"#endif",

			"}",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

				"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
				"vec3 lVector = lPosition.xyz - mvPosition.xyz;",

				"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );",

				"if ( spotEffect > spotLightAngleCos[ i ] ) {",

					"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

					"float lDistance = 1.0;",
					"if ( spotLightDistance[ i ] > 0.0 )",
						"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );",

					"lVector = normalize( lVector );",

					"float dotProduct = dot( transformedNormal, lVector );",
					"vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );",

					"#ifdef DOUBLE_SIDED",

						"vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );",

						"#ifdef WRAP_AROUND",

							"vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );",

						"#endif",

					"#endif",

					"#ifdef WRAP_AROUND",

						"vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );",
						"spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );",

						"#ifdef DOUBLE_SIDED",

							"spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );",

						"#endif",

					"#endif",

					"vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;",

					"#ifdef DOUBLE_SIDED",

						"vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;",

					"#endif",

				"}",

			"}",

		"#endif",

		"#if MAX_HEMI_LIGHTS > 0",

			"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

				"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );",
				"vec3 lVector = normalize( lDirection.xyz );",

				"float dotProduct = dot( transformedNormal, lVector );",

				"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",
				"float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;",

				"vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );",

				"#ifdef DOUBLE_SIDED",

					"vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );",

				"#endif",

			"}",

		"#endif",

		"vLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;",

		"#ifdef DOUBLE_SIDED",

			"vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;",

		"#endif"

	].join("\n"),

	// LIGHTS PHONG

	lights_phong_pars_vertex: [

		"#ifndef PHONG_PER_PIXEL",

		"#if MAX_POINT_LIGHTS > 0",

			"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
			"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

			"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",

			"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];",

		"#endif",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )",

			"varying vec3 vWorldPosition;",

		"#endif"

	].join("\n"),


	lights_phong_vertex: [

		"#ifndef PHONG_PER_PIXEL",

		"#if MAX_POINT_LIGHTS > 0",

			"for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

				"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
				"vec3 lVector = lPosition.xyz - mvPosition.xyz;",

				"float lDistance = 1.0;",
				"if ( pointLightDistance[ i ] > 0.0 )",
					"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );",

				"vPointLight[ i ] = vec4( lVector, lDistance );",

			"}",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

				"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
				"vec3 lVector = lPosition.xyz - mvPosition.xyz;",

				"float lDistance = 1.0;",
				"if ( spotLightDistance[ i ] > 0.0 )",
					"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );",

				"vSpotLight[ i ] = vec4( lVector, lDistance );",

			"}",

		"#endif",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )",

			"vWorldPosition = worldPosition.xyz;",

		"#endif"

	].join("\n"),

	lights_phong_pars_fragment: [

		"uniform vec3 ambientLightColor;",

		"#if MAX_DIR_LIGHTS > 0",

			"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
			"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",

		"#endif",

		"#if MAX_HEMI_LIGHTS > 0",

			"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];",
			"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];",
			"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];",

		"#endif",

		"#if MAX_POINT_LIGHTS > 0",

			"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",

			"#ifdef PHONG_PER_PIXEL",

				"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
				"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

			"#else",

				"varying vec4 vPointLight[ MAX_POINT_LIGHTS ];",

			"#endif",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
			"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
			"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
			"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",

			"#ifdef PHONG_PER_PIXEL",

				"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",

			"#else",

				"varying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];",

			"#endif",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )",

			"varying vec3 vWorldPosition;",

		"#endif",

		"#ifdef WRAP_AROUND",

			"uniform vec3 wrapRGB;",

		"#endif",

		"varying vec3 vViewPosition;",
		"varying vec3 vNormal;"

	].join("\n"),

	lights_phong_fragment: [

		"vec3 normal = normalize( vNormal );",
		"vec3 viewPosition = normalize( vViewPosition );",

		"#ifdef DOUBLE_SIDED",

			"normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );",

		"#endif",

		"#ifdef USE_NORMALMAP",

			"normal = perturbNormal2Arb( -viewPosition, normal );",

		"#elif defined( USE_BUMPMAP )",

			"normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );",

		"#endif",

		"#if MAX_POINT_LIGHTS > 0",

			"vec3 pointDiffuse  = vec3( 0.0 );",
			"vec3 pointSpecular = vec3( 0.0 );",

			"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

				"#ifdef PHONG_PER_PIXEL",

					"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
					"vec3 lVector = lPosition.xyz + vViewPosition.xyz;",

					"float lDistance = 1.0;",
					"if ( pointLightDistance[ i ] > 0.0 )",
						"lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );",

					"lVector = normalize( lVector );",

				"#else",

					"vec3 lVector = normalize( vPointLight[ i ].xyz );",
					"float lDistance = vPointLight[ i ].w;",

				"#endif",

				// diffuse

				"float dotProduct = dot( normal, lVector );",

				"#ifdef WRAP_AROUND",

					"float pointDiffuseWeightFull = max( dotProduct, 0.0 );",
					"float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );",

					"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );",

				"#else",

					"float pointDiffuseWeight = max( dotProduct, 0.0 );",

				"#endif",

				"pointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;",

				// specular

				"vec3 pointHalfVector = normalize( lVector + viewPosition );",
				"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );",
				"float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );",

				"#ifdef PHYSICALLY_BASED_SHADING",

					// 2.0 => 2.0001 is hack to work around ANGLE bug

					"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

					"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );",
					"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;",

				"#else",

					"pointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;",

				"#endif",

			"}",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"vec3 spotDiffuse  = vec3( 0.0 );",
			"vec3 spotSpecular = vec3( 0.0 );",

			"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

				"#ifdef PHONG_PER_PIXEL",

					"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
					"vec3 lVector = lPosition.xyz + vViewPosition.xyz;",

					"float lDistance = 1.0;",
					"if ( spotLightDistance[ i ] > 0.0 )",
						"lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );",

					"lVector = normalize( lVector );",

				"#else",

					"vec3 lVector = normalize( vSpotLight[ i ].xyz );",
					"float lDistance = vSpotLight[ i ].w;",

				"#endif",

				"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );",

				"if ( spotEffect > spotLightAngleCos[ i ] ) {",

					"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

					// diffuse

					"float dotProduct = dot( normal, lVector );",

					"#ifdef WRAP_AROUND",

						"float spotDiffuseWeightFull = max( dotProduct, 0.0 );",
						"float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );",

						"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );",

					"#else",

						"float spotDiffuseWeight = max( dotProduct, 0.0 );",

					"#endif",

					"spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;",

					// specular

					"vec3 spotHalfVector = normalize( lVector + viewPosition );",
					"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );",
					"float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );",

					"#ifdef PHYSICALLY_BASED_SHADING",

						// 2.0 => 2.0001 is hack to work around ANGLE bug

						"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

						"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );",
						"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;",

					"#else",

						"spotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;",

					"#endif",

				"}",

			"}",

		"#endif",

		"#if MAX_DIR_LIGHTS > 0",

			"vec3 dirDiffuse  = vec3( 0.0 );",
			"vec3 dirSpecular = vec3( 0.0 );" ,

			"for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {",

				"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
				"vec3 dirVector = normalize( lDirection.xyz );",

				// diffuse

				"float dotProduct = dot( normal, dirVector );",

				"#ifdef WRAP_AROUND",

					"float dirDiffuseWeightFull = max( dotProduct, 0.0 );",
					"float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );",

					"vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );",

				"#else",

					"float dirDiffuseWeight = max( dotProduct, 0.0 );",

				"#endif",

				"dirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;",

				// specular

				"vec3 dirHalfVector = normalize( dirVector + viewPosition );",
				"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );",
				"float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );",

				"#ifdef PHYSICALLY_BASED_SHADING",

					/*
					// fresnel term from skin shader
					"const float F0 = 0.128;",

					"float base = 1.0 - dot( viewPosition, dirHalfVector );",
					"float exponential = pow( base, 5.0 );",

					"float fresnel = exponential + F0 * ( 1.0 - exponential );",
					*/

					/*
					// fresnel term from fresnel shader
					"const float mFresnelBias = 0.08;",
					"const float mFresnelScale = 0.3;",
					"const float mFresnelPower = 5.0;",

					"float fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );",
					*/

					// 2.0 => 2.0001 is hack to work around ANGLE bug

					"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

					//"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;",

					"vec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );",
					"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;",

				"#else",

					"dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;",

				"#endif",

			"}",

		"#endif",

		"#if MAX_HEMI_LIGHTS > 0",

			"vec3 hemiDiffuse  = vec3( 0.0 );",
			"vec3 hemiSpecular = vec3( 0.0 );" ,

			"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

				"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );",
				"vec3 lVector = normalize( lDirection.xyz );",

				// diffuse

				"float dotProduct = dot( normal, lVector );",
				"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",

				"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );",

				"hemiDiffuse += diffuse * hemiColor;",

				// specular (sky light)

				"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );",
				"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;",
				"float hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );",

				// specular (ground light)

				"vec3 lVectorGround = -lVector;",

				"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );",
				"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;",
				"float hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );",

				"#ifdef PHYSICALLY_BASED_SHADING",

					"float dotProductGround = dot( normal, lVectorGround );",

					// 2.0 => 2.0001 is hack to work around ANGLE bug

					"float specularNormalization = ( shininess + 2.0001 ) / 8.0;",

					"vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );",
					"vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );",
					"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );",

				"#else",

					"hemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;",

				"#endif",

			"}",

		"#endif",

		"vec3 totalDiffuse = vec3( 0.0 );",
		"vec3 totalSpecular = vec3( 0.0 );",

		"#if MAX_DIR_LIGHTS > 0",

			"totalDiffuse += dirDiffuse;",
			"totalSpecular += dirSpecular;",

		"#endif",

		"#if MAX_HEMI_LIGHTS > 0",

			"totalDiffuse += hemiDiffuse;",
			"totalSpecular += hemiSpecular;",

		"#endif",

		"#if MAX_POINT_LIGHTS > 0",

			"totalDiffuse += pointDiffuse;",
			"totalSpecular += pointSpecular;",

		"#endif",

		"#if MAX_SPOT_LIGHTS > 0",

			"totalDiffuse += spotDiffuse;",
			"totalSpecular += spotSpecular;",

		"#endif",

		"#ifdef METAL",

			"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );",

		"#else",

			"gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;",

		"#endif"

	].join("\n"),

	// VERTEX COLORS

	color_pars_fragment: [

		"#ifdef USE_COLOR",

			"varying vec3 vColor;",

		"#endif"

	].join("\n"),


	color_fragment: [

		"#ifdef USE_COLOR",

			"gl_FragColor = gl_FragColor * vec4( vColor, opacity );",

		"#endif"

	].join("\n"),

	color_pars_vertex: [

		"#ifdef USE_COLOR",

			"varying vec3 vColor;",

		"#endif"

	].join("\n"),


	color_vertex: [

		"#ifdef USE_COLOR",

			"#ifdef GAMMA_INPUT",

				"vColor = color * color;",

			"#else",

				"vColor = color;",

			"#endif",

		"#endif"

	].join("\n"),

	// SKINNING

	skinning_pars_vertex: [

		"#ifdef USE_SKINNING",

			"#ifdef BONE_TEXTURE",

				"uniform sampler2D boneTexture;",

				"mat4 getBoneMatrix( const in float i ) {",

					"float j = i * 4.0;",
					"float x = mod( j, N_BONE_PIXEL_X );",
					"float y = floor( j / N_BONE_PIXEL_X );",

					"const float dx = 1.0 / N_BONE_PIXEL_X;",
					"const float dy = 1.0 / N_BONE_PIXEL_Y;",

					"y = dy * ( y + 0.5 );",

					"vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );",
					"vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );",
					"vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );",
					"vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );",

					"mat4 bone = mat4( v1, v2, v3, v4 );",

					"return bone;",

				"}",

			"#else",

				"uniform mat4 boneGlobalMatrices[ MAX_BONES ];",

				"mat4 getBoneMatrix( const in float i ) {",

					"mat4 bone = boneGlobalMatrices[ int(i) ];",
					"return bone;",

				"}",

			"#endif",

		"#endif"

	].join("\n"),

	skinbase_vertex: [

		"#ifdef USE_SKINNING",

			"mat4 boneMatX = getBoneMatrix( skinIndex.x );",
			"mat4 boneMatY = getBoneMatrix( skinIndex.y );",

		"#endif"

	].join("\n"),

	skinning_vertex: [

		"#ifdef USE_SKINNING",

			"#ifdef USE_MORPHTARGETS",

			"vec4 skinVertex = vec4( morphed, 1.0 );",

			"#else",

			"vec4 skinVertex = vec4( position, 1.0 );",

			"#endif",

			"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;",
			"skinned 	  += boneMatY * skinVertex * skinWeight.y;",

		"#endif"

	].join("\n"),

	// MORPHING

	morphtarget_pars_vertex: [

		"#ifdef USE_MORPHTARGETS",

			"#ifndef USE_MORPHNORMALS",

			"uniform float morphTargetInfluences[ 8 ];",

			"#else",

			"uniform float morphTargetInfluences[ 4 ];",

			"#endif",

		"#endif"

	].join("\n"),

	morphtarget_vertex: [

		"#ifdef USE_MORPHTARGETS",

			"vec3 morphed = vec3( 0.0 );",
			"morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];",
			"morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];",
			"morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];",
			"morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];",

			"#ifndef USE_MORPHNORMALS",

			"morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];",
			"morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];",
			"morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];",
			"morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];",

			"#endif",

			"morphed += position;",

		"#endif"

	].join("\n"),

	default_vertex : [

		"vec4 mvPosition;",

		"#ifdef USE_SKINNING",

			"mvPosition = modelViewMatrix * skinned;",

		"#endif",

		"#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )",

			"mvPosition = modelViewMatrix * vec4( morphed, 1.0 );",

		"#endif",

		"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )",

			"mvPosition = modelViewMatrix * vec4( position, 1.0 );",

		"#endif",

		"gl_Position = projectionMatrix * mvPosition;"

	].join("\n"),

	morphnormal_vertex: [

		"#ifdef USE_MORPHNORMALS",

			"vec3 morphedNormal = vec3( 0.0 );",

			"morphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];",
			"morphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];",
			"morphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];",
			"morphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];",

			"morphedNormal += normal;",

		"#endif"

	].join("\n"),

	skinnormal_vertex: [

		"#ifdef USE_SKINNING",

			"mat4 skinMatrix = skinWeight.x * boneMatX;",
			"skinMatrix 	+= skinWeight.y * boneMatY;",

			"#ifdef USE_MORPHNORMALS",

			"vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );",

			"#else",

			"vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );",

			"#endif",

		"#endif"

	].join("\n"),

	defaultnormal_vertex: [

		"vec3 objectNormal;",

		"#ifdef USE_SKINNING",

			"objectNormal = skinnedNormal.xyz;",

		"#endif",

		"#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )",

			"objectNormal = morphedNormal;",

		"#endif",

		"#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )",

			"objectNormal = normal;",

		"#endif",

		"#ifdef FLIP_SIDED",

			"objectNormal = -objectNormal;",

		"#endif",

		"vec3 transformedNormal = normalMatrix * objectNormal;"

	].join("\n"),

	// SHADOW MAP

	// based on SpiderGL shadow map and Fabien Sanglard's GLSL shadow mapping examples
	//  http://spidergl.org/example.php?id=6
	// 	http://fabiensanglard.net/shadowmapping

	shadowmap_pars_fragment: [

		"#ifdef USE_SHADOWMAP",

			"uniform sampler2D shadowMap[ MAX_SHADOWS ];",
			"uniform vec2 shadowMapSize[ MAX_SHADOWS ];",

			"uniform float shadowDarkness[ MAX_SHADOWS ];",
			"uniform float shadowBias[ MAX_SHADOWS ];",

			"varying vec4 vShadowCoord[ MAX_SHADOWS ];",

			"float unpackDepth( const in vec4 rgba_depth ) {",

				"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
				"float depth = dot( rgba_depth, bit_shift );",
				"return depth;",

			"}",

		"#endif"

	].join("\n"),

	shadowmap_fragment: [

		"#ifdef USE_SHADOWMAP",

			"#ifdef SHADOWMAP_DEBUG",

				"vec3 frustumColors[3];",
				"frustumColors[0] = vec3( 1.0, 0.5, 0.0 );",
				"frustumColors[1] = vec3( 0.0, 1.0, 0.8 );",
				"frustumColors[2] = vec3( 0.0, 0.5, 1.0 );",

			"#endif",

			"#ifdef SHADOWMAP_CASCADE",

				"int inFrustumCount = 0;",

			"#endif",

			"float fDepth;",
			"vec3 shadowColor = vec3( 1.0 );",

			"for( int i = 0; i < MAX_SHADOWS; i ++ ) {",

				"vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;",

				// "if ( something && something )" 		 breaks ATI OpenGL shader compiler
				// "if ( all( something, something ) )"  using this instead

				"bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );",
				"bool inFrustum = all( inFrustumVec );",

				// don't shadow pixels outside of light frustum
				// use just first frustum (for cascades)
				// don't shadow pixels behind far plane of light frustum

				"#ifdef SHADOWMAP_CASCADE",

					"inFrustumCount += int( inFrustum );",
					"bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );",

				"#else",

					"bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );",

				"#endif",

				"bool frustumTest = all( frustumTestVec );",

				"if ( frustumTest ) {",

					"shadowCoord.z += shadowBias[ i ];",

					"#if defined( SHADOWMAP_TYPE_PCF )",

						// Percentage-close filtering
						// (9 pixel kernel)
						// http://fabiensanglard.net/shadowmappingPCF/

						"float shadow = 0.0;",

						/*
						// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL
						// must enroll loop manually

						"for ( float y = -1.25; y <= 1.25; y += 1.25 )",
							"for ( float x = -1.25; x <= 1.25; x += 1.25 ) {",

								"vec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );",

								// doesn't seem to produce any noticeable visual difference compared to simple "texture2D" lookup
								//"vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );",

								"float fDepth = unpackDepth( rgbaDepth );",

								"if ( fDepth < shadowCoord.z )",
									"shadow += 1.0;",

						"}",

						"shadow /= 9.0;",

						*/

						"const float shadowDelta = 1.0 / 9.0;",

						"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;",
						"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;",

						"float dx0 = -1.25 * xPixelOffset;",
						"float dy0 = -1.25 * yPixelOffset;",
						"float dx1 = 1.25 * xPixelOffset;",
						"float dy1 = 1.25 * yPixelOffset;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );",
						"if ( fDepth < shadowCoord.z ) shadow += shadowDelta;",

						"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );",

					"#elif defined( SHADOWMAP_TYPE_PCF_SOFT )",

						// Percentage-close filtering
						// (9 pixel kernel)
						// http://fabiensanglard.net/shadowmappingPCF/

						"float shadow = 0.0;",

						"float xPixelOffset = 1.0 / shadowMapSize[ i ].x;",
						"float yPixelOffset = 1.0 / shadowMapSize[ i ].y;",

						"float dx0 = -1.0 * xPixelOffset;",
						"float dy0 = -1.0 * yPixelOffset;",
						"float dx1 = 1.0 * xPixelOffset;",
						"float dy1 = 1.0 * yPixelOffset;",

						"mat3 shadowKernel;",
						"mat3 depthKernel;",

						"depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );",
						"if ( depthKernel[0][0] < shadowCoord.z ) shadowKernel[0][0] = 0.25;",
						"else shadowKernel[0][0] = 0.0;",

						"depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );",
						"if ( depthKernel[0][1] < shadowCoord.z ) shadowKernel[0][1] = 0.25;",
						"else shadowKernel[0][1] = 0.0;",

						"depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i], shadowCoord.xy + vec2( dx0, dy1 ) ) );",
						"if ( depthKernel[0][2] < shadowCoord.z ) shadowKernel[0][2] = 0.25;",
						"else shadowKernel[0][2] = 0.0;",

						"depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );",
						"if ( depthKernel[1][0] < shadowCoord.z ) shadowKernel[1][0] = 0.25;",
						"else shadowKernel[1][0] = 0.0;",

						"depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );",
						"if ( depthKernel[1][1] < shadowCoord.z ) shadowKernel[1][1] = 0.25;",
						"else shadowKernel[1][1] = 0.0;",

						"depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );",
						"if ( depthKernel[1][2] < shadowCoord.z ) shadowKernel[1][2] = 0.25;",
						"else shadowKernel[1][2] = 0.0;",

						"depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );",
						"if ( depthKernel[2][0] < shadowCoord.z ) shadowKernel[2][0] = 0.25;",
						"else shadowKernel[2][0] = 0.0;",

						"depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );",
						"if ( depthKernel[2][1] < shadowCoord.z ) shadowKernel[2][1] = 0.25;",
						"else shadowKernel[2][1] = 0.0;",

						"depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );",
						"if ( depthKernel[2][2] < shadowCoord.z ) shadowKernel[2][2] = 0.25;",
						"else shadowKernel[2][2] = 0.0;",

						"vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );",

						"shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );",
						"shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );",

						"vec4 shadowValues;",
						"shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );",
						"shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );",
						"shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );",
						"shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );",

						"shadow = dot( shadowValues, vec4( 1.0 ) );",

						"shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );",

					"#else",

						"vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );",
						"float fDepth = unpackDepth( rgbaDepth );",

						"if ( fDepth < shadowCoord.z )",

							// spot with multiple shadows is darker

							"shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );",

							// spot with multiple shadows has the same color as single shadow spot

							//"shadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );",

					"#endif",

				"}",


				"#ifdef SHADOWMAP_DEBUG",

					"#ifdef SHADOWMAP_CASCADE",

						"if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];",

					"#else",

						"if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];",

					"#endif",

				"#endif",

			"}",

			"#ifdef GAMMA_OUTPUT",

				"shadowColor *= shadowColor;",

			"#endif",

			"gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;",

		"#endif"

	].join("\n"),

	shadowmap_pars_vertex: [

		"#ifdef USE_SHADOWMAP",

			"varying vec4 vShadowCoord[ MAX_SHADOWS ];",
			"uniform mat4 shadowMatrix[ MAX_SHADOWS ];",

		"#endif"

	].join("\n"),

	shadowmap_vertex: [

		"#ifdef USE_SHADOWMAP",

			"for( int i = 0; i < MAX_SHADOWS; i ++ ) {",

				"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;",

			"}",

		"#endif"

	].join("\n"),

	// ALPHATEST

	alphatest_fragment: [

		"#ifdef ALPHATEST",

			"if ( gl_FragColor.a < ALPHATEST ) discard;",

		"#endif"

	].join("\n"),

	// LINEAR SPACE

	linear_to_gamma_fragment: [

		"#ifdef GAMMA_OUTPUT",

			"gl_FragColor.xyz = sqrt( gl_FragColor.xyz );",

		"#endif"

	].join("\n")


};

THREE.UniformsUtils = {

	merge: function ( uniforms ) {

		var u, p, tmp, merged = {};

		for ( u = 0; u < uniforms.length; u ++ ) {

			tmp = this.clone( uniforms[ u ] );

			for ( p in tmp ) {

				merged[ p ] = tmp[ p ];

			}

		}

		return merged;

	},

	clone: function ( uniforms_src ) {

		var u, p, parameter, parameter_src, uniforms_dst = {};

		for ( u in uniforms_src ) {

			uniforms_dst[ u ] = {};

			for ( p in uniforms_src[ u ] ) {

				parameter_src = uniforms_src[ u ][ p ];

				if ( parameter_src instanceof THREE.Color ||
					 parameter_src instanceof THREE.Vector2 ||
					 parameter_src instanceof THREE.Vector3 ||
					 parameter_src instanceof THREE.Vector4 ||
					 parameter_src instanceof THREE.Matrix4 ||
					 parameter_src instanceof THREE.Texture ) {

					uniforms_dst[ u ][ p ] = parameter_src.clone();

				} else if ( parameter_src instanceof Array ) {

					uniforms_dst[ u ][ p ] = parameter_src.slice();

				} else {

					uniforms_dst[ u ][ p ] = parameter_src;

				}

			}

		}

		return uniforms_dst;

	}

};

THREE.UniformsLib = {

	common: {

		"diffuse" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
		"opacity" : { type: "f", value: 1.0 },

		"map" : { type: "t", value: null },
		"offsetRepeat" : { type: "v4", value: new THREE.Vector4( 0, 0, 1, 1 ) },

		"lightMap" : { type: "t", value: null },
		"specularMap" : { type: "t", value: null },

		"envMap" : { type: "t", value: null },
		"flipEnvMap" : { type: "f", value: -1 },
		"useRefract" : { type: "i", value: 0 },
		"reflectivity" : { type: "f", value: 1.0 },
		"refractionRatio" : { type: "f", value: 0.98 },
		"combine" : { type: "i", value: 0 },

		"morphTargetInfluences" : { type: "f", value: 0 }

	},

	bump: {

		"bumpMap" : { type: "t", value: null },
		"bumpScale" : { type: "f", value: 1 }

	},

	normalmap: {

		"normalMap" : { type: "t", value: null },
		"normalScale" : { type: "v2", value: new THREE.Vector2( 1, 1 ) }
	},

	fog : {

		"fogDensity" : { type: "f", value: 0.00025 },
		"fogNear" : { type: "f", value: 1 },
		"fogFar" : { type: "f", value: 2000 },
		"fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }

	},

	lights: {

		"ambientLightColor" : { type: "fv", value: [] },

		"directionalLightDirection" : { type: "fv", value: [] },
		"directionalLightColor" : { type: "fv", value: [] },

		"hemisphereLightDirection" : { type: "fv", value: [] },
		"hemisphereLightSkyColor" : { type: "fv", value: [] },
		"hemisphereLightGroundColor" : { type: "fv", value: [] },

		"pointLightColor" : { type: "fv", value: [] },
		"pointLightPosition" : { type: "fv", value: [] },
		"pointLightDistance" : { type: "fv1", value: [] },

		"spotLightColor" : { type: "fv", value: [] },
		"spotLightPosition" : { type: "fv", value: [] },
		"spotLightDirection" : { type: "fv", value: [] },
		"spotLightDistance" : { type: "fv1", value: [] },
		"spotLightAngleCos" : { type: "fv1", value: [] },
		"spotLightExponent" : { type: "fv1", value: [] }

	},

	particle: {

		"psColor" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
		"opacity" : { type: "f", value: 1.0 },
		"size" : { type: "f", value: 1.0 },
		"scale" : { type: "f", value: 1.0 },
		"map" : { type: "t", value: null },

		"fogDensity" : { type: "f", value: 0.00025 },
		"fogNear" : { type: "f", value: 1 },
		"fogFar" : { type: "f", value: 2000 },
		"fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }

	},

	shadowmap: {

		"shadowMap": { type: "tv", value: [] },
		"shadowMapSize": { type: "v2v", value: [] },

		"shadowBias" : { type: "fv1", value: [] },
		"shadowDarkness": { type: "fv1", value: [] },

		"shadowMatrix" : { type: "m4v", value: [] }

	}

};

THREE.ShaderLib = {

	'depth': {

		uniforms: {

			"mNear": { type: "f", value: 1.0 },
			"mFar" : { type: "f", value: 2000.0 },
			"opacity" : { type: "f", value: 1.0 }

		},

		vertexShader: [

			"void main() {",

				"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float mNear;",
			"uniform float mFar;",
			"uniform float opacity;",

			"void main() {",

				"float depth = gl_FragCoord.z / gl_FragCoord.w;",
				"float color = 1.0 - smoothstep( mNear, mFar, depth );",
				"gl_FragColor = vec4( vec3( color ), opacity );",

			"}"

		].join("\n")

	},

	'normal': {

		uniforms: {

			"opacity" : { type: "f", value: 1.0 }

		},

		vertexShader: [

			"varying vec3 vNormal;",

			"void main() {",

				"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
				"vNormal = normalize( normalMatrix * normal );",

				"gl_Position = projectionMatrix * mvPosition;",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float opacity;",
			"varying vec3 vNormal;",

			"void main() {",

				"gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",

			"}"

		].join("\n")

	},

	'basic': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "fog" ],
			THREE.UniformsLib[ "shadowmap" ]

		] ),

		vertexShader: [

			THREE.ShaderChunk[ "map_pars_vertex" ],
			THREE.ShaderChunk[ "lightmap_pars_vertex" ],
			THREE.ShaderChunk[ "envmap_pars_vertex" ],
			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "map_vertex" ],
				THREE.ShaderChunk[ "lightmap_vertex" ],
				THREE.ShaderChunk[ "color_vertex" ],
				THREE.ShaderChunk[ "skinbase_vertex" ],

				"#ifdef USE_ENVMAP",

				THREE.ShaderChunk[ "morphnormal_vertex" ],
				THREE.ShaderChunk[ "skinnormal_vertex" ],
				THREE.ShaderChunk[ "defaultnormal_vertex" ],

				"#endif",

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],

				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "envmap_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 diffuse;",
			"uniform float opacity;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_pars_fragment" ],
			THREE.ShaderChunk[ "lightmap_pars_fragment" ],
			THREE.ShaderChunk[ "envmap_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "specularmap_pars_fragment" ],

			"void main() {",

				"gl_FragColor = vec4( diffuse, opacity );",

				THREE.ShaderChunk[ "map_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "specularmap_fragment" ],
				THREE.ShaderChunk[ "lightmap_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "envmap_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],

				THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'lambert': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "fog" ],
			THREE.UniformsLib[ "lights" ],
			THREE.UniformsLib[ "shadowmap" ],

			{
				"ambient"  : { type: "c", value: new THREE.Color( 0xffffff ) },
				"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
				"wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }
			}

		] ),

		vertexShader: [

			"#define LAMBERT",

			"varying vec3 vLightFront;",

			"#ifdef DOUBLE_SIDED",

				"varying vec3 vLightBack;",

			"#endif",

			THREE.ShaderChunk[ "map_pars_vertex" ],
			THREE.ShaderChunk[ "lightmap_pars_vertex" ],
			THREE.ShaderChunk[ "envmap_pars_vertex" ],
			THREE.ShaderChunk[ "lights_lambert_pars_vertex" ],
			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "map_vertex" ],
				THREE.ShaderChunk[ "lightmap_vertex" ],
				THREE.ShaderChunk[ "color_vertex" ],

				THREE.ShaderChunk[ "morphnormal_vertex" ],
				THREE.ShaderChunk[ "skinbase_vertex" ],
				THREE.ShaderChunk[ "skinnormal_vertex" ],
				THREE.ShaderChunk[ "defaultnormal_vertex" ],

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],

				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "envmap_vertex" ],
				THREE.ShaderChunk[ "lights_lambert_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float opacity;",

			"varying vec3 vLightFront;",

			"#ifdef DOUBLE_SIDED",

				"varying vec3 vLightBack;",

			"#endif",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_pars_fragment" ],
			THREE.ShaderChunk[ "lightmap_pars_fragment" ],
			THREE.ShaderChunk[ "envmap_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "specularmap_pars_fragment" ],

			"void main() {",

				"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );",

				THREE.ShaderChunk[ "map_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "specularmap_fragment" ],

				"#ifdef DOUBLE_SIDED",

					//"float isFront = float( gl_FrontFacing );",
					//"gl_FragColor.xyz *= isFront * vLightFront + ( 1.0 - isFront ) * vLightBack;",

					"if ( gl_FrontFacing )",
						"gl_FragColor.xyz *= vLightFront;",
					"else",
						"gl_FragColor.xyz *= vLightBack;",

				"#else",

					"gl_FragColor.xyz *= vLightFront;",

				"#endif",

				THREE.ShaderChunk[ "lightmap_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "envmap_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],

				THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'phong': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "bump" ],
			THREE.UniformsLib[ "normalmap" ],
			THREE.UniformsLib[ "fog" ],
			THREE.UniformsLib[ "lights" ],
			THREE.UniformsLib[ "shadowmap" ],

			{
				"ambient"  : { type: "c", value: new THREE.Color( 0xffffff ) },
				"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
				"specular" : { type: "c", value: new THREE.Color( 0x111111 ) },
				"shininess": { type: "f", value: 30 },
				"wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }
			}

		] ),

		vertexShader: [

			"#define PHONG",

			"varying vec3 vViewPosition;",
			"varying vec3 vNormal;",

			THREE.ShaderChunk[ "map_pars_vertex" ],
			THREE.ShaderChunk[ "lightmap_pars_vertex" ],
			THREE.ShaderChunk[ "envmap_pars_vertex" ],
			THREE.ShaderChunk[ "lights_phong_pars_vertex" ],
			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "map_vertex" ],
				THREE.ShaderChunk[ "lightmap_vertex" ],
				THREE.ShaderChunk[ "color_vertex" ],

				THREE.ShaderChunk[ "morphnormal_vertex" ],
				THREE.ShaderChunk[ "skinbase_vertex" ],
				THREE.ShaderChunk[ "skinnormal_vertex" ],
				THREE.ShaderChunk[ "defaultnormal_vertex" ],

				"vNormal = normalize( transformedNormal );",

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],

				"vViewPosition = -mvPosition.xyz;",

				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "envmap_vertex" ],
				THREE.ShaderChunk[ "lights_phong_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 diffuse;",
			"uniform float opacity;",

			"uniform vec3 ambient;",
			"uniform vec3 emissive;",
			"uniform vec3 specular;",
			"uniform float shininess;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_pars_fragment" ],
			THREE.ShaderChunk[ "lightmap_pars_fragment" ],
			THREE.ShaderChunk[ "envmap_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "lights_phong_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "bumpmap_pars_fragment" ],
			THREE.ShaderChunk[ "normalmap_pars_fragment" ],
			THREE.ShaderChunk[ "specularmap_pars_fragment" ],

			"void main() {",

				"gl_FragColor = vec4( vec3 ( 1.0 ), opacity );",

				THREE.ShaderChunk[ "map_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "specularmap_fragment" ],

				THREE.ShaderChunk[ "lights_phong_fragment" ],

				THREE.ShaderChunk[ "lightmap_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "envmap_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],

				THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'particle_basic': {

		uniforms:  THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "particle" ],
			THREE.UniformsLib[ "shadowmap" ]

		] ),

		vertexShader: [

			"uniform float size;",
			"uniform float scale;",

			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "color_vertex" ],

				"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",

				"#ifdef USE_SIZEATTENUATION",
					"gl_PointSize = size * ( scale / length( mvPosition.xyz ) );",
				"#else",
					"gl_PointSize = size;",
				"#endif",

				"gl_Position = projectionMatrix * mvPosition;",

				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 psColor;",
			"uniform float opacity;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_particle_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],

			"void main() {",

				"gl_FragColor = vec4( psColor, opacity );",

				THREE.ShaderChunk[ "map_particle_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],
				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'dashed': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "fog" ],

			{
				"scale":     { type: "f", value: 1 },
				"dashSize":  { type: "f", value: 1 },
				"totalSize": { type: "f", value: 2 }
			}

		] ),

		vertexShader: [

			"uniform float scale;",
			"attribute float lineDistance;",

			"varying float vLineDistance;",

			THREE.ShaderChunk[ "color_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "color_vertex" ],

				"vLineDistance = scale * lineDistance;",

				"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
				"gl_Position = projectionMatrix * mvPosition;",

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 diffuse;",
			"uniform float opacity;",

			"uniform float dashSize;",
			"uniform float totalSize;",

			"varying float vLineDistance;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],

			"void main() {",

				"if ( mod( vLineDistance, totalSize ) > dashSize ) {",

					"discard;",

				"}",

				"gl_FragColor = vec4( diffuse, opacity );",

				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	// Depth encoding into RGBA texture
	// 	based on SpiderGL shadow map example
	// 		http://spidergl.org/example.php?id=6
	// 	originally from
	//		http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD
	// 	see also here:
	//		http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/

	'depthRGBA': {

		uniforms: {},

		vertexShader: [

			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "skinbase_vertex" ],
				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"vec4 pack_depth( const in float depth ) {",

				"const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
				"const vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
				"vec4 res = fract( depth * bit_shift );",
				"res -= res.xxyz * bit_mask;",
				"return res;",

			"}",

			"void main() {",

				"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );",

				//"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );",
				//"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );",
				//"gl_FragData[ 0 ] = pack_depth( z );",
				//"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );",

			"}"

		].join("\n")

	}

};
/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

THREE.WebGLRenderer = function ( parameters ) {

	console.log( 'THREE.WebGLRenderer', THREE.REVISION );

	parameters = parameters || {};

	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),

	_precision = parameters.precision !== undefined ? parameters.precision : 'highp',

	_alpha = parameters.alpha !== undefined ? parameters.alpha : true,
	_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
	_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
	_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
	_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,

	_clearColor = parameters.clearColor !== undefined ? new THREE.Color( parameters.clearColor ) : new THREE.Color( 0x000000 ),
	_clearAlpha = parameters.clearAlpha !== undefined ? parameters.clearAlpha : 0;

	// public properties

	this.domElement = _canvas;
	this.context = null;
	this.devicePixelRatio = parameters.devicePixelRatio !== undefined
				? parameters.devicePixelRatio
				: window.devicePixelRatio !== undefined
					? window.devicePixelRatio
					: 1;

	// clearing

	this.autoClear = true;
	this.autoClearColor = true;
	this.autoClearDepth = true;
	this.autoClearStencil = true;

	// scene graph

	this.sortObjects = true;

	this.autoUpdateObjects = true;
	this.autoUpdateScene = true;

	// physically based shading

	this.gammaInput = false;
	this.gammaOutput = false;
	this.physicallyBasedShading = false;

	// shadow map

	this.shadowMapEnabled = false;
	this.shadowMapAutoUpdate = true;
	this.shadowMapType = THREE.PCFShadowMap;
	this.shadowMapCullFace = THREE.CullFaceFront;
	this.shadowMapDebug = false;
	this.shadowMapCascade = false;

	// morphs

	this.maxMorphTargets = 8;
	this.maxMorphNormals = 4;

	// flags

	this.autoScaleCubemaps = true;

	// custom render plugins

	this.renderPluginsPre = [];
	this.renderPluginsPost = [];

	// info

	this.info = {

		memory: {

			programs: 0,
			geometries: 0,
			textures: 0

		},

		render: {

			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		}

	};

	// internal properties

	var _this = this,

	_programs = [],
	_programs_counter = 0,

	// internal state cache

	_currentProgram = null,
	_currentFramebuffer = null,
	_currentMaterialId = -1,
	_currentGeometryGroupHash = null,
	_currentCamera = null,
	_geometryGroupCounter = 0,

	_usedTextureUnits = 0,

	// GL state cache

	_oldDoubleSided = -1,
	_oldFlipSided = -1,

	_oldBlending = -1,

	_oldBlendEquation = -1,
	_oldBlendSrc = -1,
	_oldBlendDst = -1,

	_oldDepthTest = -1,
	_oldDepthWrite = -1,

	_oldPolygonOffset = null,
	_oldPolygonOffsetFactor = null,
	_oldPolygonOffsetUnits = null,

	_oldLineWidth = null,

	_viewportX = 0,
	_viewportY = 0,
	_viewportWidth = 0,
	_viewportHeight = 0,
	_currentWidth = 0,
	_currentHeight = 0,

	_enabledAttributes = {},

	// frustum

	_frustum = new THREE.Frustum(),

	 // camera matrices cache

	_projScreenMatrix = new THREE.Matrix4(),
	_projScreenMatrixPS = new THREE.Matrix4(),

	_vector3 = new THREE.Vector3(),

	// light arrays cache

	_direction = new THREE.Vector3(),

	_lightsNeedUpdate = true,

	_lights = {

		ambient: [ 0, 0, 0 ],
		directional: { length: 0, colors: new Array(), positions: new Array() },
		point: { length: 0, colors: new Array(), positions: new Array(), distances: new Array() },
		spot: { length: 0, colors: new Array(), positions: new Array(), distances: new Array(), directions: new Array(), anglesCos: new Array(), exponents: new Array() },
		hemi: { length: 0, skyColors: new Array(), groundColors: new Array(), positions: new Array() }

	};

	// initialize

	var _gl;

	var _glExtensionTextureFloat;
	var _glExtensionStandardDerivatives;
	var _glExtensionTextureFilterAnisotropic;
	var _glExtensionCompressedTextureS3TC;

	initGL();

	setDefaultGLState();

	this.context = _gl;

	// GPU capabilities

	var _maxTextures = _gl.getParameter( _gl.MAX_TEXTURE_IMAGE_UNITS );
	var _maxVertexTextures = _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
	var _maxTextureSize = _gl.getParameter( _gl.MAX_TEXTURE_SIZE );
	var _maxCubemapSize = _gl.getParameter( _gl.MAX_CUBE_MAP_TEXTURE_SIZE );

	var _maxAnisotropy = _glExtensionTextureFilterAnisotropic ? _gl.getParameter( _glExtensionTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT ) : 0;

	var _supportsVertexTextures = ( _maxVertexTextures > 0 );
	var _supportsBoneTextures = _supportsVertexTextures && _glExtensionTextureFloat;

	var _compressedTextureFormats = _glExtensionCompressedTextureS3TC ? _gl.getParameter( _gl.COMPRESSED_TEXTURE_FORMATS ) : [];

	//

	var _vertexShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_FLOAT );
	var _vertexShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_FLOAT );
	var _vertexShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_FLOAT );

	var _fragmentShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_FLOAT );
	var _fragmentShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_FLOAT );
	var _fragmentShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_FLOAT );

	var _vertexShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_INT );
	var _vertexShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_INT );
	var _vertexShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_INT );

	var _fragmentShaderPrecisionHighpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_INT );
	var _fragmentShaderPrecisionMediumpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_INT );
	var _fragmentShaderPrecisionLowpInt = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_INT );

	// clamp precision to maximum available

	var highpAvailable = _vertexShaderPrecisionHighpFloat.precision > 0 && _fragmentShaderPrecisionHighpFloat.precision > 0;
	var mediumpAvailable = _vertexShaderPrecisionMediumpFloat.precision > 0 && _fragmentShaderPrecisionMediumpFloat.precision > 0;

	if ( _precision === "highp" && ! highpAvailable ) {

		if ( mediumpAvailable ) {

			_precision = "mediump";
			console.warn( "WebGLRenderer: highp not supported, using mediump" );

		} else {

			_precision = "lowp";
			console.warn( "WebGLRenderer: highp and mediump not supported, using lowp" );

		}

	}

	if ( _precision === "mediump" && ! mediumpAvailable ) {

		_precision = "lowp";
		console.warn( "WebGLRenderer: mediump not supported, using lowp" );

	}

	// API

	this.getContext = function () {

		return _gl;

	};

	this.supportsVertexTextures = function () {

		return _supportsVertexTextures;

	};

	this.getMaxAnisotropy  = function () {

		return _maxAnisotropy;

	};

	this.setSize = function ( width, height ) {

		_canvas.width = width * this.devicePixelRatio;
		_canvas.height = height * this.devicePixelRatio;

		_canvas.style.width = width + 'px';
		_canvas.style.height = height + 'px';

		this.setViewport( 0, 0, _canvas.width, _canvas.height );

	};

	this.setViewport = function ( x, y, width, height ) {

		_viewportX = x !== undefined ? x : 0;
		_viewportY = y !== undefined ? y : 0;

		_viewportWidth = width !== undefined ? width : _canvas.width;
		_viewportHeight = height !== undefined ? height : _canvas.height;

		_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );

	};

	this.setScissor = function ( x, y, width, height ) {

		_gl.scissor( x, y, width, height );

	};

	this.enableScissorTest = function ( enable ) {

		enable ? _gl.enable( _gl.SCISSOR_TEST ) : _gl.disable( _gl.SCISSOR_TEST );

	};

	// Clearing

	this.setClearColorHex = function ( hex, alpha ) {

		_clearColor.setHex( hex );
		_clearAlpha = alpha;

		_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

	};

	this.setClearColor = function ( color, alpha ) {

		_clearColor.copy( color );
		_clearAlpha = alpha;

		_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

	};

	this.getClearColor = function () {

		return _clearColor;

	};

	this.getClearAlpha = function () {

		return _clearAlpha;

	};

	this.clear = function ( color, depth, stencil ) {

		var bits = 0;

		if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
		if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
		if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

		_gl.clear( bits );

	};

	this.clearTarget = function ( renderTarget, color, depth, stencil ) {

		this.setRenderTarget( renderTarget );
		this.clear( color, depth, stencil );

	};

	// Plugins

	this.addPostPlugin = function ( plugin ) {

		plugin.init( this );
		this.renderPluginsPost.push( plugin );

	};

	this.addPrePlugin = function ( plugin ) {

		plugin.init( this );
		this.renderPluginsPre.push( plugin );

	};

	// Rendering

	this.updateShadowMap = function ( scene, camera ) {

		_currentProgram = null;
		_oldBlending = -1;
		_oldDepthTest = -1;
		_oldDepthWrite = -1;
		_currentGeometryGroupHash = -1;
		_currentMaterialId = -1;
		_lightsNeedUpdate = true;
		_oldDoubleSided = -1;
		_oldFlipSided = -1;

		this.shadowMapPlugin.update( scene, camera );

	};

	// Internal functions

	// Buffer allocation

	function createParticleBuffers ( geometry ) {

		geometry.__webglVertexBuffer = _gl.createBuffer();
		geometry.__webglColorBuffer = _gl.createBuffer();

		_this.info.memory.geometries ++;

	};

	function createLineBuffers ( geometry ) {

		geometry.__webglVertexBuffer = _gl.createBuffer();
		geometry.__webglColorBuffer = _gl.createBuffer();
		geometry.__webglLineDistanceBuffer = _gl.createBuffer();

		_this.info.memory.geometries ++;

	};

	function createRibbonBuffers ( geometry ) {

		geometry.__webglVertexBuffer = _gl.createBuffer();
		geometry.__webglColorBuffer = _gl.createBuffer();
		geometry.__webglNormalBuffer = _gl.createBuffer();

		_this.info.memory.geometries ++;

	};

	function createMeshBuffers ( geometryGroup ) {

		geometryGroup.__webglVertexBuffer = _gl.createBuffer();
		geometryGroup.__webglNormalBuffer = _gl.createBuffer();
		geometryGroup.__webglTangentBuffer = _gl.createBuffer();
		geometryGroup.__webglColorBuffer = _gl.createBuffer();
		geometryGroup.__webglUVBuffer = _gl.createBuffer();
		geometryGroup.__webglUV2Buffer = _gl.createBuffer();

		geometryGroup.__webglSkinIndicesBuffer = _gl.createBuffer();
		geometryGroup.__webglSkinWeightsBuffer = _gl.createBuffer();

		geometryGroup.__webglFaceBuffer = _gl.createBuffer();
		geometryGroup.__webglLineBuffer = _gl.createBuffer();

		var m, ml;

		if ( geometryGroup.numMorphTargets ) {

			geometryGroup.__webglMorphTargetsBuffers = [];

			for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

				geometryGroup.__webglMorphTargetsBuffers.push( _gl.createBuffer() );

			}

		}

		if ( geometryGroup.numMorphNormals ) {

			geometryGroup.__webglMorphNormalsBuffers = [];

			for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

				geometryGroup.__webglMorphNormalsBuffers.push( _gl.createBuffer() );

			}

		}

		_this.info.memory.geometries ++;

	};

	// Events

	var onGeometryDispose = function ( event ) {

		var geometry = event.target;

		geometry.removeEventListener( 'dispose', onGeometryDispose );

		deallocateGeometry( geometry );

		_this.info.memory.geometries --;

	};

	var onTextureDispose = function ( event ) {

		var texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		deallocateTexture( texture );

		_this.info.memory.textures --;


	};

	var onRenderTargetDispose = function ( event ) {

		var renderTarget = event.target;

		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

		deallocateRenderTarget( renderTarget );

		_this.info.memory.textures --;

	};

	var onMaterialDispose = function ( event ) {

		var material = event.target;

		material.removeEventListener( 'dispose', onMaterialDispose );

		deallocateMaterial( material );

	};

	// Buffer deallocation

	var deallocateGeometry = function ( geometry ) {

		geometry.__webglInit = undefined;

		if ( geometry.__webglVertexBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglVertexBuffer );
		if ( geometry.__webglNormalBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglNormalBuffer );
		if ( geometry.__webglTangentBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglTangentBuffer );
		if ( geometry.__webglColorBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglColorBuffer );
		if ( geometry.__webglUVBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglUVBuffer );
		if ( geometry.__webglUV2Buffer !== undefined ) _gl.deleteBuffer( geometry.__webglUV2Buffer );

		if ( geometry.__webglSkinIndicesBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinIndicesBuffer );
		if ( geometry.__webglSkinWeightsBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglSkinWeightsBuffer );

		if ( geometry.__webglFaceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglFaceBuffer );
		if ( geometry.__webglLineBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineBuffer );

		if ( geometry.__webglLineDistanceBuffer !== undefined ) _gl.deleteBuffer( geometry.__webglLineDistanceBuffer );

		// geometry groups

		if ( geometry.geometryGroups !== undefined ) {

			for ( var g in geometry.geometryGroups ) {

				var geometryGroup = geometry.geometryGroups[ g ];

				if ( geometryGroup.numMorphTargets !== undefined ) {

					for ( var m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

						_gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );

					}

				}

				if ( geometryGroup.numMorphNormals !== undefined ) {

					for ( var m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

						_gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );

					}

				}

				deleteCustomAttributesBuffers( geometryGroup );

			}

		}

		deleteCustomAttributesBuffers( geometry );

	};

	var deallocateTexture = function ( texture ) {

		if ( texture.image && texture.image.__webglTextureCube ) {

			// cube texture

			_gl.deleteTexture( texture.image.__webglTextureCube );

		} else {

			// 2D texture

			if ( ! texture.__webglInit ) return;

			texture.__webglInit = false;
			_gl.deleteTexture( texture.__webglTexture );

		}

	};

	var deallocateRenderTarget = function ( renderTarget ) {

		if ( !renderTarget || ! renderTarget.__webglTexture ) return;

		_gl.deleteTexture( renderTarget.__webglTexture );

		if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

			for ( var i = 0; i < 6; i ++ ) {

				_gl.deleteFramebuffer( renderTarget.__webglFramebuffer[ i ] );
				_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer[ i ] );

			}

		} else {

			_gl.deleteFramebuffer( renderTarget.__webglFramebuffer );
			_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer );

		}

	};

	var deallocateMaterial = function ( material ) {

		var program = material.program;

		if ( program === undefined ) return;

		material.program = undefined;

		// only deallocate GL program if this was the last use of shared program
		// assumed there is only single copy of any program in the _programs list
		// (that's how it's constructed)

		var i, il, programInfo;
		var deleteProgram = false;

		for ( i = 0, il = _programs.length; i < il; i ++ ) {

			programInfo = _programs[ i ];

			if ( programInfo.program === program ) {

				programInfo.usedTimes --;

				if ( programInfo.usedTimes === 0 ) {

					deleteProgram = true;

				}

				break;

			}

		}

		if ( deleteProgram === true ) {

			// avoid using array.splice, this is costlier than creating new array from scratch

			var newPrograms = [];

			for ( i = 0, il = _programs.length; i < il; i ++ ) {

				programInfo = _programs[ i ];

				if ( programInfo.program !== program ) {

					newPrograms.push( programInfo );

				}

			}

			_programs = newPrograms;

			_gl.deleteProgram( program );

			_this.info.memory.programs --;

		}

	};

	//

	/*
	function deleteParticleBuffers ( geometry ) {

		_gl.deleteBuffer( geometry.__webglVertexBuffer );
		_gl.deleteBuffer( geometry.__webglColorBuffer );

		deleteCustomAttributesBuffers( geometry );

		_this.info.memory.geometries --;

	};

	function deleteLineBuffers ( geometry ) {

		_gl.deleteBuffer( geometry.__webglVertexBuffer );
		_gl.deleteBuffer( geometry.__webglColorBuffer );
		_gl.deleteBuffer( geometry.__webglLineDistanceBuffer );

		deleteCustomAttributesBuffers( geometry );

		_this.info.memory.geometries --;

	};

	function deleteRibbonBuffers ( geometry ) {

		_gl.deleteBuffer( geometry.__webglVertexBuffer );
		_gl.deleteBuffer( geometry.__webglColorBuffer );
		_gl.deleteBuffer( geometry.__webglNormalBuffer );

		deleteCustomAttributesBuffers( geometry );

		_this.info.memory.geometries --;

	};

	function deleteMeshBuffers ( geometryGroup ) {

		_gl.deleteBuffer( geometryGroup.__webglVertexBuffer );
		_gl.deleteBuffer( geometryGroup.__webglNormalBuffer );
		_gl.deleteBuffer( geometryGroup.__webglTangentBuffer );
		_gl.deleteBuffer( geometryGroup.__webglColorBuffer );
		_gl.deleteBuffer( geometryGroup.__webglUVBuffer );
		_gl.deleteBuffer( geometryGroup.__webglUV2Buffer );

		_gl.deleteBuffer( geometryGroup.__webglSkinIndicesBuffer );
		_gl.deleteBuffer( geometryGroup.__webglSkinWeightsBuffer );

		_gl.deleteBuffer( geometryGroup.__webglFaceBuffer );
		_gl.deleteBuffer( geometryGroup.__webglLineBuffer );

		var m, ml;

		if ( geometryGroup.numMorphTargets ) {

			for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

				_gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );

			}

		}

		if ( geometryGroup.numMorphNormals ) {

			for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

				_gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );

			}

		}

		deleteCustomAttributesBuffers( geometryGroup );

		_this.info.memory.geometries --;

	};
	*/

	function deleteCustomAttributesBuffers( geometry ) {

		if ( geometry.__webglCustomAttributesList ) {

			for ( var id in geometry.__webglCustomAttributesList ) {

				_gl.deleteBuffer( geometry.__webglCustomAttributesList[ id ].buffer );

			}

		}

	};

	// Buffer initialization

	function initCustomAttributes ( geometry, object ) {

		var nvertices = geometry.vertices.length;

		var material = object.material;

		if ( material.attributes ) {

			if ( geometry.__webglCustomAttributesList === undefined ) {

				geometry.__webglCustomAttributesList = [];

			}

			for ( var a in material.attributes ) {

				var attribute = material.attributes[ a ];

				if ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {

					attribute.__webglInitialized = true;

					var size = 1;		// "f" and "i"

					if ( attribute.type === "v2" ) size = 2;
					else if ( attribute.type === "v3" ) size = 3;
					else if ( attribute.type === "v4" ) size = 4;
					else if ( attribute.type === "c"  ) size = 3;

					attribute.size = size;

					attribute.array = new Float32Array( nvertices * size );

					attribute.buffer = _gl.createBuffer();
					attribute.buffer.belongsToAttribute = a;

					attribute.needsUpdate = true;

				}

				geometry.__webglCustomAttributesList.push( attribute );

			}

		}

	};

	function initParticleBuffers ( geometry, object ) {

		var nvertices = geometry.vertices.length;

		geometry.__vertexArray = new Float32Array( nvertices * 3 );
		geometry.__colorArray = new Float32Array( nvertices * 3 );

		geometry.__sortArray = [];

		geometry.__webglParticleCount = nvertices;

		initCustomAttributes ( geometry, object );

	};

	function initLineBuffers ( geometry, object ) {

		var nvertices = geometry.vertices.length;

		geometry.__vertexArray = new Float32Array( nvertices * 3 );
		geometry.__colorArray = new Float32Array( nvertices * 3 );
		geometry.__lineDistanceArray = new Float32Array( nvertices * 1 );

		geometry.__webglLineCount = nvertices;

		initCustomAttributes ( geometry, object );

	};

	function initRibbonBuffers ( geometry, object ) {

		var nvertices = geometry.vertices.length;

		geometry.__vertexArray = new Float32Array( nvertices * 3 );
		geometry.__colorArray = new Float32Array( nvertices * 3 );
		geometry.__normalArray = new Float32Array( nvertices * 3 );

		geometry.__webglVertexCount = nvertices;

		initCustomAttributes ( geometry, object );

	};

	function initMeshBuffers ( geometryGroup, object ) {

		var geometry = object.geometry,
			faces3 = geometryGroup.faces3,
			faces4 = geometryGroup.faces4,

			nvertices = faces3.length * 3 + faces4.length * 4,
			ntris     = faces3.length * 1 + faces4.length * 2,
			nlines    = faces3.length * 3 + faces4.length * 4,

			material = getBufferMaterial( object, geometryGroup ),

			uvType = bufferGuessUVType( material ),
			normalType = bufferGuessNormalType( material ),
			vertexColorType = bufferGuessVertexColorType( material );

		//console.log( "uvType", uvType, "normalType", normalType, "vertexColorType", vertexColorType, object, geometryGroup, material );

		geometryGroup.__vertexArray = new Float32Array( nvertices * 3 );

		if ( normalType ) {

			geometryGroup.__normalArray = new Float32Array( nvertices * 3 );

		}

		if ( geometry.hasTangents ) {

			geometryGroup.__tangentArray = new Float32Array( nvertices * 4 );

		}

		if ( vertexColorType ) {

			geometryGroup.__colorArray = new Float32Array( nvertices * 3 );

		}

		if ( uvType ) {

			if ( geometry.faceUvs.length > 0 || geometry.faceVertexUvs.length > 0 ) {

				geometryGroup.__uvArray = new Float32Array( nvertices * 2 );

			}

			if ( geometry.faceUvs.length > 1 || geometry.faceVertexUvs.length > 1 ) {

				geometryGroup.__uv2Array = new Float32Array( nvertices * 2 );

			}

		}

		if ( object.geometry.skinWeights.length && object.geometry.skinIndices.length ) {

			geometryGroup.__skinIndexArray = new Float32Array( nvertices * 4 );
			geometryGroup.__skinWeightArray = new Float32Array( nvertices * 4 );

		}

		geometryGroup.__faceArray = new Uint16Array( ntris * 3 );
		geometryGroup.__lineArray = new Uint16Array( nlines * 2 );

		var m, ml;

		if ( geometryGroup.numMorphTargets ) {

			geometryGroup.__morphTargetsArrays = [];

			for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

				geometryGroup.__morphTargetsArrays.push( new Float32Array( nvertices * 3 ) );

			}

		}

		if ( geometryGroup.numMorphNormals ) {

			geometryGroup.__morphNormalsArrays = [];

			for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

				geometryGroup.__morphNormalsArrays.push( new Float32Array( nvertices * 3 ) );

			}

		}

		geometryGroup.__webglFaceCount = ntris * 3;
		geometryGroup.__webglLineCount = nlines * 2;


		// custom attributes

		if ( material.attributes ) {

			if ( geometryGroup.__webglCustomAttributesList === undefined ) {

				geometryGroup.__webglCustomAttributesList = [];

			}

			for ( var a in material.attributes ) {

				// Do a shallow copy of the attribute object so different geometryGroup chunks use different
				// attribute buffers which are correctly indexed in the setMeshBuffers function

				var originalAttribute = material.attributes[ a ];

				var attribute = {};

				for ( var property in originalAttribute ) {

					attribute[ property ] = originalAttribute[ property ];

				}

				if ( !attribute.__webglInitialized || attribute.createUniqueBuffers ) {

					attribute.__webglInitialized = true;

					var size = 1;		// "f" and "i"

					if( attribute.type === "v2" ) size = 2;
					else if( attribute.type === "v3" ) size = 3;
					else if( attribute.type === "v4" ) size = 4;
					else if( attribute.type === "c"  ) size = 3;

					attribute.size = size;

					attribute.array = new Float32Array( nvertices * size );

					attribute.buffer = _gl.createBuffer();
					attribute.buffer.belongsToAttribute = a;

					originalAttribute.needsUpdate = true;
					attribute.__original = originalAttribute;

				}

				geometryGroup.__webglCustomAttributesList.push( attribute );

			}

		}

		geometryGroup.__inittedArrays = true;

	};

	function getBufferMaterial( object, geometryGroup ) {

		return object.material instanceof THREE.MeshFaceMaterial
			? object.material.materials[ geometryGroup.materialIndex ]
			: object.material;

	};

	function materialNeedsSmoothNormals ( material ) {

		return material && material.shading !== undefined && material.shading === THREE.SmoothShading;

	};

	function bufferGuessNormalType ( material ) {

		// only MeshBasicMaterial and MeshDepthMaterial don't need normals

		if ( ( material instanceof THREE.MeshBasicMaterial && !material.envMap ) || material instanceof THREE.MeshDepthMaterial ) {

			return false;

		}

		if ( materialNeedsSmoothNormals( material ) ) {

			return THREE.SmoothShading;

		} else {

			return THREE.FlatShading;

		}

	};

	function bufferGuessVertexColorType ( material ) {

		if ( material.vertexColors ) {

			return material.vertexColors;

		}

		return false;

	};

	function bufferGuessUVType ( material ) {

		// material must use some texture to require uvs

		if ( material.map || material.lightMap || material.bumpMap || material.normalMap || material.specularMap || material instanceof THREE.ShaderMaterial ) {

			return true;

		}

		return false;

	};

	//

	function initDirectBuffers( geometry ) {

		var a, attribute, type;

		for ( a in geometry.attributes ) {

			if ( a === "index" ) {

				type = _gl.ELEMENT_ARRAY_BUFFER;

			} else {

				type = _gl.ARRAY_BUFFER;

			}

			attribute = geometry.attributes[ a ];

			attribute.buffer = _gl.createBuffer();

			_gl.bindBuffer( type, attribute.buffer );
			_gl.bufferData( type, attribute.array, _gl.STATIC_DRAW );

		}

	};

	// Buffer setting

	function setParticleBuffers ( geometry, hint, object ) {

		var v, c, vertex, offset, index, color,

		vertices = geometry.vertices,
		vl = vertices.length,

		colors = geometry.colors,
		cl = colors.length,

		vertexArray = geometry.__vertexArray,
		colorArray = geometry.__colorArray,

		sortArray = geometry.__sortArray,

		dirtyVertices = geometry.verticesNeedUpdate,
		dirtyElements = geometry.elementsNeedUpdate,
		dirtyColors = geometry.colorsNeedUpdate,

		customAttributes = geometry.__webglCustomAttributesList,
		i, il,
		a, ca, cal, value,
		customAttribute;

		if ( object.sortParticles ) {

			_projScreenMatrixPS.copy( _projScreenMatrix );
			_projScreenMatrixPS.multiplySelf( object.matrixWorld );

			for ( v = 0; v < vl; v ++ ) {

				vertex = vertices[ v ];

				_vector3.copy( vertex );
				_projScreenMatrixPS.multiplyVector3( _vector3 );

				sortArray[ v ] = [ _vector3.z, v ];

			}

			sortArray.sort( numericalSort );

			for ( v = 0; v < vl; v ++ ) {

				vertex = vertices[ sortArray[v][1] ];

				offset = v * 3;

				vertexArray[ offset ]     = vertex.x;
				vertexArray[ offset + 1 ] = vertex.y;
				vertexArray[ offset + 2 ] = vertex.z;

			}

			for ( c = 0; c < cl; c ++ ) {

				offset = c * 3;

				color = colors[ sortArray[c][1] ];

				colorArray[ offset ]     = color.r;
				colorArray[ offset + 1 ] = color.g;
				colorArray[ offset + 2 ] = color.b;

			}

			if ( customAttributes ) {

				for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

					customAttribute = customAttributes[ i ];

					if ( ! ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) ) continue;

					offset = 0;

					cal = customAttribute.value.length;

					if ( customAttribute.size === 1 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							index = sortArray[ ca ][ 1 ];

							customAttribute.array[ ca ] = customAttribute.value[ index ];

						}

					} else if ( customAttribute.size === 2 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							index = sortArray[ ca ][ 1 ];

							value = customAttribute.value[ index ];

							customAttribute.array[ offset ] 	= value.x;
							customAttribute.array[ offset + 1 ] = value.y;

							offset += 2;

						}

					} else if ( customAttribute.size === 3 ) {

						if ( customAttribute.type === "c" ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								index = sortArray[ ca ][ 1 ];

								value = customAttribute.value[ index ];

								customAttribute.array[ offset ]     = value.r;
								customAttribute.array[ offset + 1 ] = value.g;
								customAttribute.array[ offset + 2 ] = value.b;

								offset += 3;

							}

						} else {

							for ( ca = 0; ca < cal; ca ++ ) {

								index = sortArray[ ca ][ 1 ];

								value = customAttribute.value[ index ];

								customAttribute.array[ offset ] 	= value.x;
								customAttribute.array[ offset + 1 ] = value.y;
								customAttribute.array[ offset + 2 ] = value.z;

								offset += 3;

							}

						}

					} else if ( customAttribute.size === 4 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							index = sortArray[ ca ][ 1 ];

							value = customAttribute.value[ index ];

							customAttribute.array[ offset ]      = value.x;
							customAttribute.array[ offset + 1  ] = value.y;
							customAttribute.array[ offset + 2  ] = value.z;
							customAttribute.array[ offset + 3  ] = value.w;

							offset += 4;

						}

					}

				}

			}

		} else {

			if ( dirtyVertices ) {

				for ( v = 0; v < vl; v ++ ) {

					vertex = vertices[ v ];

					offset = v * 3;

					vertexArray[ offset ]     = vertex.x;
					vertexArray[ offset + 1 ] = vertex.y;
					vertexArray[ offset + 2 ] = vertex.z;

				}

			}

			if ( dirtyColors ) {

				for ( c = 0; c < cl; c ++ ) {

					color = colors[ c ];

					offset = c * 3;

					colorArray[ offset ]     = color.r;
					colorArray[ offset + 1 ] = color.g;
					colorArray[ offset + 2 ] = color.b;

				}

			}

			if ( customAttributes ) {

				for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

					customAttribute = customAttributes[ i ];

					if ( customAttribute.needsUpdate &&
						 ( customAttribute.boundTo === undefined ||
						   customAttribute.boundTo === "vertices") ) {

						cal = customAttribute.value.length;

						offset = 0;

						if ( customAttribute.size === 1 ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								customAttribute.array[ ca ] = customAttribute.value[ ca ];

							}

						} else if ( customAttribute.size === 2 ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ] 	= value.x;
								customAttribute.array[ offset + 1 ] = value.y;

								offset += 2;

							}

						} else if ( customAttribute.size === 3 ) {

							if ( customAttribute.type === "c" ) {

								for ( ca = 0; ca < cal; ca ++ ) {

									value = customAttribute.value[ ca ];

									customAttribute.array[ offset ] 	= value.r;
									customAttribute.array[ offset + 1 ] = value.g;
									customAttribute.array[ offset + 2 ] = value.b;

									offset += 3;

								}

							} else {

								for ( ca = 0; ca < cal; ca ++ ) {

									value = customAttribute.value[ ca ];

									customAttribute.array[ offset ] 	= value.x;
									customAttribute.array[ offset + 1 ] = value.y;
									customAttribute.array[ offset + 2 ] = value.z;

									offset += 3;

								}

							}

						} else if ( customAttribute.size === 4 ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ]      = value.x;
								customAttribute.array[ offset + 1  ] = value.y;
								customAttribute.array[ offset + 2  ] = value.z;
								customAttribute.array[ offset + 3  ] = value.w;

								offset += 4;

							}

						}

					}

				}

			}

		}

		if ( dirtyVertices || object.sortParticles ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

		}

		if ( dirtyColors || object.sortParticles ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

		}

		if ( customAttributes ) {

			for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

				customAttribute = customAttributes[ i ];

				if ( customAttribute.needsUpdate || object.sortParticles ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
					_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

				}

			}

		}


	};

	function setLineBuffers ( geometry, hint ) {

		var v, c, d, vertex, offset, color,

		vertices = geometry.vertices,
		colors = geometry.colors,
		lineDistances = geometry.lineDistances,

		vl = vertices.length,
		cl = colors.length,
		dl = lineDistances.length,

		vertexArray = geometry.__vertexArray,
		colorArray = geometry.__colorArray,
		lineDistanceArray = geometry.__lineDistanceArray,

		dirtyVertices = geometry.verticesNeedUpdate,
		dirtyColors = geometry.colorsNeedUpdate,
		dirtyLineDistances = geometry.lineDistancesNeedUpdate,

		customAttributes = geometry.__webglCustomAttributesList,

		i, il,
		a, ca, cal, value,
		customAttribute;

		if ( dirtyVertices ) {

			for ( v = 0; v < vl; v ++ ) {

				vertex = vertices[ v ];

				offset = v * 3;

				vertexArray[ offset ]     = vertex.x;
				vertexArray[ offset + 1 ] = vertex.y;
				vertexArray[ offset + 2 ] = vertex.z;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

		}

		if ( dirtyColors ) {

			for ( c = 0; c < cl; c ++ ) {

				color = colors[ c ];

				offset = c * 3;

				colorArray[ offset ]     = color.r;
				colorArray[ offset + 1 ] = color.g;
				colorArray[ offset + 2 ] = color.b;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

		}

		if ( dirtyLineDistances ) {

			for ( d = 0; d < dl; d ++ ) {

				lineDistanceArray[ d ] = lineDistances[ d ];

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglLineDistanceBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, lineDistanceArray, hint );

		}

		if ( customAttributes ) {

			for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

				customAttribute = customAttributes[ i ];

				if ( customAttribute.needsUpdate &&
					 ( customAttribute.boundTo === undefined ||
					   customAttribute.boundTo === "vertices" ) ) {

					offset = 0;

					cal = customAttribute.value.length;

					if ( customAttribute.size === 1 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							customAttribute.array[ ca ] = customAttribute.value[ ca ];

						}

					} else if ( customAttribute.size === 2 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							value = customAttribute.value[ ca ];

							customAttribute.array[ offset ] 	= value.x;
							customAttribute.array[ offset + 1 ] = value.y;

							offset += 2;

						}

					} else if ( customAttribute.size === 3 ) {

						if ( customAttribute.type === "c" ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ] 	= value.r;
								customAttribute.array[ offset + 1 ] = value.g;
								customAttribute.array[ offset + 2 ] = value.b;

								offset += 3;

							}

						} else {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ] 	= value.x;
								customAttribute.array[ offset + 1 ] = value.y;
								customAttribute.array[ offset + 2 ] = value.z;

								offset += 3;

							}

						}

					} else if ( customAttribute.size === 4 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							value = customAttribute.value[ ca ];

							customAttribute.array[ offset ] 	 = value.x;
							customAttribute.array[ offset + 1  ] = value.y;
							customAttribute.array[ offset + 2  ] = value.z;
							customAttribute.array[ offset + 3  ] = value.w;

							offset += 4;

						}

					}

					_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
					_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

				}

			}

		}

	};

	function setRibbonBuffers ( geometry, hint ) {

		var v, c, n, vertex, offset, color, normal,

		i, il, ca, cal, customAttribute, value,

		vertices = geometry.vertices,
		colors = geometry.colors,
		normals = geometry.normals,

		vl = vertices.length,
		cl = colors.length,
		nl = normals.length,

		vertexArray = geometry.__vertexArray,
		colorArray = geometry.__colorArray,
		normalArray = geometry.__normalArray,

		dirtyVertices = geometry.verticesNeedUpdate,
		dirtyColors = geometry.colorsNeedUpdate,
		dirtyNormals = geometry.normalsNeedUpdate,

		customAttributes = geometry.__webglCustomAttributesList;

		if ( dirtyVertices ) {

			for ( v = 0; v < vl; v ++ ) {

				vertex = vertices[ v ];

				offset = v * 3;

				vertexArray[ offset ]     = vertex.x;
				vertexArray[ offset + 1 ] = vertex.y;
				vertexArray[ offset + 2 ] = vertex.z;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

		}

		if ( dirtyColors ) {

			for ( c = 0; c < cl; c ++ ) {

				color = colors[ c ];

				offset = c * 3;

				colorArray[ offset ]     = color.r;
				colorArray[ offset + 1 ] = color.g;
				colorArray[ offset + 2 ] = color.b;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

		}

		if ( dirtyNormals ) {

			for ( n = 0; n < nl; n ++ ) {

				normal = normals[ n ];

				offset = n * 3;

				normalArray[ offset ]     = normal.x;
				normalArray[ offset + 1 ] = normal.y;
				normalArray[ offset + 2 ] = normal.z;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglNormalBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );

		}

		if ( customAttributes ) {

			for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

				customAttribute = customAttributes[ i ];

				if ( customAttribute.needsUpdate &&
					 ( customAttribute.boundTo === undefined ||
					   customAttribute.boundTo === "vertices" ) ) {

					offset = 0;

					cal = customAttribute.value.length;

					if ( customAttribute.size === 1 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							customAttribute.array[ ca ] = customAttribute.value[ ca ];

						}

					} else if ( customAttribute.size === 2 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							value = customAttribute.value[ ca ];

							customAttribute.array[ offset ] 	= value.x;
							customAttribute.array[ offset + 1 ] = value.y;

							offset += 2;

						}

					} else if ( customAttribute.size === 3 ) {

						if ( customAttribute.type === "c" ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ] 	= value.r;
								customAttribute.array[ offset + 1 ] = value.g;
								customAttribute.array[ offset + 2 ] = value.b;

								offset += 3;

							}

						} else {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ] 	= value.x;
								customAttribute.array[ offset + 1 ] = value.y;
								customAttribute.array[ offset + 2 ] = value.z;

								offset += 3;

							}

						}

					} else if ( customAttribute.size === 4 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							value = customAttribute.value[ ca ];

							customAttribute.array[ offset ] 	 = value.x;
							customAttribute.array[ offset + 1  ] = value.y;
							customAttribute.array[ offset + 2  ] = value.z;
							customAttribute.array[ offset + 3  ] = value.w;

							offset += 4;

						}

					}

					_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
					_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

				}

			}

		}

	};

	function setMeshBuffers( geometryGroup, object, hint, dispose, material ) {

		if ( ! geometryGroup.__inittedArrays ) {

			return;

		}

		var normalType = bufferGuessNormalType( material ),
		vertexColorType = bufferGuessVertexColorType( material ),
		uvType = bufferGuessUVType( material ),

		needsSmoothNormals = ( normalType === THREE.SmoothShading );

		var f, fl, fi, face,
		vertexNormals, faceNormal, normal,
		vertexColors, faceColor,
		vertexTangents,
		uv, uv2, v1, v2, v3, v4, t1, t2, t3, t4, n1, n2, n3, n4,
		c1, c2, c3, c4,
		sw1, sw2, sw3, sw4,
		si1, si2, si3, si4,
		sa1, sa2, sa3, sa4,
		sb1, sb2, sb3, sb4,
		m, ml, i, il,
		vn, uvi, uv2i,
		vk, vkl, vka,
		nka, chf, faceVertexNormals,
		a,

		vertexIndex = 0,

		offset = 0,
		offset_uv = 0,
		offset_uv2 = 0,
		offset_face = 0,
		offset_normal = 0,
		offset_tangent = 0,
		offset_line = 0,
		offset_color = 0,
		offset_skin = 0,
		offset_morphTarget = 0,
		offset_custom = 0,
		offset_customSrc = 0,

		value,

		vertexArray = geometryGroup.__vertexArray,
		uvArray = geometryGroup.__uvArray,
		uv2Array = geometryGroup.__uv2Array,
		normalArray = geometryGroup.__normalArray,
		tangentArray = geometryGroup.__tangentArray,
		colorArray = geometryGroup.__colorArray,

		skinIndexArray = geometryGroup.__skinIndexArray,
		skinWeightArray = geometryGroup.__skinWeightArray,

		morphTargetsArrays = geometryGroup.__morphTargetsArrays,
		morphNormalsArrays = geometryGroup.__morphNormalsArrays,

		customAttributes = geometryGroup.__webglCustomAttributesList,
		customAttribute,

		faceArray = geometryGroup.__faceArray,
		lineArray = geometryGroup.__lineArray,

		geometry = object.geometry, // this is shared for all chunks

		dirtyVertices = geometry.verticesNeedUpdate,
		dirtyElements = geometry.elementsNeedUpdate,
		dirtyUvs = geometry.uvsNeedUpdate,
		dirtyNormals = geometry.normalsNeedUpdate,
		dirtyTangents = geometry.tangentsNeedUpdate,
		dirtyColors = geometry.colorsNeedUpdate,
		dirtyMorphTargets = geometry.morphTargetsNeedUpdate,

		vertices = geometry.vertices,
		chunk_faces3 = geometryGroup.faces3,
		chunk_faces4 = geometryGroup.faces4,
		obj_faces = geometry.faces,

		obj_uvs  = geometry.faceVertexUvs[ 0 ],
		obj_uvs2 = geometry.faceVertexUvs[ 1 ],

		obj_colors = geometry.colors,

		obj_skinIndices = geometry.skinIndices,
		obj_skinWeights = geometry.skinWeights,

		morphTargets = geometry.morphTargets,
		morphNormals = geometry.morphNormals;

		if ( dirtyVertices ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ] ];

				v1 = vertices[ face.a ];
				v2 = vertices[ face.b ];
				v3 = vertices[ face.c ];

				vertexArray[ offset ]     = v1.x;
				vertexArray[ offset + 1 ] = v1.y;
				vertexArray[ offset + 2 ] = v1.z;

				vertexArray[ offset + 3 ] = v2.x;
				vertexArray[ offset + 4 ] = v2.y;
				vertexArray[ offset + 5 ] = v2.z;

				vertexArray[ offset + 6 ] = v3.x;
				vertexArray[ offset + 7 ] = v3.y;
				vertexArray[ offset + 8 ] = v3.z;

				offset += 9;

			}

			for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces4[ f ] ];

				v1 = vertices[ face.a ];
				v2 = vertices[ face.b ];
				v3 = vertices[ face.c ];
				v4 = vertices[ face.d ];

				vertexArray[ offset ]     = v1.x;
				vertexArray[ offset + 1 ] = v1.y;
				vertexArray[ offset + 2 ] = v1.z;

				vertexArray[ offset + 3 ] = v2.x;
				vertexArray[ offset + 4 ] = v2.y;
				vertexArray[ offset + 5 ] = v2.z;

				vertexArray[ offset + 6 ] = v3.x;
				vertexArray[ offset + 7 ] = v3.y;
				vertexArray[ offset + 8 ] = v3.z;

				vertexArray[ offset + 9 ]  = v4.x;
				vertexArray[ offset + 10 ] = v4.y;
				vertexArray[ offset + 11 ] = v4.z;

				offset += 12;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

		}

		if ( dirtyMorphTargets ) {

			for ( vk = 0, vkl = morphTargets.length; vk < vkl; vk ++ ) {

				offset_morphTarget = 0;

				for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

					chf = chunk_faces3[ f ];
					face = obj_faces[ chf ];

					// morph positions

					v1 = morphTargets[ vk ].vertices[ face.a ];
					v2 = morphTargets[ vk ].vertices[ face.b ];
					v3 = morphTargets[ vk ].vertices[ face.c ];

					vka = morphTargetsArrays[ vk ];

					vka[ offset_morphTarget ] 	  = v1.x;
					vka[ offset_morphTarget + 1 ] = v1.y;
					vka[ offset_morphTarget + 2 ] = v1.z;

					vka[ offset_morphTarget + 3 ] = v2.x;
					vka[ offset_morphTarget + 4 ] = v2.y;
					vka[ offset_morphTarget + 5 ] = v2.z;

					vka[ offset_morphTarget + 6 ] = v3.x;
					vka[ offset_morphTarget + 7 ] = v3.y;
					vka[ offset_morphTarget + 8 ] = v3.z;

					// morph normals

					if ( material.morphNormals ) {

						if ( needsSmoothNormals ) {

							faceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];

							n1 = faceVertexNormals.a;
							n2 = faceVertexNormals.b;
							n3 = faceVertexNormals.c;

						} else {

							n1 = morphNormals[ vk ].faceNormals[ chf ];
							n2 = n1;
							n3 = n1;

						}

						nka = morphNormalsArrays[ vk ];

						nka[ offset_morphTarget ] 	  = n1.x;
						nka[ offset_morphTarget + 1 ] = n1.y;
						nka[ offset_morphTarget + 2 ] = n1.z;

						nka[ offset_morphTarget + 3 ] = n2.x;
						nka[ offset_morphTarget + 4 ] = n2.y;
						nka[ offset_morphTarget + 5 ] = n2.z;

						nka[ offset_morphTarget + 6 ] = n3.x;
						nka[ offset_morphTarget + 7 ] = n3.y;
						nka[ offset_morphTarget + 8 ] = n3.z;

					}

					//

					offset_morphTarget += 9;

				}

				for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

					chf = chunk_faces4[ f ];
					face = obj_faces[ chf ];

					// morph positions

					v1 = morphTargets[ vk ].vertices[ face.a ];
					v2 = morphTargets[ vk ].vertices[ face.b ];
					v3 = morphTargets[ vk ].vertices[ face.c ];
					v4 = morphTargets[ vk ].vertices[ face.d ];

					vka = morphTargetsArrays[ vk ];

					vka[ offset_morphTarget ] 	  = v1.x;
					vka[ offset_morphTarget + 1 ] = v1.y;
					vka[ offset_morphTarget + 2 ] = v1.z;

					vka[ offset_morphTarget + 3 ] = v2.x;
					vka[ offset_morphTarget + 4 ] = v2.y;
					vka[ offset_morphTarget + 5 ] = v2.z;

					vka[ offset_morphTarget + 6 ] = v3.x;
					vka[ offset_morphTarget + 7 ] = v3.y;
					vka[ offset_morphTarget + 8 ] = v3.z;

					vka[ offset_morphTarget + 9 ]  = v4.x;
					vka[ offset_morphTarget + 10 ] = v4.y;
					vka[ offset_morphTarget + 11 ] = v4.z;

					// morph normals

					if ( material.morphNormals ) {

						if ( needsSmoothNormals ) {

							faceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];

							n1 = faceVertexNormals.a;
							n2 = faceVertexNormals.b;
							n3 = faceVertexNormals.c;
							n4 = faceVertexNormals.d;

						} else {

							n1 = morphNormals[ vk ].faceNormals[ chf ];
							n2 = n1;
							n3 = n1;
							n4 = n1;

						}

						nka = morphNormalsArrays[ vk ];

						nka[ offset_morphTarget ] 	  = n1.x;
						nka[ offset_morphTarget + 1 ] = n1.y;
						nka[ offset_morphTarget + 2 ] = n1.z;

						nka[ offset_morphTarget + 3 ] = n2.x;
						nka[ offset_morphTarget + 4 ] = n2.y;
						nka[ offset_morphTarget + 5 ] = n2.z;

						nka[ offset_morphTarget + 6 ] = n3.x;
						nka[ offset_morphTarget + 7 ] = n3.y;
						nka[ offset_morphTarget + 8 ] = n3.z;

						nka[ offset_morphTarget + 9 ]  = n4.x;
						nka[ offset_morphTarget + 10 ] = n4.y;
						nka[ offset_morphTarget + 11 ] = n4.z;

					}

					//

					offset_morphTarget += 12;

				}

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ vk ] );
				_gl.bufferData( _gl.ARRAY_BUFFER, morphTargetsArrays[ vk ], hint );

				if ( material.morphNormals ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ vk ] );
					_gl.bufferData( _gl.ARRAY_BUFFER, morphNormalsArrays[ vk ], hint );

				}

			}

		}

		if ( obj_skinWeights.length ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ]	];

				// weights

				sw1 = obj_skinWeights[ face.a ];
				sw2 = obj_skinWeights[ face.b ];
				sw3 = obj_skinWeights[ face.c ];

				skinWeightArray[ offset_skin ]     = sw1.x;
				skinWeightArray[ offset_skin + 1 ] = sw1.y;
				skinWeightArray[ offset_skin + 2 ] = sw1.z;
				skinWeightArray[ offset_skin + 3 ] = sw1.w;

				skinWeightArray[ offset_skin + 4 ] = sw2.x;
				skinWeightArray[ offset_skin + 5 ] = sw2.y;
				skinWeightArray[ offset_skin + 6 ] = sw2.z;
				skinWeightArray[ offset_skin + 7 ] = sw2.w;

				skinWeightArray[ offset_skin + 8 ]  = sw3.x;
				skinWeightArray[ offset_skin + 9 ]  = sw3.y;
				skinWeightArray[ offset_skin + 10 ] = sw3.z;
				skinWeightArray[ offset_skin + 11 ] = sw3.w;

				// indices

				si1 = obj_skinIndices[ face.a ];
				si2 = obj_skinIndices[ face.b ];
				si3 = obj_skinIndices[ face.c ];

				skinIndexArray[ offset_skin ]     = si1.x;
				skinIndexArray[ offset_skin + 1 ] = si1.y;
				skinIndexArray[ offset_skin + 2 ] = si1.z;
				skinIndexArray[ offset_skin + 3 ] = si1.w;

				skinIndexArray[ offset_skin + 4 ] = si2.x;
				skinIndexArray[ offset_skin + 5 ] = si2.y;
				skinIndexArray[ offset_skin + 6 ] = si2.z;
				skinIndexArray[ offset_skin + 7 ] = si2.w;

				skinIndexArray[ offset_skin + 8 ]  = si3.x;
				skinIndexArray[ offset_skin + 9 ]  = si3.y;
				skinIndexArray[ offset_skin + 10 ] = si3.z;
				skinIndexArray[ offset_skin + 11 ] = si3.w;

				offset_skin += 12;

			}

			for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces4[ f ] ];

				// weights

				sw1 = obj_skinWeights[ face.a ];
				sw2 = obj_skinWeights[ face.b ];
				sw3 = obj_skinWeights[ face.c ];
				sw4 = obj_skinWeights[ face.d ];

				skinWeightArray[ offset_skin ]     = sw1.x;
				skinWeightArray[ offset_skin + 1 ] = sw1.y;
				skinWeightArray[ offset_skin + 2 ] = sw1.z;
				skinWeightArray[ offset_skin + 3 ] = sw1.w;

				skinWeightArray[ offset_skin + 4 ] = sw2.x;
				skinWeightArray[ offset_skin + 5 ] = sw2.y;
				skinWeightArray[ offset_skin + 6 ] = sw2.z;
				skinWeightArray[ offset_skin + 7 ] = sw2.w;

				skinWeightArray[ offset_skin + 8 ]  = sw3.x;
				skinWeightArray[ offset_skin + 9 ]  = sw3.y;
				skinWeightArray[ offset_skin + 10 ] = sw3.z;
				skinWeightArray[ offset_skin + 11 ] = sw3.w;

				skinWeightArray[ offset_skin + 12 ] = sw4.x;
				skinWeightArray[ offset_skin + 13 ] = sw4.y;
				skinWeightArray[ offset_skin + 14 ] = sw4.z;
				skinWeightArray[ offset_skin + 15 ] = sw4.w;

				// indices

				si1 = obj_skinIndices[ face.a ];
				si2 = obj_skinIndices[ face.b ];
				si3 = obj_skinIndices[ face.c ];
				si4 = obj_skinIndices[ face.d ];

				skinIndexArray[ offset_skin ]     = si1.x;
				skinIndexArray[ offset_skin + 1 ] = si1.y;
				skinIndexArray[ offset_skin + 2 ] = si1.z;
				skinIndexArray[ offset_skin + 3 ] = si1.w;

				skinIndexArray[ offset_skin + 4 ] = si2.x;
				skinIndexArray[ offset_skin + 5 ] = si2.y;
				skinIndexArray[ offset_skin + 6 ] = si2.z;
				skinIndexArray[ offset_skin + 7 ] = si2.w;

				skinIndexArray[ offset_skin + 8 ]  = si3.x;
				skinIndexArray[ offset_skin + 9 ]  = si3.y;
				skinIndexArray[ offset_skin + 10 ] = si3.z;
				skinIndexArray[ offset_skin + 11 ] = si3.w;

				skinIndexArray[ offset_skin + 12 ] = si4.x;
				skinIndexArray[ offset_skin + 13 ] = si4.y;
				skinIndexArray[ offset_skin + 14 ] = si4.z;
				skinIndexArray[ offset_skin + 15 ] = si4.w;

				offset_skin += 16;

			}

			if ( offset_skin > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, skinIndexArray, hint );

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, skinWeightArray, hint );

			}

		}

		if ( dirtyColors && vertexColorType ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ]	];

				vertexColors = face.vertexColors;
				faceColor = face.color;

				if ( vertexColors.length === 3 && vertexColorType === THREE.VertexColors ) {

					c1 = vertexColors[ 0 ];
					c2 = vertexColors[ 1 ];
					c3 = vertexColors[ 2 ];

				} else {

					c1 = faceColor;
					c2 = faceColor;
					c3 = faceColor;

				}

				colorArray[ offset_color ]     = c1.r;
				colorArray[ offset_color + 1 ] = c1.g;
				colorArray[ offset_color + 2 ] = c1.b;

				colorArray[ offset_color + 3 ] = c2.r;
				colorArray[ offset_color + 4 ] = c2.g;
				colorArray[ offset_color + 5 ] = c2.b;

				colorArray[ offset_color + 6 ] = c3.r;
				colorArray[ offset_color + 7 ] = c3.g;
				colorArray[ offset_color + 8 ] = c3.b;

				offset_color += 9;

			}

			for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces4[ f ] ];

				vertexColors = face.vertexColors;
				faceColor = face.color;

				if ( vertexColors.length === 4 && vertexColorType === THREE.VertexColors ) {

					c1 = vertexColors[ 0 ];
					c2 = vertexColors[ 1 ];
					c3 = vertexColors[ 2 ];
					c4 = vertexColors[ 3 ];

				} else {

					c1 = faceColor;
					c2 = faceColor;
					c3 = faceColor;
					c4 = faceColor;

				}

				colorArray[ offset_color ]     = c1.r;
				colorArray[ offset_color + 1 ] = c1.g;
				colorArray[ offset_color + 2 ] = c1.b;

				colorArray[ offset_color + 3 ] = c2.r;
				colorArray[ offset_color + 4 ] = c2.g;
				colorArray[ offset_color + 5 ] = c2.b;

				colorArray[ offset_color + 6 ] = c3.r;
				colorArray[ offset_color + 7 ] = c3.g;
				colorArray[ offset_color + 8 ] = c3.b;

				colorArray[ offset_color + 9 ]  = c4.r;
				colorArray[ offset_color + 10 ] = c4.g;
				colorArray[ offset_color + 11 ] = c4.b;

				offset_color += 12;

			}

			if ( offset_color > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

			}

		}

		if ( dirtyTangents && geometry.hasTangents ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ]	];

				vertexTangents = face.vertexTangents;

				t1 = vertexTangents[ 0 ];
				t2 = vertexTangents[ 1 ];
				t3 = vertexTangents[ 2 ];

				tangentArray[ offset_tangent ]     = t1.x;
				tangentArray[ offset_tangent + 1 ] = t1.y;
				tangentArray[ offset_tangent + 2 ] = t1.z;
				tangentArray[ offset_tangent + 3 ] = t1.w;

				tangentArray[ offset_tangent + 4 ] = t2.x;
				tangentArray[ offset_tangent + 5 ] = t2.y;
				tangentArray[ offset_tangent + 6 ] = t2.z;
				tangentArray[ offset_tangent + 7 ] = t2.w;

				tangentArray[ offset_tangent + 8 ]  = t3.x;
				tangentArray[ offset_tangent + 9 ]  = t3.y;
				tangentArray[ offset_tangent + 10 ] = t3.z;
				tangentArray[ offset_tangent + 11 ] = t3.w;

				offset_tangent += 12;

			}

			for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces4[ f ] ];

				vertexTangents = face.vertexTangents;

				t1 = vertexTangents[ 0 ];
				t2 = vertexTangents[ 1 ];
				t3 = vertexTangents[ 2 ];
				t4 = vertexTangents[ 3 ];

				tangentArray[ offset_tangent ]     = t1.x;
				tangentArray[ offset_tangent + 1 ] = t1.y;
				tangentArray[ offset_tangent + 2 ] = t1.z;
				tangentArray[ offset_tangent + 3 ] = t1.w;

				tangentArray[ offset_tangent + 4 ] = t2.x;
				tangentArray[ offset_tangent + 5 ] = t2.y;
				tangentArray[ offset_tangent + 6 ] = t2.z;
				tangentArray[ offset_tangent + 7 ] = t2.w;

				tangentArray[ offset_tangent + 8 ]  = t3.x;
				tangentArray[ offset_tangent + 9 ]  = t3.y;
				tangentArray[ offset_tangent + 10 ] = t3.z;
				tangentArray[ offset_tangent + 11 ] = t3.w;

				tangentArray[ offset_tangent + 12 ] = t4.x;
				tangentArray[ offset_tangent + 13 ] = t4.y;
				tangentArray[ offset_tangent + 14 ] = t4.z;
				tangentArray[ offset_tangent + 15 ] = t4.w;

				offset_tangent += 16;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, tangentArray, hint );

		}

		if ( dirtyNormals && normalType ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ]	];

				vertexNormals = face.vertexNormals;
				faceNormal = face.normal;

				if ( vertexNormals.length === 3 && needsSmoothNormals ) {

					for ( i = 0; i < 3; i ++ ) {

						vn = vertexNormals[ i ];

						normalArray[ offset_normal ]     = vn.x;
						normalArray[ offset_normal + 1 ] = vn.y;
						normalArray[ offset_normal + 2 ] = vn.z;

						offset_normal += 3;

					}

				} else {

					for ( i = 0; i < 3; i ++ ) {

						normalArray[ offset_normal ]     = faceNormal.x;
						normalArray[ offset_normal + 1 ] = faceNormal.y;
						normalArray[ offset_normal + 2 ] = faceNormal.z;

						offset_normal += 3;

					}

				}

			}

			for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces4[ f ] ];

				vertexNormals = face.vertexNormals;
				faceNormal = face.normal;

				if ( vertexNormals.length === 4 && needsSmoothNormals ) {

					for ( i = 0; i < 4; i ++ ) {

						vn = vertexNormals[ i ];

						normalArray[ offset_normal ]     = vn.x;
						normalArray[ offset_normal + 1 ] = vn.y;
						normalArray[ offset_normal + 2 ] = vn.z;

						offset_normal += 3;

					}

				} else {

					for ( i = 0; i < 4; i ++ ) {

						normalArray[ offset_normal ]     = faceNormal.x;
						normalArray[ offset_normal + 1 ] = faceNormal.y;
						normalArray[ offset_normal + 2 ] = faceNormal.z;

						offset_normal += 3;

					}

				}

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );

		}

		if ( dirtyUvs && obj_uvs && uvType ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				fi = chunk_faces3[ f ];

				uv = obj_uvs[ fi ];

				if ( uv === undefined ) continue;

				for ( i = 0; i < 3; i ++ ) {

					uvi = uv[ i ];

					uvArray[ offset_uv ]     = uvi.x;
					uvArray[ offset_uv + 1 ] = uvi.y;

					offset_uv += 2;

				}

			}

			for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

				fi = chunk_faces4[ f ];

				uv = obj_uvs[ fi ];

				if ( uv === undefined ) continue;

				for ( i = 0; i < 4; i ++ ) {

					uvi = uv[ i ];

					uvArray[ offset_uv ]     = uvi.x;
					uvArray[ offset_uv + 1 ] = uvi.y;

					offset_uv += 2;

				}

			}

			if ( offset_uv > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, uvArray, hint );

			}

		}

		if ( dirtyUvs && obj_uvs2 && uvType ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				fi = chunk_faces3[ f ];

				uv2 = obj_uvs2[ fi ];

				if ( uv2 === undefined ) continue;

				for ( i = 0; i < 3; i ++ ) {

					uv2i = uv2[ i ];

					uv2Array[ offset_uv2 ]     = uv2i.x;
					uv2Array[ offset_uv2 + 1 ] = uv2i.y;

					offset_uv2 += 2;

				}

			}

			for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

				fi = chunk_faces4[ f ];

				uv2 = obj_uvs2[ fi ];

				if ( uv2 === undefined ) continue;

				for ( i = 0; i < 4; i ++ ) {

					uv2i = uv2[ i ];

					uv2Array[ offset_uv2 ]     = uv2i.x;
					uv2Array[ offset_uv2 + 1 ] = uv2i.y;

					offset_uv2 += 2;

				}

			}

			if ( offset_uv2 > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, uv2Array, hint );

			}

		}

		if ( dirtyElements ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				faceArray[ offset_face ] 	 = vertexIndex;
				faceArray[ offset_face + 1 ] = vertexIndex + 1;
				faceArray[ offset_face + 2 ] = vertexIndex + 2;

				offset_face += 3;

				lineArray[ offset_line ]     = vertexIndex;
				lineArray[ offset_line + 1 ] = vertexIndex + 1;

				lineArray[ offset_line + 2 ] = vertexIndex;
				lineArray[ offset_line + 3 ] = vertexIndex + 2;

				lineArray[ offset_line + 4 ] = vertexIndex + 1;
				lineArray[ offset_line + 5 ] = vertexIndex + 2;

				offset_line += 6;

				vertexIndex += 3;

			}

			for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

				faceArray[ offset_face ]     = vertexIndex;
				faceArray[ offset_face + 1 ] = vertexIndex + 1;
				faceArray[ offset_face + 2 ] = vertexIndex + 3;

				faceArray[ offset_face + 3 ] = vertexIndex + 1;
				faceArray[ offset_face + 4 ] = vertexIndex + 2;
				faceArray[ offset_face + 5 ] = vertexIndex + 3;

				offset_face += 6;

				lineArray[ offset_line ]     = vertexIndex;
				lineArray[ offset_line + 1 ] = vertexIndex + 1;

				lineArray[ offset_line + 2 ] = vertexIndex;
				lineArray[ offset_line + 3 ] = vertexIndex + 3;

				lineArray[ offset_line + 4 ] = vertexIndex + 1;
				lineArray[ offset_line + 5 ] = vertexIndex + 2;

				lineArray[ offset_line + 6 ] = vertexIndex + 2;
				lineArray[ offset_line + 7 ] = vertexIndex + 3;

				offset_line += 8;

				vertexIndex += 4;

			}

			_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );
			_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faceArray, hint );

			_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );
			_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, lineArray, hint );

		}

		if ( customAttributes ) {

			for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

				customAttribute = customAttributes[ i ];

				if ( ! customAttribute.__original.needsUpdate ) continue;

				offset_custom = 0;
				offset_customSrc = 0;

				if ( customAttribute.size === 1 ) {

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ]	];

							customAttribute.array[ offset_custom ] 	   = customAttribute.value[ face.a ];
							customAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];
							customAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];

							offset_custom += 3;

						}

						for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces4[ f ] ];

							customAttribute.array[ offset_custom ] 	   = customAttribute.value[ face.a ];
							customAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];
							customAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];
							customAttribute.array[ offset_custom + 3 ] = customAttribute.value[ face.d ];

							offset_custom += 4;

						}

					} else if ( customAttribute.boundTo === "faces" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							customAttribute.array[ offset_custom ] 	   = value;
							customAttribute.array[ offset_custom + 1 ] = value;
							customAttribute.array[ offset_custom + 2 ] = value;

							offset_custom += 3;

						}

						for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces4[ f ] ];

							customAttribute.array[ offset_custom ] 	   = value;
							customAttribute.array[ offset_custom + 1 ] = value;
							customAttribute.array[ offset_custom + 2 ] = value;
							customAttribute.array[ offset_custom + 3 ] = value;

							offset_custom += 4;

						}

					}

				} else if ( customAttribute.size === 2 ) {

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ]	];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];

							customAttribute.array[ offset_custom ] 	   = v1.x;
							customAttribute.array[ offset_custom + 1 ] = v1.y;

							customAttribute.array[ offset_custom + 2 ] = v2.x;
							customAttribute.array[ offset_custom + 3 ] = v2.y;

							customAttribute.array[ offset_custom + 4 ] = v3.x;
							customAttribute.array[ offset_custom + 5 ] = v3.y;

							offset_custom += 6;

						}

						for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces4[ f ] ];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];
							v4 = customAttribute.value[ face.d ];

							customAttribute.array[ offset_custom ] 	   = v1.x;
							customAttribute.array[ offset_custom + 1 ] = v1.y;

							customAttribute.array[ offset_custom + 2 ] = v2.x;
							customAttribute.array[ offset_custom + 3 ] = v2.y;

							customAttribute.array[ offset_custom + 4 ] = v3.x;
							customAttribute.array[ offset_custom + 5 ] = v3.y;

							customAttribute.array[ offset_custom + 6 ] = v4.x;
							customAttribute.array[ offset_custom + 7 ] = v4.y;

							offset_custom += 8;

						}

					} else if ( customAttribute.boundTo === "faces" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;

							customAttribute.array[ offset_custom ] 	   = v1.x;
							customAttribute.array[ offset_custom + 1 ] = v1.y;

							customAttribute.array[ offset_custom + 2 ] = v2.x;
							customAttribute.array[ offset_custom + 3 ] = v2.y;

							customAttribute.array[ offset_custom + 4 ] = v3.x;
							customAttribute.array[ offset_custom + 5 ] = v3.y;

							offset_custom += 6;

						}

						for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces4[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;
							v4 = value;

							customAttribute.array[ offset_custom ] 	   = v1.x;
							customAttribute.array[ offset_custom + 1 ] = v1.y;

							customAttribute.array[ offset_custom + 2 ] = v2.x;
							customAttribute.array[ offset_custom + 3 ] = v2.y;

							customAttribute.array[ offset_custom + 4 ] = v3.x;
							customAttribute.array[ offset_custom + 5 ] = v3.y;

							customAttribute.array[ offset_custom + 6 ] = v4.x;
							customAttribute.array[ offset_custom + 7 ] = v4.y;

							offset_custom += 8;

						}

					}

				} else if ( customAttribute.size === 3 ) {

					var pp;

					if ( customAttribute.type === "c" ) {

						pp = [ "r", "g", "b" ];

					} else {

						pp = [ "x", "y", "z" ];

					}

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ]	];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];

							customAttribute.array[ offset_custom ] 	   = v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

							offset_custom += 9;

						}

						for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces4[ f ] ];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];
							v4 = customAttribute.value[ face.d ];

							customAttribute.array[ offset_custom  ] 	= v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];

							offset_custom += 12;

						}

					} else if ( customAttribute.boundTo === "faces" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;

							customAttribute.array[ offset_custom ] 	   = v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

							offset_custom += 9;

						}

						for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces4[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;
							v4 = value;

							customAttribute.array[ offset_custom  ] 	= v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];

							offset_custom += 12;

						}

					} else if ( customAttribute.boundTo === "faceVertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value[ 0 ];
							v2 = value[ 1 ];
							v3 = value[ 2 ];

							customAttribute.array[ offset_custom ] 	   = v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

							offset_custom += 9;

						}

						for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces4[ f ] ];

							v1 = value[ 0 ];
							v2 = value[ 1 ];
							v3 = value[ 2 ];
							v4 = value[ 3 ];

							customAttribute.array[ offset_custom  ] 	= v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1  ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2  ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3  ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4  ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5  ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6  ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7  ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8  ] = v3[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 9  ] = v4[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 10 ] = v4[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 11 ] = v4[ pp[ 2 ] ];

							offset_custom += 12;

						}

					}

				} else if ( customAttribute.size === 4 ) {

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === "vertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ]	];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];

							customAttribute.array[ offset_custom  ] 	= v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							offset_custom += 12;

						}

						for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces4[ f ] ];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];
							v4 = customAttribute.value[ face.d ];

							customAttribute.array[ offset_custom  ] 	= v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							customAttribute.array[ offset_custom + 12 ] = v4.x;
							customAttribute.array[ offset_custom + 13 ] = v4.y;
							customAttribute.array[ offset_custom + 14 ] = v4.z;
							customAttribute.array[ offset_custom + 15 ] = v4.w;

							offset_custom += 16;

						}

					} else if ( customAttribute.boundTo === "faces" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;

							customAttribute.array[ offset_custom  ] 	= v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							offset_custom += 12;

						}

						for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces4[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;
							v4 = value;

							customAttribute.array[ offset_custom  ] 	= v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							customAttribute.array[ offset_custom + 12 ] = v4.x;
							customAttribute.array[ offset_custom + 13 ] = v4.y;
							customAttribute.array[ offset_custom + 14 ] = v4.z;
							customAttribute.array[ offset_custom + 15 ] = v4.w;

							offset_custom += 16;

						}

					} else if ( customAttribute.boundTo === "faceVertices" ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value[ 0 ];
							v2 = value[ 1 ];
							v3 = value[ 2 ];

							customAttribute.array[ offset_custom  ] 	= v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							offset_custom += 12;

						}

						for ( f = 0, fl = chunk_faces4.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces4[ f ] ];

							v1 = value[ 0 ];
							v2 = value[ 1 ];
							v3 = value[ 2 ];
							v4 = value[ 3 ];

							customAttribute.array[ offset_custom  ] 	= v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							customAttribute.array[ offset_custom + 12 ] = v4.x;
							customAttribute.array[ offset_custom + 13 ] = v4.y;
							customAttribute.array[ offset_custom + 14 ] = v4.z;
							customAttribute.array[ offset_custom + 15 ] = v4.w;

							offset_custom += 16;

						}

					}

				}

				_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

			}

		}

		if ( dispose ) {

			delete geometryGroup.__inittedArrays;
			delete geometryGroup.__colorArray;
			delete geometryGroup.__normalArray;
			delete geometryGroup.__tangentArray;
			delete geometryGroup.__uvArray;
			delete geometryGroup.__uv2Array;
			delete geometryGroup.__faceArray;
			delete geometryGroup.__vertexArray;
			delete geometryGroup.__lineArray;
			delete geometryGroup.__skinIndexArray;
			delete geometryGroup.__skinWeightArray;

		}

	};

	function setDirectBuffers ( geometry, hint, dispose ) {

		var attributes = geometry.attributes;

		var index = attributes[ "index" ];
		var position = attributes[ "position" ];
		var normal = attributes[ "normal" ];
		var uv = attributes[ "uv" ];
		var color = attributes[ "color" ];
		var tangent = attributes[ "tangent" ];

		if ( geometry.elementsNeedUpdate && index !== undefined ) {

			_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );
			_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, index.array, hint );

		}

		if ( geometry.verticesNeedUpdate && position !== undefined ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, position.array, hint );

		}

		if ( geometry.normalsNeedUpdate && normal !== undefined ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, normal.array, hint );

		}

		if ( geometry.uvsNeedUpdate && uv !== undefined ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, uv.array, hint );

		}

		if ( geometry.colorsNeedUpdate && color !== undefined ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, color.array, hint );

		}

		if ( geometry.tangentsNeedUpdate && tangent !== undefined ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, tangent.array, hint );

		}

		if ( dispose ) {

			for ( var i in geometry.attributes ) {

				delete geometry.attributes[ i ].array;

			}

		}

	};

	// Buffer rendering

	this.renderBufferImmediate = function ( object, program, material ) {

		if ( object.hasPositions && ! object.__webglVertexBuffer ) object.__webglVertexBuffer = _gl.createBuffer();
		if ( object.hasNormals && ! object.__webglNormalBuffer ) object.__webglNormalBuffer = _gl.createBuffer();
		if ( object.hasUvs && ! object.__webglUvBuffer ) object.__webglUvBuffer = _gl.createBuffer();
		if ( object.hasColors && ! object.__webglColorBuffer ) object.__webglColorBuffer = _gl.createBuffer();

		if ( object.hasPositions ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );
			_gl.enableVertexAttribArray( program.attributes.position );
			_gl.vertexAttribPointer( program.attributes.position, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasNormals ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglNormalBuffer );

			if ( material.shading === THREE.FlatShading ) {

				var nx, ny, nz,
					nax, nbx, ncx, nay, nby, ncy, naz, nbz, ncz,
					normalArray,
					i, il = object.count * 3;

				for( i = 0; i < il; i += 9 ) {

					normalArray = object.normalArray;

					nax  = normalArray[ i ];
					nay  = normalArray[ i + 1 ];
					naz  = normalArray[ i + 2 ];

					nbx  = normalArray[ i + 3 ];
					nby  = normalArray[ i + 4 ];
					nbz  = normalArray[ i + 5 ];

					ncx  = normalArray[ i + 6 ];
					ncy  = normalArray[ i + 7 ];
					ncz  = normalArray[ i + 8 ];

					nx = ( nax + nbx + ncx ) / 3;
					ny = ( nay + nby + ncy ) / 3;
					nz = ( naz + nbz + ncz ) / 3;

					normalArray[ i ] 	 = nx;
					normalArray[ i + 1 ] = ny;
					normalArray[ i + 2 ] = nz;

					normalArray[ i + 3 ] = nx;
					normalArray[ i + 4 ] = ny;
					normalArray[ i + 5 ] = nz;

					normalArray[ i + 6 ] = nx;
					normalArray[ i + 7 ] = ny;
					normalArray[ i + 8 ] = nz;

				}

			}

			_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );
			_gl.enableVertexAttribArray( program.attributes.normal );
			_gl.vertexAttribPointer( program.attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasUvs && material.map ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglUvBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );
			_gl.enableVertexAttribArray( program.attributes.uv );
			_gl.vertexAttribPointer( program.attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasColors && material.vertexColors !== THREE.NoColors ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglColorBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );
			_gl.enableVertexAttribArray( program.attributes.color );
			_gl.vertexAttribPointer( program.attributes.color, 3, _gl.FLOAT, false, 0, 0 );

		}

		_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

		object.count = 0;

	};

	this.renderBufferDirect = function ( camera, lights, fog, material, geometry, object ) {

		if ( material.visible === false ) return;

		var program, attributes, linewidth, primitives, a, attribute;

		program = setProgram( camera, lights, fog, material, object );

		attributes = program.attributes;

		var updateBuffers = false,
			wireframeBit = material.wireframe ? 1 : 0,
			geometryHash = ( geometry.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;

		if ( geometryHash !== _currentGeometryGroupHash ) {

			_currentGeometryGroupHash = geometryHash;
			updateBuffers = true;

		}

		if ( updateBuffers ) {

			disableAttributes();

		}

		// render mesh

		if ( object instanceof THREE.Mesh ) {

			var index = geometry.attributes[ "index" ];

			// indexed triangles

			if ( index ) {

				var offsets = geometry.offsets;

				// if there is more than 1 chunk
				// must set attribute pointers to use new offsets for each chunk
				// even if geometry and materials didn't change

				if ( offsets.length > 1 ) updateBuffers = true;

				for ( var i = 0, il = offsets.length; i < il; i ++ ) {

					var startIndex = offsets[ i ].index;

					if ( updateBuffers ) {

						// vertices

						var position = geometry.attributes[ "position" ];
						var positionSize = position.itemSize;

						_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );
						enableAttribute( attributes.position );
						_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, startIndex * positionSize * 4 ); // 4 bytes per Float32

						// normals

						var normal = geometry.attributes[ "normal" ];

						if ( attributes.normal >= 0 && normal ) {

							var normalSize = normal.itemSize;

							_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );
							enableAttribute( attributes.normal );
							_gl.vertexAttribPointer( attributes.normal, normalSize, _gl.FLOAT, false, 0, startIndex * normalSize * 4 );

						}

						// uvs

						var uv = geometry.attributes[ "uv" ];

						if ( attributes.uv >= 0 && uv ) {

							var uvSize = uv.itemSize;

							_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );
							enableAttribute( attributes.uv );
							_gl.vertexAttribPointer( attributes.uv, uvSize, _gl.FLOAT, false, 0, startIndex * uvSize * 4 );

						}

						// colors

						var color = geometry.attributes[ "color" ];

						if ( attributes.color >= 0 && color ) {

							var colorSize = color.itemSize;

							_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );
							enableAttribute( attributes.color );
							_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, startIndex * colorSize * 4 );

						}

						// tangents

						var tangent = geometry.attributes[ "tangent" ];

						if ( attributes.tangent >= 0 && tangent ) {

							var tangentSize = tangent.itemSize;

							_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );
							enableAttribute( attributes.tangent );
							_gl.vertexAttribPointer( attributes.tangent, tangentSize, _gl.FLOAT, false, 0, startIndex * tangentSize * 4 );

						}

						// indices

						_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );

					}

					// render indexed triangles

					_gl.drawElements( _gl.TRIANGLES, offsets[ i ].count, _gl.UNSIGNED_SHORT, offsets[ i ].start * 2 ); // 2 bytes per Uint16

					_this.info.render.calls ++;
					_this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared
					_this.info.render.faces += offsets[ i ].count / 3;

				}

			// non-indexed triangles

			} else {

				if ( updateBuffers ) {

					// vertices

					var position = geometry.attributes[ "position" ];
					var positionSize = position.itemSize;

					_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );
					enableAttribute( attributes.position );
					_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, 0 );

					// normals

					var normal = geometry.attributes[ "normal" ];

					if ( attributes.normal >= 0 && normal ) {

						var normalSize = normal.itemSize;

						_gl.bindBuffer( _gl.ARRAY_BUFFER, normal.buffer );
						enableAttribute( attributes.normal );
						_gl.vertexAttribPointer( attributes.normal, normalSize, _gl.FLOAT, false, 0, 0 );

					}

					// uvs

					var uv = geometry.attributes[ "uv" ];

					if ( attributes.uv >= 0 && uv ) {

						var uvSize = uv.itemSize;

						_gl.bindBuffer( _gl.ARRAY_BUFFER, uv.buffer );
						enableAttribute( attributes.uv );
						_gl.vertexAttribPointer( attributes.uv, uvSize, _gl.FLOAT, false, 0, 0 );

					}

					// colors

					var color = geometry.attributes[ "color" ];

					if ( attributes.color >= 0 && color ) {

						var colorSize = color.itemSize;

						_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );
						enableAttribute( attributes.color );
						_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, 0 );

					}

					// tangents

					var tangent = geometry.attributes[ "tangent" ];

					if ( attributes.tangent >= 0 && tangent ) {

						var tangentSize = tangent.itemSize;

						_gl.bindBuffer( _gl.ARRAY_BUFFER, tangent.buffer );
						enableAttribute( attributes.tangent );
						_gl.vertexAttribPointer( attributes.tangent, tangentSize, _gl.FLOAT, false, 0, 0 );

					}

				}

				// render non-indexed triangles

				_gl.drawArrays( _gl.TRIANGLES, 0, position.numItems / 3 );

				_this.info.render.calls ++;
				_this.info.render.vertices += position.numItems / 3;
				_this.info.render.faces += position.numItems / 3 / 3;

			}

		// render particles

		} else if ( object instanceof THREE.ParticleSystem ) {

			if ( updateBuffers ) {

				// vertices

				var position = geometry.attributes[ "position" ];
				var positionSize = position.itemSize;

				_gl.bindBuffer( _gl.ARRAY_BUFFER, position.buffer );
				enableAttribute( attributes.position );
				_gl.vertexAttribPointer( attributes.position, positionSize, _gl.FLOAT, false, 0, 0 );

				// colors

				var color = geometry.attributes[ "color" ];

				if ( attributes.color >= 0 && color ) {

					var colorSize = color.itemSize;

					_gl.bindBuffer( _gl.ARRAY_BUFFER, color.buffer );
					enableAttribute( attributes.color );
					_gl.vertexAttribPointer( attributes.color, colorSize, _gl.FLOAT, false, 0, 0 );

				}

				// render particles

				_gl.drawArrays( _gl.POINTS, 0, position.numItems / 3 );

				_this.info.render.calls ++;
				_this.info.render.points += position.numItems / 3;

			}

		}

	};

	this.renderBuffer = function ( camera, lights, fog, material, geometryGroup, object ) {

		if ( material.visible === false ) return;

		var program, attributes, linewidth, primitives, a, attribute, i, il;

		program = setProgram( camera, lights, fog, material, object );

		attributes = program.attributes;

		var updateBuffers = false,
			wireframeBit = material.wireframe ? 1 : 0,
			geometryGroupHash = ( geometryGroup.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;

		if ( geometryGroupHash !== _currentGeometryGroupHash ) {

			_currentGeometryGroupHash = geometryGroupHash;
			updateBuffers = true;

		}

		if ( updateBuffers ) {

			disableAttributes();

		}

		// vertices

		if ( !material.morphTargets && attributes.position >= 0 ) {

			if ( updateBuffers ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
				enableAttribute( attributes.position );
				_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

			}

		} else {

			if ( object.morphTargetBase ) {

				setupMorphTargets( material, geometryGroup, object );

			}

		}


		if ( updateBuffers ) {

			// custom attributes

			// Use the per-geometryGroup custom attribute arrays which are setup in initMeshBuffers

			if ( geometryGroup.__webglCustomAttributesList ) {

				for ( i = 0, il = geometryGroup.__webglCustomAttributesList.length; i < il; i ++ ) {

					attribute = geometryGroup.__webglCustomAttributesList[ i ];

					if ( attributes[ attribute.buffer.belongsToAttribute ] >= 0 ) {

						_gl.bindBuffer( _gl.ARRAY_BUFFER, attribute.buffer );
						enableAttribute( attributes[ attribute.buffer.belongsToAttribute ] );
						_gl.vertexAttribPointer( attributes[ attribute.buffer.belongsToAttribute ], attribute.size, _gl.FLOAT, false, 0, 0 );

					}

				}

			}


			// colors

			if ( attributes.color >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );
				enableAttribute( attributes.color );
				_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

			}

			// normals

			if ( attributes.normal >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );
				enableAttribute( attributes.normal );
				_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

			}

			// tangents

			if ( attributes.tangent >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );
				enableAttribute( attributes.tangent );
				_gl.vertexAttribPointer( attributes.tangent, 4, _gl.FLOAT, false, 0, 0 );

			}

			// uvs

			if ( attributes.uv >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );
				enableAttribute( attributes.uv );
				_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

			}

			if ( attributes.uv2 >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );
				enableAttribute( attributes.uv2 );
				_gl.vertexAttribPointer( attributes.uv2, 2, _gl.FLOAT, false, 0, 0 );

			}

			if ( material.skinning &&
				 attributes.skinIndex >= 0 && attributes.skinWeight >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );
				enableAttribute( attributes.skinIndex );
				_gl.vertexAttribPointer( attributes.skinIndex, 4, _gl.FLOAT, false, 0, 0 );

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );
				enableAttribute( attributes.skinWeight );
				_gl.vertexAttribPointer( attributes.skinWeight, 4, _gl.FLOAT, false, 0, 0 );

			}

			// line distances

			if ( attributes.lineDistance >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglLineDistanceBuffer );
				enableAttribute( attributes.lineDistance );
				_gl.vertexAttribPointer( attributes.lineDistance, 1, _gl.FLOAT, false, 0, 0 );

			}

		}

		// render mesh

		if ( object instanceof THREE.Mesh ) {

			// wireframe

			if ( material.wireframe ) {

				setLineWidth( material.wireframeLinewidth );

				if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );
				_gl.drawElements( _gl.LINES, geometryGroup.__webglLineCount, _gl.UNSIGNED_SHORT, 0 );

			// triangles

			} else {

				if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );
				_gl.drawElements( _gl.TRIANGLES, geometryGroup.__webglFaceCount, _gl.UNSIGNED_SHORT, 0 );

			}

			_this.info.render.calls ++;
			_this.info.render.vertices += geometryGroup.__webglFaceCount;
			_this.info.render.faces += geometryGroup.__webglFaceCount / 3;

		// render lines

		} else if ( object instanceof THREE.Line ) {

			primitives = ( object.type === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;

			setLineWidth( material.linewidth );

			_gl.drawArrays( primitives, 0, geometryGroup.__webglLineCount );

			_this.info.render.calls ++;

		// render particles

		} else if ( object instanceof THREE.ParticleSystem ) {

			_gl.drawArrays( _gl.POINTS, 0, geometryGroup.__webglParticleCount );

			_this.info.render.calls ++;
			_this.info.render.points += geometryGroup.__webglParticleCount;

		// render ribbon

		} else if ( object instanceof THREE.Ribbon ) {

			_gl.drawArrays( _gl.TRIANGLE_STRIP, 0, geometryGroup.__webglVertexCount );

			_this.info.render.calls ++;

		}

	};

	function enableAttribute( attribute ) {

		if ( ! _enabledAttributes[ attribute ] ) {

			_gl.enableVertexAttribArray( attribute );
			_enabledAttributes[ attribute ] = true;

		}

	};

	function disableAttributes() {

		for ( var attribute in _enabledAttributes ) {

			if ( _enabledAttributes[ attribute ] ) {

				_gl.disableVertexAttribArray( attribute );
				_enabledAttributes[ attribute ] = false;

			}

		}

	};

	function setupMorphTargets ( material, geometryGroup, object ) {

		// set base

		var attributes = material.program.attributes;

		if ( object.morphTargetBase !== -1 && attributes.position >= 0 ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ object.morphTargetBase ] );
			enableAttribute( attributes.position );
			_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

		} else if ( attributes.position >= 0 ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
			enableAttribute( attributes.position );
			_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.morphTargetForcedOrder.length ) {

			// set forced order

			var m = 0;
			var order = object.morphTargetForcedOrder;
			var influences = object.morphTargetInfluences;

			while ( m < material.numSupportedMorphTargets && m < order.length ) {

				if ( attributes[ "morphTarget" + m ] >= 0 ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ order[ m ] ] );
					enableAttribute( attributes[ "morphTarget" + m ] );
					_gl.vertexAttribPointer( attributes[ "morphTarget" + m ], 3, _gl.FLOAT, false, 0, 0 );

				}

				if ( attributes[ "morphNormal" + m ] >= 0 && material.morphNormals ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ order[ m ] ] );
					enableAttribute( attributes[ "morphNormal" + m ] );
					_gl.vertexAttribPointer( attributes[ "morphNormal" + m ], 3, _gl.FLOAT, false, 0, 0 );

				}

				object.__webglMorphTargetInfluences[ m ] = influences[ order[ m ] ];

				m ++;
			}

		} else {

			// find the most influencing

			var influence, activeInfluenceIndices = [];
			var influences = object.morphTargetInfluences;
			var i, il = influences.length;

			for ( i = 0; i < il; i ++ ) {

				influence = influences[ i ];

				if ( influence > 0 ) {

					activeInfluenceIndices.push( [ influence, i ] );

				}

			}

			if ( activeInfluenceIndices.length > material.numSupportedMorphTargets ) {

				activeInfluenceIndices.sort( numericalSort );
				activeInfluenceIndices.length = material.numSupportedMorphTargets;

			} else if ( activeInfluenceIndices.length > material.numSupportedMorphNormals ) {

				activeInfluenceIndices.sort( numericalSort );

			} else if ( activeInfluenceIndices.length === 0 ) {

				activeInfluenceIndices.push( [ 0, 0 ] );

			};

			var influenceIndex, m = 0;

			while ( m < material.numSupportedMorphTargets ) {

				if ( activeInfluenceIndices[ m ] ) {

					influenceIndex = activeInfluenceIndices[ m ][ 1 ];

					if ( attributes[ "morphTarget" + m ] >= 0 ) {

						_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ influenceIndex ] );
						enableAttribute( attributes[ "morphTarget" + m ] );
						_gl.vertexAttribPointer( attributes[ "morphTarget" + m ], 3, _gl.FLOAT, false, 0, 0 );

					}

					if ( attributes[ "morphNormal" + m ] >= 0 && material.morphNormals ) {

						_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ influenceIndex ] );
						enableAttribute( attributes[ "morphNormal" + m ] );
						_gl.vertexAttribPointer( attributes[ "morphNormal" + m ], 3, _gl.FLOAT, false, 0, 0 );


					}

					object.__webglMorphTargetInfluences[ m ] = influences[ influenceIndex ];

				} else {

					/*
					_gl.vertexAttribPointer( attributes[ "morphTarget" + m ], 3, _gl.FLOAT, false, 0, 0 );

					if ( material.morphNormals ) {

						_gl.vertexAttribPointer( attributes[ "morphNormal" + m ], 3, _gl.FLOAT, false, 0, 0 );

					}
					*/

					object.__webglMorphTargetInfluences[ m ] = 0;

				}

				m ++;

			}

		}

		// load updated influences uniform

		if ( material.program.uniforms.morphTargetInfluences !== null ) {

			_gl.uniform1fv( material.program.uniforms.morphTargetInfluences, object.__webglMorphTargetInfluences );

		}

	};

	// Sorting

	function painterSortStable ( a, b ) {

		if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return b.id - a.id;

		}

	};

	function numericalSort ( a, b ) {

		return b[ 0 ] - a[ 0 ];

	};


	// Rendering

	this.render = function ( scene, camera, renderTarget, forceClear ) {

		if ( camera instanceof THREE.Camera === false ) {

			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
			return;

		}

		var i, il,

		webglObject, object,
		renderList,

		lights = scene.__lights,
		fog = scene.fog;

		// reset caching for this frame

		_currentMaterialId = -1;
		_lightsNeedUpdate = true;

		// update scene graph

		if ( this.autoUpdateScene ) scene.updateMatrixWorld();

		// update camera matrices and frustum

		if ( camera.parent === undefined ) camera.updateMatrixWorld();

		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		_projScreenMatrix.multiply( camera.projectionMatrix, camera.matrixWorldInverse );
		_frustum.setFromMatrix( _projScreenMatrix );

		// update WebGL objects

		if ( this.autoUpdateObjects ) this.initWebGLObjects( scene );

		// custom render plugins (pre pass)

		renderPlugins( this.renderPluginsPre, scene, camera );

		//

		_this.info.render.calls = 0;
		_this.info.render.vertices = 0;
		_this.info.render.faces = 0;
		_this.info.render.points = 0;

		this.setRenderTarget( renderTarget );

		if ( this.autoClear || forceClear ) {

			this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

		}

		// set matrices for regular objects (frustum culled)

		renderList = scene.__webglObjects;

		for ( i = 0, il = renderList.length; i < il; i ++ ) {

			webglObject = renderList[ i ];
			object = webglObject.object;

			webglObject.render = false;

			if ( object.visible ) {

				if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.contains( object ) ) {

					setupMatrices( object, camera );

					unrollBufferMaterial( webglObject );

					webglObject.render = true;

					if ( this.sortObjects === true ) {

						if ( object.renderDepth !== null ) {

							webglObject.z = object.renderDepth;

						} else {

							_vector3.copy( object.matrixWorld.getPosition() );
							_projScreenMatrix.multiplyVector3( _vector3 );

							webglObject.z = _vector3.z;

						}

						webglObject.id = object.id;

					}

				}

			}

		}

		if ( this.sortObjects ) {

			renderList.sort( painterSortStable );

		}

		// set matrices for immediate objects

		renderList = scene.__webglObjectsImmediate;

		for ( i = 0, il = renderList.length; i < il; i ++ ) {

			webglObject = renderList[ i ];
			object = webglObject.object;

			if ( object.visible ) {

				setupMatrices( object, camera );

				unrollImmediateBufferMaterial( webglObject );

			}

		}

		if ( scene.overrideMaterial ) {

			var material = scene.overrideMaterial;

			this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
			this.setDepthTest( material.depthTest );
			this.setDepthWrite( material.depthWrite );
			setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

			renderObjects( scene.__webglObjects, false, "", camera, lights, fog, true, material );
			renderObjectsImmediate( scene.__webglObjectsImmediate, "", camera, lights, fog, false, material );

		} else {

			var material = null;

			// opaque pass (front-to-back order)

			this.setBlending( THREE.NoBlending );

			renderObjects( scene.__webglObjects, true, "opaque", camera, lights, fog, false, material );
			renderObjectsImmediate( scene.__webglObjectsImmediate, "opaque", camera, lights, fog, false, material );

			// transparent pass (back-to-front order)

			renderObjects( scene.__webglObjects, false, "transparent", camera, lights, fog, true, material );
			renderObjectsImmediate( scene.__webglObjectsImmediate, "transparent", camera, lights, fog, true, material );

		}

		// custom render plugins (post pass)

		renderPlugins( this.renderPluginsPost, scene, camera );


		// Generate mipmap if we're using any kind of mipmap filtering

		if ( renderTarget && renderTarget.generateMipmaps && renderTarget.minFilter !== THREE.NearestFilter && renderTarget.minFilter !== THREE.LinearFilter ) {

			updateRenderTargetMipmap( renderTarget );

		}

		// Ensure depth buffer writing is enabled so it can be cleared on next render

		this.setDepthTest( true );
		this.setDepthWrite( true );

		// _gl.finish();

	};

	function renderPlugins( plugins, scene, camera ) {

		if ( ! plugins.length ) return;

		for ( var i = 0, il = plugins.length; i < il; i ++ ) {

			// reset state for plugin (to start from clean slate)

			_currentProgram = null;
			_currentCamera = null;

			_oldBlending = -1;
			_oldDepthTest = -1;
			_oldDepthWrite = -1;
			_oldDoubleSided = -1;
			_oldFlipSided = -1;
			_currentGeometryGroupHash = -1;
			_currentMaterialId = -1;

			_lightsNeedUpdate = true;

			plugins[ i ].render( scene, camera, _currentWidth, _currentHeight );

			// reset state after plugin (anything could have changed)

			_currentProgram = null;
			_currentCamera = null;

			_oldBlending = -1;
			_oldDepthTest = -1;
			_oldDepthWrite = -1;
			_oldDoubleSided = -1;
			_oldFlipSided = -1;
			_currentGeometryGroupHash = -1;
			_currentMaterialId = -1;

			_lightsNeedUpdate = true;

		}

	};

	function renderObjects ( renderList, reverse, materialType, camera, lights, fog, useBlending, overrideMaterial ) {

		var webglObject, object, buffer, material, start, end, delta;

		if ( reverse ) {

			start = renderList.length - 1;
			end = -1;
			delta = -1;

		} else {

			start = 0;
			end = renderList.length;
			delta = 1;
		}

		for ( var i = start; i !== end; i += delta ) {

			webglObject = renderList[ i ];

			if ( webglObject.render ) {

				object = webglObject.object;
				buffer = webglObject.buffer;

				if ( overrideMaterial ) {

					material = overrideMaterial;

				} else {

					material = webglObject[ materialType ];

					if ( ! material ) continue;

					if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );

					_this.setDepthTest( material.depthTest );
					_this.setDepthWrite( material.depthWrite );
					setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

				}

				_this.setMaterialFaces( material );

				if ( buffer instanceof THREE.BufferGeometry ) {

					_this.renderBufferDirect( camera, lights, fog, material, buffer, object );

				} else {

					_this.renderBuffer( camera, lights, fog, material, buffer, object );

				}

			}

		}

	};

	function renderObjectsImmediate ( renderList, materialType, camera, lights, fog, useBlending, overrideMaterial ) {

		var webglObject, object, material, program;

		for ( var i = 0, il = renderList.length; i < il; i ++ ) {

			webglObject = renderList[ i ];
			object = webglObject.object;

			if ( object.visible ) {

				if ( overrideMaterial ) {

					material = overrideMaterial;

				} else {

					material = webglObject[ materialType ];

					if ( ! material ) continue;

					if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );

					_this.setDepthTest( material.depthTest );
					_this.setDepthWrite( material.depthWrite );
					setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

				}

				_this.renderImmediateObject( camera, lights, fog, material, object );

			}

		}

	};

	this.renderImmediateObject = function ( camera, lights, fog, material, object ) {

		var program = setProgram( camera, lights, fog, material, object );

		_currentGeometryGroupHash = -1;

		_this.setMaterialFaces( material );

		if ( object.immediateRenderCallback ) {

			object.immediateRenderCallback( program, _gl, _frustum );

		} else {

			object.render( function( object ) { _this.renderBufferImmediate( object, program, material ); } );

		}

	};

	function unrollImmediateBufferMaterial ( globject ) {

		var object = globject.object,
			material = object.material;

		if ( material.transparent ) {

			globject.transparent = material;
			globject.opaque = null;

		} else {

			globject.opaque = material;
			globject.transparent = null;

		}

	};

	function unrollBufferMaterial ( globject ) {

		var object = globject.object,
			buffer = globject.buffer,
			material, materialIndex, meshMaterial;

		meshMaterial = object.material;

		if ( meshMaterial instanceof THREE.MeshFaceMaterial ) {

			materialIndex = buffer.materialIndex;

			material = meshMaterial.materials[ materialIndex ];

			if ( material.transparent ) {

				globject.transparent = material;
				globject.opaque = null;

			} else {

				globject.opaque = material;
				globject.transparent = null;

			}

		} else {

			material = meshMaterial;

			if ( material ) {

				if ( material.transparent ) {

					globject.transparent = material;
					globject.opaque = null;

				} else {

					globject.opaque = material;
					globject.transparent = null;

				}

			}

		}

	};

	// Geometry splitting

	function sortFacesByMaterial ( geometry, material ) {

		var f, fl, face, materialIndex, vertices,
			groupHash, hash_map = {};

		var numMorphTargets = geometry.morphTargets.length;
		var numMorphNormals = geometry.morphNormals.length;

		var usesFaceMaterial = material instanceof THREE.MeshFaceMaterial;

		geometry.geometryGroups = {};

		for ( f = 0, fl = geometry.faces.length; f < fl; f ++ ) {

			face = geometry.faces[ f ];
			materialIndex = usesFaceMaterial ? face.materialIndex : 0;

			if ( hash_map[ materialIndex ] === undefined ) {

				hash_map[ materialIndex ] = { 'hash': materialIndex, 'counter': 0 };

			}

			groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;

			if ( geometry.geometryGroups[ groupHash ] === undefined ) {

				geometry.geometryGroups[ groupHash ] = { 'faces3': [], 'faces4': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };

			}

			vertices = face instanceof THREE.Face3 ? 3 : 4;

			if ( geometry.geometryGroups[ groupHash ].vertices + vertices > 65535 ) {

				hash_map[ materialIndex ].counter += 1;
				groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;

				if ( geometry.geometryGroups[ groupHash ] === undefined ) {

					geometry.geometryGroups[ groupHash ] = { 'faces3': [], 'faces4': [], 'materialIndex': materialIndex, 'vertices': 0, 'numMorphTargets': numMorphTargets, 'numMorphNormals': numMorphNormals };

				}

			}

			if ( face instanceof THREE.Face3 ) {

				geometry.geometryGroups[ groupHash ].faces3.push( f );

			} else {

				geometry.geometryGroups[ groupHash ].faces4.push( f );

			}

			geometry.geometryGroups[ groupHash ].vertices += vertices;

		}

		geometry.geometryGroupsList = [];

		for ( var g in geometry.geometryGroups ) {

			geometry.geometryGroups[ g ].id = _geometryGroupCounter ++;

			geometry.geometryGroupsList.push( geometry.geometryGroups[ g ] );

		}

	};

	// Objects refresh

	this.initWebGLObjects = function ( scene ) {

		if ( !scene.__webglObjects ) {

			scene.__webglObjects = [];
			scene.__webglObjectsImmediate = [];
			scene.__webglSprites = [];
			scene.__webglFlares = [];

		}

		while ( scene.__objectsAdded.length ) {

			addObject( scene.__objectsAdded[ 0 ], scene );
			scene.__objectsAdded.splice( 0, 1 );

		}

		while ( scene.__objectsRemoved.length ) {

			removeObject( scene.__objectsRemoved[ 0 ], scene );
			scene.__objectsRemoved.splice( 0, 1 );

		}

		// update must be called after objects adding / removal

		for ( var o = 0, ol = scene.__webglObjects.length; o < ol; o ++ ) {

			updateObject( scene.__webglObjects[ o ].object );

		}

	};

	// Objects adding

	function addObject ( object, scene ) {

		var g, geometry, material, geometryGroup;

		if ( ! object.__webglInit ) {

			object.__webglInit = true;

			object._modelViewMatrix = new THREE.Matrix4();
			object._normalMatrix = new THREE.Matrix3();

			if ( object.geometry !== undefined && object.geometry.__webglInit === undefined ) {

				object.geometry.__webglInit = true;
				object.geometry.addEventListener( 'dispose', onGeometryDispose );

			}

			if ( object instanceof THREE.Mesh ) {

				geometry = object.geometry;
				material = object.material;

				if ( geometry instanceof THREE.Geometry ) {

					if ( geometry.geometryGroups === undefined ) {

						sortFacesByMaterial( geometry, material );

					}

					// create separate VBOs per geometry chunk

					for ( g in geometry.geometryGroups ) {

						geometryGroup = geometry.geometryGroups[ g ];

						// initialise VBO on the first access

						if ( ! geometryGroup.__webglVertexBuffer ) {

							createMeshBuffers( geometryGroup );
							initMeshBuffers( geometryGroup, object );

							geometry.verticesNeedUpdate = true;
							geometry.morphTargetsNeedUpdate = true;
							geometry.elementsNeedUpdate = true;
							geometry.uvsNeedUpdate = true;
							geometry.normalsNeedUpdate = true;
							geometry.tangentsNeedUpdate = true;
							geometry.colorsNeedUpdate = true;

						}

					}

				} else if ( geometry instanceof THREE.BufferGeometry ) {

					initDirectBuffers( geometry );

				}

			} else if ( object instanceof THREE.Ribbon ) {

				geometry = object.geometry;

				if ( ! geometry.__webglVertexBuffer ) {

					createRibbonBuffers( geometry );
					initRibbonBuffers( geometry, object );

					geometry.verticesNeedUpdate = true;
					geometry.colorsNeedUpdate = true;
					geometry.normalsNeedUpdate = true;

				}

			} else if ( object instanceof THREE.Line ) {

				geometry = object.geometry;

				if ( ! geometry.__webglVertexBuffer ) {

					createLineBuffers( geometry );
					initLineBuffers( geometry, object );

					geometry.verticesNeedUpdate = true;
					geometry.colorsNeedUpdate = true;
					geometry.lineDistancesNeedUpdate = true;

				}

			} else if ( object instanceof THREE.ParticleSystem ) {

				geometry = object.geometry;

				if ( ! geometry.__webglVertexBuffer ) {

					if ( geometry instanceof THREE.Geometry ) {

						createParticleBuffers( geometry );
						initParticleBuffers( geometry, object );

						geometry.verticesNeedUpdate = true;
						geometry.colorsNeedUpdate = true;

					} else if ( geometry instanceof THREE.BufferGeometry ) {

						initDirectBuffers( geometry );

					}


				}

			}

		}

		if ( ! object.__webglActive ) {

			if ( object instanceof THREE.Mesh ) {

				geometry = object.geometry;

				if ( geometry instanceof THREE.BufferGeometry ) {

					addBuffer( scene.__webglObjects, geometry, object );

				} else {

					for ( g in geometry.geometryGroups ) {

						geometryGroup = geometry.geometryGroups[ g ];

						addBuffer( scene.__webglObjects, geometryGroup, object );

					}

				}

			} else if ( object instanceof THREE.Ribbon ||
						object instanceof THREE.Line ||
						object instanceof THREE.ParticleSystem ) {

				geometry = object.geometry;
				addBuffer( scene.__webglObjects, geometry, object );

			} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {

				addBufferImmediate( scene.__webglObjectsImmediate, object );

			} else if ( object instanceof THREE.Sprite ) {

				scene.__webglSprites.push( object );

			} else if ( object instanceof THREE.LensFlare ) {

				scene.__webglFlares.push( object );

			}

			object.__webglActive = true;

		}

	};

	function addBuffer ( objlist, buffer, object ) {

		objlist.push(
			{
				buffer: buffer,
				object: object,
				opaque: null,
				transparent: null
			}
		);

	};

	function addBufferImmediate ( objlist, object ) {

		objlist.push(
			{
				object: object,
				opaque: null,
				transparent: null
			}
		);

	};

	// Objects updates

	function updateObject ( object ) {

		var geometry = object.geometry,
			geometryGroup, customAttributesDirty, material;

		if ( object instanceof THREE.Mesh ) {

			if ( geometry instanceof THREE.BufferGeometry ) {

				if ( geometry.verticesNeedUpdate || geometry.elementsNeedUpdate ||
					 geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||
					 geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate ) {

					setDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );

				}

				geometry.verticesNeedUpdate = false;
				geometry.elementsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.tangentsNeedUpdate = false;

			} else {

				// check all geometry groups

				for( var i = 0, il = geometry.geometryGroupsList.length; i < il; i ++ ) {

					geometryGroup = geometry.geometryGroupsList[ i ];

					material = getBufferMaterial( object, geometryGroup );

					if ( geometry.buffersNeedUpdate ) {

						initMeshBuffers( geometryGroup, object );

					}

					customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

					if ( geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate ||
						 geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||
						 geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || customAttributesDirty ) {

						setMeshBuffers( geometryGroup, object, _gl.DYNAMIC_DRAW, !geometry.dynamic, material );

					}

				}

				geometry.verticesNeedUpdate = false;
				geometry.morphTargetsNeedUpdate = false;
				geometry.elementsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.tangentsNeedUpdate = false;

				geometry.buffersNeedUpdate = false;

				material.attributes && clearCustomAttributes( material );

			}

		} else if ( object instanceof THREE.Ribbon ) {

			material = getBufferMaterial( object, geometry );

			customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

			if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.normalsNeedUpdate || customAttributesDirty ) {

				setRibbonBuffers( geometry, _gl.DYNAMIC_DRAW );

			}

			geometry.verticesNeedUpdate = false;
			geometry.colorsNeedUpdate = false;
			geometry.normalsNeedUpdate = false;

			material.attributes && clearCustomAttributes( material );

		} else if ( object instanceof THREE.Line ) {

			material = getBufferMaterial( object, geometry );

			customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

			if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || customAttributesDirty ) {

				setLineBuffers( geometry, _gl.DYNAMIC_DRAW );

			}

			geometry.verticesNeedUpdate = false;
			geometry.colorsNeedUpdate = false;
			geometry.lineDistancesNeedUpdate = false;

			material.attributes && clearCustomAttributes( material );

		} else if ( object instanceof THREE.ParticleSystem ) {

			if ( geometry instanceof THREE.BufferGeometry ) {

				if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate ) {

					setDirectBuffers( geometry, _gl.DYNAMIC_DRAW, !geometry.dynamic );

				}

				geometry.verticesNeedUpdate = false;
				geometry.colorsNeedUpdate = false;

			} else {

				material = getBufferMaterial( object, geometry );

				customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

				if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || object.sortParticles || customAttributesDirty ) {

					setParticleBuffers( geometry, _gl.DYNAMIC_DRAW, object );

				}

				geometry.verticesNeedUpdate = false;
				geometry.colorsNeedUpdate = false;

				material.attributes && clearCustomAttributes( material );

			}

		}

	};

	// Objects updates - custom attributes check

	function areCustomAttributesDirty ( material ) {

		for ( var a in material.attributes ) {

			if ( material.attributes[ a ].needsUpdate ) return true;

		}

		return false;

	};

	function clearCustomAttributes ( material ) {

		for ( var a in material.attributes ) {

			material.attributes[ a ].needsUpdate = false;

		}

	};

	// Objects removal

	function removeObject ( object, scene ) {

		if ( object instanceof THREE.Mesh  ||
			 object instanceof THREE.ParticleSystem ||
			 object instanceof THREE.Ribbon ||
			 object instanceof THREE.Line ) {

			removeInstances( scene.__webglObjects, object );

		} else if ( object instanceof THREE.Sprite ) {

			removeInstancesDirect( scene.__webglSprites, object );

		} else if ( object instanceof THREE.LensFlare ) {

			removeInstancesDirect( scene.__webglFlares, object );

		} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {

			removeInstances( scene.__webglObjectsImmediate, object );

		}

		object.__webglActive = false;

	};

	function removeInstances ( objlist, object ) {

		for ( var o = objlist.length - 1; o >= 0; o -- ) {

			if ( objlist[ o ].object === object ) {

				objlist.splice( o, 1 );

			}

		}

	};

	function removeInstancesDirect ( objlist, object ) {

		for ( var o = objlist.length - 1; o >= 0; o -- ) {

			if ( objlist[ o ] === object ) {

				objlist.splice( o, 1 );

			}

		}

	};

	// Materials

	this.initMaterial = function ( material, lights, fog, object ) {

		material.addEventListener( 'dispose', onMaterialDispose );

		var u, a, identifiers, i, parameters, maxLightCount, maxBones, maxShadows, shaderID;

		if ( material instanceof THREE.MeshDepthMaterial ) {

			shaderID = 'depth';

		} else if ( material instanceof THREE.MeshNormalMaterial ) {

			shaderID = 'normal';

		} else if ( material instanceof THREE.MeshBasicMaterial ) {

			shaderID = 'basic';

		} else if ( material instanceof THREE.MeshLambertMaterial ) {

			shaderID = 'lambert';

		} else if ( material instanceof THREE.MeshPhongMaterial ) {

			shaderID = 'phong';

		} else if ( material instanceof THREE.LineBasicMaterial ) {

			shaderID = 'basic';

		} else if ( material instanceof THREE.LineDashedMaterial ) {

			shaderID = 'dashed';

		} else if ( material instanceof THREE.ParticleBasicMaterial ) {

			shaderID = 'particle_basic';

		}

		if ( shaderID ) {

			setMaterialShaders( material, THREE.ShaderLib[ shaderID ] );

		}

		// heuristics to create shader parameters according to lights in the scene
		// (not to blow over maxLights budget)

		maxLightCount = allocateLights( lights );

		maxShadows = allocateShadows( lights );

		maxBones = allocateBones( object );

		parameters = {

			map: !!material.map,
			envMap: !!material.envMap,
			lightMap: !!material.lightMap,
			bumpMap: !!material.bumpMap,
			normalMap: !!material.normalMap,
			specularMap: !!material.specularMap,

			vertexColors: material.vertexColors,

			fog: fog,
			useFog: material.fog,
			fogExp: fog instanceof THREE.FogExp2,

			sizeAttenuation: material.sizeAttenuation,

			skinning: material.skinning,
			maxBones: maxBones,
			useVertexTexture: _supportsBoneTextures && object && object.useVertexTexture,
			boneTextureWidth: object && object.boneTextureWidth,
			boneTextureHeight: object && object.boneTextureHeight,

			morphTargets: material.morphTargets,
			morphNormals: material.morphNormals,
			maxMorphTargets: this.maxMorphTargets,
			maxMorphNormals: this.maxMorphNormals,

			maxDirLights: maxLightCount.directional,
			maxPointLights: maxLightCount.point,
			maxSpotLights: maxLightCount.spot,
			maxHemiLights: maxLightCount.hemi,

			maxShadows: maxShadows,
			shadowMapEnabled: this.shadowMapEnabled && object.receiveShadow,
			shadowMapType: this.shadowMapType,
			shadowMapDebug: this.shadowMapDebug,
			shadowMapCascade: this.shadowMapCascade,

			alphaTest: material.alphaTest,
			metal: material.metal,
			perPixel: material.perPixel,
			wrapAround: material.wrapAround,
			doubleSided: material.side === THREE.DoubleSide,
			flipSided: material.side === THREE.BackSide

		};

		material.program = buildProgram( shaderID, material.fragmentShader, material.vertexShader, material.uniforms, material.attributes, material.defines, parameters );

		var attributes = material.program.attributes;

		if ( material.morphTargets ) {

			material.numSupportedMorphTargets = 0;

			var id, base = "morphTarget";

			for ( i = 0; i < this.maxMorphTargets; i ++ ) {

				id = base + i;

				if ( attributes[ id ] >= 0 ) {

					material.numSupportedMorphTargets ++;

				}

			}

		}

		if ( material.morphNormals ) {

			material.numSupportedMorphNormals = 0;

			var id, base = "morphNormal";

			for ( i = 0; i < this.maxMorphNormals; i ++ ) {

				id = base + i;

				if ( attributes[ id ] >= 0 ) {

					material.numSupportedMorphNormals ++;

				}

			}

		}

		material.uniformsList = [];

		for ( u in material.uniforms ) {

			material.uniformsList.push( [ material.uniforms[ u ], u ] );

		}

	};

	function setMaterialShaders( material, shaders ) {

		material.uniforms = THREE.UniformsUtils.clone( shaders.uniforms );
		material.vertexShader = shaders.vertexShader;
		material.fragmentShader = shaders.fragmentShader;

	};

	function setProgram( camera, lights, fog, material, object ) {

		_usedTextureUnits = 0;

		if ( material.needsUpdate ) {

			if ( material.program ) deallocateMaterial( material );

			_this.initMaterial( material, lights, fog, object );
			material.needsUpdate = false;

		}

		if ( material.morphTargets ) {

			if ( ! object.__webglMorphTargetInfluences ) {

				object.__webglMorphTargetInfluences = new Float32Array( _this.maxMorphTargets );

			}

		}

		var refreshMaterial = false;

		var program = material.program,
			p_uniforms = program.uniforms,
			m_uniforms = material.uniforms;

		if ( program !== _currentProgram ) {

			_gl.useProgram( program );
			_currentProgram = program;

			refreshMaterial = true;

		}

		if ( material.id !== _currentMaterialId ) {

			_currentMaterialId = material.id;
			refreshMaterial = true;

		}

		if ( refreshMaterial || camera !== _currentCamera ) {

			_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

			if ( camera !== _currentCamera ) _currentCamera = camera;

		}

		// skinning uniforms must be set even if material didn't change
		// auto-setting of texture unit for bone texture must go before other textures
		// not sure why, but otherwise weird things happen

		if ( material.skinning ) {

			if ( _supportsBoneTextures && object.useVertexTexture ) {

				if ( p_uniforms.boneTexture !== null ) {

					var textureUnit = getTextureUnit();

					_gl.uniform1i( p_uniforms.boneTexture, textureUnit );
					_this.setTexture( object.boneTexture, textureUnit );

				}

			} else {

				if ( p_uniforms.boneGlobalMatrices !== null ) {

					_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.boneMatrices );

				}

			}

		}

		if ( refreshMaterial ) {

			// refresh uniforms common to several materials

			if ( fog && material.fog ) {

				refreshUniformsFog( m_uniforms, fog );

			}

			if ( material instanceof THREE.MeshPhongMaterial ||
				 material instanceof THREE.MeshLambertMaterial ||
				 material.lights ) {

				if ( _lightsNeedUpdate ) {

					setupLights( program, lights );
					_lightsNeedUpdate = false;

				}

				refreshUniformsLights( m_uniforms, _lights );

			}

			if ( material instanceof THREE.MeshBasicMaterial ||
				 material instanceof THREE.MeshLambertMaterial ||
				 material instanceof THREE.MeshPhongMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

			}

			// refresh single material specific uniforms

			if ( material instanceof THREE.LineBasicMaterial ) {

				refreshUniformsLine( m_uniforms, material );

			} else if ( material instanceof THREE.LineDashedMaterial ) {

				refreshUniformsLine( m_uniforms, material );
				refreshUniformsDash( m_uniforms, material );

			} else if ( material instanceof THREE.ParticleBasicMaterial ) {

				refreshUniformsParticle( m_uniforms, material );

			} else if ( material instanceof THREE.MeshPhongMaterial ) {

				refreshUniformsPhong( m_uniforms, material );

			} else if ( material instanceof THREE.MeshLambertMaterial ) {

				refreshUniformsLambert( m_uniforms, material );

			} else if ( material instanceof THREE.MeshDepthMaterial ) {

				m_uniforms.mNear.value = camera.near;
				m_uniforms.mFar.value = camera.far;
				m_uniforms.opacity.value = material.opacity;

			} else if ( material instanceof THREE.MeshNormalMaterial ) {

				m_uniforms.opacity.value = material.opacity;

			}

			if ( object.receiveShadow && ! material._shadowPass ) {

				refreshUniformsShadow( m_uniforms, lights );

			}

			// load common uniforms

			loadUniformsGeneric( program, material.uniformsList );

			// load material specific uniforms
			// (shader material also gets them for the sake of genericity)

			if ( material instanceof THREE.ShaderMaterial ||
				 material instanceof THREE.MeshPhongMaterial ||
				 material.envMap ) {

				if ( p_uniforms.cameraPosition !== null ) {

					var position = camera.matrixWorld.getPosition();
					_gl.uniform3f( p_uniforms.cameraPosition, position.x, position.y, position.z );

				}

			}

			if ( material instanceof THREE.MeshPhongMaterial ||
				 material instanceof THREE.MeshLambertMaterial ||
				 material instanceof THREE.ShaderMaterial ||
				 material.skinning ) {

				if ( p_uniforms.viewMatrix !== null ) {

					_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );

				}

			}

		}

		loadUniformsMatrices( p_uniforms, object );

		if ( p_uniforms.modelMatrix !== null ) {

			_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );

		}

		return program;

	};

	// Uniforms (refresh uniforms objects)

	function refreshUniformsCommon ( uniforms, material ) {

		uniforms.opacity.value = material.opacity;

		if ( _this.gammaInput ) {

			uniforms.diffuse.value.copyGammaToLinear( material.color );

		} else {

			uniforms.diffuse.value = material.color;

		}

		uniforms.map.value = material.map;
		uniforms.lightMap.value = material.lightMap;
		uniforms.specularMap.value = material.specularMap;

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		// uv repeat and offset setting priorities
		//	1. color map
		//	2. specular map
		//	3. normal map
		//	4. bump map

		var uvScaleMap;

		if ( material.map ) {

			uvScaleMap = material.map;

		} else if ( material.specularMap ) {

			uvScaleMap = material.specularMap;

		} else if ( material.normalMap ) {

			uvScaleMap = material.normalMap;

		} else if ( material.bumpMap ) {

			uvScaleMap = material.bumpMap;

		}

		if ( uvScaleMap !== undefined ) {

			var offset = uvScaleMap.offset;
			var repeat = uvScaleMap.repeat;

			uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

		}

		uniforms.envMap.value = material.envMap;
		uniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : -1;

		if ( _this.gammaInput ) {

			//uniforms.reflectivity.value = material.reflectivity * material.reflectivity;
			uniforms.reflectivity.value = material.reflectivity;

		} else {

			uniforms.reflectivity.value = material.reflectivity;

		}

		uniforms.refractionRatio.value = material.refractionRatio;
		uniforms.combine.value = material.combine;
		uniforms.useRefract.value = material.envMap && material.envMap.mapping instanceof THREE.CubeRefractionMapping;

	};

	function refreshUniformsLine ( uniforms, material ) {

		uniforms.diffuse.value = material.color;
		uniforms.opacity.value = material.opacity;

	};

	function refreshUniformsDash ( uniforms, material ) {

		uniforms.dashSize.value = material.dashSize;
		uniforms.totalSize.value = material.dashSize + material.gapSize;
		uniforms.scale.value = material.scale;

	};

	function refreshUniformsParticle ( uniforms, material ) {

		uniforms.psColor.value = material.color;
		uniforms.opacity.value = material.opacity;
		uniforms.size.value = material.size;
		uniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.

		uniforms.map.value = material.map;

	};

	function refreshUniformsFog ( uniforms, fog ) {

		uniforms.fogColor.value = fog.color;

		if ( fog instanceof THREE.Fog ) {

			uniforms.fogNear.value = fog.near;
			uniforms.fogFar.value = fog.far;

		} else if ( fog instanceof THREE.FogExp2 ) {

			uniforms.fogDensity.value = fog.density;

		}

	};

	function refreshUniformsPhong ( uniforms, material ) {

		uniforms.shininess.value = material.shininess;

		if ( _this.gammaInput ) {

			uniforms.ambient.value.copyGammaToLinear( material.ambient );
			uniforms.emissive.value.copyGammaToLinear( material.emissive );
			uniforms.specular.value.copyGammaToLinear( material.specular );

		} else {

			uniforms.ambient.value = material.ambient;
			uniforms.emissive.value = material.emissive;
			uniforms.specular.value = material.specular;

		}

		if ( material.wrapAround ) {

			uniforms.wrapRGB.value.copy( material.wrapRGB );

		}

	};

	function refreshUniformsLambert ( uniforms, material ) {

		if ( _this.gammaInput ) {

			uniforms.ambient.value.copyGammaToLinear( material.ambient );
			uniforms.emissive.value.copyGammaToLinear( material.emissive );

		} else {

			uniforms.ambient.value = material.ambient;
			uniforms.emissive.value = material.emissive;

		}

		if ( material.wrapAround ) {

			uniforms.wrapRGB.value.copy( material.wrapRGB );

		}

	};

	function refreshUniformsLights ( uniforms, lights ) {

		uniforms.ambientLightColor.value = lights.ambient;

		uniforms.directionalLightColor.value = lights.directional.colors;
		uniforms.directionalLightDirection.value = lights.directional.positions;

		uniforms.pointLightColor.value = lights.point.colors;
		uniforms.pointLightPosition.value = lights.point.positions;
		uniforms.pointLightDistance.value = lights.point.distances;

		uniforms.spotLightColor.value = lights.spot.colors;
		uniforms.spotLightPosition.value = lights.spot.positions;
		uniforms.spotLightDistance.value = lights.spot.distances;
		uniforms.spotLightDirection.value = lights.spot.directions;
		uniforms.spotLightAngleCos.value = lights.spot.anglesCos;
		uniforms.spotLightExponent.value = lights.spot.exponents;

		uniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;
		uniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;
		uniforms.hemisphereLightDirection.value = lights.hemi.positions;

	};

	function refreshUniformsShadow ( uniforms, lights ) {

		if ( uniforms.shadowMatrix ) {

			var j = 0;

			for ( var i = 0, il = lights.length; i < il; i ++ ) {

				var light = lights[ i ];

				if ( ! light.castShadow ) continue;

				if ( light instanceof THREE.SpotLight || ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) ) {

					uniforms.shadowMap.value[ j ] = light.shadowMap;
					uniforms.shadowMapSize.value[ j ] = light.shadowMapSize;

					uniforms.shadowMatrix.value[ j ] = light.shadowMatrix;

					uniforms.shadowDarkness.value[ j ] = light.shadowDarkness;
					uniforms.shadowBias.value[ j ] = light.shadowBias;

					j ++;

				}

			}

		}

	};

	// Uniforms (load to GPU)

	function loadUniformsMatrices ( uniforms, object ) {

		_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object._modelViewMatrix.elements );

		if ( uniforms.normalMatrix ) {

			_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object._normalMatrix.elements );

		}

	};

	function getTextureUnit() {

		var textureUnit = _usedTextureUnits;

		if ( textureUnit >= _maxTextures ) {

			console.warn( "WebGLRenderer: trying to use " + textureUnit + " texture units while this GPU supports only " + _maxTextures );

		}

		_usedTextureUnits += 1;

		return textureUnit;

	};

	function loadUniformsGeneric ( program, uniforms ) {

		var uniform, value, type, location, texture, textureUnit, i, il, j, jl, offset;

		for ( j = 0, jl = uniforms.length; j < jl; j ++ ) {

			location = program.uniforms[ uniforms[ j ][ 1 ] ];
			if ( !location ) continue;

			uniform = uniforms[ j ][ 0 ];

			type = uniform.type;
			value = uniform.value;

			if ( type === "i" ) { // single integer

				_gl.uniform1i( location, value );

			} else if ( type === "f" ) { // single float

				_gl.uniform1f( location, value );

			} else if ( type === "v2" ) { // single THREE.Vector2

				_gl.uniform2f( location, value.x, value.y );

			} else if ( type === "v3" ) { // single THREE.Vector3

				_gl.uniform3f( location, value.x, value.y, value.z );

			} else if ( type === "v4" ) { // single THREE.Vector4

				_gl.uniform4f( location, value.x, value.y, value.z, value.w );

			} else if ( type === "c" ) { // single THREE.Color

				_gl.uniform3f( location, value.r, value.g, value.b );

			} else if ( type === "iv1" ) { // flat array of integers (JS or typed array)

				_gl.uniform1iv( location, value );

			} else if ( type === "iv" ) { // flat array of integers with 3 x N size (JS or typed array)

				_gl.uniform3iv( location, value );

			} else if ( type === "fv1" ) { // flat array of floats (JS or typed array)

				_gl.uniform1fv( location, value );

			} else if ( type === "fv" ) { // flat array of floats with 3 x N size (JS or typed array)

				_gl.uniform3fv( location, value );

			} else if ( type === "v2v" ) { // array of THREE.Vector2

				if ( uniform._array === undefined ) {

					uniform._array = new Float32Array( 2 * value.length );

				}

				for ( i = 0, il = value.length; i < il; i ++ ) {

					offset = i * 2;

					uniform._array[ offset ] 	 = value[ i ].x;
					uniform._array[ offset + 1 ] = value[ i ].y;

				}

				_gl.uniform2fv( location, uniform._array );

			} else if ( type === "v3v" ) { // array of THREE.Vector3

				if ( uniform._array === undefined ) {

					uniform._array = new Float32Array( 3 * value.length );

				}

				for ( i = 0, il = value.length; i < il; i ++ ) {

					offset = i * 3;

					uniform._array[ offset ] 	 = value[ i ].x;
					uniform._array[ offset + 1 ] = value[ i ].y;
					uniform._array[ offset + 2 ] = value[ i ].z;

				}

				_gl.uniform3fv( location, uniform._array );

			} else if ( type === "v4v" ) { // array of THREE.Vector4

				if ( uniform._array === undefined ) {

					uniform._array = new Float32Array( 4 * value.length );

				}

				for ( i = 0, il = value.length; i < il; i ++ ) {

					offset = i * 4;

					uniform._array[ offset ] 	 = value[ i ].x;
					uniform._array[ offset + 1 ] = value[ i ].y;
					uniform._array[ offset + 2 ] = value[ i ].z;
					uniform._array[ offset + 3 ] = value[ i ].w;

				}

				_gl.uniform4fv( location, uniform._array );

			} else if ( type === "m4") { // single THREE.Matrix4

				if ( uniform._array === undefined ) {

					uniform._array = new Float32Array( 16 );

				}

				value.flattenToArray( uniform._array );
				_gl.uniformMatrix4fv( location, false, uniform._array );

			} else if ( type === "m4v" ) { // array of THREE.Matrix4

				if ( uniform._array === undefined ) {

					uniform._array = new Float32Array( 16 * value.length );

				}

				for ( i = 0, il = value.length; i < il; i ++ ) {

					value[ i ].flattenToArrayOffset( uniform._array, i * 16 );

				}

				_gl.uniformMatrix4fv( location, false, uniform._array );

			} else if ( type === "t" ) { // single THREE.Texture (2d or cube)

				texture = value;
				textureUnit = getTextureUnit();

				_gl.uniform1i( location, textureUnit );

				if ( !texture ) continue;

				if ( texture.image instanceof Array && texture.image.length === 6 ) {

					setCubeTexture( texture, textureUnit );

				} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {

					setCubeTextureDynamic( texture, textureUnit );

				} else {

					_this.setTexture( texture, textureUnit );

				}

			} else if ( type === "tv" ) { // array of THREE.Texture (2d)

				if ( uniform._array === undefined ) {

					uniform._array = [];

				}

				for( i = 0, il = uniform.value.length; i < il; i ++ ) {

					uniform._array[ i ] = getTextureUnit();

				}

				_gl.uniform1iv( location, uniform._array );

				for( i = 0, il = uniform.value.length; i < il; i ++ ) {

					texture = uniform.value[ i ];
					textureUnit = uniform._array[ i ];

					if ( !texture ) continue;

					_this.setTexture( texture, textureUnit );

				}

			}

		}

	};

	function setupMatrices ( object, camera ) {

		object._modelViewMatrix.multiply( camera.matrixWorldInverse, object.matrixWorld );

		object._normalMatrix.getInverse( object._modelViewMatrix );
		object._normalMatrix.transpose();

	};

	//

	function setColorGamma( array, offset, color, intensitySq ) {

		array[ offset ]     = color.r * color.r * intensitySq;
		array[ offset + 1 ] = color.g * color.g * intensitySq;
		array[ offset + 2 ] = color.b * color.b * intensitySq;

	};

	function setColorLinear( array, offset, color, intensity ) {

		array[ offset ]     = color.r * intensity;
		array[ offset + 1 ] = color.g * intensity;
		array[ offset + 2 ] = color.b * intensity;

	};

	function setupLights ( program, lights ) {

		var l, ll, light, n,
		r = 0, g = 0, b = 0,
		color, skyColor, groundColor,
		intensity,  intensitySq,
		position,
		distance,

		zlights = _lights,

		dirColors = zlights.directional.colors,
		dirPositions = zlights.directional.positions,

		pointColors = zlights.point.colors,
		pointPositions = zlights.point.positions,
		pointDistances = zlights.point.distances,

		spotColors = zlights.spot.colors,
		spotPositions = zlights.spot.positions,
		spotDistances = zlights.spot.distances,
		spotDirections = zlights.spot.directions,
		spotAnglesCos = zlights.spot.anglesCos,
		spotExponents = zlights.spot.exponents,

		hemiSkyColors = zlights.hemi.skyColors,
		hemiGroundColors = zlights.hemi.groundColors,
		hemiPositions = zlights.hemi.positions,

		dirLength = 0,
		pointLength = 0,
		spotLength = 0,
		hemiLength = 0,

		dirCount = 0,
		pointCount = 0,
		spotCount = 0,
		hemiCount = 0,

		dirOffset = 0,
		pointOffset = 0,
		spotOffset = 0,
		hemiOffset = 0;

		for ( l = 0, ll = lights.length; l < ll; l ++ ) {

			light = lights[ l ];

			if ( light.onlyShadow ) continue;

			color = light.color;
			intensity = light.intensity;
			distance = light.distance;

			if ( light instanceof THREE.AmbientLight ) {

				if ( ! light.visible ) continue;

				if ( _this.gammaInput ) {

					r += color.r * color.r;
					g += color.g * color.g;
					b += color.b * color.b;

				} else {

					r += color.r;
					g += color.g;
					b += color.b;

				}

			} else if ( light instanceof THREE.DirectionalLight ) {

				dirCount += 1;

				if ( ! light.visible ) continue;

				_direction.copy( light.matrixWorld.getPosition() );
				_direction.subSelf( light.target.matrixWorld.getPosition() );
				_direction.normalize();

				// skip lights with undefined direction
				// these create troubles in OpenGL (making pixel black)

				if ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;

				dirOffset = dirLength * 3;

				dirPositions[ dirOffset ]     = _direction.x;
				dirPositions[ dirOffset + 1 ] = _direction.y;
				dirPositions[ dirOffset + 2 ] = _direction.z;

				if ( _this.gammaInput ) {

					setColorGamma( dirColors, dirOffset, color, intensity * intensity );

				} else {

					setColorLinear( dirColors, dirOffset, color, intensity );

				}

				dirLength += 1;

			} else if ( light instanceof THREE.PointLight ) {

				pointCount += 1;

				if ( ! light.visible ) continue;

				pointOffset = pointLength * 3;

				if ( _this.gammaInput ) {

					setColorGamma( pointColors, pointOffset, color, intensity * intensity );

				} else {

					setColorLinear( pointColors, pointOffset, color, intensity );

				}

				position = light.matrixWorld.getPosition();

				pointPositions[ pointOffset ]     = position.x;
				pointPositions[ pointOffset + 1 ] = position.y;
				pointPositions[ pointOffset + 2 ] = position.z;

				pointDistances[ pointLength ] = distance;

				pointLength += 1;

			} else if ( light instanceof THREE.SpotLight ) {

				spotCount += 1;

				if ( ! light.visible ) continue;

				spotOffset = spotLength * 3;

				if ( _this.gammaInput ) {

					setColorGamma( spotColors, spotOffset, color, intensity * intensity );

				} else {

					setColorLinear( spotColors, spotOffset, color, intensity );

				}

				position = light.matrixWorld.getPosition();

				spotPositions[ spotOffset ]     = position.x;
				spotPositions[ spotOffset + 1 ] = position.y;
				spotPositions[ spotOffset + 2 ] = position.z;

				spotDistances[ spotLength ] = distance;

				_direction.copy( position );
				_direction.subSelf( light.target.matrixWorld.getPosition() );
				_direction.normalize();

				spotDirections[ spotOffset ]     = _direction.x;
				spotDirections[ spotOffset + 1 ] = _direction.y;
				spotDirections[ spotOffset + 2 ] = _direction.z;

				spotAnglesCos[ spotLength ] = Math.cos( light.angle );
				spotExponents[ spotLength ] = light.exponent;

				spotLength += 1;

			} else if ( light instanceof THREE.HemisphereLight ) {

				hemiCount += 1;

				if ( ! light.visible ) continue;

				_direction.copy( light.matrixWorld.getPosition() );
				_direction.normalize();

				// skip lights with undefined direction
				// these create troubles in OpenGL (making pixel black)

				if ( _direction.x === 0 && _direction.y === 0 && _direction.z === 0 ) continue;

				hemiOffset = hemiLength * 3;

				hemiPositions[ hemiOffset ]     = _direction.x;
				hemiPositions[ hemiOffset + 1 ] = _direction.y;
				hemiPositions[ hemiOffset + 2 ] = _direction.z;

				skyColor = light.color;
				groundColor = light.groundColor;

				if ( _this.gammaInput ) {

					intensitySq = intensity * intensity;

					setColorGamma( hemiSkyColors, hemiOffset, skyColor, intensitySq );
					setColorGamma( hemiGroundColors, hemiOffset, groundColor, intensitySq );

				} else {

					setColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );
					setColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );

				}

				hemiLength += 1;

			}

		}

		// null eventual remains from removed lights
		// (this is to avoid if in shader)

		for ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;
		for ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;
		for ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;
		for ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;
		for ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;

		zlights.directional.length = dirLength;
		zlights.point.length = pointLength;
		zlights.spot.length = spotLength;
		zlights.hemi.length = hemiLength;

		zlights.ambient[ 0 ] = r;
		zlights.ambient[ 1 ] = g;
		zlights.ambient[ 2 ] = b;

	};

	// GL state setting

	this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

		if ( cullFace === THREE.CullFaceNone ) {

			_gl.disable( _gl.CULL_FACE );

		} else {

			if ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {

				_gl.frontFace( _gl.CW );

			} else {

				_gl.frontFace( _gl.CCW );

			}

			if ( cullFace === THREE.CullFaceBack ) {

				_gl.cullFace( _gl.BACK );

			} else if ( cullFace === THREE.CullFaceFront ) {

				_gl.cullFace( _gl.FRONT );

			} else {

				_gl.cullFace( _gl.FRONT_AND_BACK );

			}

			_gl.enable( _gl.CULL_FACE );

		}

	};

	this.setMaterialFaces = function ( material ) {

		var doubleSided = material.side === THREE.DoubleSide;
		var flipSided = material.side === THREE.BackSide;

		if ( _oldDoubleSided !== doubleSided ) {

			if ( doubleSided ) {

				_gl.disable( _gl.CULL_FACE );

			} else {

				_gl.enable( _gl.CULL_FACE );

			}

			_oldDoubleSided = doubleSided;

		}

		if ( _oldFlipSided !== flipSided ) {

			if ( flipSided ) {

				_gl.frontFace( _gl.CW );

			} else {

				_gl.frontFace( _gl.CCW );

			}

			_oldFlipSided = flipSided;

		}

	};

	this.setDepthTest = function ( depthTest ) {

		if ( _oldDepthTest !== depthTest ) {

			if ( depthTest ) {

				_gl.enable( _gl.DEPTH_TEST );

			} else {

				_gl.disable( _gl.DEPTH_TEST );

			}

			_oldDepthTest = depthTest;

		}

	};

	this.setDepthWrite = function ( depthWrite ) {

		if ( _oldDepthWrite !== depthWrite ) {

			_gl.depthMask( depthWrite );
			_oldDepthWrite = depthWrite;

		}

	};

	function setLineWidth ( width ) {

		if ( width !== _oldLineWidth ) {

			_gl.lineWidth( width );

			_oldLineWidth = width;

		}

	};

	function setPolygonOffset ( polygonoffset, factor, units ) {

		if ( _oldPolygonOffset !== polygonoffset ) {

			if ( polygonoffset ) {

				_gl.enable( _gl.POLYGON_OFFSET_FILL );

			} else {

				_gl.disable( _gl.POLYGON_OFFSET_FILL );

			}

			_oldPolygonOffset = polygonoffset;

		}

		if ( polygonoffset && ( _oldPolygonOffsetFactor !== factor || _oldPolygonOffsetUnits !== units ) ) {

			_gl.polygonOffset( factor, units );

			_oldPolygonOffsetFactor = factor;
			_oldPolygonOffsetUnits = units;

		}

	};

	this.setBlending = function ( blending, blendEquation, blendSrc, blendDst ) {

		if ( blending !== _oldBlending ) {

			if ( blending === THREE.NoBlending ) {

				_gl.disable( _gl.BLEND );

			} else if ( blending === THREE.AdditiveBlending ) {

				_gl.enable( _gl.BLEND );
				_gl.blendEquation( _gl.FUNC_ADD );
				_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE );

			} else if ( blending === THREE.SubtractiveBlending ) {

				// TODO: Find blendFuncSeparate() combination
				_gl.enable( _gl.BLEND );
				_gl.blendEquation( _gl.FUNC_ADD );
				_gl.blendFunc( _gl.ZERO, _gl.ONE_MINUS_SRC_COLOR );

			} else if ( blending === THREE.MultiplyBlending ) {

				// TODO: Find blendFuncSeparate() combination
				_gl.enable( _gl.BLEND );
				_gl.blendEquation( _gl.FUNC_ADD );
				_gl.blendFunc( _gl.ZERO, _gl.SRC_COLOR );

			} else if ( blending === THREE.CustomBlending ) {

				_gl.enable( _gl.BLEND );

			} else {

				_gl.enable( _gl.BLEND );
				_gl.blendEquationSeparate( _gl.FUNC_ADD, _gl.FUNC_ADD );
				_gl.blendFuncSeparate( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA );

			}

			_oldBlending = blending;

		}

		if ( blending === THREE.CustomBlending ) {

			if ( blendEquation !== _oldBlendEquation ) {

				_gl.blendEquation( paramThreeToGL( blendEquation ) );

				_oldBlendEquation = blendEquation;

			}

			if ( blendSrc !== _oldBlendSrc || blendDst !== _oldBlendDst ) {

				_gl.blendFunc( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ) );

				_oldBlendSrc = blendSrc;
				_oldBlendDst = blendDst;

			}

		} else {

			_oldBlendEquation = null;
			_oldBlendSrc = null;
			_oldBlendDst = null;

		}

	};

	// Defines

	function generateDefines ( defines ) {

		var value, chunk, chunks = [];

		for ( var d in defines ) {

			value = defines[ d ];
			if ( value === false ) continue;

			chunk = "#define " + d + " " + value;
			chunks.push( chunk );

		}

		return chunks.join( "\n" );

	};

	// Shaders

	function buildProgram ( shaderID, fragmentShader, vertexShader, uniforms, attributes, defines, parameters ) {

		var p, pl, d, program, code;
		var chunks = [];

		// Generate code

		if ( shaderID ) {

			chunks.push( shaderID );

		} else {

			chunks.push( fragmentShader );
			chunks.push( vertexShader );

		}

		for ( d in defines ) {

			chunks.push( d );
			chunks.push( defines[ d ] );

		}

		for ( p in parameters ) {

			chunks.push( p );
			chunks.push( parameters[ p ] );

		}

		code = chunks.join();

		// Check if code has been already compiled

		for ( p = 0, pl = _programs.length; p < pl; p ++ ) {

			var programInfo = _programs[ p ];

			if ( programInfo.code === code ) {

				//console.log( "Code already compiled." /*: \n\n" + code*/ );

				programInfo.usedTimes ++;

				return programInfo.program;

			}

		}

		var shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";

		if ( parameters.shadowMapType === THREE.PCFShadowMap ) {

			shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";

		} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {

			shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";

		}

		//console.log( "building new program " );

		//

		var customDefines = generateDefines( defines );

		//

		program = _gl.createProgram();

		var prefix_vertex = [

			"precision " + _precision + " float;",

			customDefines,

			_supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",

			_this.gammaInput ? "#define GAMMA_INPUT" : "",
			_this.gammaOutput ? "#define GAMMA_OUTPUT" : "",
			_this.physicallyBasedShading ? "#define PHYSICALLY_BASED_SHADING" : "",

			"#define MAX_DIR_LIGHTS " + parameters.maxDirLights,
			"#define MAX_POINT_LIGHTS " + parameters.maxPointLights,
			"#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights,
			"#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights,

			"#define MAX_SHADOWS " + parameters.maxShadows,

			"#define MAX_BONES " + parameters.maxBones,

			parameters.map ? "#define USE_MAP" : "",
			parameters.envMap ? "#define USE_ENVMAP" : "",
			parameters.lightMap ? "#define USE_LIGHTMAP" : "",
			parameters.bumpMap ? "#define USE_BUMPMAP" : "",
			parameters.normalMap ? "#define USE_NORMALMAP" : "",
			parameters.specularMap ? "#define USE_SPECULARMAP" : "",
			parameters.vertexColors ? "#define USE_COLOR" : "",

			parameters.skinning ? "#define USE_SKINNING" : "",
			parameters.useVertexTexture ? "#define BONE_TEXTURE" : "",
			parameters.boneTextureWidth ? "#define N_BONE_PIXEL_X " + parameters.boneTextureWidth.toFixed( 1 ) : "",
			parameters.boneTextureHeight ? "#define N_BONE_PIXEL_Y " + parameters.boneTextureHeight.toFixed( 1 ) : "",

			parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
			parameters.morphNormals ? "#define USE_MORPHNORMALS" : "",
			parameters.perPixel ? "#define PHONG_PER_PIXEL" : "",
			parameters.wrapAround ? "#define WRAP_AROUND" : "",
			parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
			parameters.flipSided ? "#define FLIP_SIDED" : "",

			parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
			parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
			parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
			parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",

			parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",

			"uniform mat4 modelMatrix;",
			"uniform mat4 modelViewMatrix;",
			"uniform mat4 projectionMatrix;",
			"uniform mat4 viewMatrix;",
			"uniform mat3 normalMatrix;",
			"uniform vec3 cameraPosition;",

			"attribute vec3 position;",
			"attribute vec3 normal;",
			"attribute vec2 uv;",
			"attribute vec2 uv2;",

			"#ifdef USE_COLOR",

				"attribute vec3 color;",

			"#endif",

			"#ifdef USE_MORPHTARGETS",

				"attribute vec3 morphTarget0;",
				"attribute vec3 morphTarget1;",
				"attribute vec3 morphTarget2;",
				"attribute vec3 morphTarget3;",

				"#ifdef USE_MORPHNORMALS",

					"attribute vec3 morphNormal0;",
					"attribute vec3 morphNormal1;",
					"attribute vec3 morphNormal2;",
					"attribute vec3 morphNormal3;",

				"#else",

					"attribute vec3 morphTarget4;",
					"attribute vec3 morphTarget5;",
					"attribute vec3 morphTarget6;",
					"attribute vec3 morphTarget7;",

				"#endif",

			"#endif",

			"#ifdef USE_SKINNING",

				"attribute vec4 skinIndex;",
				"attribute vec4 skinWeight;",

			"#endif",

			""

		].join("\n");

		var prefix_fragment = [

			"precision " + _precision + " float;",

			( parameters.bumpMap || parameters.normalMap ) ? "#extension GL_OES_standard_derivatives : enable" : "",

			customDefines,

			"#define MAX_DIR_LIGHTS " + parameters.maxDirLights,
			"#define MAX_POINT_LIGHTS " + parameters.maxPointLights,
			"#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights,
			"#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights,

			"#define MAX_SHADOWS " + parameters.maxShadows,

			parameters.alphaTest ? "#define ALPHATEST " + parameters.alphaTest: "",

			_this.gammaInput ? "#define GAMMA_INPUT" : "",
			_this.gammaOutput ? "#define GAMMA_OUTPUT" : "",
			_this.physicallyBasedShading ? "#define PHYSICALLY_BASED_SHADING" : "",

			( parameters.useFog && parameters.fog ) ? "#define USE_FOG" : "",
			( parameters.useFog && parameters.fogExp ) ? "#define FOG_EXP2" : "",

			parameters.map ? "#define USE_MAP" : "",
			parameters.envMap ? "#define USE_ENVMAP" : "",
			parameters.lightMap ? "#define USE_LIGHTMAP" : "",
			parameters.bumpMap ? "#define USE_BUMPMAP" : "",
			parameters.normalMap ? "#define USE_NORMALMAP" : "",
			parameters.specularMap ? "#define USE_SPECULARMAP" : "",
			parameters.vertexColors ? "#define USE_COLOR" : "",

			parameters.metal ? "#define METAL" : "",
			parameters.perPixel ? "#define PHONG_PER_PIXEL" : "",
			parameters.wrapAround ? "#define WRAP_AROUND" : "",
			parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
			parameters.flipSided ? "#define FLIP_SIDED" : "",

			parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
			parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
			parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
			parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",

			"uniform mat4 viewMatrix;",
			"uniform vec3 cameraPosition;",
			""

		].join("\n");

		var glFragmentShader = getShader( "fragment", prefix_fragment + fragmentShader );
		var glVertexShader = getShader( "vertex", prefix_vertex + vertexShader );

		_gl.attachShader( program, glVertexShader );
		_gl.attachShader( program, glFragmentShader );

		_gl.linkProgram( program );

		if ( !_gl.getProgramParameter( program, _gl.LINK_STATUS ) ) {

			console.error( "Could not initialise shader\n" + "VALIDATE_STATUS: " + _gl.getProgramParameter( program, _gl.VALIDATE_STATUS ) + ", gl error [" + _gl.getError() + "]" );

		}

		// clean up

		_gl.deleteShader( glFragmentShader );
		_gl.deleteShader( glVertexShader );

		//console.log( prefix_fragment + fragmentShader );
		//console.log( prefix_vertex + vertexShader );

		program.uniforms = {};
		program.attributes = {};

		var identifiers, u, a, i;

		// cache uniform locations

		identifiers = [

			'viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition',
			'morphTargetInfluences'

		];

		if ( parameters.useVertexTexture ) {

			identifiers.push( 'boneTexture' );

		} else {

			identifiers.push( 'boneGlobalMatrices' );

		}

		for ( u in uniforms ) {

			identifiers.push( u );

		}

		cacheUniformLocations( program, identifiers );

		// cache attributes locations

		identifiers = [

			"position", "normal", "uv", "uv2", "tangent", "color",
			"skinIndex", "skinWeight", "lineDistance"

		];

		for ( i = 0; i < parameters.maxMorphTargets; i ++ ) {

			identifiers.push( "morphTarget" + i );

		}

		for ( i = 0; i < parameters.maxMorphNormals; i ++ ) {

			identifiers.push( "morphNormal" + i );

		}

		for ( a in attributes ) {

			identifiers.push( a );

		}

		cacheAttributeLocations( program, identifiers );

		program.id = _programs_counter ++;

		_programs.push( { program: program, code: code, usedTimes: 1 } );

		_this.info.memory.programs = _programs.length;

		return program;

	};

	// Shader parameters cache

	function cacheUniformLocations ( program, identifiers ) {

		var i, l, id;

		for( i = 0, l = identifiers.length; i < l; i ++ ) {

			id = identifiers[ i ];
			program.uniforms[ id ] = _gl.getUniformLocation( program, id );

		}

	};

	function cacheAttributeLocations ( program, identifiers ) {

		var i, l, id;

		for( i = 0, l = identifiers.length; i < l; i ++ ) {

			id = identifiers[ i ];
			program.attributes[ id ] = _gl.getAttribLocation( program, id );

		}

	};

	function addLineNumbers ( string ) {

		var chunks = string.split( "\n" );

		for ( var i = 0, il = chunks.length; i < il; i ++ ) {

			// Chrome reports shader errors on lines
			// starting counting from 1

			chunks[ i ] = ( i + 1 ) + ": " + chunks[ i ];

		}

		return chunks.join( "\n" );

	};

	function getShader ( type, string ) {

		var shader;

		if ( type === "fragment" ) {

			shader = _gl.createShader( _gl.FRAGMENT_SHADER );

		} else if ( type === "vertex" ) {

			shader = _gl.createShader( _gl.VERTEX_SHADER );

		}

		_gl.shaderSource( shader, string );
		_gl.compileShader( shader );

		if ( !_gl.getShaderParameter( shader, _gl.COMPILE_STATUS ) ) {

			console.error( _gl.getShaderInfoLog( shader ) );
			console.error( addLineNumbers( string ) );
			return null;

		}

		return shader;

	};

	// Textures


	function isPowerOfTwo ( value ) {

		return ( value & ( value - 1 ) ) === 0;

	};

	function setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {

		if ( isImagePowerOfTwo ) {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

		} else {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

		}

		if ( _glExtensionTextureFilterAnisotropic && texture.type !== THREE.FloatType ) {

			if ( texture.anisotropy > 1 || texture.__oldAnisotropy ) {

				_gl.texParameterf( textureType, _glExtensionTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _maxAnisotropy ) );
				texture.__oldAnisotropy = texture.anisotropy;

			}

		}

	};

	this.setTexture = function ( texture, slot ) {

		if ( texture.needsUpdate ) {

			if ( ! texture.__webglInit ) {

				texture.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

				texture.__webglTexture = _gl.createTexture();

				_this.info.memory.textures ++;

			}

			_gl.activeTexture( _gl.TEXTURE0 + slot );
			_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );

			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

			var image = texture.image,
			isImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),
			glFormat = paramThreeToGL( texture.format ),
			glType = paramThreeToGL( texture.type );

			setTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );

			var mipmap, mipmaps = texture.mipmaps;

			if ( texture instanceof THREE.DataTexture ) {

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isImagePowerOfTwo ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

					}

					texture.generateMipmaps = false;

				} else {

					_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

				}

			} else if ( texture instanceof THREE.CompressedTexture ) {

				// compressed textures can only use manually created mipmaps
				// WebGL can't generate mipmaps for DDS textures

				for( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					_gl.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

				}

			} else { // regular Texture (image, video, canvas)

				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels

				if ( mipmaps.length > 0 && isImagePowerOfTwo ) {

					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

						mipmap = mipmaps[ i ];
						_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

					}

					texture.generateMipmaps = false;

				} else {

					_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );

				}

			}

			if ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );

			texture.needsUpdate = false;

			if ( texture.onUpdate ) texture.onUpdate();

		} else {

			_gl.activeTexture( _gl.TEXTURE0 + slot );
			_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );

		}

	};

	function clampToMaxSize ( image, maxSize ) {

		if ( image.width <= maxSize && image.height <= maxSize ) {

			return image;

		}

		// Warning: Scaling through the canvas will only work with images that use
		// premultiplied alpha.

		var maxDimension = Math.max( image.width, image.height );
		var newWidth = Math.floor( image.width * maxSize / maxDimension );
		var newHeight = Math.floor( image.height * maxSize / maxDimension );

		var canvas = document.createElement( 'canvas' );
		canvas.width = newWidth;
		canvas.height = newHeight;

		var ctx = canvas.getContext( "2d" );
		ctx.drawImage( image, 0, 0, image.width, image.height, 0, 0, newWidth, newHeight );

		return canvas;

	}

	function setCubeTexture ( texture, slot ) {

		if ( texture.image.length === 6 ) {

			if ( texture.needsUpdate ) {

				if ( ! texture.image.__webglTextureCube ) {

					texture.image.__webglTextureCube = _gl.createTexture();

					_this.info.memory.textures ++;

				}

				_gl.activeTexture( _gl.TEXTURE0 + slot );
				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

				var isCompressed = texture instanceof THREE.CompressedTexture;

				var cubeImage = [];

				for ( var i = 0; i < 6; i ++ ) {

					if ( _this.autoScaleCubemaps && ! isCompressed ) {

						cubeImage[ i ] = clampToMaxSize( texture.image[ i ], _maxCubemapSize );

					} else {

						cubeImage[ i ] = texture.image[ i ];

					}

				}

				var image = cubeImage[ 0 ],
				isImagePowerOfTwo = isPowerOfTwo( image.width ) && isPowerOfTwo( image.height ),
				glFormat = paramThreeToGL( texture.format ),
				glType = paramThreeToGL( texture.type );

				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					if ( isCompressed ) {

						var mipmap, mipmaps = cubeImage[ i ].mipmaps;

						for( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

							mipmap = mipmaps[ j ];
							_gl.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

						}

					} else {

						_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

					}

				}

				if ( texture.generateMipmaps && isImagePowerOfTwo ) {

					_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

				}

				texture.needsUpdate = false;

				if ( texture.onUpdate ) texture.onUpdate();

			} else {

				_gl.activeTexture( _gl.TEXTURE0 + slot );
				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );

			}

		}

	};

	function setCubeTextureDynamic ( texture, slot ) {

		_gl.activeTexture( _gl.TEXTURE0 + slot );
		_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.__webglTexture );

	};

	// Render targets

	function setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {

		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
		_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget.__webglTexture, 0 );

	};

	function setupRenderBuffer ( renderbuffer, renderTarget  ) {

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		/* For some reason this is not working. Defaulting to RGBA4.
		} else if( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
		*/
		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

		}

	};

	this.setRenderTarget = function ( renderTarget ) {

		var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );

		if ( renderTarget && ! renderTarget.__webglFramebuffer ) {

			if ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;
			if ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			renderTarget.__webglTexture = _gl.createTexture();

			_this.info.memory.textures ++;

			// Setup texture, create render and frame buffers

			var isTargetPowerOfTwo = isPowerOfTwo( renderTarget.width ) && isPowerOfTwo( renderTarget.height ),
				glFormat = paramThreeToGL( renderTarget.format ),
				glType = paramThreeToGL( renderTarget.type );

			if ( isCube ) {

				renderTarget.__webglFramebuffer = [];
				renderTarget.__webglRenderbuffer = [];

				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget, isTargetPowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					renderTarget.__webglFramebuffer[ i ] = _gl.createFramebuffer();
					renderTarget.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();

					_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );

					setupFrameBuffer( renderTarget.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );
					setupRenderBuffer( renderTarget.__webglRenderbuffer[ i ], renderTarget );

				}

				if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

			} else {

				renderTarget.__webglFramebuffer = _gl.createFramebuffer();

				if ( renderTarget.shareDepthFrom ) {

					renderTarget.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;

				} else {

					renderTarget.__webglRenderbuffer = _gl.createRenderbuffer();

				}

				_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, renderTarget, isTargetPowerOfTwo );

				_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );

				setupFrameBuffer( renderTarget.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );

				if ( renderTarget.shareDepthFrom ) {

					if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );

					} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );

					}

				} else {

					setupRenderBuffer( renderTarget.__webglRenderbuffer, renderTarget );

				}

				if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );

			}

			// Release everything

			if ( isCube ) {

				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

			} else {

				_gl.bindTexture( _gl.TEXTURE_2D, null );

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		var framebuffer, width, height, vx, vy;

		if ( renderTarget ) {

			if ( isCube ) {

				framebuffer = renderTarget.__webglFramebuffer[ renderTarget.activeCubeFace ];

			} else {

				framebuffer = renderTarget.__webglFramebuffer;

			}

			width = renderTarget.width;
			height = renderTarget.height;

			vx = 0;
			vy = 0;

		} else {

			framebuffer = null;

			width = _viewportWidth;
			height = _viewportHeight;

			vx = _viewportX;
			vy = _viewportY;

		}

		if ( framebuffer !== _currentFramebuffer ) {

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.viewport( vx, vy, width, height );

			_currentFramebuffer = framebuffer;

		}

		_currentWidth = width;
		_currentHeight = height;

	};

	function updateRenderTargetMipmap ( renderTarget ) {

		if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

			_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );
			_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
			_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

		} else {

			_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );
			_gl.generateMipmap( _gl.TEXTURE_2D );
			_gl.bindTexture( _gl.TEXTURE_2D, null );

		}

	};

	// Fallback filters for non-power-of-2 textures

	function filterFallback ( f ) {

		if ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {

			return _gl.NEAREST;

		}

		return _gl.LINEAR;

	};

	// Map three.js constants to WebGL constants

	function paramThreeToGL ( p ) {

		if ( p === THREE.RepeatWrapping ) return _gl.REPEAT;
		if ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
		if ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

		if ( p === THREE.NearestFilter ) return _gl.NEAREST;
		if ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
		if ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

		if ( p === THREE.LinearFilter ) return _gl.LINEAR;
		if ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
		if ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

		if ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;
		if ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
		if ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
		if ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

		if ( p === THREE.ByteType ) return _gl.BYTE;
		if ( p === THREE.ShortType ) return _gl.SHORT;
		if ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;
		if ( p === THREE.IntType ) return _gl.INT;
		if ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;
		if ( p === THREE.FloatType ) return _gl.FLOAT;

		if ( p === THREE.AlphaFormat ) return _gl.ALPHA;
		if ( p === THREE.RGBFormat ) return _gl.RGB;
		if ( p === THREE.RGBAFormat ) return _gl.RGBA;
		if ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;
		if ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;

		if ( p === THREE.AddEquation ) return _gl.FUNC_ADD;
		if ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;
		if ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

		if ( p === THREE.ZeroFactor ) return _gl.ZERO;
		if ( p === THREE.OneFactor ) return _gl.ONE;
		if ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;
		if ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
		if ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;
		if ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
		if ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;
		if ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

		if ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;
		if ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
		if ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

		if ( _glExtensionCompressedTextureS3TC !== undefined ) {

			if ( p === THREE.RGB_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGB_S3TC_DXT1_EXT;
			if ( p === THREE.RGBA_S3TC_DXT1_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			if ( p === THREE.RGBA_S3TC_DXT3_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT3_EXT;
			if ( p === THREE.RGBA_S3TC_DXT5_Format ) return _glExtensionCompressedTextureS3TC.COMPRESSED_RGBA_S3TC_DXT5_EXT;

		}

		return 0;

	};

	// Allocations

	function allocateBones ( object ) {

		if ( _supportsBoneTextures && object && object.useVertexTexture ) {

			return 1024;

		} else {

			// default for when object is not specified
			// ( for example when prebuilding shader
			//   to be used with multiple objects )
			//
			// 	- leave some extra space for other uniforms
			//  - limit here is ANGLE's 254 max uniform vectors
			//    (up to 54 should be safe)

			var nVertexUniforms = _gl.getParameter( _gl.MAX_VERTEX_UNIFORM_VECTORS );
			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

			var maxBones = nVertexMatrices;

			if ( object !== undefined && object instanceof THREE.SkinnedMesh ) {

				maxBones = Math.min( object.bones.length, maxBones );

				if ( maxBones < object.bones.length ) {

					console.warn( "WebGLRenderer: too many bones - " + object.bones.length + ", this GPU supports just " + maxBones + " (try OpenGL instead of ANGLE)" );

				}

			}

			return maxBones;

		}

	};

	function allocateLights ( lights ) {

		var l, ll, light, dirLights, pointLights, spotLights, hemiLights;

		dirLights = pointLights = spotLights = hemiLights = 0;

		for ( l = 0, ll = lights.length; l < ll; l ++ ) {

			light = lights[ l ];

			if ( light.onlyShadow ) continue;

			if ( light instanceof THREE.DirectionalLight ) dirLights ++;
			if ( light instanceof THREE.PointLight ) pointLights ++;
			if ( light instanceof THREE.SpotLight ) spotLights ++;
			if ( light instanceof THREE.HemisphereLight ) hemiLights ++;

		}

		return { 'directional' : dirLights, 'point' : pointLights, 'spot': spotLights, 'hemi': hemiLights };

	};

	function allocateShadows ( lights ) {

		var l, ll, light, maxShadows = 0;

		for ( l = 0, ll = lights.length; l < ll; l++ ) {

			light = lights[ l ];

			if ( ! light.castShadow ) continue;

			if ( light instanceof THREE.SpotLight ) maxShadows ++;
			if ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) maxShadows ++;

		}

		return maxShadows;

	};

	// Initialization

	function initGL () {

		try {

			if ( ! ( _gl = _canvas.getContext( 'experimental-webgl', { alpha: _alpha, premultipliedAlpha: _premultipliedAlpha, antialias: _antialias, stencil: _stencil, preserveDrawingBuffer: _preserveDrawingBuffer } ) ) ) {

				throw 'Error creating WebGL context.';

			}

		} catch ( error ) {

			console.error( error );

		}

		_glExtensionTextureFloat = _gl.getExtension( 'OES_texture_float' );
		_glExtensionStandardDerivatives = _gl.getExtension( 'OES_standard_derivatives' );

		_glExtensionTextureFilterAnisotropic = _gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||
											   _gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||
											   _gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );


		_glExtensionCompressedTextureS3TC = _gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||
											_gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||
											_gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );

		if ( ! _glExtensionTextureFloat ) {

			console.log( 'THREE.WebGLRenderer: Float textures not supported.' );

		}

		if ( ! _glExtensionStandardDerivatives ) {

			console.log( 'THREE.WebGLRenderer: Standard derivatives not supported.' );

		}

		if ( ! _glExtensionTextureFilterAnisotropic ) {

			console.log( 'THREE.WebGLRenderer: Anisotropic texture filtering not supported.' );

		}

		if ( ! _glExtensionCompressedTextureS3TC ) {

			console.log( 'THREE.WebGLRenderer: S3TC compressed textures not supported.' );

		}

	};

	function setDefaultGLState () {

		_gl.clearColor( 0, 0, 0, 1 );
		_gl.clearDepth( 1 );
		_gl.clearStencil( 0 );

		_gl.enable( _gl.DEPTH_TEST );
		_gl.depthFunc( _gl.LEQUAL );

		_gl.frontFace( _gl.CCW );
		_gl.cullFace( _gl.BACK );
		_gl.enable( _gl.CULL_FACE );

		_gl.enable( _gl.BLEND );
		_gl.blendEquation( _gl.FUNC_ADD );
		_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA );

		_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

	};

	// default plugins (order is important)

	this.shadowMapPlugin = new THREE.ShadowMapPlugin();
	this.addPrePlugin( this.shadowMapPlugin );

	this.addPostPlugin( new THREE.SpritePlugin() );
	this.addPostPlugin( new THREE.LensFlarePlugin() );

};
/**
 * @author szimek / https://github.com/szimek/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.WebGLRenderTarget = function ( width, height, options ) {

	THREE.EventDispatcher.call( this );

	this.width = width;
	this.height = height;

	options = options || {};

	this.wrapS = options.wrapS !== undefined ? options.wrapS : THREE.ClampToEdgeWrapping;
	this.wrapT = options.wrapT !== undefined ? options.wrapT : THREE.ClampToEdgeWrapping;

	this.magFilter = options.magFilter !== undefined ? options.magFilter : THREE.LinearFilter;
	this.minFilter = options.minFilter !== undefined ? options.minFilter : THREE.LinearMipMapLinearFilter;

	this.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;

	this.offset = new THREE.Vector2( 0, 0 );
	this.repeat = new THREE.Vector2( 1, 1 );

	this.format = options.format !== undefined ? options.format : THREE.RGBAFormat;
	this.type = options.type !== undefined ? options.type : THREE.UnsignedByteType;

	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;

	this.generateMipmaps = true;

	this.shareDepthFrom = null;

};

THREE.WebGLRenderTarget.prototype.clone = function() {

	var tmp = new THREE.WebGLRenderTarget( this.width, this.height );

	tmp.wrapS = this.wrapS;
	tmp.wrapT = this.wrapT;

	tmp.magFilter = this.magFilter;
	tmp.minFilter = this.minFilter;

	tmp.anisotropy = this.anisotropy;

	tmp.offset.copy( this.offset );
	tmp.repeat.copy( this.repeat );

	tmp.format = this.format;
	tmp.type = this.type;

	tmp.depthBuffer = this.depthBuffer;
	tmp.stencilBuffer = this.stencilBuffer;

	tmp.generateMipmaps = this.generateMipmaps;

	tmp.shareDepthFrom = this.shareDepthFrom;

	return tmp;

};

THREE.WebGLRenderTarget.prototype.dispose = function () {

	this.dispatchEvent( { type: 'dispose' } );

};
/**
 * @author alteredq / http://alteredqualia.com
 */

THREE.WebGLRenderTargetCube = function ( width, height, options ) {

	THREE.WebGLRenderTarget.call( this, width, height, options );

	this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5

};

THREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableVertex = function () {

	this.positionWorld = new THREE.Vector3();
	this.positionScreen = new THREE.Vector4();

	this.visible = true;

};

THREE.RenderableVertex.prototype.copy = function ( vertex ) {

	this.positionWorld.copy( vertex.positionWorld );
	this.positionScreen.copy( vertex.positionScreen );

}
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableFace3 = function () {

	this.v1 = new THREE.RenderableVertex();
	this.v2 = new THREE.RenderableVertex();
	this.v3 = new THREE.RenderableVertex();

	this.centroidWorld = new THREE.Vector3();
	this.centroidScreen = new THREE.Vector3();

	this.normalWorld = new THREE.Vector3();
	this.vertexNormalsWorld = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];
	this.vertexNormalsLength = 0;

	this.color = null;
	this.material = null;
	this.uvs = [[]];

	this.z = null;

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableFace4 = function () {

	this.v1 = new THREE.RenderableVertex();
	this.v2 = new THREE.RenderableVertex();
	this.v3 = new THREE.RenderableVertex();
	this.v4 = new THREE.RenderableVertex();

	this.centroidWorld = new THREE.Vector3();
	this.centroidScreen = new THREE.Vector3();

	this.normalWorld = new THREE.Vector3();
	this.vertexNormalsWorld = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];
	this.vertexNormalsLength = 0;

	this.color = null;
	this.material = null;
	this.uvs = [[]];

	this.z = null;

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableObject = function () {

	this.object = null;
	this.z = null;

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableParticle = function () {

	this.object = null;

	this.x = null;
	this.y = null;
	this.z = null;

	this.rotation = null;
	this.scale = new THREE.Vector2();

	this.material = null;

};
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RenderableLine = function () {

	this.z = null;

	this.v1 = new THREE.RenderableVertex();
	this.v2 = new THREE.RenderableVertex();

	this.material = null;

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ColorUtils = {

	adjustHSV : function ( color, h, s, v ) {

		var hsv = THREE.ColorUtils.__hsv;

		color.getHSV( hsv );

		hsv.h = THREE.Math.clamp( hsv.h + h, 0, 1 );
		hsv.s = THREE.Math.clamp( hsv.s + s, 0, 1 );
		hsv.v = THREE.Math.clamp( hsv.v + v, 0, 1 );

		color.setHSV( hsv.h, hsv.s, hsv.v );

	}

};

THREE.ColorUtils.__hsv = { h: 0, s: 0, v: 0 };/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.GeometryUtils = {

	// Merge two geometries or geometry and geometry from object (using object's transform)

	merge: function ( geometry1, object2 /* mesh | geometry */ ) {

		var matrix, matrixRotation,
		vertexOffset = geometry1.vertices.length,
		uvPosition = geometry1.faceVertexUvs[ 0 ].length,
		geometry2 = object2 instanceof THREE.Mesh ? object2.geometry : object2,
		vertices1 = geometry1.vertices,
		vertices2 = geometry2.vertices,
		faces1 = geometry1.faces,
		faces2 = geometry2.faces,
		uvs1 = geometry1.faceVertexUvs[ 0 ],
		uvs2 = geometry2.faceVertexUvs[ 0 ];

		if ( object2 instanceof THREE.Mesh ) {

			object2.matrixAutoUpdate && object2.updateMatrix();

			matrix = object2.matrix;
			matrixRotation = new THREE.Matrix4();
			matrixRotation.extractRotation( matrix, object2.scale );

		}

		// vertices

		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

			var vertex = vertices2[ i ];

			var vertexCopy = vertex.clone();

			if ( matrix ) matrix.multiplyVector3( vertexCopy );

			vertices1.push( vertexCopy );

		}

		// faces

		for ( i = 0, il = faces2.length; i < il; i ++ ) {

			var face = faces2[ i ], faceCopy, normal, color,
			faceVertexNormals = face.vertexNormals,
			faceVertexColors = face.vertexColors;

			if ( face instanceof THREE.Face3 ) {

				faceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );

			} else if ( face instanceof THREE.Face4 ) {

				faceCopy = new THREE.Face4( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset, face.d + vertexOffset );

			}

			faceCopy.normal.copy( face.normal );

			if ( matrixRotation ) matrixRotation.multiplyVector3( faceCopy.normal );

			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

				normal = faceVertexNormals[ j ].clone();

				if ( matrixRotation ) matrixRotation.multiplyVector3( normal );

				faceCopy.vertexNormals.push( normal );

			}

			faceCopy.color.copy( face.color );

			for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

				color = faceVertexColors[ j ];
				faceCopy.vertexColors.push( color.clone() );

			}

			faceCopy.materialIndex = face.materialIndex;

			faceCopy.centroid.copy( face.centroid );
			if ( matrix ) matrix.multiplyVector3( faceCopy.centroid );

			faces1.push( faceCopy );

		}

		// uvs

		for ( i = 0, il = uvs2.length; i < il; i ++ ) {

			var uv = uvs2[ i ], uvCopy = [];

			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

				uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );

			}

			uvs1.push( uvCopy );

		}

	},

	removeMaterials: function ( geometry, materialIndexArray ) {

		var materialIndexMap = {};

		for ( var i = 0, il = materialIndexArray.length; i < il; i ++ ) {

			materialIndexMap[ materialIndexArray[i] ] = true;

		}

		var face, newFaces = [];

		for ( var i = 0, il = geometry.faces.length; i < il; i ++ ) {

			face = geometry.faces[ i ];
			if ( ! ( face.materialIndex in materialIndexMap ) ) newFaces.push( face );

		}

		geometry.faces = newFaces;

	},

	// Get random point in triangle (via barycentric coordinates)
	// 	(uniform distribution)
	// 	http://www.cgafaq.info/wiki/Random_Point_In_Triangle

	randomPointInTriangle: function ( vectorA, vectorB, vectorC ) {

		var a, b, c,
			point = new THREE.Vector3(),
			tmp = THREE.GeometryUtils.__v1;

		a = THREE.GeometryUtils.random();
		b = THREE.GeometryUtils.random();

		if ( ( a + b ) > 1 ) {

			a = 1 - a;
			b = 1 - b;

		}

		c = 1 - a - b;

		point.copy( vectorA );
		point.multiplyScalar( a );

		tmp.copy( vectorB );
		tmp.multiplyScalar( b );

		point.addSelf( tmp );

		tmp.copy( vectorC );
		tmp.multiplyScalar( c );

		point.addSelf( tmp );

		return point;

	},

	// Get random point in face (triangle / quad)
	// (uniform distribution)

	randomPointInFace: function ( face, geometry, useCachedAreas ) {

		var vA, vB, vC, vD;

		if ( face instanceof THREE.Face3 ) {

			vA = geometry.vertices[ face.a ];
			vB = geometry.vertices[ face.b ];
			vC = geometry.vertices[ face.c ];

			return THREE.GeometryUtils.randomPointInTriangle( vA, vB, vC );

		} else if ( face instanceof THREE.Face4 ) {

			vA = geometry.vertices[ face.a ];
			vB = geometry.vertices[ face.b ];
			vC = geometry.vertices[ face.c ];
			vD = geometry.vertices[ face.d ];

			var area1, area2;

			if ( useCachedAreas ) {

				if ( face._area1 && face._area2 ) {

					area1 = face._area1;
					area2 = face._area2;

				} else {

					area1 = THREE.GeometryUtils.triangleArea( vA, vB, vD );
					area2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );

					face._area1 = area1;
					face._area2 = area2;

				}

			} else {

				area1 = THREE.GeometryUtils.triangleArea( vA, vB, vD ),
				area2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );

			}

			var r = THREE.GeometryUtils.random() * ( area1 + area2 );

			if ( r < area1 ) {

				return THREE.GeometryUtils.randomPointInTriangle( vA, vB, vD );

			} else {

				return THREE.GeometryUtils.randomPointInTriangle( vB, vC, vD );

			}

		}

	},

	// Get uniformly distributed random points in mesh
	// 	- create array with cumulative sums of face areas
	//  - pick random number from 0 to total area
	//  - find corresponding place in area array by binary search
	//	- get random point in face

	randomPointsInGeometry: function ( geometry, n ) {

		var face, i,
			faces = geometry.faces,
			vertices = geometry.vertices,
			il = faces.length,
			totalArea = 0,
			cumulativeAreas = [],
			vA, vB, vC, vD;

		// precompute face areas

		for ( i = 0; i < il; i ++ ) {

			face = faces[ i ];

			if ( face instanceof THREE.Face3 ) {

				vA = vertices[ face.a ];
				vB = vertices[ face.b ];
				vC = vertices[ face.c ];

				face._area = THREE.GeometryUtils.triangleArea( vA, vB, vC );

			} else if ( face instanceof THREE.Face4 ) {

				vA = vertices[ face.a ];
				vB = vertices[ face.b ];
				vC = vertices[ face.c ];
				vD = vertices[ face.d ];

				face._area1 = THREE.GeometryUtils.triangleArea( vA, vB, vD );
				face._area2 = THREE.GeometryUtils.triangleArea( vB, vC, vD );

				face._area = face._area1 + face._area2;

			}

			totalArea += face._area;

			cumulativeAreas[ i ] = totalArea;

		}

		// binary search cumulative areas array

		function binarySearchIndices( value ) {

			function binarySearch( start, end ) {

				// return closest larger index
				// if exact number is not found

				if ( end < start )
					return start;

				var mid = start + Math.floor( ( end - start ) / 2 );

				if ( cumulativeAreas[ mid ] > value ) {

					return binarySearch( start, mid - 1 );

				} else if ( cumulativeAreas[ mid ] < value ) {

					return binarySearch( mid + 1, end );

				} else {

					return mid;

				}

			}

			var result = binarySearch( 0, cumulativeAreas.length - 1 )
			return result;

		}

		// pick random face weighted by face area

		var r, index,
			result = [];

		var stats = {};

		for ( i = 0; i < n; i ++ ) {

			r = THREE.GeometryUtils.random() * totalArea;

			index = binarySearchIndices( r );

			result[ i ] = THREE.GeometryUtils.randomPointInFace( faces[ index ], geometry, true );

			if ( ! stats[ index ] ) {

				stats[ index ] = 1;

			} else {

				stats[ index ] += 1;

			}

		}

		return result;

	},

	// Get triangle area (half of parallelogram)
	//	http://mathworld.wolfram.com/TriangleArea.html

	triangleArea: function ( vectorA, vectorB, vectorC ) {

		var tmp1 = THREE.GeometryUtils.__v1,
			tmp2 = THREE.GeometryUtils.__v2;

		tmp1.sub( vectorB, vectorA );
		tmp2.sub( vectorC, vectorA );
		tmp1.crossSelf( tmp2 );

		return 0.5 * tmp1.length();

	},

	// Center geometry so that 0,0,0 is in center of bounding box

	center: function ( geometry ) {

		geometry.computeBoundingBox();

		var bb = geometry.boundingBox;

		var offset = new THREE.Vector3();

		offset.add( bb.min, bb.max );
		offset.multiplyScalar( -0.5 );

		geometry.applyMatrix( new THREE.Matrix4().makeTranslation( offset ) );
		geometry.computeBoundingBox();

		return offset;

	},

	// Normalize UVs to be from <0,1>
	// (for now just the first set of UVs)

	normalizeUVs: function ( geometry ) {

		var uvSet = geometry.faceVertexUvs[ 0 ];

		for ( var i = 0, il = uvSet.length; i < il; i ++ ) {

			var uvs = uvSet[ i ];

			for ( var j = 0, jl = uvs.length; j < jl; j ++ ) {

				// texture repeat

				if( uvs[ j ].x !== 1.0 ) uvs[ j ].x = uvs[ j ].x - Math.floor( uvs[ j ].x );
				if( uvs[ j ].y !== 1.0 ) uvs[ j ].y = uvs[ j ].y - Math.floor( uvs[ j ].y );

			}

		}

	},

	triangulateQuads: function ( geometry ) {

		var i, il, j, jl;

		var faces = [];
		var faceUvs = [];
		var faceVertexUvs = [];

		for ( i = 0, il = geometry.faceUvs.length; i < il; i ++ ) {

			faceUvs[ i ] = [];

		}

		for ( i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {

			faceVertexUvs[ i ] = [];

		}

		for ( i = 0, il = geometry.faces.length; i < il; i ++ ) {

			var face = geometry.faces[ i ];

			if ( face instanceof THREE.Face4 ) {

				var a = face.a;
				var b = face.b;
				var c = face.c;
				var d = face.d;

				var triA = new THREE.Face3();
				var triB = new THREE.Face3();

				triA.color.copy( face.color );
				triB.color.copy( face.color );

				triA.materialIndex = face.materialIndex;
				triB.materialIndex = face.materialIndex;

				triA.a = a;
				triA.b = b;
				triA.c = d;

				triB.a = b;
				triB.b = c;
				triB.c = d;

				if ( face.vertexColors.length === 4 ) {

					triA.vertexColors[ 0 ] = face.vertexColors[ 0 ].clone();
					triA.vertexColors[ 1 ] = face.vertexColors[ 1 ].clone();
					triA.vertexColors[ 2 ] = face.vertexColors[ 3 ].clone();

					triB.vertexColors[ 0 ] = face.vertexColors[ 1 ].clone();
					triB.vertexColors[ 1 ] = face.vertexColors[ 2 ].clone();
					triB.vertexColors[ 2 ] = face.vertexColors[ 3 ].clone();

				}

				faces.push( triA, triB );

				for ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {

					if ( geometry.faceVertexUvs[ j ].length ) {

						var uvs = geometry.faceVertexUvs[ j ][ i ];

						var uvA = uvs[ 0 ];
						var uvB = uvs[ 1 ];
						var uvC = uvs[ 2 ];
						var uvD = uvs[ 3 ];

						var uvsTriA = [ uvA.clone(), uvB.clone(), uvD.clone() ];
						var uvsTriB = [ uvB.clone(), uvC.clone(), uvD.clone() ];

						faceVertexUvs[ j ].push( uvsTriA, uvsTriB );

					}

				}

				for ( j = 0, jl = geometry.faceUvs.length; j < jl; j ++ ) {

					if ( geometry.faceUvs[ j ].length ) {

						var faceUv = geometry.faceUvs[ j ][ i ];

						faceUvs[ j ].push( faceUv, faceUv );

					}

				}

			} else {

				faces.push( face );

				for ( j = 0, jl = geometry.faceUvs.length; j < jl; j ++ ) {

					faceUvs[ j ].push( geometry.faceUvs[ j ][ i ] );

				}

				for ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {

					faceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );

				}

			}

		}

		geometry.faces = faces;
		geometry.faceUvs = faceUvs;
		geometry.faceVertexUvs = faceVertexUvs;

		geometry.computeCentroids();
		geometry.computeFaceNormals();
		geometry.computeVertexNormals();

		if ( geometry.hasTangents ) geometry.computeTangents();

	},

	// Make all faces use unique vertices
	// so that each face can be separated from others

	explode: function( geometry ) {

		var vertices = [];

		for ( var i = 0, il = geometry.faces.length; i < il; i ++ ) {

			var n = vertices.length;

			var face = geometry.faces[ i ];

			if ( face instanceof THREE.Face4 ) {

				var a = face.a;
				var b = face.b;
				var c = face.c;
				var d = face.d;

				var va = geometry.vertices[ a ];
				var vb = geometry.vertices[ b ];
				var vc = geometry.vertices[ c ];
				var vd = geometry.vertices[ d ];

				vertices.push( va.clone() );
				vertices.push( vb.clone() );
				vertices.push( vc.clone() );
				vertices.push( vd.clone() );

				face.a = n;
				face.b = n + 1;
				face.c = n + 2;
				face.d = n + 3;

			} else {

				var a = face.a;
				var b = face.b;
				var c = face.c;

				var va = geometry.vertices[ a ];
				var vb = geometry.vertices[ b ];
				var vc = geometry.vertices[ c ];

				vertices.push( va.clone() );
				vertices.push( vb.clone() );
				vertices.push( vc.clone() );

				face.a = n;
				face.b = n + 1;
				face.c = n + 2;

			}

		}

		geometry.vertices = vertices;
		delete geometry.__tmpVertices;

	},

	// Break faces with edges longer than maxEdgeLength
	// - not recursive

	tessellate: function ( geometry, maxEdgeLength ) {

		var i, il, face,
		a, b, c, d,
		va, vb, vc, vd,
		dab, dbc, dac, dcd, dad,
		m, m1, m2,
		vm, vm1, vm2,
		vnm, vnm1, vnm2,
		vcm, vcm1, vcm2,
		triA, triB,
		quadA, quadB,
		edge;

		var faces = [];
		var faceVertexUvs = [];

		for ( i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {

			faceVertexUvs[ i ] = [];

		}

		for ( i = 0, il = geometry.faces.length; i < il; i ++ ) {

			face = geometry.faces[ i ];

			if ( face instanceof THREE.Face3 ) {

				a = face.a;
				b = face.b;
				c = face.c;

				va = geometry.vertices[ a ];
				vb = geometry.vertices[ b ];
				vc = geometry.vertices[ c ];

				dab = va.distanceTo( vb );
				dbc = vb.distanceTo( vc );
				dac = va.distanceTo( vc );

				if ( dab > maxEdgeLength || dbc > maxEdgeLength || dac > maxEdgeLength ) {

					m = geometry.vertices.length;

					triA = face.clone();
					triB = face.clone();

					if ( dab >= dbc && dab >= dac ) {

						vm = va.clone();
						vm.lerpSelf( vb, 0.5 );

						triA.a = a;
						triA.b = m;
						triA.c = c;

						triB.a = m;
						triB.b = b;
						triB.c = c;

						if ( face.vertexNormals.length === 3 ) {

							vnm = face.vertexNormals[ 0 ].clone();
							vnm.lerpSelf( face.vertexNormals[ 1 ], 0.5 );

							triA.vertexNormals[ 1 ].copy( vnm );
							triB.vertexNormals[ 0 ].copy( vnm );

						}

						if ( face.vertexColors.length === 3 ) {

							vcm = face.vertexColors[ 0 ].clone();
							vcm.lerpSelf( face.vertexColors[ 1 ], 0.5 );

							triA.vertexColors[ 1 ].copy( vcm );
							triB.vertexColors[ 0 ].copy( vcm );

						}

						edge = 0;

					} else if ( dbc >= dab && dbc >= dac ) {

						vm = vb.clone();
						vm.lerpSelf( vc, 0.5 );

						triA.a = a;
						triA.b = b;
						triA.c = m;

						triB.a = m;
						triB.b = c;
						triB.c = a;

						if ( face.vertexNormals.length === 3 ) {

							vnm = face.vertexNormals[ 1 ].clone();
							vnm.lerpSelf( face.vertexNormals[ 2 ], 0.5 );

							triA.vertexNormals[ 2 ].copy( vnm );

							triB.vertexNormals[ 0 ].copy( vnm );
							triB.vertexNormals[ 1 ].copy( face.vertexNormals[ 2 ] );
							triB.vertexNormals[ 2 ].copy( face.vertexNormals[ 0 ] );

						}

						if ( face.vertexColors.length === 3 ) {

							vcm = face.vertexColors[ 1 ].clone();
							vcm.lerpSelf( face.vertexColors[ 2 ], 0.5 );

							triA.vertexColors[ 2 ].copy( vcm );

							triB.vertexColors[ 0 ].copy( vcm );
							triB.vertexColors[ 1 ].copy( face.vertexColors[ 2 ] );
							triB.vertexColors[ 2 ].copy( face.vertexColors[ 0 ] );

						}

						edge = 1;

					} else {

						vm = va.clone();
						vm.lerpSelf( vc, 0.5 );

						triA.a = a;
						triA.b = b;
						triA.c = m;

						triB.a = m;
						triB.b = b;
						triB.c = c;

						if ( face.vertexNormals.length === 3 ) {

							vnm = face.vertexNormals[ 0 ].clone();
							vnm.lerpSelf( face.vertexNormals[ 2 ], 0.5 );

							triA.vertexNormals[ 2 ].copy( vnm );
							triB.vertexNormals[ 0 ].copy( vnm );

						}

						if ( face.vertexColors.length === 3 ) {

							vcm = face.vertexColors[ 0 ].clone();
							vcm.lerpSelf( face.vertexColors[ 2 ], 0.5 );

							triA.vertexColors[ 2 ].copy( vcm );
							triB.vertexColors[ 0 ].copy( vcm );

						}

						edge = 2;

					}

					faces.push( triA, triB );
					geometry.vertices.push( vm );

					var j, jl, uvs, uvA, uvB, uvC, uvM, uvsTriA, uvsTriB;

					for ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {

						if ( geometry.faceVertexUvs[ j ].length ) {

							uvs = geometry.faceVertexUvs[ j ][ i ];

							uvA = uvs[ 0 ];
							uvB = uvs[ 1 ];
							uvC = uvs[ 2 ];

							// AB

							if ( edge === 0 ) {

								uvM = uvA.clone();
								uvM.lerpSelf( uvB, 0.5 );

								uvsTriA = [ uvA.clone(), uvM.clone(), uvC.clone() ];
								uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];

							// BC

							} else if ( edge === 1 ) {

								uvM = uvB.clone();
								uvM.lerpSelf( uvC, 0.5 );

								uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];
								uvsTriB = [ uvM.clone(), uvC.clone(), uvA.clone() ];

							// AC

							} else {

								uvM = uvA.clone();
								uvM.lerpSelf( uvC, 0.5 );

								uvsTriA = [ uvA.clone(), uvB.clone(), uvM.clone() ];
								uvsTriB = [ uvM.clone(), uvB.clone(), uvC.clone() ];

							}

							faceVertexUvs[ j ].push( uvsTriA, uvsTriB );

						}

					}

				} else {

					faces.push( face );

					for ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {

						faceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );

					}

				}

			} else {

				a = face.a;
				b = face.b;
				c = face.c;
				d = face.d;

				va = geometry.vertices[ a ];
				vb = geometry.vertices[ b ];
				vc = geometry.vertices[ c ];
				vd = geometry.vertices[ d ];

				dab = va.distanceTo( vb );
				dbc = vb.distanceTo( vc );
				dcd = vc.distanceTo( vd );
				dad = va.distanceTo( vd );

				if ( dab > maxEdgeLength || dbc > maxEdgeLength || dcd > maxEdgeLength || dad > maxEdgeLength ) {

					m1 = geometry.vertices.length;
					m2 = geometry.vertices.length + 1;

					quadA = face.clone();
					quadB = face.clone();

					if ( ( dab >= dbc && dab >= dcd && dab >= dad ) || ( dcd >= dbc && dcd >= dab && dcd >= dad ) ) {

						vm1 = va.clone();
						vm1.lerpSelf( vb, 0.5 );

						vm2 = vc.clone();
						vm2.lerpSelf( vd, 0.5 );

						quadA.a = a;
						quadA.b = m1;
						quadA.c = m2;
						quadA.d = d;

						quadB.a = m1;
						quadB.b = b;
						quadB.c = c;
						quadB.d = m2;

						if ( face.vertexNormals.length === 4 ) {

							vnm1 = face.vertexNormals[ 0 ].clone();
							vnm1.lerpSelf( face.vertexNormals[ 1 ], 0.5 );

							vnm2 = face.vertexNormals[ 2 ].clone();
							vnm2.lerpSelf( face.vertexNormals[ 3 ], 0.5 );

							quadA.vertexNormals[ 1 ].copy( vnm1 );
							quadA.vertexNormals[ 2 ].copy( vnm2 );

							quadB.vertexNormals[ 0 ].copy( vnm1 );
							quadB.vertexNormals[ 3 ].copy( vnm2 );

						}

						if ( face.vertexColors.length === 4 ) {

							vcm1 = face.vertexColors[ 0 ].clone();
							vcm1.lerpSelf( face.vertexColors[ 1 ], 0.5 );

							vcm2 = face.vertexColors[ 2 ].clone();
							vcm2.lerpSelf( face.vertexColors[ 3 ], 0.5 );

							quadA.vertexColors[ 1 ].copy( vcm1 );
							quadA.vertexColors[ 2 ].copy( vcm2 );

							quadB.vertexColors[ 0 ].copy( vcm1 );
							quadB.vertexColors[ 3 ].copy( vcm2 );

						}

						edge = 0;

					} else {

						vm1 = vb.clone();
						vm1.lerpSelf( vc, 0.5 );

						vm2 = vd.clone();
						vm2.lerpSelf( va, 0.5 );

						quadA.a = a;
						quadA.b = b;
						quadA.c = m1;
						quadA.d = m2;

						quadB.a = m2;
						quadB.b = m1;
						quadB.c = c;
						quadB.d = d;

						if ( face.vertexNormals.length === 4 ) {

							vnm1 = face.vertexNormals[ 1 ].clone();
							vnm1.lerpSelf( face.vertexNormals[ 2 ], 0.5 );

							vnm2 = face.vertexNormals[ 3 ].clone();
							vnm2.lerpSelf( face.vertexNormals[ 0 ], 0.5 );

							quadA.vertexNormals[ 2 ].copy( vnm1 );
							quadA.vertexNormals[ 3 ].copy( vnm2 );

							quadB.vertexNormals[ 0 ].copy( vnm2 );
							quadB.vertexNormals[ 1 ].copy( vnm1 );

						}

						if ( face.vertexColors.length === 4 ) {

							vcm1 = face.vertexColors[ 1 ].clone();
							vcm1.lerpSelf( face.vertexColors[ 2 ], 0.5 );

							vcm2 = face.vertexColors[ 3 ].clone();
							vcm2.lerpSelf( face.vertexColors[ 0 ], 0.5 );

							quadA.vertexColors[ 2 ].copy( vcm1 );
							quadA.vertexColors[ 3 ].copy( vcm2 );

							quadB.vertexColors[ 0 ].copy( vcm2 );
							quadB.vertexColors[ 1 ].copy( vcm1 );

						}

						edge = 1;

					}

					faces.push( quadA, quadB );
					geometry.vertices.push( vm1, vm2 );

					var j, jl, uvs, uvA, uvB, uvC, uvD, uvM1, uvM2, uvsQuadA, uvsQuadB;

					for ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {

						if ( geometry.faceVertexUvs[ j ].length ) {

							uvs = geometry.faceVertexUvs[ j ][ i ];

							uvA = uvs[ 0 ];
							uvB = uvs[ 1 ];
							uvC = uvs[ 2 ];
							uvD = uvs[ 3 ];

							// AB + CD

							if ( edge === 0 ) {

								uvM1 = uvA.clone();
								uvM1.lerpSelf( uvB, 0.5 );

								uvM2 = uvC.clone();
								uvM2.lerpSelf( uvD, 0.5 );

								uvsQuadA = [ uvA.clone(), uvM1.clone(), uvM2.clone(), uvD.clone() ];
								uvsQuadB = [ uvM1.clone(), uvB.clone(), uvC.clone(), uvM2.clone() ];

							// BC + AD

							} else {

								uvM1 = uvB.clone();
								uvM1.lerpSelf( uvC, 0.5 );

								uvM2 = uvD.clone();
								uvM2.lerpSelf( uvA, 0.5 );

								uvsQuadA = [ uvA.clone(), uvB.clone(), uvM1.clone(), uvM2.clone() ];
								uvsQuadB = [ uvM2.clone(), uvM1.clone(), uvC.clone(), uvD.clone() ];

							}

							faceVertexUvs[ j ].push( uvsQuadA, uvsQuadB );

						}

					}

				} else {

					faces.push( face );

					for ( j = 0, jl = geometry.faceVertexUvs.length; j < jl; j ++ ) {

						faceVertexUvs[ j ].push( geometry.faceVertexUvs[ j ][ i ] );

					}

				}

			}

		}

		geometry.faces = faces;
		geometry.faceVertexUvs = faceVertexUvs;

	},
	
	setMaterialIndex: function ( geometry, index, startFace, endFace ){
		
		var faces = geometry.faces;
		var start = startFace || 0;
		var end = endFace || faces.length - 1;
		
		for ( var i = start; i <= end; i ++ ) {
		
			faces[i].materialIndex = index;

		}
		
    }

};

THREE.GeometryUtils.random = THREE.Math.random16;

THREE.GeometryUtils.__v1 = new THREE.Vector3();
THREE.GeometryUtils.__v2 = new THREE.Vector3();
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ImageUtils = {

	crossOrigin: 'anonymous',

	loadTexture: function ( url, mapping, onLoad, onError ) {

		var image = new Image();
		var texture = new THREE.Texture( image, mapping );

		var loader = new THREE.ImageLoader();

		loader.addEventListener( 'load', function ( event ) {

			texture.image = event.content;
			texture.needsUpdate = true;

			if ( onLoad ) onLoad( texture );

		} );

		loader.addEventListener( 'error', function ( event ) {

			if ( onError ) onError( event.message );

		} );

		loader.crossOrigin = this.crossOrigin;
		loader.load( url, image );

		texture.sourceFile = url;

		return texture;

	},

	loadCompressedTexture: function ( url, mapping, onLoad, onError ) {

		var texture = new THREE.CompressedTexture();
		texture.mapping = mapping;

		var request = new XMLHttpRequest();

		request.onload = function () {

			var buffer = request.response;
			var dds = THREE.ImageUtils.parseDDS( buffer, true );

			texture.format = dds.format;

			texture.mipmaps = dds.mipmaps;
			texture.image.width = dds.width;
			texture.image.height = dds.height;

			// gl.generateMipmap fails for compressed textures
			// mipmaps must be embedded in the DDS file
			// or texture filters must not use mipmapping

			texture.generateMipmaps = false;

			texture.needsUpdate = true;

			if ( onLoad ) onLoad( texture );

		}

		request.onerror = onError;

		request.open( 'GET', url, true );
		request.responseType = "arraybuffer";
		request.send( null );

		return texture;

	},

	loadTextureCube: function ( array, mapping, onLoad, onError ) {

		var images = [];
		images.loadCount = 0;

		var texture = new THREE.Texture();
		texture.image = images;
		if ( mapping !== undefined ) texture.mapping = mapping;

		// no flipping needed for cube textures

		texture.flipY = false;

		for ( var i = 0, il = array.length; i < il; ++ i ) {

			var cubeImage = new Image();
			images[ i ] = cubeImage;

			cubeImage.onload = function () {

				images.loadCount += 1;

				if ( images.loadCount === 6 ) {

					texture.needsUpdate = true;
					if ( onLoad ) onLoad( texture );

				}

			};

			cubeImage.onerror = onError;

			cubeImage.crossOrigin = this.crossOrigin;
			cubeImage.src = array[ i ];

		}

		return texture;

	},

	loadCompressedTextureCube: function ( array, mapping, onLoad, onError ) {

		var images = [];
		images.loadCount = 0;

		var texture = new THREE.CompressedTexture();
		texture.image = images;
		if ( mapping !== undefined ) texture.mapping = mapping;

		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )

		texture.flipY = false;

		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files

		texture.generateMipmaps = false;

		var generateCubeFaceCallback = function ( rq, img ) {

			return function () {

				var buffer = rq.response;
				var dds = THREE.ImageUtils.parseDDS( buffer, true );

				img.format = dds.format;

				img.mipmaps = dds.mipmaps;
				img.width = dds.width;
				img.height = dds.height;

				images.loadCount += 1;

				if ( images.loadCount === 6 ) {

					texture.format = dds.format;
					texture.needsUpdate = true;
					if ( onLoad ) onLoad( texture );

				}

			}

		}

		// compressed cubemap textures as 6 separate DDS files

		if ( array instanceof Array ) {

			for ( var i = 0, il = array.length; i < il; ++ i ) {

				var cubeImage = {};
				images[ i ] = cubeImage;

				var request = new XMLHttpRequest();

				request.onload = generateCubeFaceCallback( request, cubeImage );
				request.onerror = onError;

				var url = array[ i ];

				request.open( 'GET', url, true );
				request.responseType = "arraybuffer";
				request.send( null );

			}

		// compressed cubemap texture stored in a single DDS file

		} else {

			var url = array;
			var request = new XMLHttpRequest();

			request.onload = function( ) {

				var buffer = request.response;
				var dds = THREE.ImageUtils.parseDDS( buffer, true );

				if ( dds.isCubemap ) {

					var faces = dds.mipmaps.length / dds.mipmapCount;

					for ( var f = 0; f < faces; f ++ ) {

						images[ f ] = { mipmaps : [] };

						for ( var i = 0; i < dds.mipmapCount; i ++ ) {

							images[ f ].mipmaps.push( dds.mipmaps[ f * dds.mipmapCount + i ] );
							images[ f ].format = dds.format;
							images[ f ].width = dds.width;
							images[ f ].height = dds.height;

						}

					}

					texture.format = dds.format;
					texture.needsUpdate = true;
					if ( onLoad ) onLoad( texture );

				}

			}

			request.onerror = onError;

			request.open( 'GET', url, true );
			request.responseType = "arraybuffer";
			request.send( null );

		}

		return texture;

	},

	parseDDS: function ( buffer, loadMipmaps ) {

		var dds = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 };

		// Adapted from @toji's DDS utils
		//	https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js

		// All values and structures referenced from:
		// http://msdn.microsoft.com/en-us/library/bb943991.aspx/

		var DDS_MAGIC = 0x20534444;

		var DDSD_CAPS = 0x1,
			DDSD_HEIGHT = 0x2,
			DDSD_WIDTH = 0x4,
			DDSD_PITCH = 0x8,
			DDSD_PIXELFORMAT = 0x1000,
			DDSD_MIPMAPCOUNT = 0x20000,
			DDSD_LINEARSIZE = 0x80000,
			DDSD_DEPTH = 0x800000;

		var DDSCAPS_COMPLEX = 0x8,
			DDSCAPS_MIPMAP = 0x400000,
			DDSCAPS_TEXTURE = 0x1000;

		var DDSCAPS2_CUBEMAP = 0x200,
			DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,
			DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,
			DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,
			DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,
			DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,
			DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,
			DDSCAPS2_VOLUME = 0x200000;

		var DDPF_ALPHAPIXELS = 0x1,
			DDPF_ALPHA = 0x2,
			DDPF_FOURCC = 0x4,
			DDPF_RGB = 0x40,
			DDPF_YUV = 0x200,
			DDPF_LUMINANCE = 0x20000;

		function fourCCToInt32( value ) {

			return value.charCodeAt(0) +
				(value.charCodeAt(1) << 8) +
				(value.charCodeAt(2) << 16) +
				(value.charCodeAt(3) << 24);

		}

		function int32ToFourCC( value ) {

			return String.fromCharCode(
				value & 0xff,
				(value >> 8) & 0xff,
				(value >> 16) & 0xff,
				(value >> 24) & 0xff
			);
		}

		var FOURCC_DXT1 = fourCCToInt32("DXT1");
		var FOURCC_DXT3 = fourCCToInt32("DXT3");
		var FOURCC_DXT5 = fourCCToInt32("DXT5");

		var headerLengthInt = 31; // The header length in 32 bit ints

		// Offsets into the header array

		var off_magic = 0;

		var off_size = 1;
		var off_flags = 2;
		var off_height = 3;
		var off_width = 4;

		var off_mipmapCount = 7;

		var off_pfFlags = 20;
		var off_pfFourCC = 21;

		var off_caps = 27;
		var off_caps2 = 28;
		var off_caps3 = 29;
		var off_caps4 = 30;

		// Parse header

		var header = new Int32Array( buffer, 0, headerLengthInt );

		if ( header[ off_magic ] !== DDS_MAGIC ) {

			console.error( "ImageUtils.parseDDS(): Invalid magic number in DDS header" );
			return dds;

		}

		if ( ! header[ off_pfFlags ] & DDPF_FOURCC ) {

			console.error( "ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code" );
			return dds;

		}

		var blockBytes;

		var fourCC = header[ off_pfFourCC ];

		switch ( fourCC ) {

			case FOURCC_DXT1:

				blockBytes = 8;
				dds.format = THREE.RGB_S3TC_DXT1_Format;
				break;

			case FOURCC_DXT3:

				blockBytes = 16;
				dds.format = THREE.RGBA_S3TC_DXT3_Format;
				break;

			case FOURCC_DXT5:

				blockBytes = 16;
				dds.format = THREE.RGBA_S3TC_DXT5_Format;
				break;

			default:

				console.error( "ImageUtils.parseDDS(): Unsupported FourCC code: ", int32ToFourCC( fourCC ) );
				return dds;

		}

		dds.mipmapCount = 1;

		if ( header[ off_flags ] & DDSD_MIPMAPCOUNT && loadMipmaps !== false ) {

			dds.mipmapCount = Math.max( 1, header[ off_mipmapCount ] );

		}

		//TODO: Verify that all faces of the cubemap are present with DDSCAPS2_CUBEMAP_POSITIVEX, etc.

		dds.isCubemap = header[ off_caps2 ] & DDSCAPS2_CUBEMAP ? true : false;

		dds.width = header[ off_width ];
		dds.height = header[ off_height ];

		var dataOffset = header[ off_size ] + 4;

		// Extract mipmaps buffers

		var width = dds.width;
		var height = dds.height;

		var faces = dds.isCubemap ? 6 : 1;

		for ( var face = 0; face < faces; face ++ ) {

			for ( var i = 0; i < dds.mipmapCount; i ++ ) {

				var dataLength = Math.max( 4, width ) / 4 * Math.max( 4, height ) / 4 * blockBytes;
				var byteArray = new Uint8Array( buffer, dataOffset, dataLength );

				var mipmap = { "data": byteArray, "width": width, "height": height };
				dds.mipmaps.push( mipmap );

				dataOffset += dataLength;

				width = Math.max( width * 0.5, 1 );
				height = Math.max( height * 0.5, 1 );

			}

			width = dds.width;
			height = dds.height;

		}

		return dds;

	},

	getNormalMap: function ( image, depth ) {

		// Adapted from http://www.paulbrunt.co.uk/lab/heightnormal/

		var cross = function ( a, b ) {

			return [ a[ 1 ] * b[ 2 ] - a[ 2 ] * b[ 1 ], a[ 2 ] * b[ 0 ] - a[ 0 ] * b[ 2 ], a[ 0 ] * b[ 1 ] - a[ 1 ] * b[ 0 ] ];

		}

		var subtract = function ( a, b ) {

			return [ a[ 0 ] - b[ 0 ], a[ 1 ] - b[ 1 ], a[ 2 ] - b[ 2 ] ];

		}

		var normalize = function ( a ) {

			var l = Math.sqrt( a[ 0 ] * a[ 0 ] + a[ 1 ] * a[ 1 ] + a[ 2 ] * a[ 2 ] );
			return [ a[ 0 ] / l, a[ 1 ] / l, a[ 2 ] / l ];

		}

		depth = depth | 1;

		var width = image.width;
		var height = image.height;

		var canvas = document.createElement( 'canvas' );
		canvas.width = width;
		canvas.height = height;

		var context = canvas.getContext( '2d' );
		context.drawImage( image, 0, 0 );

		var data = context.getImageData( 0, 0, width, height ).data;
		var imageData = context.createImageData( width, height );
		var output = imageData.data;

		for ( var x = 0; x < width; x ++ ) {

			for ( var y = 0; y < height; y ++ ) {

				var ly = y - 1 < 0 ? 0 : y - 1;
				var uy = y + 1 > height - 1 ? height - 1 : y + 1;
				var lx = x - 1 < 0 ? 0 : x - 1;
				var ux = x + 1 > width - 1 ? width - 1 : x + 1;

				var points = [];
				var origin = [ 0, 0, data[ ( y * width + x ) * 4 ] / 255 * depth ];
				points.push( [ - 1, 0, data[ ( y * width + lx ) * 4 ] / 255 * depth ] );
				points.push( [ - 1, - 1, data[ ( ly * width + lx ) * 4 ] / 255 * depth ] );
				points.push( [ 0, - 1, data[ ( ly * width + x ) * 4 ] / 255 * depth ] );
				points.push( [  1, - 1, data[ ( ly * width + ux ) * 4 ] / 255 * depth ] );
				points.push( [ 1, 0, data[ ( y * width + ux ) * 4 ] / 255 * depth ] );
				points.push( [ 1, 1, data[ ( uy * width + ux ) * 4 ] / 255 * depth ] );
				points.push( [ 0, 1, data[ ( uy * width + x ) * 4 ] / 255 * depth ] );
				points.push( [ - 1, 1, data[ ( uy * width + lx ) * 4 ] / 255 * depth ] );

				var normals = [];
				var num_points = points.length;

				for ( var i = 0; i < num_points; i ++ ) {

					var v1 = points[ i ];
					var v2 = points[ ( i + 1 ) % num_points ];
					v1 = subtract( v1, origin );
					v2 = subtract( v2, origin );
					normals.push( normalize( cross( v1, v2 ) ) );

				}

				var normal = [ 0, 0, 0 ];

				for ( var i = 0; i < normals.length; i ++ ) {

					normal[ 0 ] += normals[ i ][ 0 ];
					normal[ 1 ] += normals[ i ][ 1 ];
					normal[ 2 ] += normals[ i ][ 2 ];

				}

				normal[ 0 ] /= normals.length;
				normal[ 1 ] /= normals.length;
				normal[ 2 ] /= normals.length;

				var idx = ( y * width + x ) * 4;

				output[ idx ] = ( ( normal[ 0 ] + 1.0 ) / 2.0 * 255 ) | 0;
				output[ idx + 1 ] = ( ( normal[ 1 ] + 1.0 ) / 2.0 * 255 ) | 0;
				output[ idx + 2 ] = ( normal[ 2 ] * 255 ) | 0;
				output[ idx + 3 ] = 255;

			}

		}

		context.putImageData( imageData, 0, 0 );

		return canvas;

	},

	generateDataTexture: function ( width, height, color ) {

		var size = width * height;
		var data = new Uint8Array( 3 * size );

		var r = Math.floor( color.r * 255 );
		var g = Math.floor( color.g * 255 );
		var b = Math.floor( color.b * 255 );

		for ( var i = 0; i < size; i ++ ) {

			data[ i * 3 ] 	  = r;
			data[ i * 3 + 1 ] = g;
			data[ i * 3 + 2 ] = b;

		}

		var texture = new THREE.DataTexture( data, width, height, THREE.RGBFormat );
		texture.needsUpdate = true;

		return texture;

	}

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SceneUtils = {

	createMultiMaterialObject: function ( geometry, materials ) {

		var group = new THREE.Object3D();

		for ( var i = 0, l = materials.length; i < l; i ++ ) {

			group.add( new THREE.Mesh( geometry, materials[ i ] ) );

		}

		return group;

	},

	detach : function ( child, parent, scene ) {

		child.applyMatrix( parent.matrixWorld );
		parent.remove( child );
		scene.add( child );

	},

	attach: function ( child, scene, parent ) {

		var matrixWorldInverse = new THREE.Matrix4();
		matrixWorldInverse.getInverse( parent.matrixWorld );
		child.applyMatrix( matrixWorldInverse );

		scene.remove( child );
		parent.add( child );

	}

};
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 *
 * ShaderUtils currently contains:
 *
 *	fresnel
 *	normal
 * 	cube
 *
 */

THREE.ShaderUtils = {

	lib: {

		/* -------------------------------------------------------------------------
		//	Fresnel shader
		//	- based on Nvidia Cg tutorial
		 ------------------------------------------------------------------------- */

		'fresnel': {

			uniforms: {

				"mRefractionRatio": { type: "f", value: 1.02 },
				"mFresnelBias": { type: "f", value: 0.1 },
				"mFresnelPower": { type: "f", value: 2.0 },
				"mFresnelScale": { type: "f", value: 1.0 },
				"tCube": { type: "t", value: null }

			},

			fragmentShader: [

				"uniform samplerCube tCube;",

				"varying vec3 vReflect;",
				"varying vec3 vRefract[3];",
				"varying float vReflectionFactor;",

				"void main() {",

					"vec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );",
					"vec4 refractedColor = vec4( 1.0 );",

					"refractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;",
					"refractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;",
					"refractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;",

					"gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );",

				"}"

			].join("\n"),

			vertexShader: [

				"uniform float mRefractionRatio;",
				"uniform float mFresnelBias;",
				"uniform float mFresnelScale;",
				"uniform float mFresnelPower;",

				"varying vec3 vReflect;",
				"varying vec3 vRefract[3];",
				"varying float vReflectionFactor;",

				"void main() {",

					"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
					"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",

					"vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );",

					"vec3 I = worldPosition.xyz - cameraPosition;",

					"vReflect = reflect( I, worldNormal );",
					"vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );",
					"vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );",
					"vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );",
					"vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );",

					"gl_Position = projectionMatrix * mvPosition;",

				"}"

			].join("\n")

		},

		/* -------------------------------------------------------------------------
		//	Normal map shader
		//		- Blinn-Phong
		//		- normal + diffuse + specular + AO + displacement + reflection + shadow maps
		//		- point and directional lights (use with "lights: true" material option)
		 ------------------------------------------------------------------------- */

		'normal' : {

			uniforms: THREE.UniformsUtils.merge( [

				THREE.UniformsLib[ "fog" ],
				THREE.UniformsLib[ "lights" ],
				THREE.UniformsLib[ "shadowmap" ],

				{

				"enableAO"		  : { type: "i", value: 0 },
				"enableDiffuse"	  : { type: "i", value: 0 },
				"enableSpecular"  : { type: "i", value: 0 },
				"enableReflection": { type: "i", value: 0 },
				"enableDisplacement": { type: "i", value: 0 },

				"tDisplacement": { type: "t", value: null }, // must go first as this is vertex texture
				"tDiffuse"	   : { type: "t", value: null },
				"tCube"		   : { type: "t", value: null },
				"tNormal"	   : { type: "t", value: null },
				"tSpecular"	   : { type: "t", value: null },
				"tAO"		   : { type: "t", value: null },

				"uNormalScale": { type: "v2", value: new THREE.Vector2( 1, 1 ) },

				"uDisplacementBias": { type: "f", value: 0.0 },
				"uDisplacementScale": { type: "f", value: 1.0 },

				"uDiffuseColor": { type: "c", value: new THREE.Color( 0xffffff ) },
				"uSpecularColor": { type: "c", value: new THREE.Color( 0x111111 ) },
				"uAmbientColor": { type: "c", value: new THREE.Color( 0xffffff ) },
				"uShininess": { type: "f", value: 30 },
				"uOpacity": { type: "f", value: 1 },

				"useRefract": { type: "i", value: 0 },
				"uRefractionRatio": { type: "f", value: 0.98 },
				"uReflectivity": { type: "f", value: 0.5 },

				"uOffset" : { type: "v2", value: new THREE.Vector2( 0, 0 ) },
				"uRepeat" : { type: "v2", value: new THREE.Vector2( 1, 1 ) },

				"wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }

				}

			] ),

			fragmentShader: [

				"uniform vec3 uAmbientColor;",
				"uniform vec3 uDiffuseColor;",
				"uniform vec3 uSpecularColor;",
				"uniform float uShininess;",
				"uniform float uOpacity;",

				"uniform bool enableDiffuse;",
				"uniform bool enableSpecular;",
				"uniform bool enableAO;",
				"uniform bool enableReflection;",

				"uniform sampler2D tDiffuse;",
				"uniform sampler2D tNormal;",
				"uniform sampler2D tSpecular;",
				"uniform sampler2D tAO;",

				"uniform samplerCube tCube;",

				"uniform vec2 uNormalScale;",

				"uniform bool useRefract;",
				"uniform float uRefractionRatio;",
				"uniform float uReflectivity;",

				"varying vec3 vTangent;",
				"varying vec3 vBinormal;",
				"varying vec3 vNormal;",
				"varying vec2 vUv;",

				"uniform vec3 ambientLightColor;",

				"#if MAX_DIR_LIGHTS > 0",

					"uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
					"uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",

				"#endif",

				"#if MAX_HEMI_LIGHTS > 0",

					"uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];",
					"uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];",
					"uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];",

				"#endif",

				"#if MAX_POINT_LIGHTS > 0",

					"uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",
					"uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
					"uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

				"#endif",

				"#if MAX_SPOT_LIGHTS > 0",

					"uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
					"uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
					"uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
					"uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
					"uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",
					"uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",

				"#endif",

				"#ifdef WRAP_AROUND",

					"uniform vec3 wrapRGB;",

				"#endif",

				"varying vec3 vWorldPosition;",
				"varying vec3 vViewPosition;",

				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],

				"void main() {",

					"gl_FragColor = vec4( vec3( 1.0 ), uOpacity );",

					"vec3 specularTex = vec3( 1.0 );",

					"vec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;",
					"normalTex.xy *= uNormalScale;",
					"normalTex = normalize( normalTex );",

					"if( enableDiffuse ) {",

						"#ifdef GAMMA_INPUT",

							"vec4 texelColor = texture2D( tDiffuse, vUv );",
							"texelColor.xyz *= texelColor.xyz;",

							"gl_FragColor = gl_FragColor * texelColor;",

						"#else",

							"gl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );",

						"#endif",

					"}",

					"if( enableAO ) {",

						"#ifdef GAMMA_INPUT",

							"vec4 aoColor = texture2D( tAO, vUv );",
							"aoColor.xyz *= aoColor.xyz;",

							"gl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;",

						"#else",

							"gl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;",

						"#endif",

					"}",

					"if( enableSpecular )",
						"specularTex = texture2D( tSpecular, vUv ).xyz;",

					"mat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );",
					"vec3 finalNormal = tsb * normalTex;",

					"#ifdef FLIP_SIDED",

						"finalNormal = -finalNormal;",

					"#endif",

					"vec3 normal = normalize( finalNormal );",
					"vec3 viewPosition = normalize( vViewPosition );",

					// point lights

					"#if MAX_POINT_LIGHTS > 0",

						"vec3 pointDiffuse = vec3( 0.0 );",
						"vec3 pointSpecular = vec3( 0.0 );",

						"for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

							"vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
							"vec3 pointVector = lPosition.xyz + vViewPosition.xyz;",

							"float pointDistance = 1.0;",
							"if ( pointLightDistance[ i ] > 0.0 )",
								"pointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );",

							"pointVector = normalize( pointVector );",

							// diffuse

							"#ifdef WRAP_AROUND",

								"float pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );",
								"float pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );",

								"vec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );",

							"#else",

								"float pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );",

							"#endif",

							"pointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;",

							// specular

							"vec3 pointHalfVector = normalize( pointVector + viewPosition );",
							"float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );",
							"float pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );",

							"#ifdef PHYSICALLY_BASED_SHADING",

								// 2.0 => 2.0001 is hack to work around ANGLE bug

								"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;",

								"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );",
								"pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;",

							"#else",

								"pointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;",

							"#endif",

						"}",

					"#endif",

					// spot lights

					"#if MAX_SPOT_LIGHTS > 0",

						"vec3 spotDiffuse = vec3( 0.0 );",
						"vec3 spotSpecular = vec3( 0.0 );",

						"for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

							"vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
							"vec3 spotVector = lPosition.xyz + vViewPosition.xyz;",

							"float spotDistance = 1.0;",
							"if ( spotLightDistance[ i ] > 0.0 )",
								"spotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );",

							"spotVector = normalize( spotVector );",

							"float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );",

							"if ( spotEffect > spotLightAngleCos[ i ] ) {",

								"spotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );",

								// diffuse

								"#ifdef WRAP_AROUND",

									"float spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );",
									"float spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );",

									"vec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );",

								"#else",

									"float spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );",

								"#endif",

								"spotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;",

								// specular

								"vec3 spotHalfVector = normalize( spotVector + viewPosition );",
								"float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );",
								"float spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );",

								"#ifdef PHYSICALLY_BASED_SHADING",

									// 2.0 => 2.0001 is hack to work around ANGLE bug

									"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;",

									"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );",
									"spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;",

								"#else",

									"spotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;",

								"#endif",

							"}",

						"}",

					"#endif",

					// directional lights

					"#if MAX_DIR_LIGHTS > 0",

						"vec3 dirDiffuse = vec3( 0.0 );",
						"vec3 dirSpecular = vec3( 0.0 );",

						"for( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {",

							"vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
							"vec3 dirVector = normalize( lDirection.xyz );",

							// diffuse

							"#ifdef WRAP_AROUND",

								"float directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );",
								"float directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );",

								"vec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );",

							"#else",

								"float dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );",

							"#endif",

							"dirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;",

							// specular

							"vec3 dirHalfVector = normalize( dirVector + viewPosition );",
							"float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );",
							"float dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );",

							"#ifdef PHYSICALLY_BASED_SHADING",

								// 2.0 => 2.0001 is hack to work around ANGLE bug

								"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;",

								"vec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );",
								"dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;",

							"#else",

								"dirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;",

							"#endif",

						"}",

					"#endif",

					// hemisphere lights

					"#if MAX_HEMI_LIGHTS > 0",

						"vec3 hemiDiffuse  = vec3( 0.0 );",
						"vec3 hemiSpecular = vec3( 0.0 );" ,

						"for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

							"vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );",
							"vec3 lVector = normalize( lDirection.xyz );",

							// diffuse

							"float dotProduct = dot( normal, lVector );",
							"float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",

							"vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );",

							"hemiDiffuse += uDiffuseColor * hemiColor;",

							// specular (sky light)


							"vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );",
							"float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;",
							"float hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );",

							// specular (ground light)

							"vec3 lVectorGround = -lVector;",

							"vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );",
							"float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;",
							"float hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );",

							"#ifdef PHYSICALLY_BASED_SHADING",

								"float dotProductGround = dot( normal, lVectorGround );",

								// 2.0 => 2.0001 is hack to work around ANGLE bug

								"float specularNormalization = ( uShininess + 2.0001 ) / 8.0;",

								"vec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );",
								"vec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );",
								"hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );",

							"#else",

								"hemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;",

							"#endif",

						"}",

					"#endif",

					// all lights contribution summation

					"vec3 totalDiffuse = vec3( 0.0 );",
					"vec3 totalSpecular = vec3( 0.0 );",

					"#if MAX_DIR_LIGHTS > 0",

						"totalDiffuse += dirDiffuse;",
						"totalSpecular += dirSpecular;",

					"#endif",

					"#if MAX_HEMI_LIGHTS > 0",

						"totalDiffuse += hemiDiffuse;",
						"totalSpecular += hemiSpecular;",

					"#endif",

					"#if MAX_POINT_LIGHTS > 0",

						"totalDiffuse += pointDiffuse;",
						"totalSpecular += pointSpecular;",

					"#endif",

					"#if MAX_SPOT_LIGHTS > 0",

						"totalDiffuse += spotDiffuse;",
						"totalSpecular += spotSpecular;",

					"#endif",

					"#ifdef METAL",

						"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );",

					"#else",

						"gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;",

					"#endif",

					"if ( enableReflection ) {",

						"vec3 vReflect;",
						"vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );",

						"if ( useRefract ) {",

							"vReflect = refract( cameraToVertex, normal, uRefractionRatio );",

						"} else {",

							"vReflect = reflect( cameraToVertex, normal );",

						"}",

						"vec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );",

						"#ifdef GAMMA_INPUT",

							"cubeColor.xyz *= cubeColor.xyz;",

						"#endif",

						"gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );",

					"}",

					THREE.ShaderChunk[ "shadowmap_fragment" ],
					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
					THREE.ShaderChunk[ "fog_fragment" ],

				"}"

			].join("\n"),

			vertexShader: [

				"attribute vec4 tangent;",

				"uniform vec2 uOffset;",
				"uniform vec2 uRepeat;",

				"uniform bool enableDisplacement;",

				"#ifdef VERTEX_TEXTURES",

					"uniform sampler2D tDisplacement;",
					"uniform float uDisplacementScale;",
					"uniform float uDisplacementBias;",

				"#endif",

				"varying vec3 vTangent;",
				"varying vec3 vBinormal;",
				"varying vec3 vNormal;",
				"varying vec2 vUv;",

				"varying vec3 vWorldPosition;",
				"varying vec3 vViewPosition;",

				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],

				"void main() {",

					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],

					// normal, tangent and binormal vectors

					"#ifdef USE_SKINNING",

						"vNormal = normalize( normalMatrix * skinnedNormal.xyz );",

						"vec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );",
						"vTangent = normalize( normalMatrix * skinnedTangent.xyz );",

					"#else",

						"vNormal = normalize( normalMatrix * normal );",
						"vTangent = normalize( normalMatrix * tangent.xyz );",

					"#endif",

					"vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );",

					"vUv = uv * uRepeat + uOffset;",

					// displacement mapping

					"vec3 displacedPosition;",

					"#ifdef VERTEX_TEXTURES",

						"if ( enableDisplacement ) {",

							"vec3 dv = texture2D( tDisplacement, uv ).xyz;",
							"float df = uDisplacementScale * dv.x + uDisplacementBias;",
							"displacedPosition = position + normalize( normal ) * df;",

						"} else {",

							"#ifdef USE_SKINNING",

								"vec4 skinVertex = vec4( position, 1.0 );",

								"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;",
								"skinned 	  += boneMatY * skinVertex * skinWeight.y;",

								"displacedPosition  = skinned.xyz;",

							"#else",

								"displacedPosition = position;",

							"#endif",

						"}",

					"#else",

						"#ifdef USE_SKINNING",

							"vec4 skinVertex = vec4( position, 1.0 );",

							"vec4 skinned  = boneMatX * skinVertex * skinWeight.x;",
							"skinned 	  += boneMatY * skinVertex * skinWeight.y;",

							"displacedPosition  = skinned.xyz;",

						"#else",

							"displacedPosition = position;",

						"#endif",

					"#endif",

					//

					"vec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );",
					"vec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );",

					"gl_Position = projectionMatrix * mvPosition;",

					//

					"vWorldPosition = worldPosition.xyz;",
					"vViewPosition = -mvPosition.xyz;",

					// shadows

					"#ifdef USE_SHADOWMAP",

						"for( int i = 0; i < MAX_SHADOWS; i ++ ) {",

							"vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;",

						"}",

					"#endif",

				"}"

			].join("\n")

		},

		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */

		'cube': {

			uniforms: { "tCube": { type: "t", value: null },
						"tFlip": { type: "f", value: -1 } },

			vertexShader: [

				"varying vec3 vWorldPosition;",

				"void main() {",

					"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",
					"vWorldPosition = worldPosition.xyz;",

					"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				"}"

			].join("\n"),

			fragmentShader: [

				"uniform samplerCube tCube;",
				"uniform float tFlip;",

				"varying vec3 vWorldPosition;",

				"void main() {",

					"gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",

				"}"

			].join("\n")

		}

	}

};
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * For Text operations in three.js (See TextGeometry)
 *
 * It uses techniques used in:
 *
 * 	typeface.js and canvastext
 * 		For converting fonts and rendering with javascript
 *		http://typeface.neocracy.org
 *
 *	Triangulation ported from AS3
 *		Simple Polygon Triangulation
 *		http://actionsnippet.com/?p=1462
 *
 * 	A Method to triangulate shapes with holes
 *		http://www.sakri.net/blog/2009/06/12/an-approach-to-triangulating-polygons-with-holes/
 *
 */

THREE.FontUtils = {

	faces : {},

	// Just for now. face[weight][style]

	face : "helvetiker",
	weight: "normal",
	style : "normal",
	size : 150,
	divisions : 10,

	getFace : function() {

		return this.faces[ this.face ][ this.weight ][ this.style ];

	},

	loadFace : function( data ) {

		var family = data.familyName.toLowerCase();

		var ThreeFont = this;

		ThreeFont.faces[ family ] = ThreeFont.faces[ family ] || {};

		ThreeFont.faces[ family ][ data.cssFontWeight ] = ThreeFont.faces[ family ][ data.cssFontWeight ] || {};
		ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;

		var face = ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;

		return data;

	},

	drawText : function( text ) {

		var characterPts = [], allPts = [];

		// RenderText

		var i, p,
			face = this.getFace(),
			scale = this.size / face.resolution,
			offset = 0,
			chars = String( text ).split( '' ),
			length = chars.length;

		var fontPaths = [];

		for ( i = 0; i < length; i ++ ) {

			var path = new THREE.Path();

			var ret = this.extractGlyphPoints( chars[ i ], face, scale, offset, path );
			offset += ret.offset;

			fontPaths.push( ret.path );

		}

		// get the width

		var width = offset / 2;
		//
		// for ( p = 0; p < allPts.length; p++ ) {
		//
		// 	allPts[ p ].x -= width;
		//
		// }

		//var extract = this.extractPoints( allPts, characterPts );
		//extract.contour = allPts;

		//extract.paths = fontPaths;
		//extract.offset = width;

		return { paths : fontPaths, offset : width };

	},




	extractGlyphPoints : function( c, face, scale, offset, path ) {

		var pts = [];

		var i, i2, divisions,
			outline, action, length,
			scaleX, scaleY,
			x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2,
			laste,
			glyph = face.glyphs[ c ] || face.glyphs[ '?' ];

		if ( !glyph ) return;

		if ( glyph.o ) {

			outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );
			length = outline.length;

			scaleX = scale;
			scaleY = scale;

			for ( i = 0; i < length; ) {

				action = outline[ i ++ ];

				//console.log( action );

				switch( action ) {

				case 'm':

					// Move To

					x = outline[ i++ ] * scaleX + offset;
					y = outline[ i++ ] * scaleY;

					path.moveTo( x, y );
					break;

				case 'l':

					// Line To

					x = outline[ i++ ] * scaleX + offset;
					y = outline[ i++ ] * scaleY;
					path.lineTo(x,y);
					break;

				case 'q':

					// QuadraticCurveTo

					cpx  = outline[ i++ ] * scaleX + offset;
					cpy  = outline[ i++ ] * scaleY;
					cpx1 = outline[ i++ ] * scaleX + offset;
					cpy1 = outline[ i++ ] * scaleY;

					path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);

					laste = pts[ pts.length - 1 ];

					if ( laste ) {

						cpx0 = laste.x;
						cpy0 = laste.y;

						for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {

							var t = i2 / divisions;
							var tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );
							var ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );
					  }

				  }

				  break;

				case 'b':

					// Cubic Bezier Curve

					cpx  = outline[ i++ ] *  scaleX + offset;
					cpy  = outline[ i++ ] *  scaleY;
					cpx1 = outline[ i++ ] *  scaleX + offset;
					cpy1 = outline[ i++ ] * -scaleY;
					cpx2 = outline[ i++ ] *  scaleX + offset;
					cpy2 = outline[ i++ ] * -scaleY;

					path.bezierCurveTo( cpx, cpy, cpx1, cpy1, cpx2, cpy2 );

					laste = pts[ pts.length - 1 ];

					if ( laste ) {

						cpx0 = laste.x;
						cpy0 = laste.y;

						for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {

							var t = i2 / divisions;
							var tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );
							var ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );

						}

					}

					break;

				}

			}
		}



		return { offset: glyph.ha*scale, path:path};
	}

};


THREE.FontUtils.generateShapes = function( text, parameters ) {

	// Parameters 

	parameters = parameters || {};

	var size = parameters.size !== undefined ? parameters.size : 100;
	var curveSegments = parameters.curveSegments !== undefined ? parameters.curveSegments: 4;

	var font = parameters.font !== undefined ? parameters.font : "helvetiker";
	var weight = parameters.weight !== undefined ? parameters.weight : "normal";
	var style = parameters.style !== undefined ? parameters.style : "normal";

	THREE.FontUtils.size = size;
	THREE.FontUtils.divisions = curveSegments;

	THREE.FontUtils.face = font;
	THREE.FontUtils.weight = weight;
	THREE.FontUtils.style = style;

	// Get a Font data json object

	var data = THREE.FontUtils.drawText( text );

	var paths = data.paths;
	var shapes = [];

	for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

		Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

	}

	return shapes;

};


/**
 * This code is a quick port of code written in C++ which was submitted to
 * flipcode.com by John W. Ratcliff  // July 22, 2000
 * See original code and more information here:
 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
 *
 * ported to actionscript by Zevan Rosser
 * www.actionsnippet.com
 *
 * ported to javascript by Joshua Koo
 * http://www.lab4games.net/zz85/blog
 *
 */


( function( namespace ) {

	var EPSILON = 0.0000000001;

	// takes in an contour array and returns

	var process = function( contour, indices ) {

		var n = contour.length;

		if ( n < 3 ) return null;

		var result = [],
			verts = [],
			vertIndices = [];

		/* we want a counter-clockwise polygon in verts */

		var u, v, w;

		if ( area( contour ) > 0.0 ) {

			for ( v = 0; v < n; v++ ) verts[ v ] = v;

		} else {

			for ( v = 0; v < n; v++ ) verts[ v ] = ( n - 1 ) - v;

		}

		var nv = n;

		/*  remove nv - 2 vertices, creating 1 triangle every time */

		var count = 2 * nv;   /* error detection */

		for( v = nv - 1; nv > 2; ) {

			/* if we loop, it is probably a non-simple polygon */

			if ( ( count-- ) <= 0 ) {

				//** Triangulate: ERROR - probable bad polygon!

				//throw ( "Warning, unable to triangulate polygon!" );
				//return null;
				// Sometimes warning is fine, especially polygons are triangulated in reverse.
				console.log( "Warning, unable to triangulate polygon!" );

				if ( indices ) return vertIndices;
				return result;

			}

			/* three consecutive vertices in current polygon, <u,v,w> */

			u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
			v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
			w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

			if ( snip( contour, u, v, w, nv, verts ) ) {

				var a, b, c, s, t;

				/* true names of the vertices */

				a = verts[ u ];
				b = verts[ v ];
				c = verts[ w ];

				/* output Triangle */

				result.push( [ contour[ a ],
					contour[ b ],
					contour[ c ] ] );


				vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

				/* remove v from the remaining polygon */

				for( s = v, t = v + 1; t < nv; s++, t++ ) {

					verts[ s ] = verts[ t ];

				}

				nv--;

				/* reset error detection counter */

				count = 2 * nv;

			}

		}

		if ( indices ) return vertIndices;
		return result;

	};

	// calculate area of the contour polygon

	var area = function ( contour ) {

		var n = contour.length;
		var a = 0.0;

		for( var p = n - 1, q = 0; q < n; p = q++ ) {

			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

		}

		return a * 0.5;

	};

	var snip = function ( contour, u, v, w, n, verts ) {

		var p;
		var ax, ay, bx, by;
		var cx, cy, px, py;

		ax = contour[ verts[ u ] ].x;
		ay = contour[ verts[ u ] ].y;

		bx = contour[ verts[ v ] ].x;
		by = contour[ verts[ v ] ].y;

		cx = contour[ verts[ w ] ].x;
		cy = contour[ verts[ w ] ].y;

		if ( EPSILON > (((bx-ax)*(cy-ay)) - ((by-ay)*(cx-ax))) ) return false;

		var aX, aY, bX, bY, cX, cY;
		var apx, apy, bpx, bpy, cpx, cpy;
		var cCROSSap, bCROSScp, aCROSSbp;

		aX = cx - bx;  aY = cy - by;
		bX = ax - cx;  bY = ay - cy;
		cX = bx - ax;  cY = by - ay;

		for ( p = 0; p < n; p++ ) {

			if( (p === u) || (p === v) || (p === w) ) continue;

			px = contour[ verts[ p ] ].x
			py = contour[ verts[ p ] ].y

			apx = px - ax;  apy = py - ay;
			bpx = px - bx;  bpy = py - by;
			cpx = px - cx;  cpy = py - cy;

			// see if p is inside triangle abc

			aCROSSbp = aX*bpy - aY*bpx;
			cCROSSap = cX*apy - cY*apx;
			bCROSScp = bX*cpy - bY*cpx;

			if ( (aCROSSbp >= 0.0) && (bCROSScp >= 0.0) && (cCROSSap >= 0.0) ) return false;

		}

		return true;

	};


	namespace.Triangulate = process;
	namespace.Triangulate.area = area;

	return namespace;

})(THREE.FontUtils);

// To use the typeface.js face files, hook up the API
self._typeface_js = { faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace };/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Extensible curve object
 *
 * Some common of Curve methods
 * .getPoint(t), getTangent(t)
 * .getPointAt(u), getTagentAt(u)
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This file contains following classes:
 *
 * -- 2d classes --
 * THREE.Curve
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.CubicBezierCurve
 * THREE.SplineCurve
 * THREE.ArcCurve
 * THREE.EllipseCurve
 *
 * -- 3d classes --
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 * THREE.CubicBezierCurve3
 * THREE.SplineCurve3
 * THREE.ClosedSplineCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath
 *
 **/

/**************************************************************
 *	Abstract Curve base class
 **************************************************************/

THREE.Curve = function () {

};

// Virtual base class method to overwrite and implement in subclasses
//	- t [0 .. 1]

THREE.Curve.prototype.getPoint = function ( t ) {

	console.log( "Warning, getPoint() not implemented!" );
	return null;

};

// Get point at relative position in curve according to arc length
// - u [0 .. 1]

THREE.Curve.prototype.getPointAt = function ( u ) {

	var t = this.getUtoTmapping( u );
	return this.getPoint( t );

};

// Get sequence of points using getPoint( t )

THREE.Curve.prototype.getPoints = function ( divisions ) {

	if ( !divisions ) divisions = 5;

	var d, pts = [];

	for ( d = 0; d <= divisions; d ++ ) {

		pts.push( this.getPoint( d / divisions ) );

	}

	return pts;

};

// Get sequence of points using getPointAt( u )

THREE.Curve.prototype.getSpacedPoints = function ( divisions ) {

	if ( !divisions ) divisions = 5;

	var d, pts = [];

	for ( d = 0; d <= divisions; d ++ ) {

		pts.push( this.getPointAt( d / divisions ) );

	}

	return pts;

};

// Get total curve arc length

THREE.Curve.prototype.getLength = function () {

	var lengths = this.getLengths();
	return lengths[ lengths.length - 1 ];

};

// Get list of cumulative segment lengths

THREE.Curve.prototype.getLengths = function ( divisions ) {

	if ( !divisions ) divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions): 200;

	if ( this.cacheArcLengths
		&& ( this.cacheArcLengths.length == divisions + 1 )
		&& !this.needsUpdate) {

		//console.log( "cached", this.cacheArcLengths );
		return this.cacheArcLengths;

	}

	this.needsUpdate = false;

	var cache = [];
	var current, last = this.getPoint( 0 );
	var p, sum = 0;

	cache.push( 0 );

	for ( p = 1; p <= divisions; p ++ ) {

		current = this.getPoint ( p / divisions );
		sum += current.distanceTo( last );
		cache.push( sum );
		last = current;

	}

	this.cacheArcLengths = cache;

	return cache; // { sums: cache, sum:sum }; Sum is in the last element.

};


THREE.Curve.prototype.updateArcLengths = function() {
	this.needsUpdate = true;
	this.getLengths();
};

// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance

THREE.Curve.prototype.getUtoTmapping = function ( u, distance ) {

	var arcLengths = this.getLengths();

	var i = 0, il = arcLengths.length;

	var targetArcLength; // The targeted u distance value to get

	if ( distance ) {

		targetArcLength = distance;

	} else {

		targetArcLength = u * arcLengths[ il - 1 ];

	}

	//var time = Date.now();

	// binary search for the index with largest value smaller than target u distance

	var low = 0, high = il - 1, comparison;

	while ( low <= high ) {

		i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

		comparison = arcLengths[ i ] - targetArcLength;

		if ( comparison < 0 ) {

			low = i + 1;
			continue;

		} else if ( comparison > 0 ) {

			high = i - 1;
			continue;

		} else {

			high = i;
			break;

			// DONE

		}

	}

	i = high;

	//console.log('b' , i, low, high, Date.now()- time);

	if ( arcLengths[ i ] == targetArcLength ) {

		var t = i / ( il - 1 );
		return t;

	}

	// we could get finer grain at lengths, or use simple interpolatation between two points

	var lengthBefore = arcLengths[ i ];
    var lengthAfter = arcLengths[ i + 1 ];

    var segmentLength = lengthAfter - lengthBefore;

    // determine where we are between the 'before' and 'after' points

    var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

    // add that fractional amount to t

    var t = ( i + segmentFraction ) / ( il -1 );

	return t;

};

// Returns a unit vector tangent at t
// In case any sub curve does not implement its tangent derivation,
// 2 points a small delta apart will be used to find its gradient
// which seems to give a reasonable approximation

THREE.Curve.prototype.getTangent = function( t ) {

	var delta = 0.0001;
	var t1 = t - delta;
	var t2 = t + delta;

	// Capping in case of danger

	if ( t1 < 0 ) t1 = 0;
	if ( t2 > 1 ) t2 = 1;

	var pt1 = this.getPoint( t1 );
	var pt2 = this.getPoint( t2 );

	var vec = pt2.clone().subSelf(pt1);
	return vec.normalize();

};


THREE.Curve.prototype.getTangentAt = function ( u ) {

	var t = this.getUtoTmapping( u );
	return this.getTangent( t );

};

/**************************************************************
 *	Line
 **************************************************************/

THREE.LineCurve = function ( v1, v2 ) {

	this.v1 = v1;
	this.v2 = v2;

};

THREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.LineCurve.prototype.getPoint = function ( t ) {

	var point = this.v2.clone().subSelf(this.v1);
	point.multiplyScalar( t ).addSelf( this.v1 );

	return point;

};

// Line curve is linear, so we can overwrite default getPointAt

THREE.LineCurve.prototype.getPointAt = function ( u ) {

	return this.getPoint( u );

};

THREE.LineCurve.prototype.getTangent = function( t ) {

	var tangent = this.v2.clone().subSelf(this.v1);

	return tangent.normalize();

};

/**************************************************************
 *	Quadratic Bezier curve
 **************************************************************/


THREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;

};

THREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );


THREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {

	var tx, ty;

	tx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );
	ty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );

	return new THREE.Vector2( tx, ty );

};


THREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {

	var tx, ty;

	tx = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x );
	ty = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y );

	// returns unit vector

	var tangent = new THREE.Vector2( tx, ty );
	tangent.normalize();

	return tangent;

};


/**************************************************************
 *	Cubic Bezier curve
 **************************************************************/

THREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;
	this.v3 = v3;

};

THREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.CubicBezierCurve.prototype.getPoint = function ( t ) {

	var tx, ty;

	tx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
	ty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );

	return new THREE.Vector2( tx, ty );

};

THREE.CubicBezierCurve.prototype.getTangent = function( t ) {

	var tx, ty;

	tx = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
	ty = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );

	var tangent = new THREE.Vector2( tx, ty );
	tangent.normalize();

	return tangent;

};


/**************************************************************
 *	Spline curve
 **************************************************************/

THREE.SplineCurve = function ( points /* array of Vector2 */ ) {

	this.points = (points == undefined) ? [] : points;

};

THREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.SplineCurve.prototype.getPoint = function ( t ) {

	var v = new THREE.Vector2();
	var c = [];
	var points = this.points, point, intPoint, weight;
	point = ( points.length - 1 ) * t;

	intPoint = Math.floor( point );
	weight = point - intPoint;

	c[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;
	c[ 1 ] = intPoint;
	c[ 2 ] = intPoint  > points.length - 2 ? points.length -1 : intPoint + 1;
	c[ 3 ] = intPoint  > points.length - 3 ? points.length -1 : intPoint + 2;

	v.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );
	v.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );

	return v;

};

/**************************************************************
 *	Ellipse curve
 **************************************************************/

THREE.EllipseCurve = function ( aX, aY, xRadius, yRadius,
							aStartAngle, aEndAngle,
							aClockwise ) {

	this.aX = aX;
	this.aY = aY;

	this.xRadius = xRadius;
	this.yRadius = yRadius;

	this.aStartAngle = aStartAngle;
	this.aEndAngle = aEndAngle;

	this.aClockwise = aClockwise;

};

THREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.EllipseCurve.prototype.getPoint = function ( t ) {

	var deltaAngle = this.aEndAngle - this.aStartAngle;

	if ( !this.aClockwise ) {

		t = 1 - t;

	}

	var angle = this.aStartAngle + t * deltaAngle;

	var tx = this.aX + this.xRadius * Math.cos( angle );
	var ty = this.aY + this.yRadius * Math.sin( angle );

	return new THREE.Vector2( tx, ty );

};

/**************************************************************
 *	Arc curve
 **************************************************************/

THREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

	THREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
};

THREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );


/**************************************************************
 *	Utils
 **************************************************************/

THREE.Curve.Utils = {

	tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

		return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

	},

	// Puay Bing, thanks for helping with this derivative!

	tangentCubicBezier: function (t, p0, p1, p2, p3 ) {

		return -3 * p0 * (1 - t) * (1 - t)  +
			3 * p1 * (1 - t) * (1-t) - 6 *t *p1 * (1-t) +
			6 * t *  p2 * (1-t) - 3 * t * t * p2 +
			3 * t * t * p3;
	},


	tangentSpline: function ( t, p0, p1, p2, p3 ) {

		// To check if my formulas are correct

		var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
		var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
		var h01 = -6 * t * t + 6 * t; 	// − 2t3 + 3t2
		var h11 = 3 * t * t - 2 * t;	// t3 − t2

		return h00 + h10 + h01 + h11;

	},

	// Catmull-Rom

	interpolate: function( p0, p1, p2, p3, t ) {

		var v0 = ( p2 - p0 ) * 0.5;
		var v1 = ( p3 - p1 ) * 0.5;
		var t2 = t * t;
		var t3 = t * t2;
		return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	}

};


// TODO: Transformation for Curves?

/**************************************************************
 *	3D Curves
 **************************************************************/

// A Factory method for creating new curve subclasses

THREE.Curve.create = function ( constructor, getPointFunc ) {

	constructor.prototype = Object.create( THREE.Curve.prototype );
	constructor.prototype.getPoint = getPointFunc;

	return constructor;

};


/**************************************************************
 *	Line3D
 **************************************************************/

THREE.LineCurve3 = THREE.Curve.create(

	function ( v1, v2 ) {

		this.v1 = v1;
		this.v2 = v2;

	},

	function ( t ) {

		var r = new THREE.Vector3();


		r.sub( this.v2, this.v1 ); // diff
		r.multiplyScalar( t );
		r.addSelf( this.v1 );

		return r;

	}

);


/**************************************************************
 *	Quadratic Bezier 3D curve
 **************************************************************/

THREE.QuadraticBezierCurve3 = THREE.Curve.create(

	function ( v0, v1, v2 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	},

	function ( t ) {

		var tx, ty, tz;

		tx = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );
		ty = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );
		tz = THREE.Shape.Utils.b2( t, this.v0.z, this.v1.z, this.v2.z );

		return new THREE.Vector3( tx, ty, tz );

	}

);



/**************************************************************
 *	Cubic Bezier 3D curve
 **************************************************************/

THREE.CubicBezierCurve3 = THREE.Curve.create(

	function ( v0, v1, v2, v3 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	},

	function ( t ) {

		var tx, ty, tz;

		tx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
		ty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );
		tz = THREE.Shape.Utils.b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z );

		return new THREE.Vector3( tx, ty, tz );

	}

);



/**************************************************************
 *	Spline 3D curve
 **************************************************************/


THREE.SplineCurve3 = THREE.Curve.create(

	function ( points /* array of Vector3 */) {

		this.points = (points == undefined) ? [] : points;

	},

	function ( t ) {

		var v = new THREE.Vector3();
		var c = [];
		var points = this.points, point, intPoint, weight;
		point = ( points.length - 1 ) * t;

		intPoint = Math.floor( point );
		weight = point - intPoint;

		c[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;
		c[ 1 ] = intPoint;
		c[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;
		c[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;

		var pt0 = points[ c[0] ],
			pt1 = points[ c[1] ],
			pt2 = points[ c[2] ],
			pt3 = points[ c[3] ];

		v.x = THREE.Curve.Utils.interpolate(pt0.x, pt1.x, pt2.x, pt3.x, weight);
		v.y = THREE.Curve.Utils.interpolate(pt0.y, pt1.y, pt2.y, pt3.y, weight);
		v.z = THREE.Curve.Utils.interpolate(pt0.z, pt1.z, pt2.z, pt3.z, weight);

		return v;

	}

);


// THREE.SplineCurve3.prototype.getTangent = function(t) {
// 		var v = new THREE.Vector3();
// 		var c = [];
// 		var points = this.points, point, intPoint, weight;
// 		point = ( points.length - 1 ) * t;

// 		intPoint = Math.floor( point );
// 		weight = point - intPoint;

// 		c[ 0 ] = intPoint == 0 ? intPoint : intPoint - 1;
// 		c[ 1 ] = intPoint;
// 		c[ 2 ] = intPoint  > points.length - 2 ? points.length - 1 : intPoint + 1;
// 		c[ 3 ] = intPoint  > points.length - 3 ? points.length - 1 : intPoint + 2;

// 		var pt0 = points[ c[0] ],
// 			pt1 = points[ c[1] ],
// 			pt2 = points[ c[2] ],
// 			pt3 = points[ c[3] ];

// 	// t = weight;
// 	v.x = THREE.Curve.Utils.tangentSpline( t, pt0.x, pt1.x, pt2.x, pt3.x );
// 	v.y = THREE.Curve.Utils.tangentSpline( t, pt0.y, pt1.y, pt2.y, pt3.y );
// 	v.z = THREE.Curve.Utils.tangentSpline( t, pt0.z, pt1.z, pt2.z, pt3.z );

// 	return v;

// }

/**************************************************************
 *	Closed Spline 3D curve
 **************************************************************/


THREE.ClosedSplineCurve3 = THREE.Curve.create(

	function ( points /* array of Vector3 */) {

		this.points = (points == undefined) ? [] : points;

	},

    function ( t ) {

        var v = new THREE.Vector3();
        var c = [];
        var points = this.points, point, intPoint, weight;
        point = ( points.length - 0 ) * t;
            // This needs to be from 0-length +1

        intPoint = Math.floor( point );
        weight = point - intPoint;

        intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;
        c[ 0 ] = ( intPoint - 1 ) % points.length;
        c[ 1 ] = ( intPoint ) % points.length;
        c[ 2 ] = ( intPoint + 1 ) % points.length;
        c[ 3 ] = ( intPoint + 2 ) % points.length;

        v.x = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].x, points[ c[ 1 ] ].x, points[ c[ 2 ] ].x, points[ c[ 3 ] ].x, weight );
        v.y = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].y, points[ c[ 1 ] ].y, points[ c[ 2 ] ].y, points[ c[ 3 ] ].y, weight );
        v.z = THREE.Curve.Utils.interpolate( points[ c[ 0 ] ].z, points[ c[ 1 ] ].z, points[ c[ 2 ] ].z, points[ c[ 3 ] ].z, weight );

        return v;

    }

);
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 **/

/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

THREE.CurvePath = function () {

	this.curves = [];
	this.bends = [];
	
	this.autoClose = false; // Automatically closes the path
};

THREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );

THREE.CurvePath.prototype.add = function ( curve ) {

	this.curves.push( curve );

};

THREE.CurvePath.prototype.checkConnection = function() {
	// TODO
	// If the ending of curve is not connected to the starting
	// or the next curve, then, this is not a real path
};

THREE.CurvePath.prototype.closePath = function() {
	// TODO Test
	// and verify for vector3 (needs to implement equals)
	// Add a line curve if start and end of lines are not connected
	var startPoint = this.curves[0].getPoint(0);
	var endPoint = this.curves[this.curves.length-1].getPoint(1);
	
	if (!startPoint.equals(endPoint)) {
		this.curves.push( new THREE.LineCurve(endPoint, startPoint) );
	}
	
};

// To get accurate point with reference to
// entire path distance at time t,
// following has to be done:

// 1. Length of each sub path have to be known
// 2. Locate and identify type of curve
// 3. Get t for the curve
// 4. Return curve.getPointAt(t')

THREE.CurvePath.prototype.getPoint = function( t ) {

	var d = t * this.getLength();
	var curveLengths = this.getCurveLengths();
	var i = 0, diff, curve;

	// To think about boundaries points.

	while ( i < curveLengths.length ) {

		if ( curveLengths[ i ] >= d ) {

			diff = curveLengths[ i ] - d;
			curve = this.curves[ i ];

			var u = 1 - diff / curve.getLength();

			return curve.getPointAt( u );

			break;
		}

		i ++;

	}

	return null;

	// loop where sum != 0, sum > d , sum+1 <d

};

/*
THREE.CurvePath.prototype.getTangent = function( t ) {
};*/


// We cannot use the default THREE.Curve getPoint() with getLength() because in
// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
// getPoint() depends on getLength

THREE.CurvePath.prototype.getLength = function() {

	var lens = this.getCurveLengths();
	return lens[ lens.length - 1 ];

};

// Compute lengths and cache them
// We cannot overwrite getLengths() because UtoT mapping uses it.

THREE.CurvePath.prototype.getCurveLengths = function() {

	// We use cache values if curves and cache array are same length

	if ( this.cacheLengths && this.cacheLengths.length == this.curves.length ) {

		return this.cacheLengths;

	};

	// Get length of subsurve
	// Push sums into cached array

	var lengths = [], sums = 0;
	var i, il = this.curves.length;

	for ( i = 0; i < il; i ++ ) {

		sums += this.curves[ i ].getLength();
		lengths.push( sums );

	}

	this.cacheLengths = lengths;

	return lengths;

};



// Returns min and max coordinates, as well as centroid

THREE.CurvePath.prototype.getBoundingBox = function () {

	var points = this.getPoints();

	var maxX, maxY, maxZ;
	var minX, minY, minZ;

	maxX = maxY = Number.NEGATIVE_INFINITY;
	minX = minY = Number.POSITIVE_INFINITY;

	var p, i, il, sum;

	var v3 = points[0] instanceof THREE.Vector3;

	sum = v3 ? new THREE.Vector3() : new THREE.Vector2();

	for ( i = 0, il = points.length; i < il; i ++ ) {

		p = points[ i ];

		if ( p.x > maxX ) maxX = p.x;
		else if ( p.x < minX ) minX = p.x;

		if ( p.y > maxY ) maxY = p.y;
		else if ( p.y < minY ) minY = p.y;

		if (v3) {

			if ( p.z > maxZ ) maxZ = p.z;
			else if ( p.z < minZ ) minZ = p.z;

		}

		sum.addSelf( p );

	}

	var ret = {

		minX: minX,
		minY: minY,
		maxX: maxX,
		maxY: maxY,
		centroid: sum.divideScalar( il )
	
	};

	if (v3) {

		ret.maxZ = maxZ;
		ret.minZ = minZ;
	
	}

	return ret;

};

/**************************************************************
 *	Create Geometries Helpers
 **************************************************************/

/// Generate geometry from path points (for Line or ParticleSystem objects)

THREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {

	var pts = this.getPoints( divisions, true );
	return this.createGeometry( pts );

};

// Generate geometry from equidistance sampling along the path

THREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {

	var pts = this.getSpacedPoints( divisions, true );
	return this.createGeometry( pts );

};

THREE.CurvePath.prototype.createGeometry = function( points ) {

	var geometry = new THREE.Geometry();

	for ( var i = 0; i < points.length; i ++ ) {

		geometry.vertices.push( new THREE.Vector3( points[ i ].x, points[ i ].y, points[ i ].z || 0) );

	}

	return geometry;

};


/**************************************************************
 *	Bend / Wrap Helper Methods
 **************************************************************/

// Wrap path / Bend modifiers?

THREE.CurvePath.prototype.addWrapPath = function ( bendpath ) {

	this.bends.push( bendpath );

};

THREE.CurvePath.prototype.getTransformedPoints = function( segments, bends ) {

	var oldPts = this.getPoints( segments ); // getPoints getSpacedPoints
	var i, il;

	if ( !bends ) {

		bends = this.bends;

	}

	for ( i = 0, il = bends.length; i < il; i ++ ) {

		oldPts = this.getWrapPoints( oldPts, bends[ i ] );

	}

	return oldPts;

};

THREE.CurvePath.prototype.getTransformedSpacedPoints = function( segments, bends ) {

	var oldPts = this.getSpacedPoints( segments );

	var i, il;

	if ( !bends ) {

		bends = this.bends;

	}

	for ( i = 0, il = bends.length; i < il; i ++ ) {

		oldPts = this.getWrapPoints( oldPts, bends[ i ] );

	}

	return oldPts;

};

// This returns getPoints() bend/wrapped around the contour of a path.
// Read http://www.planetclegg.com/projects/WarpingTextToSplines.html

THREE.CurvePath.prototype.getWrapPoints = function ( oldPts, path ) {

	var bounds = this.getBoundingBox();

	var i, il, p, oldX, oldY, xNorm;

	for ( i = 0, il = oldPts.length; i < il; i ++ ) {

		p = oldPts[ i ];

		oldX = p.x;
		oldY = p.y;

		xNorm = oldX / bounds.maxX;

		// If using actual distance, for length > path, requires line extrusions
		//xNorm = path.getUtoTmapping(xNorm, oldX); // 3 styles. 1) wrap stretched. 2) wrap stretch by arc length 3) warp by actual distance

		xNorm = path.getUtoTmapping( xNorm, oldX );

		// check for out of bounds?

		var pathPt = path.getPoint( xNorm );
		var normal = path.getNormalVector( xNorm ).multiplyScalar( oldY );

		p.x = pathPt.x + normal.x;
		p.y = pathPt.y + normal.y;

	}

	return oldPts;

};

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Gyroscope = function () {

	THREE.Object3D.call( this );

};

THREE.Gyroscope.prototype = Object.create( THREE.Object3D.prototype );

THREE.Gyroscope.prototype.updateMatrixWorld = function ( force ) {

	this.matrixAutoUpdate && this.updateMatrix();

	// update matrixWorld

	if ( this.matrixWorldNeedsUpdate || force ) {

		if ( this.parent ) {

			this.matrixWorld.multiply( this.parent.matrixWorld, this.matrix );

			this.matrixWorld.decompose( this.translationWorld, this.rotationWorld, this.scaleWorld );
			this.matrix.decompose( this.translationObject, this.rotationObject, this.scaleObject );

			this.matrixWorld.compose( this.translationWorld, this.rotationObject, this.scaleWorld );


		} else {

			this.matrixWorld.copy( this.matrix );

		}


		this.matrixWorldNeedsUpdate = false;

		force = true;

	}

	// update children

	for ( var i = 0, l = this.children.length; i < l; i ++ ) {

		this.children[ i ].updateMatrixWorld( force );

	}

};

THREE.Gyroscope.prototype.translationWorld = new THREE.Vector3();
THREE.Gyroscope.prototype.translationObject = new THREE.Vector3();
THREE.Gyroscope.prototype.rotationWorld = new THREE.Quaternion();
THREE.Gyroscope.prototype.rotationObject = new THREE.Quaternion();
THREE.Gyroscope.prototype.scaleWorld = new THREE.Vector3();
THREE.Gyroscope.prototype.scaleObject = new THREE.Vector3();

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Creates free form 2d path using series of points, lines or curves.
 *
 **/

THREE.Path = function ( points ) {

	THREE.CurvePath.call(this);

	this.actions = [];

	if ( points ) {

		this.fromPoints( points );

	}

};

THREE.Path.prototype = Object.create( THREE.CurvePath.prototype );

THREE.PathActions = {

	MOVE_TO: 'moveTo',
	LINE_TO: 'lineTo',
	QUADRATIC_CURVE_TO: 'quadraticCurveTo', // Bezier quadratic curve
	BEZIER_CURVE_TO: 'bezierCurveTo', 		// Bezier cubic curve
	CSPLINE_THRU: 'splineThru',				// Catmull-rom spline
	ARC: 'arc',								// Circle
	ELLIPSE: 'ellipse'
};

// TODO Clean up PATH API

// Create path using straight lines to connect all points
// - vectors: array of Vector2

THREE.Path.prototype.fromPoints = function ( vectors ) {

	this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

	for ( var v = 1, vlen = vectors.length; v < vlen; v ++ ) {

		this.lineTo( vectors[ v ].x, vectors[ v ].y );

	};

};

// startPath() endPath()?

THREE.Path.prototype.moveTo = function ( x, y ) {

	var args = Array.prototype.slice.call( arguments );
	this.actions.push( { action: THREE.PathActions.MOVE_TO, args: args } );

};

THREE.Path.prototype.lineTo = function ( x, y ) {

	var args = Array.prototype.slice.call( arguments );

	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	var curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.LINE_TO, args: args } );

};

THREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {

	var args = Array.prototype.slice.call( arguments );

	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	var curve = new THREE.QuadraticBezierCurve( new THREE.Vector2( x0, y0 ),
												new THREE.Vector2( aCPx, aCPy ),
												new THREE.Vector2( aX, aY ) );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.QUADRATIC_CURVE_TO, args: args } );

};

THREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y,
                                               aCP2x, aCP2y,
                                               aX, aY ) {

	var args = Array.prototype.slice.call( arguments );

	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	var curve = new THREE.CubicBezierCurve( new THREE.Vector2( x0, y0 ),
											new THREE.Vector2( aCP1x, aCP1y ),
											new THREE.Vector2( aCP2x, aCP2y ),
											new THREE.Vector2( aX, aY ) );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.BEZIER_CURVE_TO, args: args } );

};

THREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {

	var args = Array.prototype.slice.call( arguments );
	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];
//---
	var npts = [ new THREE.Vector2( x0, y0 ) ];
	Array.prototype.push.apply( npts, pts );

	var curve = new THREE.SplineCurve( npts );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.CSPLINE_THRU, args: args } );

};

// FUTURE: Change the API or follow canvas API?

THREE.Path.prototype.arc = function ( aX, aY, aRadius,
									  aStartAngle, aEndAngle, aClockwise ) {

	var lastargs = this.actions[ this.actions.length - 1].args;
	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	this.absarc(aX + x0, aY + y0, aRadius,
		aStartAngle, aEndAngle, aClockwise );
	
 };

 THREE.Path.prototype.absarc = function ( aX, aY, aRadius,
									  aStartAngle, aEndAngle, aClockwise ) {
	this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
 };
 
THREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius,
									  aStartAngle, aEndAngle, aClockwise ) {

	var lastargs = this.actions[ this.actions.length - 1].args;
	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	this.absellipse(aX + x0, aY + y0, xRadius, yRadius,
		aStartAngle, aEndAngle, aClockwise );

 };
 

THREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius,
									  aStartAngle, aEndAngle, aClockwise ) {

	var args = Array.prototype.slice.call( arguments );
	var curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius,
									aStartAngle, aEndAngle, aClockwise );
	this.curves.push( curve );

	var lastPoint = curve.getPoint(aClockwise ? 1 : 0);
	args.push(lastPoint.x);
	args.push(lastPoint.y);

	this.actions.push( { action: THREE.PathActions.ELLIPSE, args: args } );

 };

THREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {

	if ( ! divisions ) divisions = 40;

	var points = [];

	for ( var i = 0; i < divisions; i ++ ) {

		points.push( this.getPoint( i / divisions ) );

		//if( !this.getPoint( i / divisions ) ) throw "DIE";

	}

	// if ( closedPath ) {
	//
	// 	points.push( points[ 0 ] );
	//
	// }

	return points;

};

/* Return an array of vectors based on contour of the path */

THREE.Path.prototype.getPoints = function( divisions, closedPath ) {

	if (this.useSpacedPoints) {
		console.log('tata');
		return this.getSpacedPoints( divisions, closedPath );
	}

	divisions = divisions || 12;

	var points = [];

	var i, il, item, action, args;
	var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,
		laste, j,
		t, tx, ty;

	for ( i = 0, il = this.actions.length; i < il; i ++ ) {

		item = this.actions[ i ];

		action = item.action;
		args = item.args;

		switch( action ) {

		case THREE.PathActions.MOVE_TO:

			points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

			break;

		case THREE.PathActions.LINE_TO:

			points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

			break;

		case THREE.PathActions.QUADRATIC_CURVE_TO:

			cpx  = args[ 2 ];
			cpy  = args[ 3 ];

			cpx1 = args[ 0 ];
			cpy1 = args[ 1 ];

			if ( points.length > 0 ) {

				laste = points[ points.length - 1 ];

				cpx0 = laste.x;
				cpy0 = laste.y;

			} else {

				laste = this.actions[ i - 1 ].args;

				cpx0 = laste[ laste.length - 2 ];
				cpy0 = laste[ laste.length - 1 ];

			}

			for ( j = 1; j <= divisions; j ++ ) {

				t = j / divisions;

				tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );
				ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );

				points.push( new THREE.Vector2( tx, ty ) );

		  	}

			break;

		case THREE.PathActions.BEZIER_CURVE_TO:

			cpx  = args[ 4 ];
			cpy  = args[ 5 ];

			cpx1 = args[ 0 ];
			cpy1 = args[ 1 ];

			cpx2 = args[ 2 ];
			cpy2 = args[ 3 ];

			if ( points.length > 0 ) {

				laste = points[ points.length - 1 ];

				cpx0 = laste.x;
				cpy0 = laste.y;

			} else {

				laste = this.actions[ i - 1 ].args;

				cpx0 = laste[ laste.length - 2 ];
				cpy0 = laste[ laste.length - 1 ];

			}


			for ( j = 1; j <= divisions; j ++ ) {

				t = j / divisions;

				tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );
				ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );

				points.push( new THREE.Vector2( tx, ty ) );

			}

			break;

		case THREE.PathActions.CSPLINE_THRU:

			laste = this.actions[ i - 1 ].args;

			var last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );
			var spts = [ last ];

			var n = divisions * args[ 0 ].length;

			spts = spts.concat( args[ 0 ] );

			var spline = new THREE.SplineCurve( spts );

			for ( j = 1; j <= n; j ++ ) {

				points.push( spline.getPointAt( j / n ) ) ;

			}

			break;

		case THREE.PathActions.ARC:

			var aX = args[ 0 ], aY = args[ 1 ],
				aRadius = args[ 2 ],
				aStartAngle = args[ 3 ], aEndAngle = args[ 4 ],
				aClockwise = !!args[ 5 ];

			var deltaAngle = aEndAngle - aStartAngle;
			var angle;
			var tdivisions = divisions * 2;

			for ( j = 1; j <= tdivisions; j ++ ) {

				t = j / tdivisions;

				if ( ! aClockwise ) {

					t = 1 - t;

				}

				angle = aStartAngle + t * deltaAngle;

				tx = aX + aRadius * Math.cos( angle );
				ty = aY + aRadius * Math.sin( angle );

				//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

				points.push( new THREE.Vector2( tx, ty ) );

			}

			//console.log(points);

		  break;
		  
		case THREE.PathActions.ELLIPSE:

			var aX = args[ 0 ], aY = args[ 1 ],
				xRadius = args[ 2 ],
				yRadius = args[ 3 ],
				aStartAngle = args[ 4 ], aEndAngle = args[ 5 ],
				aClockwise = !!args[ 6 ];


			var deltaAngle = aEndAngle - aStartAngle;
			var angle;
			var tdivisions = divisions * 2;

			for ( j = 1; j <= tdivisions; j ++ ) {

				t = j / tdivisions;

				if ( ! aClockwise ) {

					t = 1 - t;

				}

				angle = aStartAngle + t * deltaAngle;

				tx = aX + xRadius * Math.cos( angle );
				ty = aY + yRadius * Math.sin( angle );

				//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

				points.push( new THREE.Vector2( tx, ty ) );

			}

			//console.log(points);

		  break;

		} // end switch

	}



	// Normalize to remove the closing point by default.
	var lastPoint = points[ points.length - 1];
	var EPSILON = 0.0000000001;
	if ( Math.abs(lastPoint.x - points[ 0 ].x) < EPSILON &&
             Math.abs(lastPoint.y - points[ 0 ].y) < EPSILON)
		points.splice( points.length - 1, 1);
	if ( closedPath ) {

		points.push( points[ 0 ] );

	}

	return points;

};

// Breaks path into shapes

THREE.Path.prototype.toShapes = function() {

	var i, il, item, action, args;

	var subPaths = [], lastPath = new THREE.Path();

	for ( i = 0, il = this.actions.length; i < il; i ++ ) {

		item = this.actions[ i ];

		args = item.args;
		action = item.action;

		if ( action == THREE.PathActions.MOVE_TO ) {

			if ( lastPath.actions.length != 0 ) {

				subPaths.push( lastPath );
				lastPath = new THREE.Path();

			}

		}

		lastPath[ action ].apply( lastPath, args );

	}

	if ( lastPath.actions.length != 0 ) {

		subPaths.push( lastPath );

	}

	// console.log(subPaths);

	if ( subPaths.length == 0 ) return [];

	var tmpPath, tmpShape, shapes = [];

	var holesFirst = !THREE.Shape.Utils.isClockWise( subPaths[ 0 ].getPoints() );
	// console.log("Holes first", holesFirst);

	if ( subPaths.length == 1) {
		tmpPath = subPaths[0];
		tmpShape = new THREE.Shape();
		tmpShape.actions = tmpPath.actions;
		tmpShape.curves = tmpPath.curves;
		shapes.push( tmpShape );
		return shapes;
	};

	if ( holesFirst ) {

		tmpShape = new THREE.Shape();

		for ( i = 0, il = subPaths.length; i < il; i ++ ) {

			tmpPath = subPaths[ i ];

			if ( THREE.Shape.Utils.isClockWise( tmpPath.getPoints() ) ) {

				tmpShape.actions = tmpPath.actions;
				tmpShape.curves = tmpPath.curves;

				shapes.push( tmpShape );
				tmpShape = new THREE.Shape();

				//console.log('cw', i);

			} else {

				tmpShape.holes.push( tmpPath );

				//console.log('ccw', i);

			}

		}

	} else {

		// Shapes first

		for ( i = 0, il = subPaths.length; i < il; i ++ ) {

			tmpPath = subPaths[ i ];

			if ( THREE.Shape.Utils.isClockWise( tmpPath.getPoints() ) ) {


				if ( tmpShape ) shapes.push( tmpShape );

				tmpShape = new THREE.Shape();
				tmpShape.actions = tmpPath.actions;
				tmpShape.curves = tmpPath.curves;

			} else {

				tmpShape.holes.push( tmpPath );

			}

		}

		shapes.push( tmpShape );

	}

	//console.log("shape", shapes);

	return shapes;

};
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Defines a 2d shape plane using paths.
 **/

// STEP 1 Create a path.
// STEP 2 Turn path into shape.
// STEP 3 ExtrudeGeometry takes in Shape/Shapes
// STEP 3a - Extract points from each shape, turn to vertices
// STEP 3b - Triangulate each shape, add faces.

THREE.Shape = function ( ) {

	THREE.Path.apply( this, arguments );
	this.holes = [];

};

THREE.Shape.prototype = Object.create( THREE.Path.prototype );

// Convenience method to return ExtrudeGeometry

THREE.Shape.prototype.extrude = function ( options ) {

	var extruded = new THREE.ExtrudeGeometry( this, options );
	return extruded;

};

// Convenience method to return ShapeGeometry

THREE.Shape.prototype.makeGeometry = function ( options ) {

	var geometry = new THREE.ShapeGeometry( this, options );
	return geometry;

};

// Get points of holes

THREE.Shape.prototype.getPointsHoles = function ( divisions ) {

	var i, il = this.holes.length, holesPts = [];

	for ( i = 0; i < il; i ++ ) {

		holesPts[ i ] = this.holes[ i ].getTransformedPoints( divisions, this.bends );

	}

	return holesPts;

};

// Get points of holes (spaced by regular distance)

THREE.Shape.prototype.getSpacedPointsHoles = function ( divisions ) {

	var i, il = this.holes.length, holesPts = [];

	for ( i = 0; i < il; i ++ ) {

		holesPts[ i ] = this.holes[ i ].getTransformedSpacedPoints( divisions, this.bends );

	}

	return holesPts;

};


// Get points of shape and holes (keypoints based on segments parameter)

THREE.Shape.prototype.extractAllPoints = function ( divisions ) {

	return {

		shape: this.getTransformedPoints( divisions ),
		holes: this.getPointsHoles( divisions )

	};

};

THREE.Shape.prototype.extractPoints = function ( divisions ) {

	if (this.useSpacedPoints) {
		return this.extractAllSpacedPoints(divisions);
	}

	return this.extractAllPoints(divisions);

};

//
// THREE.Shape.prototype.extractAllPointsWithBend = function ( divisions, bend ) {
//
// 	return {
//
// 		shape: this.transform( bend, divisions ),
// 		holes: this.getPointsHoles( divisions, bend )
//
// 	};
//
// };

// Get points of shape and holes (spaced by regular distance)

THREE.Shape.prototype.extractAllSpacedPoints = function ( divisions ) {

	return {

		shape: this.getTransformedSpacedPoints( divisions ),
		holes: this.getSpacedPointsHoles( divisions )

	};

};

/**************************************************************
 *	Utils
 **************************************************************/

THREE.Shape.Utils = {

	/*
		contour - array of vector2 for contour
		holes   - array of array of vector2
	*/

	removeHoles: function ( contour, holes ) {

		var shape = contour.concat(); // work on this shape
		var allpoints = shape.concat();

		/* For each isolated shape, find the closest points and break to the hole to allow triangulation */


		var prevShapeVert, nextShapeVert,
			prevHoleVert, nextHoleVert,
			holeIndex, shapeIndex,
			shapeId, shapeGroup,
			h, h2,
			hole, shortest, d,
			p, pts1, pts2,
			tmpShape1, tmpShape2,
			tmpHole1, tmpHole2,
			verts = [];

		for ( h = 0; h < holes.length; h ++ ) {

			hole = holes[ h ];

			/*
			shapeholes[ h ].concat(); // preserves original
			holes.push( hole );
			*/

			Array.prototype.push.apply( allpoints, hole );

			shortest = Number.POSITIVE_INFINITY;


			// Find the shortest pair of pts between shape and hole

			// Note: Actually, I'm not sure now if we could optimize this to be faster than O(m*n)
			// Using distanceToSquared() intead of distanceTo() should speed a little
			// since running square roots operations are reduced.

			for ( h2 = 0; h2 < hole.length; h2 ++ ) {

				pts1 = hole[ h2 ];
				var dist = [];

				for ( p = 0; p < shape.length; p++ ) {

					pts2 = shape[ p ];
					d = pts1.distanceToSquared( pts2 );
					dist.push( d );

					if ( d < shortest ) {

						shortest = d;
						holeIndex = h2;
						shapeIndex = p;

					}

				}

			}

			//console.log("shortest", shortest, dist);

			prevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;
			prevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;

			var areaapts = [

				hole[ holeIndex ],
				shape[ shapeIndex ],
				shape[ prevShapeVert ]

			];

			var areaa = THREE.FontUtils.Triangulate.area( areaapts );

			var areabpts = [

				hole[ holeIndex ],
				hole[ prevHoleVert ],
				shape[ shapeIndex ]

			];

			var areab = THREE.FontUtils.Triangulate.area( areabpts );

			var shapeOffset = 1;
			var holeOffset = -1;

			var oldShapeIndex = shapeIndex, oldHoleIndex = holeIndex;
			shapeIndex += shapeOffset;
			holeIndex += holeOffset;

			if ( shapeIndex < 0 ) { shapeIndex += shape.length;  }
			shapeIndex %= shape.length;

			if ( holeIndex < 0 ) { holeIndex += hole.length;  }
			holeIndex %= hole.length;

			prevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;
			prevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;

			areaapts = [

				hole[ holeIndex ],
				shape[ shapeIndex ],
				shape[ prevShapeVert ]

			];

			var areaa2 = THREE.FontUtils.Triangulate.area( areaapts );

			areabpts = [

				hole[ holeIndex ],
				hole[ prevHoleVert ],
				shape[ shapeIndex ]

			];

			var areab2 = THREE.FontUtils.Triangulate.area( areabpts );
			//console.log(areaa,areab ,areaa2,areab2, ( areaa + areab ),  ( areaa2 + areab2 ));

			if ( ( areaa + areab ) > ( areaa2 + areab2 ) ) {

				// In case areas are not correct.
				//console.log("USE THIS");

				shapeIndex = oldShapeIndex;
				holeIndex = oldHoleIndex ;

				if ( shapeIndex < 0 ) { shapeIndex += shape.length;  }
				shapeIndex %= shape.length;

				if ( holeIndex < 0 ) { holeIndex += hole.length;  }
				holeIndex %= hole.length;

				prevShapeVert = ( shapeIndex - 1 ) >= 0 ? shapeIndex - 1 : shape.length - 1;
				prevHoleVert = ( holeIndex - 1 ) >= 0 ? holeIndex - 1 : hole.length - 1;

			} else {

				//console.log("USE THAT ")

			}

			tmpShape1 = shape.slice( 0, shapeIndex );
			tmpShape2 = shape.slice( shapeIndex );
			tmpHole1 = hole.slice( holeIndex );
			tmpHole2 = hole.slice( 0, holeIndex );

			// Should check orders here again?

			var trianglea = [

				hole[ holeIndex ],
				shape[ shapeIndex ],
				shape[ prevShapeVert ]

			];

			var triangleb = [

				hole[ holeIndex ] ,
				hole[ prevHoleVert ],
				shape[ shapeIndex ]

			];

			verts.push( trianglea );
			verts.push( triangleb );

			shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

		}

		return {

			shape:shape, 		/* shape with no holes */
			isolatedPts: verts, /* isolated faces */
			allpoints: allpoints

		}


	},

	triangulateShape: function ( contour, holes ) {

		var shapeWithoutHoles = THREE.Shape.Utils.removeHoles( contour, holes );

		var shape = shapeWithoutHoles.shape,
			allpoints = shapeWithoutHoles.allpoints,
			isolatedPts = shapeWithoutHoles.isolatedPts;

		var triangles = THREE.FontUtils.Triangulate( shape, false ); // True returns indices for points of spooled shape

		// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

		//console.log( "triangles",triangles, triangles.length );
		//console.log( "allpoints",allpoints, allpoints.length );

		var i, il, f, face,
			key, index,
			allPointsMap = {},
			isolatedPointsMap = {};

		// prepare all points map

		for ( i = 0, il = allpoints.length; i < il; i ++ ) {

			key = allpoints[ i ].x + ":" + allpoints[ i ].y;

			if ( allPointsMap[ key ] !== undefined ) {

				console.log( "Duplicate point", key );

			}

			allPointsMap[ key ] = i;

		}

		// check all face vertices against all points map

		for ( i = 0, il = triangles.length; i < il; i ++ ) {

			face = triangles[ i ];

			for ( f = 0; f < 3; f ++ ) {

				key = face[ f ].x + ":" + face[ f ].y;

				index = allPointsMap[ key ];

				if ( index !== undefined ) {

					face[ f ] = index;

				}

			}

		}

		// check isolated points vertices against all points map

		for ( i = 0, il = isolatedPts.length; i < il; i ++ ) {

			face = isolatedPts[ i ];

			for ( f = 0; f < 3; f ++ ) {

				key = face[ f ].x + ":" + face[ f ].y;

				index = allPointsMap[ key ];

				if ( index !== undefined ) {

					face[ f ] = index;

				}

			}

		}

		return triangles.concat( isolatedPts );

	}, // end triangulate shapes

	/*
	triangulate2 : function( pts, holes ) {

		// For use with Poly2Tri.js

		var allpts = pts.concat();
		var shape = [];
		for (var p in pts) {
			shape.push(new js.poly2tri.Point(pts[p].x, pts[p].y));
		}

		var swctx = new js.poly2tri.SweepContext(shape);

		for (var h in holes) {
			var aHole = holes[h];
			var newHole = []
			for (i in aHole) {
				newHole.push(new js.poly2tri.Point(aHole[i].x, aHole[i].y));
				allpts.push(aHole[i]);
			}
			swctx.AddHole(newHole);
		}

		var find;
		var findIndexForPt = function (pt) {
			find = new THREE.Vector2(pt.x, pt.y);
			var p;
			for (p=0, pl = allpts.length; p<pl; p++) {
				if (allpts[p].equals(find)) return p;
			}
			return -1;
		};

		// triangulate
		js.poly2tri.sweep.Triangulate(swctx);

		var triangles =  swctx.GetTriangles();
		var tr ;
		var facesPts = [];
		for (var t in triangles) {
			tr =  triangles[t];
			facesPts.push([
				findIndexForPt(tr.GetPoint(0)),
				findIndexForPt(tr.GetPoint(1)),
				findIndexForPt(tr.GetPoint(2))
					]);
		}


	//	console.log(facesPts);
	//	console.log("triangles", triangles.length, triangles);

		// Returns array of faces with 3 element each
	return facesPts;
	},
*/

	isClockWise: function ( pts ) {

		return THREE.FontUtils.Triangulate.area( pts ) < 0;

	},

	// Bezier Curves formulas obtained from
	// http://en.wikipedia.org/wiki/B%C3%A9zier_curve

	// Quad Bezier Functions

	b2p0: function ( t, p ) {

		var k = 1 - t;
		return k * k * p;

	},

	b2p1: function ( t, p ) {

		return 2 * ( 1 - t ) * t * p;

	},

	b2p2: function ( t, p ) {

		return t * t * p;

	},

	b2: function ( t, p0, p1, p2 ) {

		return this.b2p0( t, p0 ) + this.b2p1( t, p1 ) + this.b2p2( t, p2 );

	},

	// Cubic Bezier Functions

	b3p0: function ( t, p ) {

		var k = 1 - t;
		return k * k * k * p;

	},

	b3p1: function ( t, p ) {

		var k = 1 - t;
		return 3 * k * k * t * p;

	},

	b3p2: function ( t, p ) {

		var k = 1 - t;
		return 3 * k * t * t * p;

	},

	b3p3: function ( t, p ) {

		return t * t * t * p;

	},

	b3: function ( t, p0, p1, p2, p3 ) {

		return this.b3p0( t, p0 ) + this.b3p1( t, p1 ) + this.b3p2( t, p2 ) +  this.b3p3( t, p3 );

	}

};

/**
 * @author mikael emtinger / http://gomo.se/
 */

THREE.AnimationHandler = (function() {

	var playing = [];
	var library = {};
	var that    = {};


	//--- update ---

	that.update = function( deltaTimeMS ) {

		for( var i = 0; i < playing.length; i ++ )
			playing[ i ].update( deltaTimeMS );

	};


	//--- add ---

	that.addToUpdate = function( animation ) {

		if ( playing.indexOf( animation ) === -1 )
			playing.push( animation );

	};


	//--- remove ---

	that.removeFromUpdate = function( animation ) {

		var index = playing.indexOf( animation );

		if( index !== -1 )
			playing.splice( index, 1 );

	};


	//--- add ---

	that.add = function( data ) {

		if ( library[ data.name ] !== undefined )
			console.log( "THREE.AnimationHandler.add: Warning! " + data.name + " already exists in library. Overwriting." );

		library[ data.name ] = data;
		initData( data );

	};


	//--- get ---

	that.get = function( name ) {

		if ( typeof name === "string" ) {

			if ( library[ name ] ) {

				return library[ name ];

			} else {

				console.log( "THREE.AnimationHandler.get: Couldn't find animation " + name );
				return null;

			}

		} else {

			// todo: add simple tween library

		}

	};

	//--- parse ---

	that.parse = function( root ) {

		// setup hierarchy

		var hierarchy = [];

		if ( root instanceof THREE.SkinnedMesh ) {

			for( var b = 0; b < root.bones.length; b++ ) {

				hierarchy.push( root.bones[ b ] );

			}

		} else {

			parseRecurseHierarchy( root, hierarchy );

		}

		return hierarchy;

	};

	var parseRecurseHierarchy = function( root, hierarchy ) {

		hierarchy.push( root );

		for( var c = 0; c < root.children.length; c++ )
			parseRecurseHierarchy( root.children[ c ], hierarchy );

	}


	//--- init data ---

	var initData = function( data ) {

		if( data.initialized === true )
			return;


		// loop through all keys

		for( var h = 0; h < data.hierarchy.length; h ++ ) {

			for( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

				// remove minus times

				if( data.hierarchy[ h ].keys[ k ].time < 0 )
					data.hierarchy[ h ].keys[ k ].time = 0;


				// create quaternions

				if( data.hierarchy[ h ].keys[ k ].rot !== undefined &&
				 !( data.hierarchy[ h ].keys[ k ].rot instanceof THREE.Quaternion ) ) {

					var quat = data.hierarchy[ h ].keys[ k ].rot;
					data.hierarchy[ h ].keys[ k ].rot = new THREE.Quaternion( quat[0], quat[1], quat[2], quat[3] );

				}

			}


			// prepare morph target keys

			if( data.hierarchy[ h ].keys.length && data.hierarchy[ h ].keys[ 0 ].morphTargets !== undefined ) {

				// get all used

				var usedMorphTargets = {};

				for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

					for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {

						var morphTargetName = data.hierarchy[ h ].keys[ k ].morphTargets[ m ];
						usedMorphTargets[ morphTargetName ] = -1;

					}

				}

				data.hierarchy[ h ].usedMorphTargets = usedMorphTargets;


				// set all used on all frames

				for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

					var influences = {};

					for ( var morphTargetName in usedMorphTargets ) {

						for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {

							if ( data.hierarchy[ h ].keys[ k ].morphTargets[ m ] === morphTargetName ) {

								influences[ morphTargetName ] = data.hierarchy[ h ].keys[ k ].morphTargetsInfluences[ m ];
								break;

							}

						}

						if ( m === data.hierarchy[ h ].keys[ k ].morphTargets.length ) {

							influences[ morphTargetName ] = 0;

						}

					}

					data.hierarchy[ h ].keys[ k ].morphTargetsInfluences = influences;

				}

			}


			// remove all keys that are on the same time

			for ( var k = 1; k < data.hierarchy[ h ].keys.length; k ++ ) {

				if ( data.hierarchy[ h ].keys[ k ].time === data.hierarchy[ h ].keys[ k - 1 ].time ) {

					data.hierarchy[ h ].keys.splice( k, 1 );
					k --;

				}

			}


			// set index

			for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

				data.hierarchy[ h ].keys[ k ].index = k;

			}

		}


		// JIT

		var lengthInFrames = parseInt( data.length * data.fps, 10 );

		data.JIT = {};
		data.JIT.hierarchy = [];

		for( var h = 0; h < data.hierarchy.length; h ++ )
			data.JIT.hierarchy.push( new Array( lengthInFrames ) );


		// done

		data.initialized = true;

	};


	// interpolation types

	that.LINEAR = 0;
	that.CATMULLROM = 1;
	that.CATMULLROM_FORWARD = 2;

	return that;

}());
/**
 * @author mikael emtinger / http://gomo.se/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Animation = function ( root, name, interpolationType ) {

	this.root = root;
	this.data = THREE.AnimationHandler.get( name );
	this.hierarchy = THREE.AnimationHandler.parse( root );

	this.currentTime = 0;
	this.timeScale = 1;

	this.isPlaying = false;
	this.isPaused = true;
	this.loop = true;

	this.interpolationType = interpolationType !== undefined ? interpolationType : THREE.AnimationHandler.LINEAR;

	this.points = [];
	this.target = new THREE.Vector3();

};

THREE.Animation.prototype.play = function ( loop, startTimeMS ) {

	if ( this.isPlaying === false ) {

		this.isPlaying = true;
		this.loop = loop !== undefined ? loop : true;
		this.currentTime = startTimeMS !== undefined ? startTimeMS : 0;

		// reset key cache

		var h, hl = this.hierarchy.length,
			object;

		for ( h = 0; h < hl; h ++ ) {

			object = this.hierarchy[ h ];

			if ( this.interpolationType !== THREE.AnimationHandler.CATMULLROM_FORWARD ) {

				object.useQuaternion = true;

			}

			object.matrixAutoUpdate = true;

			if ( object.animationCache === undefined ) {

				object.animationCache = {};
				object.animationCache.prevKey = { pos: 0, rot: 0, scl: 0 };
				object.animationCache.nextKey = { pos: 0, rot: 0, scl: 0 };
				object.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;

			}

			var prevKey = object.animationCache.prevKey;
			var nextKey = object.animationCache.nextKey;

			prevKey.pos = this.data.hierarchy[ h ].keys[ 0 ];
			prevKey.rot = this.data.hierarchy[ h ].keys[ 0 ];
			prevKey.scl = this.data.hierarchy[ h ].keys[ 0 ];

			nextKey.pos = this.getNextKeyWith( "pos", h, 1 );
			nextKey.rot = this.getNextKeyWith( "rot", h, 1 );
			nextKey.scl = this.getNextKeyWith( "scl", h, 1 );

		}

		this.update( 0 );

	}

	this.isPaused = false;

	THREE.AnimationHandler.addToUpdate( this );

};


THREE.Animation.prototype.pause = function() {

	if ( this.isPaused === true ) {

		THREE.AnimationHandler.addToUpdate( this );

	} else {

		THREE.AnimationHandler.removeFromUpdate( this );

	}

	this.isPaused = !this.isPaused;

};


THREE.Animation.prototype.stop = function() {

	this.isPlaying = false;
	this.isPaused  = false;
	THREE.AnimationHandler.removeFromUpdate( this );

};


THREE.Animation.prototype.update = function ( deltaTimeMS ) {

	// early out

	if ( this.isPlaying === false ) return;


	// vars

	var types = [ "pos", "rot", "scl" ];
	var type;
	var scale;
	var vector;
	var prevXYZ, nextXYZ;
	var prevKey, nextKey;
	var object;
	var animationCache;
	var frame;
	var JIThierarchy = this.data.JIT.hierarchy;
	var currentTime, unloopedCurrentTime;
	var currentPoint, forwardPoint, angle;


	this.currentTime += deltaTimeMS * this.timeScale;

	unloopedCurrentTime = this.currentTime;
	currentTime = this.currentTime = this.currentTime % this.data.length;
	frame = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );


	for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {

		object = this.hierarchy[ h ];
		animationCache = object.animationCache;

		// loop through pos/rot/scl

		for ( var t = 0; t < 3; t ++ ) {

			// get keys

			type    = types[ t ];
			prevKey = animationCache.prevKey[ type ];
			nextKey = animationCache.nextKey[ type ];

			// switch keys?

			if ( nextKey.time <= unloopedCurrentTime ) {

				// did we loop?

				if ( currentTime < unloopedCurrentTime ) {

					if ( this.loop ) {

						prevKey = this.data.hierarchy[ h ].keys[ 0 ];
						nextKey = this.getNextKeyWith( type, h, 1 );

						while( nextKey.time < currentTime ) {

							prevKey = nextKey;
							nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );

						}

					} else {

						this.stop();
						return;

					}

				} else {

					do {

						prevKey = nextKey;
						nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );

					} while( nextKey.time < currentTime )

				}

				animationCache.prevKey[ type ] = prevKey;
				animationCache.nextKey[ type ] = nextKey;

			}


			object.matrixAutoUpdate = true;
			object.matrixWorldNeedsUpdate = true;

			scale = ( currentTime - prevKey.time ) / ( nextKey.time - prevKey.time );
			prevXYZ = prevKey[ type ];
			nextXYZ = nextKey[ type ];


			// check scale error

			if ( scale < 0 || scale > 1 ) {

				console.log( "THREE.Animation.update: Warning! Scale out of bounds:" + scale + " on bone " + h );
				scale = scale < 0 ? 0 : 1;

			}

			// interpolate

			if ( type === "pos" ) {

				vector = object.position;

				if ( this.interpolationType === THREE.AnimationHandler.LINEAR ) {

					vector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;
					vector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;
					vector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;

				} else if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
						    this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

					this.points[ 0 ] = this.getPrevKeyWith( "pos", h, prevKey.index - 1 )[ "pos" ];
					this.points[ 1 ] = prevXYZ;
					this.points[ 2 ] = nextXYZ;
					this.points[ 3 ] = this.getNextKeyWith( "pos", h, nextKey.index + 1 )[ "pos" ];

					scale = scale * 0.33 + 0.33;

					currentPoint = this.interpolateCatmullRom( this.points, scale );

					vector.x = currentPoint[ 0 ];
					vector.y = currentPoint[ 1 ];
					vector.z = currentPoint[ 2 ];

					if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

						forwardPoint = this.interpolateCatmullRom( this.points, scale * 1.01 );

						this.target.set( forwardPoint[ 0 ], forwardPoint[ 1 ], forwardPoint[ 2 ] );
						this.target.subSelf( vector );
						this.target.y = 0;
						this.target.normalize();

						angle = Math.atan2( this.target.x, this.target.z );
						object.rotation.set( 0, angle, 0 );

					}

				}

			} else if ( type === "rot" ) {

				THREE.Quaternion.slerp( prevXYZ, nextXYZ, object.quaternion, scale );

			} else if ( type === "scl" ) {

				vector = object.scale;

				vector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;
				vector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;
				vector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;

			}

		}

	}

};

// Catmull-Rom spline

THREE.Animation.prototype.interpolateCatmullRom = function ( points, scale ) {

	var c = [], v3 = [],
	point, intPoint, weight, w2, w3,
	pa, pb, pc, pd;

	point = ( points.length - 1 ) * scale;
	intPoint = Math.floor( point );
	weight = point - intPoint;

	c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
	c[ 1 ] = intPoint;
	c[ 2 ] = intPoint > points.length - 2 ? intPoint : intPoint + 1;
	c[ 3 ] = intPoint > points.length - 3 ? intPoint : intPoint + 2;

	pa = points[ c[ 0 ] ];
	pb = points[ c[ 1 ] ];
	pc = points[ c[ 2 ] ];
	pd = points[ c[ 3 ] ];

	w2 = weight * weight;
	w3 = weight * w2;

	v3[ 0 ] = this.interpolate( pa[ 0 ], pb[ 0 ], pc[ 0 ], pd[ 0 ], weight, w2, w3 );
	v3[ 1 ] = this.interpolate( pa[ 1 ], pb[ 1 ], pc[ 1 ], pd[ 1 ], weight, w2, w3 );
	v3[ 2 ] = this.interpolate( pa[ 2 ], pb[ 2 ], pc[ 2 ], pd[ 2 ], weight, w2, w3 );

	return v3;

};

THREE.Animation.prototype.interpolate = function ( p0, p1, p2, p3, t, t2, t3 ) {

	var v0 = ( p2 - p0 ) * 0.5,
		v1 = ( p3 - p1 ) * 0.5;

	return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

};



// Get next key with

THREE.Animation.prototype.getNextKeyWith = function ( type, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;

	if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
		 this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

		key = key < keys.length - 1 ? key : keys.length - 1;

	} else {

		key = key % keys.length;

	}

	for ( ; key < keys.length; key++ ) {

		if ( keys[ key ][ type ] !== undefined ) {

			return keys[ key ];

		}

	}

	return this.data.hierarchy[ h ].keys[ 0 ];

};

// Get previous key with

THREE.Animation.prototype.getPrevKeyWith = function ( type, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;

	if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
		 this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

		key = key > 0 ? key : 0;

	} else {

		key = key >= 0 ? key : key + keys.length;

	}


	for ( ; key >= 0; key -- ) {

		if ( keys[ key ][ type ] !== undefined ) {

			return keys[ key ];

		}

	}

	return this.data.hierarchy[ h ].keys[ keys.length - 1 ];

};
/**
 * @author mikael emtinger / http://gomo.se/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author khang duong
 * @author erik kitson
 */

THREE.KeyFrameAnimation = function( root, data, JITCompile ) {

	this.root = root;
	this.data = THREE.AnimationHandler.get( data );
	this.hierarchy = THREE.AnimationHandler.parse( root );
	this.currentTime = 0;
	this.timeScale = 0.001;
	this.isPlaying = false;
	this.isPaused = true;
	this.loop = true;
	this.JITCompile = JITCompile !== undefined ? JITCompile : true;

	// initialize to first keyframes

	for ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {

		var keys = this.data.hierarchy[h].keys,
			sids = this.data.hierarchy[h].sids,
			obj = this.hierarchy[h];

		if ( keys.length && sids ) {

			for ( var s = 0; s < sids.length; s++ ) {

				var sid = sids[ s ],
					next = this.getNextKeyWith( sid, h, 0 );

				if ( next ) {

					next.apply( sid );

				}

			}

			obj.matrixAutoUpdate = false;
			this.data.hierarchy[h].node.updateMatrix();
			obj.matrixWorldNeedsUpdate = true;

		}

	}

};

// Play

THREE.KeyFrameAnimation.prototype.play = function( loop, startTimeMS ) {

	if( !this.isPlaying ) {

		this.isPlaying = true;
		this.loop = loop !== undefined ? loop : true;
		this.currentTime = startTimeMS !== undefined ? startTimeMS : 0;
		this.startTimeMs = startTimeMS;
		this.startTime = 10000000;
		this.endTime = -this.startTime;


		// reset key cache

		var h, hl = this.hierarchy.length,
			object,
			node;

		for ( h = 0; h < hl; h++ ) {

			object = this.hierarchy[ h ];
			node = this.data.hierarchy[ h ];
			object.useQuaternion = true;

			if ( node.animationCache === undefined ) {

				node.animationCache = {};
				node.animationCache.prevKey = null;
				node.animationCache.nextKey = null;
				node.animationCache.originalMatrix = object instanceof THREE.Bone ? object.skinMatrix : object.matrix;

			}

			var keys = this.data.hierarchy[h].keys;

			if (keys.length) {

				node.animationCache.prevKey = keys[ 0 ];
				node.animationCache.nextKey = keys[ 1 ];

				this.startTime = Math.min( keys[0].time, this.startTime );
				this.endTime = Math.max( keys[keys.length - 1].time, this.endTime );

			}

		}

		this.update( 0 );

	}

	this.isPaused = false;

	THREE.AnimationHandler.addToUpdate( this );

};



// Pause

THREE.KeyFrameAnimation.prototype.pause = function() {

	if( this.isPaused ) {

		THREE.AnimationHandler.addToUpdate( this );

	} else {

		THREE.AnimationHandler.removeFromUpdate( this );

	}

	this.isPaused = !this.isPaused;

};


// Stop

THREE.KeyFrameAnimation.prototype.stop = function() {

	this.isPlaying = false;
	this.isPaused  = false;
	THREE.AnimationHandler.removeFromUpdate( this );


	// reset JIT matrix and remove cache

	for ( var h = 0; h < this.data.hierarchy.length; h++ ) {
        
        var obj = this.hierarchy[ h ];
		var node = this.data.hierarchy[ h ];

		if ( node.animationCache !== undefined ) {

			var original = node.animationCache.originalMatrix;

			if( obj instanceof THREE.Bone ) {

				original.copy( obj.skinMatrix );
				obj.skinMatrix = original;

			} else {

				original.copy( obj.matrix );
				obj.matrix = original;

			}

			delete node.animationCache;

		}

	}

};


// Update

THREE.KeyFrameAnimation.prototype.update = function( deltaTimeMS ) {

	// early out

	if( !this.isPlaying ) return;


	// vars

	var prevKey, nextKey;
	var object;
	var node;
	var frame;
	var JIThierarchy = this.data.JIT.hierarchy;
	var currentTime, unloopedCurrentTime;
	var looped;


	// update

	this.currentTime += deltaTimeMS * this.timeScale;

	unloopedCurrentTime = this.currentTime;
	currentTime         = this.currentTime = this.currentTime % this.data.length;

	// if looped around, the current time should be based on the startTime
	if ( currentTime < this.startTimeMs ) {

		currentTime = this.currentTime = this.startTimeMs + currentTime;

	}

	frame               = parseInt( Math.min( currentTime * this.data.fps, this.data.length * this.data.fps ), 10 );
	looped 				= currentTime < unloopedCurrentTime;

	if ( looped && !this.loop ) {

		// Set the animation to the last keyframes and stop
		for ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {

			var keys = this.data.hierarchy[h].keys,
				sids = this.data.hierarchy[h].sids,
				end = keys.length-1,
				obj = this.hierarchy[h];

			if ( keys.length ) {

				for ( var s = 0; s < sids.length; s++ ) {

					var sid = sids[ s ],
						prev = this.getPrevKeyWith( sid, h, end );

					if ( prev ) {
						prev.apply( sid );

					}

				}

				this.data.hierarchy[h].node.updateMatrix();
				obj.matrixWorldNeedsUpdate = true;

			}

		}

		this.stop();
		return;

	}

	// check pre-infinity
	if ( currentTime < this.startTime ) {

		return;

	}

	// update

	for ( var h = 0, hl = this.hierarchy.length; h < hl; h++ ) {

		object = this.hierarchy[ h ];
		node = this.data.hierarchy[ h ];

		var keys = node.keys,
			animationCache = node.animationCache;

		// use JIT?

		if ( this.JITCompile && JIThierarchy[ h ][ frame ] !== undefined ) {

			if( object instanceof THREE.Bone ) {

				object.skinMatrix = JIThierarchy[ h ][ frame ];
				object.matrixWorldNeedsUpdate = false;

			} else {

				object.matrix = JIThierarchy[ h ][ frame ];
				object.matrixWorldNeedsUpdate = true;

			}

		// use interpolation

		} else if ( keys.length ) {

			// make sure so original matrix and not JIT matrix is set

			if ( this.JITCompile && animationCache ) {

				if( object instanceof THREE.Bone ) {

					object.skinMatrix = animationCache.originalMatrix;

				} else {

					object.matrix = animationCache.originalMatrix;

				}

			}

			prevKey = animationCache.prevKey;
			nextKey = animationCache.nextKey;

			if ( prevKey && nextKey ) {

				// switch keys?

				if ( nextKey.time <= unloopedCurrentTime ) {

					// did we loop?

					if ( looped && this.loop ) {

						prevKey = keys[ 0 ];
						nextKey = keys[ 1 ];

						while ( nextKey.time < currentTime ) {

							prevKey = nextKey;
							nextKey = keys[ prevKey.index + 1 ];

						}

					} else if ( !looped ) {

						var lastIndex = keys.length - 1;

						while ( nextKey.time < currentTime && nextKey.index !== lastIndex ) {

							prevKey = nextKey;
							nextKey = keys[ prevKey.index + 1 ];

						}

					}

					animationCache.prevKey = prevKey;
					animationCache.nextKey = nextKey;

				}
                if(nextKey.time >= currentTime)
                    prevKey.interpolate( nextKey, currentTime );
                else
                    prevKey.interpolate( nextKey, nextKey.time);

			}

			this.data.hierarchy[h].node.updateMatrix();
			object.matrixWorldNeedsUpdate = true;

		}

	}

	// update JIT?

	if ( this.JITCompile ) {

		if ( JIThierarchy[ 0 ][ frame ] === undefined ) {

			this.hierarchy[ 0 ].updateMatrixWorld( true );

			for ( var h = 0; h < this.hierarchy.length; h++ ) {

				if( this.hierarchy[ h ] instanceof THREE.Bone ) {

					JIThierarchy[ h ][ frame ] = this.hierarchy[ h ].skinMatrix.clone();

				} else {

					JIThierarchy[ h ][ frame ] = this.hierarchy[ h ].matrix.clone();

				}

			}

		}

	}

};

// Get next key with

THREE.KeyFrameAnimation.prototype.getNextKeyWith = function( sid, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;
	key = key % keys.length;

	for ( ; key < keys.length; key++ ) {

		if ( keys[ key ].hasTarget( sid ) ) {

			return keys[ key ];

		}

	}

	return keys[ 0 ];

};

// Get previous key with

THREE.KeyFrameAnimation.prototype.getPrevKeyWith = function( sid, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;
	key = key >= 0 ? key : key + keys.length;

	for ( ; key >= 0; key-- ) {

		if ( keys[ key ].hasTarget( sid ) ) {

			return keys[ key ];

		}

	}

	return keys[ keys.length - 1 ];

};
/**
 * Camera for rendering cube maps
 *	- renders scene into axis-aligned cube
 *
 * @author alteredq / http://alteredqualia.com/
 */

THREE.CubeCamera = function ( near, far, cubeResolution ) {

	THREE.Object3D.call( this );

	var fov = 90, aspect = 1;

	var cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraPX.up.set( 0, -1, 0 );
	cameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );
	this.add( cameraPX );

	var cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraNX.up.set( 0, -1, 0 );
	cameraNX.lookAt( new THREE.Vector3( -1, 0, 0 ) );
	this.add( cameraNX );

	var cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraPY.up.set( 0, 0, 1 );
	cameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );
	this.add( cameraPY );

	var cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraNY.up.set( 0, 0, -1 );
	cameraNY.lookAt( new THREE.Vector3( 0, -1, 0 ) );
	this.add( cameraNY );

	var cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraPZ.up.set( 0, -1, 0 );
	cameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );
	this.add( cameraPZ );

	var cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraNZ.up.set( 0, -1, 0 );
	cameraNZ.lookAt( new THREE.Vector3( 0, 0, -1 ) );
	this.add( cameraNZ );

	this.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );

	this.updateCubeMap = function ( renderer, scene ) {

		var renderTarget = this.renderTarget;
		var generateMipmaps = renderTarget.generateMipmaps;

		renderTarget.generateMipmaps = false;

		renderTarget.activeCubeFace = 0;
		renderer.render( scene, cameraPX, renderTarget );

		renderTarget.activeCubeFace = 1;
		renderer.render( scene, cameraNX, renderTarget );

		renderTarget.activeCubeFace = 2;
		renderer.render( scene, cameraPY, renderTarget );

		renderTarget.activeCubeFace = 3;
		renderer.render( scene, cameraNY, renderTarget );

		renderTarget.activeCubeFace = 4;
		renderer.render( scene, cameraPZ, renderTarget );

		renderTarget.generateMipmaps = generateMipmaps;

		renderTarget.activeCubeFace = 5;
		renderer.render( scene, cameraNZ, renderTarget );

	};

};

THREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );
/*
 *	@author zz85 / http://twitter.com/blurspline / http://www.lab4games.net/zz85/blog
 *
 *	A general perpose camera, for setting FOV, Lens Focal Length,
 *		and switching between perspective and orthographic views easily.
 *		Use this only if you do not wish to manage
 *		both a Orthographic and Perspective Camera
 *
 */


THREE.CombinedCamera = function ( width, height, fov, near, far, orthoNear, orthoFar ) {

	THREE.Camera.call( this );

	this.fov = fov;

	this.left = -width / 2;
	this.right = width / 2
	this.top = height / 2;
	this.bottom = -height / 2;

	// We could also handle the projectionMatrix internally, but just wanted to test nested camera objects

	this.cameraO = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 	orthoNear, orthoFar );
	this.cameraP = new THREE.PerspectiveCamera( fov, width / height, near, far );

	this.zoom = 1;

	this.toPerspective();

	var aspect = width/height;

};

THREE.CombinedCamera.prototype = Object.create( THREE.Camera.prototype );

THREE.CombinedCamera.prototype.toPerspective = function () {

	// Switches to the Perspective Camera

	this.near = this.cameraP.near;
	this.far = this.cameraP.far;

	this.cameraP.fov =  this.fov / this.zoom ;

	this.cameraP.updateProjectionMatrix();

	this.projectionMatrix = this.cameraP.projectionMatrix;

	this.inPerspectiveMode = true;
	this.inOrthographicMode = false;

};

THREE.CombinedCamera.prototype.toOrthographic = function () {

	// Switches to the Orthographic camera estimating viewport from Perspective

	var fov = this.fov;
	var aspect = this.cameraP.aspect;
	var near = this.cameraP.near;
	var far = this.cameraP.far;

	// The size that we set is the mid plane of the viewing frustum

	var hyperfocus = ( near + far ) / 2;

	var halfHeight = Math.tan( fov / 2 ) * hyperfocus;
	var planeHeight = 2 * halfHeight;
	var planeWidth = planeHeight * aspect;
	var halfWidth = planeWidth / 2;

	halfHeight /= this.zoom;
	halfWidth /= this.zoom;

	this.cameraO.left = -halfWidth;
	this.cameraO.right = halfWidth;
	this.cameraO.top = halfHeight;
	this.cameraO.bottom = -halfHeight;

	// this.cameraO.left = -farHalfWidth;
	// this.cameraO.right = farHalfWidth;
	// this.cameraO.top = farHalfHeight;
	// this.cameraO.bottom = -farHalfHeight;

	// this.cameraO.left = this.left / this.zoom;
	// this.cameraO.right = this.right / this.zoom;
	// this.cameraO.top = this.top / this.zoom;
	// this.cameraO.bottom = this.bottom / this.zoom;

	this.cameraO.updateProjectionMatrix();

	this.near = this.cameraO.near;
	this.far = this.cameraO.far;
	this.projectionMatrix = this.cameraO.projectionMatrix;

	this.inPerspectiveMode = false;
	this.inOrthographicMode = true;

};


THREE.CombinedCamera.prototype.setSize = function( width, height ) {

	this.cameraP.aspect = width / height;
	this.left = -width / 2;
	this.right = width / 2
	this.top = height / 2;
	this.bottom = -height / 2;

};


THREE.CombinedCamera.prototype.setFov = function( fov ) {

	this.fov = fov;

	if ( this.inPerspectiveMode ) {

		this.toPerspective();

	} else {

		this.toOrthographic();

	}

};

// For mantaining similar API with PerspectiveCamera

THREE.CombinedCamera.prototype.updateProjectionMatrix = function() {

	if ( this.inPerspectiveMode ) {

		this.toPerspective();

	} else {

		this.toPerspective();
		this.toOrthographic();

	}

};

/*
* Uses Focal Length (in mm) to estimate and set FOV
* 35mm (fullframe) camera is used if frame size is not specified;
* Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html
*/
THREE.CombinedCamera.prototype.setLens = function ( focalLength, frameHeight ) {

	if ( frameHeight === undefined ) frameHeight = 24;

	var fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );

	this.setFov( fov );

	return fov;
};


THREE.CombinedCamera.prototype.setZoom = function( zoom ) {

	this.zoom = zoom;

	if ( this.inPerspectiveMode ) {

		this.toPerspective();

	} else {

		this.toOrthographic();

	}

};

THREE.CombinedCamera.prototype.toFrontView = function() {

	this.rotation.x = 0;
	this.rotation.y = 0;
	this.rotation.z = 0;

	// should we be modifing the matrix instead?

	this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toBackView = function() {

	this.rotation.x = 0;
	this.rotation.y = Math.PI;
	this.rotation.z = 0;
	this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toLeftView = function() {

	this.rotation.x = 0;
	this.rotation.y = - Math.PI / 2;
	this.rotation.z = 0;
	this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toRightView = function() {

	this.rotation.x = 0;
	this.rotation.y = Math.PI / 2;
	this.rotation.z = 0;
	this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toTopView = function() {

	this.rotation.x = - Math.PI / 2;
	this.rotation.y = 0;
	this.rotation.z = 0;
	this.rotationAutoUpdate = false;

};

THREE.CombinedCamera.prototype.toBottomView = function() {

	this.rotation.x = Math.PI / 2;
	this.rotation.y = 0;
	this.rotation.z = 0;
	this.rotationAutoUpdate = false;

};

/**
 * @author alteredq / http://alteredqualia.com/
 *
 *	- 3d asterisk shape (for line pieces THREE.Line)
 */

THREE.AsteriskGeometry = function ( innerRadius, outerRadius ) {

	THREE.Geometry.call( this );

	var sd = innerRadius;
	var ed = outerRadius;

	var sd2 = 0.707 * sd;
	var ed2 = 0.707 * ed;

	var rays = [ [ sd, 0, 0 ], [ ed, 0, 0 ], [ -sd, 0, 0 ], [ -ed, 0, 0 ],
				 [ 0, sd, 0 ], [ 0, ed, 0 ], [ 0, -sd, 0 ], [ 0, -ed, 0 ],
				 [ 0, 0, sd ], [ 0, 0, ed ], [ 0, 0, -sd ], [ 0, 0, -ed ],
				 [ sd2, sd2, 0 ], [ ed2, ed2, 0 ], [ -sd2, -sd2, 0 ], [ -ed2, -ed2, 0 ],
				 [ sd2, -sd2, 0 ], [ ed2, -ed2, 0 ], [ -sd2, sd2, 0 ], [ -ed2, ed2, 0 ],
				 [ sd2, 0, sd2 ], [ ed2, 0, ed2 ], [ -sd2, 0, -sd2 ], [ -ed2, 0, -ed2 ],
				 [ sd2, 0, -sd2 ], [ ed2, 0, -ed2 ], [ -sd2, 0, sd2 ], [ -ed2, 0, ed2 ],
				 [ 0, sd2, sd2 ], [ 0, ed2, ed2 ], [ 0, -sd2, -sd2 ], [ 0, -ed2, -ed2 ],
				 [ 0, sd2, -sd2 ], [ 0, ed2, -ed2 ], [ 0, -sd2, sd2 ], [ 0, -ed2, ed2 ]
	];

	for ( var i = 0, il = rays.length; i < il; i ++ ) {

		var x = rays[ i ][ 0 ];
		var y = rays[ i ][ 1 ];
		var z = rays[ i ][ 2 ];

		this.vertices.push( new THREE.Vector3( x, y, z ) );

	}

};

THREE.AsteriskGeometry.prototype = Object.create( THREE.Geometry.prototype );/**
 * @author hughes
 */

THREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {

    THREE.Geometry.call( this );

    radius = radius || 50;

    thetaStart = thetaStart !== undefined ? thetaStart : 0;
    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
    segments = segments !== undefined ? Math.max( 3, segments ) : 8;

    var i, uvs = [],
    center = new THREE.Vector3(), centerUV = new THREE.Vector2( 0.5, 0.5 );

    this.vertices.push(center);
    uvs.push( centerUV );

    for ( i = 0; i <= segments; i ++ ) {

        var vertex = new THREE.Vector3();

        vertex.x = radius * Math.cos( thetaStart + i / segments * thetaLength );
        vertex.y = radius * Math.sin( thetaStart + i / segments * thetaLength );

        this.vertices.push( vertex );
        uvs.push( new THREE.Vector2( ( vertex.x / radius + 1 ) / 2, - ( vertex.y / radius + 1 ) / 2 + 1 ) );

    }

    var n = new THREE.Vector3( 0, 0, -1 );

    for ( i = 1; i <= segments; i ++ ) {

        var v1 = i;
        var v2 = i + 1 ;
        var v3 = 0;

        this.faces.push( new THREE.Face3( v1, v2, v3, [ n, n, n ] ) );
        this.faceVertexUvs[ 0 ].push( [ uvs[ i ], uvs[ i + 1 ], centerUV ] );

    }

    this.computeCentroids();
    this.computeFaceNormals();

    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author mrdoob / http://mrdoob.com/
 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
 */

THREE.CubeGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	THREE.Geometry.call( this );

	var scope = this;

	this.width = width;
	this.height = height;
	this.depth = depth;

	this.widthSegments = widthSegments || 1;
	this.heightSegments = heightSegments || 1;
	this.depthSegments = depthSegments || 1;

	var width_half = this.width / 2;
	var height_half = this.height / 2;
	var depth_half = this.depth / 2;

	buildPlane( 'z', 'y', - 1, - 1, this.depth, this.height, width_half, 0 ); // px
	buildPlane( 'z', 'y',   1, - 1, this.depth, this.height, - width_half, 1 ); // nx
	buildPlane( 'x', 'z',   1,   1, this.width, this.depth, height_half, 2 ); // py
	buildPlane( 'x', 'z',   1, - 1, this.width, this.depth, - height_half, 3 ); // ny
	buildPlane( 'x', 'y',   1, - 1, this.width, this.height, depth_half, 4 ); // pz
	buildPlane( 'x', 'y', - 1, - 1, this.width, this.height, - depth_half, 5 ); // nz

	function buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {

		var w, ix, iy,
		gridX = scope.widthSegments,
		gridY = scope.heightSegments,
		width_half = width / 2,
		height_half = height / 2,
		offset = scope.vertices.length;

		if ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {

			w = 'z';

		} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {

			w = 'y';
			gridY = scope.depthSegments;

		} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {

			w = 'x';
			gridX = scope.depthSegments;

		}

		var gridX1 = gridX + 1,
		gridY1 = gridY + 1,
		segment_width = width / gridX,
		segment_height = height / gridY,
		normal = new THREE.Vector3();

		normal[ w ] = depth > 0 ? 1 : - 1;

		for ( iy = 0; iy < gridY1; iy ++ ) {

			for ( ix = 0; ix < gridX1; ix ++ ) {

				var vector = new THREE.Vector3();
				vector[ u ] = ( ix * segment_width - width_half ) * udir;
				vector[ v ] = ( iy * segment_height - height_half ) * vdir;
				vector[ w ] = depth;

				scope.vertices.push( vector );

			}

		}

		for ( iy = 0; iy < gridY; iy++ ) {

			for ( ix = 0; ix < gridX; ix++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				var face = new THREE.Face4( a + offset, b + offset, c + offset, d + offset );
				face.normal.copy( normal );
				face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone(), normal.clone() );
				face.materialIndex = materialIndex;

				scope.faces.push( face );
				scope.faceVertexUvs[ 0 ].push( [
							new THREE.Vector2( ix / gridX, 1 - iy / gridY ),
							new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY ),
							new THREE.Vector2( ( ix + 1 ) / gridX, 1- ( iy + 1 ) / gridY ),
							new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY )
						] );

			}

		}

	}

	this.computeCentroids();
	this.mergeVertices();

};

THREE.CubeGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radiusSegments, heightSegments, openEnded ) {

	THREE.Geometry.call( this );

	radiusTop = radiusTop !== undefined ? radiusTop : 20;
	radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
	height = height !== undefined ? height : 100;

	var heightHalf = height / 2;
	var segmentsX = radiusSegments || 8;
	var segmentsY = heightSegments || 1;

	var x, y, vertices = [], uvs = [];

	for ( y = 0; y <= segmentsY; y ++ ) {

		var verticesRow = [];
		var uvsRow = [];

		var v = y / segmentsY;
		var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

		for ( x = 0; x <= segmentsX; x ++ ) {

			var u = x / segmentsX;

			var vertex = new THREE.Vector3();
			vertex.x = radius * Math.sin( u * Math.PI * 2 );
			vertex.y = - v * height + heightHalf;
			vertex.z = radius * Math.cos( u * Math.PI * 2 );

			this.vertices.push( vertex );

			verticesRow.push( this.vertices.length - 1 );
			uvsRow.push( new THREE.Vector2( u, 1 - v ) );

		}

		vertices.push( verticesRow );
		uvs.push( uvsRow );

	}

	var tanTheta = ( radiusBottom - radiusTop ) / height;
	var na, nb;

	for ( x = 0; x < segmentsX; x ++ ) {

		if ( radiusTop !== 0 ) {

			na = this.vertices[ vertices[ 0 ][ x ] ].clone();
			nb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();

		} else {

			na = this.vertices[ vertices[ 1 ][ x ] ].clone();
			nb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();

		}

		na.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();
		nb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();

		for ( y = 0; y < segmentsY; y ++ ) {

			var v1 = vertices[ y ][ x ];
			var v2 = vertices[ y + 1 ][ x ];
			var v3 = vertices[ y + 1 ][ x + 1 ];
			var v4 = vertices[ y ][ x + 1 ];

			var n1 = na.clone();
			var n2 = na.clone();
			var n3 = nb.clone();
			var n4 = nb.clone();

			var uv1 = uvs[ y ][ x ].clone();
			var uv2 = uvs[ y + 1 ][ x ].clone();
			var uv3 = uvs[ y + 1 ][ x + 1 ].clone();
			var uv4 = uvs[ y ][ x + 1 ].clone();

			this.faces.push( new THREE.Face4( v1, v2, v3, v4, [ n1, n2, n3, n4 ] ) );
			this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3, uv4 ] );

		}

	}

	// top cap

	if ( !openEnded && radiusTop > 0 ) {

		this.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );

		for ( x = 0; x < segmentsX; x ++ ) {

			var v1 = vertices[ 0 ][ x ];
			var v2 = vertices[ 0 ][ x + 1 ];
			var v3 = this.vertices.length - 1;

			var n1 = new THREE.Vector3( 0, 1, 0 );
			var n2 = new THREE.Vector3( 0, 1, 0 );
			var n3 = new THREE.Vector3( 0, 1, 0 );

			var uv1 = uvs[ 0 ][ x ].clone();
			var uv2 = uvs[ 0 ][ x + 1 ].clone();
			var uv3 = new THREE.Vector2( uv2.u, 0 );

			this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
			this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

		}

	}

	// bottom cap

	if ( !openEnded && radiusBottom > 0 ) {

		this.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );

		for ( x = 0; x < segmentsX; x ++ ) {

			var v1 = vertices[ y ][ x + 1 ];
			var v2 = vertices[ y ][ x ];
			var v3 = this.vertices.length - 1;

			var n1 = new THREE.Vector3( 0, - 1, 0 );
			var n2 = new THREE.Vector3( 0, - 1, 0 );
			var n3 = new THREE.Vector3( 0, - 1, 0 );

			var uv1 = uvs[ y ][ x + 1 ].clone();
			var uv2 = uvs[ y ][ x ].clone();
			var uv3 = new THREE.Vector2( uv2.u, 1 );

			this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
			this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

		}

	}

	this.computeCentroids();
	this.computeFaceNormals();

}

THREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  size: <float>, // size of the text
 *  height: <float>, // thickness to extrude text
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segements of extrude spline too
 *  amount: <int>, // Amount
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into text bevel goes
 *  bevelSize: <float>, // how far from text outline is bevel
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
 *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals
 *
 *  material: <int> // material index for front and back faces
 *  extrudeMaterial: <int> // material index for extrusion and beveled faces
 *  uvGenerator: <Object> // object that provides UV generator functions
 *
 * }
 **/

THREE.ExtrudeGeometry = function ( shapes, options ) {

	if ( typeof( shapes ) === "undefined" ) {
		shapes = [];
		return;
	}

	THREE.Geometry.call( this );

	shapes = shapes instanceof Array ? shapes : [ shapes ];

	this.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();

	this.addShapeList( shapes, options );

	this.computeCentroids();
	this.computeFaceNormals();

	// can't really use automatic vertex normals
	// as then front and back sides get smoothed too
	// should do separate smoothing just for sides

	//this.computeVertexNormals();

	//console.log( "took", ( Date.now() - startTime ) );

};

THREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );

THREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {
	var sl = shapes.length;

	for ( var s = 0; s < sl; s ++ ) {
		var shape = shapes[ s ];
		this.addShape( shape, options );
	}
};

THREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

	var amount = options.amount !== undefined ? options.amount : 100;

	var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
	var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
	var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

	var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	var steps = options.steps !== undefined ? options.steps : 1;

	var extrudePath = options.extrudePath;
	var extrudePts, extrudeByPath = false;

	var material = options.material;
	var extrudeMaterial = options.extrudeMaterial;

	// Use default WorldUVGenerator if no UV generators are specified.
	var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;

	var shapebb = this.shapebb;
	//shapebb = shape.getBoundingBox();



	var splineTube, binormal, normal, position2;
	if ( extrudePath ) {

		extrudePts = extrudePath.getSpacedPoints( steps );

		extrudeByPath = true;
		bevelEnabled = false; // bevels not supported for path extrusion

		// SETUP TNB variables

		// Reuse TNB from TubeGeomtry for now.
		// TODO1 - have a .isClosed in spline?

		splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false);

		// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

		binormal = new THREE.Vector3();
		normal = new THREE.Vector3();
		position2 = new THREE.Vector3();

	}

	// Safeguards if bevels are not enabled

	if ( ! bevelEnabled ) {

		bevelSegments = 0;
		bevelThickness = 0;
		bevelSize = 0;

	}

	// Variables initalization

	var ahole, h, hl; // looping of holes
	var scope = this;
	var bevelPoints = [];

	var shapesOffset = this.vertices.length;

	var shapePoints = shape.extractPoints( curveSegments );

	var vertices = shapePoints.shape;
	var holes = shapePoints.holes;

	var reverse = !THREE.Shape.Utils.isClockWise( vertices ) ;

	if ( reverse ) {

		vertices = vertices.reverse();

		// Maybe we should also check if holes are in the opposite direction, just to be safe ...

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			if ( THREE.Shape.Utils.isClockWise( ahole ) ) {

				holes[ h ] = ahole.reverse();

			}

		}

		reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

	}


	var faces = THREE.Shape.Utils.triangulateShape ( vertices, holes );

	/* Vertices */

	var contour = vertices; // vertices has all points but contour has only points of circumference

	for ( h = 0, hl = holes.length;  h < hl; h ++ ) {

		ahole = holes[ h ];

		vertices = vertices.concat( ahole );

	}


	function scalePt2 ( pt, vec, size ) {

		if ( !vec ) console.log( "die" );

		return vec.clone().multiplyScalar( size ).addSelf( pt );

	}

	var b, bs, t, z,
		vert, vlen = vertices.length,
		face, flen = faces.length,
		cont, clen = contour.length;


	// Find directions for point movement

	var RAD_TO_DEGREES = 180 / Math.PI;


	function getBevelVec( pt_i, pt_j, pt_k ) {

		// Algorithm 2

		return getBevelVec2( pt_i, pt_j, pt_k );

	}

	function getBevelVec1( pt_i, pt_j, pt_k ) {

		var anglea = Math.atan2( pt_j.y - pt_i.y, pt_j.x - pt_i.x );
		var angleb = Math.atan2( pt_k.y - pt_i.y, pt_k.x - pt_i.x );

		if ( anglea > angleb ) {

			angleb += Math.PI * 2;

		}

		var anglec = ( anglea + angleb ) / 2;


		//console.log('angle1', anglea * RAD_TO_DEGREES,'angle2', angleb * RAD_TO_DEGREES, 'anglec', anglec *RAD_TO_DEGREES);

		var x = - Math.cos( anglec );
		var y = - Math.sin( anglec );

		var vec = new THREE.Vector2( x, y ); //.normalize();

		return vec;

	}

	function getBevelVec2( pt_i, pt_j, pt_k ) {

		var a = THREE.ExtrudeGeometry.__v1,
			b = THREE.ExtrudeGeometry.__v2,
			v_hat = THREE.ExtrudeGeometry.__v3,
			w_hat = THREE.ExtrudeGeometry.__v4,
			p = THREE.ExtrudeGeometry.__v5,
			q = THREE.ExtrudeGeometry.__v6,
			v, w,
			v_dot_w_hat, q_sub_p_dot_w_hat,
			s, intersection;

		// good reading for line-line intersection
		// http://sputsoft.com/blog/2010/03/line-line-intersection.html

		// define a as vector j->i
		// define b as vectot k->i

		a.set( pt_i.x - pt_j.x, pt_i.y - pt_j.y );
		b.set( pt_i.x - pt_k.x, pt_i.y - pt_k.y );

		// get unit vectors

		v = a.normalize();
		w = b.normalize();

		// normals from pt i

		v_hat.set( -v.y, v.x );
		w_hat.set( w.y, -w.x );

		// pts from i

		p.copy( pt_i ).addSelf( v_hat );
		q.copy( pt_i ).addSelf( w_hat );

		if ( p.equals( q ) ) {

			//console.log("Warning: lines are straight");
			return w_hat.clone();

		}

		// Points from j, k. helps prevents points cross overover most of the time

		p.copy( pt_j ).addSelf( v_hat );
		q.copy( pt_k ).addSelf( w_hat );

		v_dot_w_hat = v.dot( w_hat );
		q_sub_p_dot_w_hat = q.subSelf( p ).dot( w_hat );

		// We should not reach these conditions

		if ( v_dot_w_hat === 0 ) {

			console.log( "Either infinite or no solutions!" );

			if ( q_sub_p_dot_w_hat === 0 ) {

				console.log( "Its finite solutions." );

			} else {

				console.log( "Too bad, no solutions." );

			}

		}

		s = q_sub_p_dot_w_hat / v_dot_w_hat;

		if ( s < 0 ) {

			// in case of emergecy, revert to algorithm 1.

			return getBevelVec1( pt_i, pt_j, pt_k );

		}

		intersection = v.multiplyScalar( s ).addSelf( p );

		return intersection.subSelf( pt_i ).clone(); // Don't normalize!, otherwise sharp corners become ugly

	}

	var contourMovements = [];

	for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

		if ( j === il ) j = 0;
		if ( k === il ) k = 0;

		//  (j)---(i)---(k)
		// console.log('i,j,k', i, j , k)

		var pt_i = contour[ i ];
		var pt_j = contour[ j ];
		var pt_k = contour[ k ];

		contourMovements[ i ]= getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

	}

	var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

		ahole = holes[ h ];

		oneHoleMovements = [];

		for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			oneHoleMovements[ i ]= getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

		}

		holesMovements.push( oneHoleMovements );
		verticesMovements = verticesMovements.concat( oneHoleMovements );

	}


	// Loop bevelSegments, 1 for the front, 1 for the back

	for ( b = 0; b < bevelSegments; b ++ ) {
	//for ( b = bevelSegments; b > 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * ( 1 - t );

		//z = bevelThickness * t;
		bs = bevelSize * ( Math.sin ( t * Math.PI/2 ) ) ; // curved
		//bs = bevelSize * t ; // linear

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
			//vert = scalePt( contour[ i ], contourCentroid, bs, false );
			v( vert.x, vert.y,  - z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
				//vert = scalePt( ahole[ i ], holesCentroids[ h ], bs, true );

				v( vert.x, vert.y,  -z );

			}

		}

	}

	bs = bevelSize;

	// Back facing vertices

	for ( i = 0; i < vlen; i ++ ) {

		vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

		if ( !extrudeByPath ) {

			v( vert.x, vert.y, 0 );

		} else {

			// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

			normal.copy( splineTube.normals[0] ).multiplyScalar(vert.x);
			binormal.copy( splineTube.binormals[0] ).multiplyScalar(vert.y);

			position2.copy( extrudePts[0] ).addSelf(normal).addSelf(binormal);

			v( position2.x, position2.y, position2.z );

		}

	}

	// Add stepped vertices...
	// Including front facing vertices

	var s;

	for ( s = 1; s <= steps; s ++ ) {

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( !extrudeByPath ) {

				v( vert.x, vert.y, amount / steps * s );

			} else {

				// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

				normal.copy( splineTube.normals[s] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[s] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[s] ).addSelf( normal ).addSelf( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

	}


	// Add bevel segments planes

	//for ( b = 1; b <= bevelSegments; b ++ ) {
	for ( b = bevelSegments - 1; b >= 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * ( 1 - t );
		//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );
		bs = bevelSize * Math.sin ( t * Math.PI/2 ) ;

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
			v( vert.x, vert.y,  amount + z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				if ( !extrudeByPath ) {

					v( vert.x, vert.y,  amount + z );

				} else {

					v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

				}

			}

		}

	}

	/* Faces */

	// Top and bottom faces

	buildLidFaces();

	// Sides faces

	buildSideFaces();


	/////  Internal functions

	function buildLidFaces() {

		if ( bevelEnabled ) {

			var layer = 0 ; // steps + 1
			var offset = vlen * layer;

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ]+ offset, face[ 1 ]+ offset, face[ 0 ] + offset, true );

			}

			layer = steps + bevelSegments * 2;
			offset = vlen * layer;

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset, false );

			}

		} else {

			// Bottom faces

			for ( i = 0; i < flen; i++ ) {

				face = faces[ i ];
				f3( face[ 2 ], face[ 1 ], face[ 0 ], true );

			}

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps, false );

			}
		}

	}

	// Create faces for the z-sides of the shape

	function buildSideFaces() {

		var layeroffset = 0;
		sidewalls( contour, layeroffset );
		layeroffset += contour.length;

		for ( h = 0, hl = holes.length;  h < hl; h ++ ) {

			ahole = holes[ h ];
			sidewalls( ahole, layeroffset );

			//, true
			layeroffset += ahole.length;

		}

	}

	function sidewalls( contour, layeroffset ) {

		var j, k;
		i = contour.length;

		while ( --i >= 0 ) {

			j = i;
			k = i - 1;
			if ( k < 0 ) k = contour.length - 1;

			//console.log('b', i,j, i-1, k,vertices.length);

			var s = 0, sl = steps  + bevelSegments * 2;

			for ( s = 0; s < sl; s ++ ) {

				var slen1 = vlen * s;
				var slen2 = vlen * ( s + 1 );

				var a = layeroffset + j + slen1,
					b = layeroffset + k + slen1,
					c = layeroffset + k + slen2,
					d = layeroffset + j + slen2;

				f4( a, b, c, d, contour, s, sl, j, k );

			}
		}

	}


	function v( x, y, z ) {

		scope.vertices.push( new THREE.Vector3( x, y, z ) );

	}

	function f3( a, b, c, isBottom ) {

		a += shapesOffset;
		b += shapesOffset;
		c += shapesOffset;

		// normal, color, material
		scope.faces.push( new THREE.Face3( a, b, c, null, null, material ) );

		var uvs = isBottom ? uvgen.generateBottomUV( scope, shape, options, a, b, c ) : uvgen.generateTopUV( scope, shape, options, a, b, c );

 		scope.faceVertexUvs[ 0 ].push( uvs );

	}

	function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

		a += shapesOffset;
		b += shapesOffset;
		c += shapesOffset;
		d += shapesOffset;

 		scope.faces.push( new THREE.Face4( a, b, c, d, null, null, extrudeMaterial ) );

 		var uvs = uvgen.generateSideWallUV( scope, shape, wallContour, options, a, b, c, d,
 		                                    stepIndex, stepsLength, contourIndex1, contourIndex2 );
 		scope.faceVertexUvs[ 0 ].push( uvs );

	}

};

THREE.ExtrudeGeometry.WorldUVGenerator = {

	generateTopUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {
		var ax = geometry.vertices[ indexA ].x,
			ay = geometry.vertices[ indexA ].y,

			bx = geometry.vertices[ indexB ].x,
			by = geometry.vertices[ indexB ].y,

			cx = geometry.vertices[ indexC ].x,
			cy = geometry.vertices[ indexC ].y;

		return [
			new THREE.Vector2( ax, ay ),
			new THREE.Vector2( bx, by ),
			new THREE.Vector2( cx, cy )
		];

	},

	generateBottomUV: function( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC ) {

		return this.generateTopUV( geometry, extrudedShape, extrudeOptions, indexA, indexB, indexC );

	},

	generateSideWallUV: function( geometry, extrudedShape, wallContour, extrudeOptions,
	                              indexA, indexB, indexC, indexD, stepIndex, stepsLength,
	                              contourIndex1, contourIndex2 ) {

		var ax = geometry.vertices[ indexA ].x,
			ay = geometry.vertices[ indexA ].y,
			az = geometry.vertices[ indexA ].z,

			bx = geometry.vertices[ indexB ].x,
			by = geometry.vertices[ indexB ].y,
			bz = geometry.vertices[ indexB ].z,

			cx = geometry.vertices[ indexC ].x,
			cy = geometry.vertices[ indexC ].y,
			cz = geometry.vertices[ indexC ].z,

			dx = geometry.vertices[ indexD ].x,
			dy = geometry.vertices[ indexD ].y,
			dz = geometry.vertices[ indexD ].z;

		if ( Math.abs( ay - by ) < 0.01 ) {
			return [
				new THREE.Vector2( ax, 1 - az ),
				new THREE.Vector2( bx, 1 - bz ),
				new THREE.Vector2( cx, 1 - cz ),
				new THREE.Vector2( dx, 1 - dz )
			];
		} else {
			return [
				new THREE.Vector2( ay, 1 - az ),
				new THREE.Vector2( by, 1 - bz ),
				new THREE.Vector2( cy, 1 - cz ),
				new THREE.Vector2( dy, 1 - dz )
			];
		}
	}
};

THREE.ExtrudeGeometry.__v1 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v2 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v3 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v4 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v5 = new THREE.Vector2();
THREE.ExtrudeGeometry.__v6 = new THREE.Vector2();
/**
 * @author jonobr1 / http://jonobr1.com
 *
 * Creates a one-sided polygonal geometry from a path shape. Similar to
 * ExtrudeGeometry.
 *
 * parameters = {
 *
 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
 *
 *	material: <int> // material index for front and back faces
 *	uvGenerator: <Object> // object that provides UV generator functions
 *
 * }
 **/

THREE.ShapeGeometry = function ( shapes, options ) {

	THREE.Geometry.call( this );

	if ( shapes instanceof Array === false ) shapes = [ shapes ];

	this.shapebb = shapes[ shapes.length - 1 ].getBoundingBox();

	this.addShapeList( shapes, options );

	this.computeCentroids();
	this.computeFaceNormals();

};

THREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * Add an array of shapes to THREE.ShapeGeometry.
 */
THREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

	for ( var i = 0, l = shapes.length; i < l; i++ ) {

		this.addShape( shapes[ i ], options );

	}

	return this;

};

/**
 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
 */
THREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {

	if ( options === undefined ) options = {};
	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	var material = options.material;
	var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

	var shapebb = this.shapebb;

	//

	var i, l, hole, s;

	var shapesOffset = this.vertices.length;
	var shapePoints = shape.extractPoints( curveSegments );

	var vertices = shapePoints.shape;
	var holes = shapePoints.holes;

	var reverse = !THREE.Shape.Utils.isClockWise( vertices );

	if ( reverse ) {

		vertices = vertices.reverse();

		// Maybe we should also check if holes are in the opposite direction, just to be safe...

		for ( i = 0, l = holes.length; i < l; i++ ) {

			hole = holes[ i ];

			if ( THREE.Shape.Utils.isClockWise( hole ) ) {

				holes[ i ] = hole.reverse();

			}

		}

		reverse = false;

	}

	var faces = THREE.Shape.Utils.triangulateShape( vertices, holes );

	// Vertices

	var contour = vertices;

	for ( i = 0, l = holes.length; i < l; i++ ) {

		hole = holes[ i ];
		vertices = vertices.concat( hole );

	}

	//

	var vert, vlen = vertices.length;
	var face, flen = faces.length;
	var cont, clen = contour.length;

	for ( i = 0; i < vlen; i++ ) {

		vert = vertices[ i ];

		this.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );

	}

	for ( i = 0; i < flen; i++ ) {

		face = faces[ i ];

		var a = face[ 0 ] + shapesOffset;
		var b = face[ 1 ] + shapesOffset;
		var c = face[ 2 ] + shapesOffset;

		this.faces.push( new THREE.Face3( a, b, c, null, null, material ) );
		this.faceVertexUvs[ 0 ].push( uvgen.generateBottomUV( this, shape, options, a, b, c ) );

	}

};
/**
 * @author astrodud / http://astrodud.isgreat.org/
 * @author zz85 / https://github.com/zz85
 */

THREE.LatheGeometry = function ( points, steps, angle ) {

	THREE.Geometry.call( this );

	var _steps = steps || 12;
	var _angle = angle || 2 * Math.PI;

	var _newV = [];
	var _matrix = new THREE.Matrix4().makeRotationZ( _angle / _steps );

	for ( var j = 0; j < points.length; j ++ ) {

		_newV[ j ] = points[ j ].clone();
		this.vertices.push( _newV[ j ] );

	}

	var i, il = _steps + 1;

	for ( i = 0; i < il; i ++ ) {

		for ( var j = 0; j < _newV.length; j ++ ) {

			_newV[ j ] = _matrix.multiplyVector3( _newV[ j ].clone() );
			this.vertices.push( _newV[ j ] );

		}

	}

	for ( i = 0; i < _steps; i ++ ) {

		for ( var k = 0, kl = points.length; k < kl - 1; k ++ ) {

			var a = i * kl + k;
			var b = ( ( i + 1 ) % il ) * kl + k;
			var c = ( ( i + 1 ) % il ) * kl + ( k + 1 ) % kl;
			var d = i * kl + ( k + 1 ) % kl;

			this.faces.push( new THREE.Face4( a, b, c, d ) );

			this.faceVertexUvs[ 0 ].push( [

				new THREE.Vector2( 1 - i / _steps, k / kl ),
				new THREE.Vector2( 1 - ( i + 1 ) / _steps, k / kl ),
				new THREE.Vector2( 1 - ( i + 1 ) / _steps, ( k + 1 ) / kl ),
				new THREE.Vector2( 1 - i / _steps, ( k + 1 ) / kl )

			] );

		}

	}

	this.computeCentroids();
	this.computeFaceNormals();
	this.computeVertexNormals();

};

THREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author mrdoob / http://mrdoob.com/
 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
 */

THREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {

	THREE.Geometry.call( this );

	this.width = width;
	this.height = height;

	this.widthSegments = widthSegments || 1;
	this.heightSegments = heightSegments || 1;

	var ix, iz;
	var width_half = width / 2;
	var height_half = height / 2;

	var gridX = this.widthSegments;
	var gridZ = this.heightSegments;

	var gridX1 = gridX + 1;
	var gridZ1 = gridZ + 1;

	var segment_width = this.width / gridX;
	var segment_height = this.height / gridZ;

	var normal = new THREE.Vector3( 0, 0, 1 );

	for ( iz = 0; iz < gridZ1; iz ++ ) {

		for ( ix = 0; ix < gridX1; ix ++ ) {

			var x = ix * segment_width - width_half;
			var y = iz * segment_height - height_half;

			this.vertices.push( new THREE.Vector3( x, - y, 0 ) );

		}

	}

	for ( iz = 0; iz < gridZ; iz ++ ) {

		for ( ix = 0; ix < gridX; ix ++ ) {

			var a = ix + gridX1 * iz;
			var b = ix + gridX1 * ( iz + 1 );
			var c = ( ix + 1 ) + gridX1 * ( iz + 1 );
			var d = ( ix + 1 ) + gridX1 * iz;

			var face = new THREE.Face4( a, b, c, d );
			face.normal.copy( normal );
			face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone(), normal.clone() );

			this.faces.push( face );
			this.faceVertexUvs[ 0 ].push( [
				new THREE.Vector2( ix / gridX, 1 - iz / gridZ ),
				new THREE.Vector2( ix / gridX, 1 - ( iz + 1 ) / gridZ ),
				new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iz + 1 ) / gridZ ),
				new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iz / gridZ )
			] );

		}

	}

	this.computeCentroids();

};

THREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	THREE.Geometry.call( this );

	this.radius = radius || 50;

	this.widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
	this.heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

	phiStart = phiStart !== undefined ? phiStart : 0;
	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

	var x, y, vertices = [], uvs = [];

	for ( y = 0; y <= this.heightSegments; y ++ ) {

		var verticesRow = [];
		var uvsRow = [];

		for ( x = 0; x <= this.widthSegments; x ++ ) {

			var u = x / this.widthSegments;
			var v = y / this.heightSegments;

			var vertex = new THREE.Vector3();
			vertex.x = - this.radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
			vertex.y = this.radius * Math.cos( thetaStart + v * thetaLength );
			vertex.z = this.radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

			this.vertices.push( vertex );

			verticesRow.push( this.vertices.length - 1 );
			uvsRow.push( new THREE.Vector2( u, 1 - v ) );

		}

		vertices.push( verticesRow );
		uvs.push( uvsRow );

	}

	for ( y = 0; y < this.heightSegments; y ++ ) {

		for ( x = 0; x < this.widthSegments; x ++ ) {

			var v1 = vertices[ y ][ x + 1 ];
			var v2 = vertices[ y ][ x ];
			var v3 = vertices[ y + 1 ][ x ];
			var v4 = vertices[ y + 1 ][ x + 1 ];

			var n1 = this.vertices[ v1 ].clone().normalize();
			var n2 = this.vertices[ v2 ].clone().normalize();
			var n3 = this.vertices[ v3 ].clone().normalize();
			var n4 = this.vertices[ v4 ].clone().normalize();

			var uv1 = uvs[ y ][ x + 1 ].clone();
			var uv2 = uvs[ y ][ x ].clone();
			var uv3 = uvs[ y + 1 ][ x ].clone();
			var uv4 = uvs[ y + 1 ][ x + 1 ].clone();

			if ( Math.abs( this.vertices[ v1 ].y ) === this.radius ) {

				this.faces.push( new THREE.Face3( v1, v3, v4, [ n1, n3, n4 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv3, uv4 ] );

			} else if ( Math.abs( this.vertices[ v3 ].y ) === this.radius ) {

				this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

			} else {

				this.faces.push( new THREE.Face4( v1, v2, v3, v4, [ n1, n2, n3, n4 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3, uv4 ] );

			}

		}

	}

	this.computeCentroids();
	this.computeFaceNormals();

    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * For creating 3D text geometry in three.js
 *
 * Text = 3D Text
 *
 * parameters = {
 *  size: 			<float>, 	// size of the text
 *  height: 		<float>, 	// thickness to extrude text
 *  curveSegments: 	<int>,		// number of points on the curves
 *
 *  font: 			<string>,		// font name
 *  weight: 		<string>,		// font weight (normal, bold)
 *  style: 			<string>,		// font style  (normal, italics)
 *
 *  bevelEnabled:	<bool>,			// turn on bevel
 *  bevelThickness: <float>, 		// how deep into text bevel goes
 *  bevelSize:		<float>, 		// how far from text outline is bevel
 *  }
 *
 */

/*	Usage Examples

	// TextGeometry wrapper

	var text3d = new TextGeometry( text, options );

	// Complete manner

	var textShapes = THREE.FontUtils.generateShapes( text, options );
	var text3d = new ExtrudeGeometry( textShapes, options );

*/


THREE.TextGeometry = function ( text, parameters ) {

	var textShapes = THREE.FontUtils.generateShapes( text, parameters );

	// translate parameters to ExtrudeGeometry API

	parameters.amount = parameters.height !== undefined ? parameters.height : 50;

	// defaults

	if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
	if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
	if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

	THREE.ExtrudeGeometry.call( this, textShapes, parameters );

};

THREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );
/**
 * @author oosmoxiecode
 * @author mrdoob / http://mrdoob.com/
 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
 */

THREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {

	THREE.Geometry.call( this );

	var scope = this;

	this.radius = radius || 100;
	this.tube = tube || 40;
	this.radialSegments = radialSegments || 8;
	this.tubularSegments = tubularSegments || 6;
	this.arc = arc || Math.PI * 2;

	var center = new THREE.Vector3(), uvs = [], normals = [];

	for ( var j = 0; j <= this.radialSegments; j ++ ) {

		for ( var i = 0; i <= this.tubularSegments; i ++ ) {

			var u = i / this.tubularSegments * this.arc;
			var v = j / this.radialSegments * Math.PI * 2;

			center.x = this.radius * Math.cos( u );
			center.y = this.radius * Math.sin( u );

			var vertex = new THREE.Vector3();
			vertex.x = ( this.radius + this.tube * Math.cos( v ) ) * Math.cos( u );
			vertex.y = ( this.radius + this.tube * Math.cos( v ) ) * Math.sin( u );
			vertex.z = this.tube * Math.sin( v );

			this.vertices.push( vertex );

			uvs.push( new THREE.Vector2( i / this.tubularSegments, j / this.radialSegments ) );
			normals.push( vertex.clone().subSelf( center ).normalize() );

		}
	}


	for ( var j = 1; j <= this.radialSegments; j ++ ) {

		for ( var i = 1; i <= this.tubularSegments; i ++ ) {

			var a = ( this.tubularSegments + 1 ) * j + i - 1;
			var b = ( this.tubularSegments + 1 ) * ( j - 1 ) + i - 1;
			var c = ( this.tubularSegments + 1 ) * ( j - 1 ) + i;
			var d = ( this.tubularSegments + 1 ) * j + i;

			var face = new THREE.Face4( a, b, c, d, [ normals[ a ], normals[ b ], normals[ c ], normals[ d ] ] );
			face.normal.addSelf( normals[ a ] );
			face.normal.addSelf( normals[ b ] );
			face.normal.addSelf( normals[ c ] );
			face.normal.addSelf( normals[ d ] );
			face.normal.normalize();

			this.faces.push( face );

			this.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );
		}

	}

	this.computeCentroids();

};

THREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author oosmoxiecode
 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473
 */

THREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {

	THREE.Geometry.call( this );

	var scope = this;

	this.radius = radius || 100;
	this.tube = tube || 40;
	this.radialSegments = radialSegments || 64;
	this.tubularSegments = tubularSegments || 8;
	this.p = p || 2;
	this.q = q || 3;
	this.heightScale = heightScale || 1;
	this.grid = new Array( this.radialSegments );

	var tang = new THREE.Vector3();
	var n = new THREE.Vector3();
	var bitan = new THREE.Vector3();

	for ( var i = 0; i < this.radialSegments; ++ i ) {

		this.grid[ i ] = new Array( this.tubularSegments );

		for ( var j = 0; j < this.tubularSegments; ++ j ) {

			var u = i / this.radialSegments * 2 * this.p * Math.PI;
			var v = j / this.tubularSegments * 2 * Math.PI;
			var p1 = getPos( u, v, this.q, this.p, this.radius, this.heightScale );
			var p2 = getPos( u + 0.01, v, this.q, this.p, this.radius, this.heightScale );
			var cx, cy;

			tang.sub( p2, p1 );
			n.add( p2, p1 );

			bitan.cross( tang, n );
			n.cross( bitan, tang );
			bitan.normalize();
			n.normalize();

			cx = - this.tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
			cy = this.tube * Math.sin( v );

			p1.x += cx * n.x + cy * bitan.x;
			p1.y += cx * n.y + cy * bitan.y;
			p1.z += cx * n.z + cy * bitan.z;

			this.grid[ i ][ j ] = vert( p1.x, p1.y, p1.z );

		}

	}

	for ( var i = 0; i < this.radialSegments; ++ i ) {

		for ( var j = 0; j < this.tubularSegments; ++ j ) {

			var ip = ( i + 1 ) % this.radialSegments;
			var jp = ( j + 1 ) % this.tubularSegments;

			var a = this.grid[ i ][ j ];
			var b = this.grid[ ip ][ j ];
			var c = this.grid[ ip ][ jp ];
			var d = this.grid[ i ][ jp ];

			var uva = new THREE.Vector2( i / this.radialSegments, j / this.tubularSegments );
			var uvb = new THREE.Vector2( ( i + 1 ) / this.radialSegments, j / this.tubularSegments );
			var uvc = new THREE.Vector2( ( i + 1 ) / this.radialSegments, ( j + 1 ) / this.tubularSegments );
			var uvd = new THREE.Vector2( i / this.radialSegments, ( j + 1 ) / this.tubularSegments );

			this.faces.push( new THREE.Face4( a, b, c, d ) );
			this.faceVertexUvs[ 0 ].push( [ uva,uvb,uvc, uvd ] );

		}
	}

	this.computeCentroids();
	this.computeFaceNormals();
	this.computeVertexNormals();

	function vert( x, y, z ) {

		return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;

	}

	function getPos( u, v, in_q, in_p, radius, heightScale ) {

		var cu = Math.cos( u );
		var cv = Math.cos( v );
		var su = Math.sin( u );
		var quOverP = in_q / in_p * u;
		var cs = Math.cos( quOverP );

		var tx = radius * ( 2 + cs ) * 0.5 * cu;
		var ty = radius * ( 2 + cs ) * su * 0.5;
		var tz = heightScale * radius * Math.sin( quOverP ) * 0.5;

		return new THREE.Vector3( tx, ty, tz );

	}

};

THREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author WestLangley / https://github.com/WestLangley
 * @author zz85 / https://github.com/zz85
 * @author miningold / https://github.com/miningold
 *
 * Modified from the TorusKnotGeometry by @oosmoxiecode
 *
 * Creates a tube which extrudes along a 3d spline
 *
 * Uses parallel transport frames as described in
 * http://www.cs.indiana.edu/pub/techreports/TR425.pdf
 */

THREE.TubeGeometry = function( path, segments, radius, radiusSegments, closed, debug ) {

	THREE.Geometry.call( this );

	this.path = path;
	this.segments = segments || 64;
	this.radius = radius || 1;
	this.radiusSegments = radiusSegments || 8;
	this.closed = closed || false;

	if ( debug ) this.debug = new THREE.Object3D();

	this.grid = [];

	var scope = this,

		tangent,
		normal,
		binormal,

		numpoints = this.segments + 1,

		x, y, z,
		tx, ty, tz,
		u, v,

		cx, cy,
		pos, pos2 = new THREE.Vector3(),
		i, j,
		ip, jp,
		a, b, c, d,
		uva, uvb, uvc, uvd;

	var frames = new THREE.TubeGeometry.FrenetFrames( this.path, this.segments, this.closed ),
		tangents = frames.tangents,
		normals = frames.normals,
		binormals = frames.binormals;

	// proxy internals
	this.tangents = tangents;
	this.normals = normals;
	this.binormals = binormals;

	function vert( x, y, z ) {

		return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;

	}


	// consruct the grid

	for ( i = 0; i < numpoints; i++ ) {

		this.grid[ i ] = [];

		u = i / ( numpoints - 1 );

		pos = path.getPointAt( u );

		tangent = tangents[ i ];
		normal = normals[ i ];
		binormal = binormals[ i ];

		if ( this.debug ) {

			this.debug.add( new THREE.ArrowHelper(tangent, pos, radius, 0x0000ff ) );
			this.debug.add( new THREE.ArrowHelper(normal, pos, radius, 0xff0000 ) );
			this.debug.add( new THREE.ArrowHelper(binormal, pos, radius, 0x00ff00 ) );

		}

		for ( j = 0; j < this.radiusSegments; j++ ) {

			v = j / this.radiusSegments * 2 * Math.PI;

			cx = -this.radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
			cy = this.radius * Math.sin( v );

			pos2.copy( pos );
			pos2.x += cx * normal.x + cy * binormal.x;
			pos2.y += cx * normal.y + cy * binormal.y;
			pos2.z += cx * normal.z + cy * binormal.z;

			this.grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );

		}
	}


	// construct the mesh

	for ( i = 0; i < this.segments; i++ ) {

		for ( j = 0; j < this.radiusSegments; j++ ) {

			ip = ( this.closed ) ? (i + 1) % this.segments : i + 1;
			jp = (j + 1) % this.radiusSegments;

			a = this.grid[ i ][ j ];		// *** NOT NECESSARILY PLANAR ! ***
			b = this.grid[ ip ][ j ];
			c = this.grid[ ip ][ jp ];
			d = this.grid[ i ][ jp ];

			uva = new THREE.Vector2( i / this.segments, j / this.radiusSegments );
			uvb = new THREE.Vector2( ( i + 1 ) / this.segments, j / this.radiusSegments );
			uvc = new THREE.Vector2( ( i + 1 ) / this.segments, ( j + 1 ) / this.radiusSegments );
			uvd = new THREE.Vector2( i / this.segments, ( j + 1 ) / this.radiusSegments );

			this.faces.push( new THREE.Face4( a, b, c, d ) );
			this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvc, uvd ] );

		}
	}

	this.computeCentroids();
	this.computeFaceNormals();
	this.computeVertexNormals();

};

THREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );


// For computing of Frenet frames, exposing the tangents, normals and binormals the spline
THREE.TubeGeometry.FrenetFrames = function(path, segments, closed) {

	var	tangent = new THREE.Vector3(),
		normal = new THREE.Vector3(),
		binormal = new THREE.Vector3(),

		tangents = [],
		normals = [],
		binormals = [],

		vec = new THREE.Vector3(),
		mat = new THREE.Matrix4(),

		numpoints = segments + 1,
		theta,
		epsilon = 0.0001,
		smallest,

		tx, ty, tz,
		i, u, v;


	// expose internals
	this.tangents = tangents;
	this.normals = normals;
	this.binormals = binormals;

	// compute the tangent vectors for each segment on the path

	for ( i = 0; i < numpoints; i++ ) {

		u = i / ( numpoints - 1 );

		tangents[ i ] = path.getTangentAt( u );
		tangents[ i ].normalize();

	}

	initialNormal3();

	function initialNormal1(lastBinormal) {
		// fixed start binormal. Has dangers of 0 vectors
		normals[ 0 ] = new THREE.Vector3();
		binormals[ 0 ] = new THREE.Vector3();
		if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );
		normals[ 0 ].cross( lastBinormal, tangents[ 0 ] ).normalize();
		binormals[ 0 ].cross( tangents[ 0 ], normals[ 0 ] ).normalize();
	}

	function initialNormal2() {

		// This uses the Frenet-Serret formula for deriving binormal
		var t2 = path.getTangentAt( epsilon );

		normals[ 0 ] = new THREE.Vector3().sub( t2, tangents[ 0 ] ).normalize();
		binormals[ 0 ] = new THREE.Vector3().cross( tangents[ 0 ], normals[ 0 ] );

		normals[ 0 ].cross( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent
		binormals[ 0 ].cross( tangents[ 0 ], normals[ 0 ] ).normalize();

	}

	function initialNormal3() {
		// select an initial normal vector perpenicular to the first tangent vector,
		// and in the direction of the smallest tangent xyz component

		normals[ 0 ] = new THREE.Vector3();
		binormals[ 0 ] = new THREE.Vector3();
		smallest = Number.MAX_VALUE;
		tx = Math.abs( tangents[ 0 ].x );
		ty = Math.abs( tangents[ 0 ].y );
		tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= smallest ) {
			smallest = tx;
			normal.set( 1, 0, 0 );
		}

		if ( ty <= smallest ) {
			smallest = ty;
			normal.set( 0, 1, 0 );
		}

		if ( tz <= smallest ) {
			normal.set( 0, 0, 1 );
		}

		vec.cross( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].cross( tangents[ 0 ], vec );
		binormals[ 0 ].cross( tangents[ 0 ], normals[ 0 ] );
	}


	// compute the slowly-varying normal and binormal vectors for each segment on the path

	for ( i = 1; i < numpoints; i++ ) {

		normals[ i ] = normals[ i-1 ].clone();

		binormals[ i ] = binormals[ i-1 ].clone();

		vec.cross( tangents[ i-1 ], tangents[ i ] );

		if ( vec.length() > epsilon ) {

			vec.normalize();

			theta = Math.acos( tangents[ i-1 ].dot( tangents[ i ] ) );

			mat.makeRotationAxis( vec, theta ).multiplyVector3( normals[ i ] );

		}

		binormals[ i ].cross( tangents[ i ], normals[ i ] );

	}


	// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

	if ( closed ) {

		theta = Math.acos( normals[ 0 ].dot( normals[ numpoints-1 ] ) );
		theta /= ( numpoints - 1 );

		if ( tangents[ 0 ].dot( vec.cross( normals[ 0 ], normals[ numpoints-1 ] ) ) > 0 ) {

			theta = -theta;

		}

		for ( i = 1; i < numpoints; i++ ) {

			// twist a little...
			mat.makeRotationAxis( tangents[ i ], theta * i ).multiplyVector3( normals[ i ] );
			binormals[ i ].cross( tangents[ i ], normals[ i ] );

		}

	}
};
/**
 * @author clockworkgeek / https://github.com/clockworkgeek
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.PolyhedronGeometry = function ( vertices, faces, radius, detail ) {

	THREE.Geometry.call( this );

	radius = radius || 1;
	detail = detail || 0;

	var that = this;

	for ( var i = 0, l = vertices.length; i < l; i ++ ) {

		prepare( new THREE.Vector3( vertices[ i ][ 0 ], vertices[ i ][ 1 ], vertices[ i ][ 2 ] ) );

	}

	var midpoints = [], p = this.vertices;

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		make( p[ faces[ i ][ 0 ] ], p[ faces[ i ][ 1 ] ], p[ faces[ i ][ 2 ] ], detail );

	}

	this.mergeVertices();

	// Apply radius

	for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {

		this.vertices[ i ].multiplyScalar( radius );

	}


	// Project vector onto sphere's surface

	function prepare( vector ) {

		var vertex = vector.normalize().clone();
		vertex.index = that.vertices.push( vertex ) - 1;

		// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.

		var u = azimuth( vector ) / 2 / Math.PI + 0.5;
		var v = inclination( vector ) / Math.PI + 0.5;
		vertex.uv = new THREE.Vector2( u, 1 - v );

		return vertex;

	}


	// Approximate a curved face with recursively sub-divided triangles.

	function make( v1, v2, v3, detail ) {

		if ( detail < 1 ) {

			var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );
			face.centroid.addSelf( v1 ).addSelf( v2 ).addSelf( v3 ).divideScalar( 3 );
			face.normal = face.centroid.clone().normalize();
			that.faces.push( face );

			var azi = azimuth( face.centroid );
			that.faceVertexUvs[ 0 ].push( [
				correctUV( v1.uv, v1, azi ),
				correctUV( v2.uv, v2, azi ),
				correctUV( v3.uv, v3, azi )
			] );

		} else {

			detail -= 1;

			// split triangle into 4 smaller triangles

			make( v1, midpoint( v1, v2 ), midpoint( v1, v3 ), detail ); // top quadrant
			make( midpoint( v1, v2 ), v2, midpoint( v2, v3 ), detail ); // left quadrant
			make( midpoint( v1, v3 ), midpoint( v2, v3 ), v3, detail ); // right quadrant
			make( midpoint( v1, v2 ), midpoint( v2, v3 ), midpoint( v1, v3 ), detail ); // center quadrant

		}

	}

	function midpoint( v1, v2 ) {

		if ( !midpoints[ v1.index ] ) midpoints[ v1.index ] = [];
		if ( !midpoints[ v2.index ] ) midpoints[ v2.index ] = [];

		var mid = midpoints[ v1.index ][ v2.index ];

		if ( mid === undefined ) {

			// generate mean point and project to surface with prepare()

			midpoints[ v1.index ][ v2.index ] = midpoints[ v2.index ][ v1.index ] = mid = prepare(
				new THREE.Vector3().add( v1, v2 ).divideScalar( 2 )
			);
		}

		return mid;

	}


	// Angle around the Y axis, counter-clockwise when looking from above.

	function azimuth( vector ) {

		return Math.atan2( vector.z, -vector.x );

	}


	// Angle above the XZ plane.

	function inclination( vector ) {

		return Math.atan2( -vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

	}


	// Texture fixing helper. Spheres have some odd behaviours.

	function correctUV( uv, vector, azimuth ) {

		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );
		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );
		return uv;

	}

	this.computeCentroids();

    this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.IcosahedronGeometry = function ( radius, detail ) {

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;

	var vertices = [
		[ -1,  t,  0 ], [  1, t, 0 ], [ -1, -t,  0 ], [  1, -t,  0 ],
		[  0, -1,  t ], [  0, 1, t ], [  0, -1, -t ], [  0,  1, -t ],
		[  t,  0, -1 ], [  t, 0, 1 ], [ -t,  0, -1 ], [ -t,  0,  1 ]
	];

	var faces = [
		[ 0, 11,  5 ], [ 0,  5,  1 ], [  0,  1,  7 ], [  0,  7, 10 ], [  0, 10, 11 ],
		[ 1,  5,  9 ], [ 5, 11,  4 ], [ 11, 10,  2 ], [ 10,  7,  6 ], [  7,  1,  8 ],
		[ 3,  9,  4 ], [ 3,  4,  2 ], [  3,  2,  6 ], [  3,  6,  8 ], [  3,  8,  9 ],
		[ 4,  9,  5 ], [ 2,  4, 11 ], [  6,  2, 10 ], [  8,  6,  7 ], [  9,  8,  1 ]
	];

	THREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );

};

THREE.IcosahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.OctahedronGeometry = function ( radius, detail ) {

	var vertices = [
		[ 1, 0, 0 ], [ -1, 0, 0 ], [ 0, 1, 0 ], [ 0, -1, 0 ], [ 0, 0, 1 ], [ 0, 0, -1 ]
	];

	var faces = [
		[ 0, 2, 4 ], [ 0, 4, 3 ], [ 0, 3, 5 ], [ 0, 5, 2 ], [ 1, 2, 5 ], [ 1, 5, 3 ], [ 1, 3, 4 ], [ 1, 4, 2 ]
	];

	THREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );
};

THREE.OctahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.TetrahedronGeometry = function ( radius, detail ) {

	var vertices = [
		[ 1,  1,  1 ], [ -1, -1, 1 ], [ -1, 1, -1 ], [ 1, -1, -1 ]
	];

	var faces = [
		[ 2, 1, 0 ], [ 0, 3, 2 ], [ 1, 3, 0 ], [ 2, 3, 1 ]
	];

	THREE.PolyhedronGeometry.call( this, vertices, faces, radius, detail );

};

THREE.TetrahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author zz85 / https://github.com/zz85
 * Parametric Surfaces Geometry
 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
 *
 * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements, useTris );
 *
 */

THREE.ParametricGeometry = function ( func, slices, stacks, useTris ) {

	THREE.Geometry.call( this );

	var verts = this.vertices;
	var faces = this.faces;
	var uvs = this.faceVertexUvs[ 0 ];

	useTris = (useTris === undefined) ? false : useTris;

	var i, il, j, p;
	var u, v;

	var stackCount = stacks + 1;
	var sliceCount = slices + 1;

	for ( i = 0; i <= stacks; i ++ ) {

		v = i / stacks;

		for ( j = 0; j <= slices; j ++ ) {

			u = j / slices;

			p = func( u, v );
			verts.push( p );

		}
	}

	var a, b, c, d;
	var uva, uvb, uvc, uvd;

	for ( i = 0; i < stacks; i ++ ) {

		for ( j = 0; j < slices; j ++ ) {

			a = i * sliceCount + j;
			b = i * sliceCount + j + 1;
			c = (i + 1) * sliceCount + j;
			d = (i + 1) * sliceCount + j + 1;

			uva = new THREE.Vector2( j / slices, i / stacks );
			uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );
			uvc = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );
			uvd = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );

			if ( useTris ) {

				faces.push( new THREE.Face3( a, b, c ) );
				faces.push( new THREE.Face3( b, d, c ) );

				uvs.push( [ uva, uvb, uvc ] );
				uvs.push( [ uvb, uvd, uvc ] );

			} else {

				faces.push( new THREE.Face4( a, b, d, c ) );
				uvs.push( [ uva, uvb, uvd, uvc ] );

			}

		}

	}

	// console.log(this);

	// magic bullet
	// var diff = this.mergeVertices();
	// console.log('removed ', diff, ' vertices by merging');

	this.computeCentroids();
	this.computeFaceNormals();
	this.computeVertexNormals();

};

THREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author qiao / https://github.com/qiao
 * @fileoverview This is a convex hull generator using the incremental method. 
 * The complexity is O(n^2) where n is the number of vertices.
 * O(nlogn) algorithms do exist, but they are much more complicated.
 *
 * Benchmark: 
 *
 *  Platform: CPU: P7350 @2.00GHz Engine: V8
 *
 *  Num Vertices	Time(ms)
 *
 *     10           1
 *     20           3
 *     30           19
 *     40           48
 *     50           107
 */

THREE.ConvexGeometry = function( vertices ) {

	THREE.Geometry.call( this );

	var faces = [ [ 0, 1, 2 ], [ 0, 2, 1 ] ]; 

	for ( var i = 3; i < vertices.length; i++ ) {

		addPoint( i );

	}


	function addPoint( vertexId ) {

		var vertex = vertices[ vertexId ].clone();

		var mag = vertex.length();
		vertex.x += mag * randomOffset();
		vertex.y += mag * randomOffset();
		vertex.z += mag * randomOffset();

		var hole = [];

		for ( var f = 0; f < faces.length; ) {

			var face = faces[ f ];

			// for each face, if the vertex can see it,
			// then we try to add the face's edges into the hole.
			if ( visible( face, vertex ) ) {

				for ( var e = 0; e < 3; e++ ) {

					var edge = [ face[ e ], face[ ( e + 1 ) % 3 ] ];
					var boundary = true;

					// remove duplicated edges.
					for ( var h = 0; h < hole.length; h++ ) {

						if ( equalEdge( hole[ h ], edge ) ) {

							hole[ h ] = hole[ hole.length - 1 ];
							hole.pop();
							boundary = false;
							break;

						}

					}

					if ( boundary ) {

						hole.push( edge );

					}

				}

				// remove faces[ f ]
				faces[ f ] = faces[ faces.length - 1 ];
				faces.pop();

			} else { // not visible

				f++;

			}
		}

		// construct the new faces formed by the edges of the hole and the vertex
		for ( var h = 0; h < hole.length; h++ ) {

			faces.push( [ 
				hole[ h ][ 0 ],
				hole[ h ][ 1 ],
				vertexId
			] );

		}
	}

	/**
	 * Whether the face is visible from the vertex
	 */
	function visible( face, vertex ) {

		var va = vertices[ face[ 0 ] ];
		var vb = vertices[ face[ 1 ] ];
		var vc = vertices[ face[ 2 ] ];

		var n = normal( va, vb, vc );

		// distance from face to origin
		var dist = n.dot( va );

		return n.dot( vertex ) >= dist; 

	}

	/**
	 * Face normal
	 */
	function normal( va, vb, vc ) {

		var cb = new THREE.Vector3();
		var ab = new THREE.Vector3();

		cb.sub( vc, vb );
		ab.sub( va, vb );
		cb.crossSelf( ab );

		cb.normalize();

		return cb;

	}

	/**
	 * Detect whether two edges are equal.
	 * Note that when constructing the convex hull, two same edges can only
	 * be of the negative direction.
	 */
	function equalEdge( ea, eb ) {

		return ea[ 0 ] === eb[ 1 ] && ea[ 1 ] === eb[ 0 ]; 

	}

	/**
	 * Create a random offset between -1e-6 and 1e-6.
	 */
	function randomOffset() {

		return ( Math.random() - 0.5 ) * 2 * 1e-6;

	}


	/**
	 * XXX: Not sure if this is the correct approach. Need someone to review.
	 */
	function vertexUv( vertex ) {

		var mag = vertex.length();
		return new THREE.Vector2( vertex.x / mag, vertex.y / mag );

	}

	// Push vertices into `this.vertices`, skipping those inside the hull
	var id = 0;
	var newId = new Array( vertices.length ); // map from old vertex id to new id

	for ( var i = 0; i < faces.length; i++ ) {

		 var face = faces[ i ];

		 for ( var j = 0; j < 3; j++ ) {

				if ( newId[ face[ j ] ] === undefined ) {

						newId[ face[ j ] ] = id++;
						this.vertices.push( vertices[ face[ j ] ] );

				}

				face[ j ] = newId[ face[ j ] ];

		 }

	}

	// Convert faces into instances of THREE.Face3
	for ( var i = 0; i < faces.length; i++ ) {

		this.faces.push( new THREE.Face3( 
				faces[ i ][ 0 ],
				faces[ i ][ 1 ],
				faces[ i ][ 2 ]
		) );

	}

	// Compute UVs
	for ( var i = 0; i < this.faces.length; i++ ) {

		var face = this.faces[ i ];

		this.faceVertexUvs[ 0 ].push( [
			vertexUv( this.vertices[ face.a ] ),
			vertexUv( this.vertices[ face.b ] ),
			vertexUv( this.vertices[ face.c ])
		] );

	}


	this.computeCentroids();
	this.computeFaceNormals();
	this.computeVertexNormals();

};

THREE.ConvexGeometry.prototype = Object.create( THREE.Geometry.prototype );
/**
 * @author sroucheray / http://sroucheray.org/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.AxisHelper = function ( size ) {

	var geometry = new THREE.Geometry();

	geometry.vertices.push(
		new THREE.Vector3(), new THREE.Vector3( size || 1, 0, 0 ),
		new THREE.Vector3(), new THREE.Vector3( 0, size || 1, 0 ),
		new THREE.Vector3(), new THREE.Vector3( 0, 0, size || 1 )
	);

	geometry.colors.push(
		new THREE.Color( 0xff0000 ), new THREE.Color( 0xffaa00 ),
		new THREE.Color( 0x00ff00 ), new THREE.Color( 0xaaff00 ),
		new THREE.Color( 0x0000ff ), new THREE.Color( 0x00aaff )
	);

	var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

	THREE.Line.call( this, geometry, material, THREE.LinePieces );

};

THREE.AxisHelper.prototype = Object.create( THREE.Line.prototype );
/**
 * @author WestLangley / http://github.com/WestLangley
 * @author zz85 / https://github.com/zz85
 *
 * Creates an arrow for visualizing directions
 *
 * Parameters:
 *  dir - Vector3
 *  origin - Vector3
 *  length - Number
 *  hex - color in hex value
 */

THREE.ArrowHelper = function ( dir, origin, length, hex ) {

	THREE.Object3D.call( this );

	if ( hex === undefined ) hex = 0xffff00;
	if ( length === undefined ) length = 20;

	var lineGeometry = new THREE.Geometry();
	lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );
	lineGeometry.vertices.push( new THREE.Vector3( 0, 1, 0 ) );

	this.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: hex } ) );
	this.add( this.line );

	var coneGeometry = new THREE.CylinderGeometry( 0, 0.05, 0.25, 5, 1 );

	this.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: hex } ) );
	this.cone.position.set( 0, 1, 0 );
	this.add( this.cone );

	if ( origin instanceof THREE.Vector3 ) this.position = origin;

	this.setDirection( dir );
	this.setLength( length );

};

THREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.ArrowHelper.prototype.setDirection = function ( dir ) {

	var axis = new THREE.Vector3( 0, 1, 0 ).crossSelf( dir );

	var radians = Math.acos( new THREE.Vector3( 0, 1, 0 ).dot( dir.clone().normalize() ) );

	this.matrix = new THREE.Matrix4().makeRotationAxis( axis.normalize(), radians );

	this.rotation.setEulerFromRotationMatrix( this.matrix, this.eulerOrder );

};

THREE.ArrowHelper.prototype.setLength = function ( length ) {

	this.scale.set( length, length, length );

};

THREE.ArrowHelper.prototype.setColor = function ( hex ) {

	this.line.material.color.setHex( hex );
	this.cone.material.color.setHex( hex );

};
/**
 * @author alteredq / http://alteredqualia.com/
 *
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
 */

THREE.CameraHelper = function ( camera ) {

	THREE.Line.call( this );

	var scope = this;

	this.geometry = new THREE.Geometry();
	this.material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );
	this.type = THREE.LinePieces;

	this.matrixWorld = camera.matrixWorld;
	this.matrixAutoUpdate = false;

	this.pointMap = {};

	// colors

	var hexFrustum = 0xffaa00;
	var hexCone = 0xff0000;
	var hexUp = 0x00aaff;
	var hexTarget = 0xffffff;
	var hexCross = 0x333333;

	// near

	addLine( "n1", "n2", hexFrustum );
	addLine( "n2", "n4", hexFrustum );
	addLine( "n4", "n3", hexFrustum );
	addLine( "n3", "n1", hexFrustum );

	// far

	addLine( "f1", "f2", hexFrustum );
	addLine( "f2", "f4", hexFrustum );
	addLine( "f4", "f3", hexFrustum );
	addLine( "f3", "f1", hexFrustum );

	// sides

	addLine( "n1", "f1", hexFrustum );
	addLine( "n2", "f2", hexFrustum );
	addLine( "n3", "f3", hexFrustum );
	addLine( "n4", "f4", hexFrustum );

	// cone

	addLine( "p", "n1", hexCone );
	addLine( "p", "n2", hexCone );
	addLine( "p", "n3", hexCone );
	addLine( "p", "n4", hexCone );

	// up

	addLine( "u1", "u2", hexUp );
	addLine( "u2", "u3", hexUp );
	addLine( "u3", "u1", hexUp );

	// target

	addLine( "c", "t", hexTarget );
	addLine( "p", "c", hexCross );

	// cross

	addLine( "cn1", "cn2", hexCross );
	addLine( "cn3", "cn4", hexCross );

	addLine( "cf1", "cf2", hexCross );
	addLine( "cf3", "cf4", hexCross );

	this.camera = camera;

	function addLine( a, b, hex ) {

		addPoint( a, hex );
		addPoint( b, hex );

	}

	function addPoint( id, hex ) {

		scope.geometry.vertices.push( new THREE.Vector3() );
		scope.geometry.colors.push( new THREE.Color( hex ) );

		if ( scope.pointMap[ id ] === undefined ) scope.pointMap[ id ] = [];

		scope.pointMap[ id ].push( scope.geometry.vertices.length - 1 );

	}

	this.update( camera );

};

THREE.CameraHelper.prototype = Object.create( THREE.Line.prototype );

THREE.CameraHelper.prototype.update = function () {

	var scope = this;

	var w = 1, h = 1;

	// we need just camera projection matrix
	// world matrix must be identity

	THREE.CameraHelper.__c.projectionMatrix.copy( this.camera.projectionMatrix );

	// center / target

	setPoint( "c", 0, 0, -1 );
	setPoint( "t", 0, 0,  1 );

	// near

	setPoint( "n1", -w, -h, -1 );
	setPoint( "n2",  w, -h, -1 );
	setPoint( "n3", -w,  h, -1 );
	setPoint( "n4",  w,  h, -1 );

	// far

	setPoint( "f1", -w, -h, 1 );
	setPoint( "f2",  w, -h, 1 );
	setPoint( "f3", -w,  h, 1 );
	setPoint( "f4",  w,  h, 1 );

	// up

	setPoint( "u1",  w * 0.7, h * 1.1, -1 );
	setPoint( "u2", -w * 0.7, h * 1.1, -1 );
	setPoint( "u3",        0, h * 2,   -1 );

	// cross

	setPoint( "cf1", -w,  0, 1 );
	setPoint( "cf2",  w,  0, 1 );
	setPoint( "cf3",  0, -h, 1 );
	setPoint( "cf4",  0,  h, 1 );

	setPoint( "cn1", -w,  0, -1 );
	setPoint( "cn2",  w,  0, -1 );
	setPoint( "cn3",  0, -h, -1 );
	setPoint( "cn4",  0,  h, -1 );

	function setPoint( point, x, y, z ) {

		THREE.CameraHelper.__v.set( x, y, z );
		THREE.CameraHelper.__projector.unprojectVector( THREE.CameraHelper.__v, THREE.CameraHelper.__c );

		var points = scope.pointMap[ point ];

		if ( points !== undefined ) {

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				scope.geometry.vertices[ points[ i ] ].copy( THREE.CameraHelper.__v );

			}

		}

	}

	this.geometry.verticesNeedUpdate = true;

};

THREE.CameraHelper.__projector = new THREE.Projector();
THREE.CameraHelper.__v = new THREE.Vector3();
THREE.CameraHelper.__c = new THREE.Camera();

/**
 * @author alteredq / http://alteredqualia.com/
 *
 *	- shows directional light color, intensity, position, orientation and target
 */

THREE.DirectionalLightHelper = function ( light, sphereSize, arrowLength ) {

	THREE.Object3D.call( this );

	this.light = light;

	// position

	this.position = light.position;

	// direction

	this.direction = new THREE.Vector3();
	this.direction.sub( light.target.position, light.position );

	// color

	this.color = light.color.clone();

	var intensity = THREE.Math.clamp( light.intensity, 0, 1 );

	this.color.r *= intensity;
	this.color.g *= intensity;
	this.color.b *= intensity;

	var hexColor = this.color.getHex();

	// light helper

	var bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );
	var raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );

	var bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );
	var raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );

	this.lightArrow = new THREE.ArrowHelper( this.direction, null, arrowLength, hexColor );
	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );

	this.lightArrow.cone.material.fog = false;
	this.lightArrow.line.material.fog = false;

	this.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );

	this.add( this.lightArrow );
	this.add( this.lightSphere );
	this.add( this.lightRays );

	this.lightSphere.properties.isGizmo = true;
	this.lightSphere.properties.gizmoSubject = light;
	this.lightSphere.properties.gizmoRoot = this;

	// light target helper

	this.targetSphere = null;

	if ( light.target.properties.targetInverse ) {

		var targetGeo = new THREE.SphereGeometry( sphereSize, 8, 4 );
		var targetMaterial = new THREE.MeshBasicMaterial( { color: hexColor, wireframe: true, fog: false } );

		this.targetSphere = new THREE.Mesh( targetGeo, targetMaterial );
		this.targetSphere.position = light.target.position;

		this.targetSphere.properties.isGizmo = true;
		this.targetSphere.properties.gizmoSubject = light.target;
		this.targetSphere.properties.gizmoRoot = this.targetSphere;

		var lineMaterial = new THREE.LineDashedMaterial( { color: hexColor, dashSize: 4, gapSize: 4, opacity: 0.75, transparent: true, fog: false } );
		var lineGeometry = new THREE.Geometry();
		lineGeometry.vertices.push( this.position.clone() );
		lineGeometry.vertices.push( this.targetSphere.position.clone() );
		lineGeometry.computeLineDistances();

		this.targetLine = new THREE.Line( lineGeometry, lineMaterial );
		this.targetLine.properties.isGizmo = true;

	}

	//

	this.properties.isGizmo = true;

}

THREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.DirectionalLightHelper.prototype.update = function () {

	// update arrow orientation
	// pointing from light to target

	this.direction.sub( this.light.target.position, this.light.position );
	this.lightArrow.setDirection( this.direction );

	// update arrow, spheres, rays and line colors to light color * light intensity

	this.color.copy( this.light.color );

	var intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );
	this.color.r *= intensity;
	this.color.g *= intensity;
	this.color.b *= intensity;

	this.lightArrow.setColor( this.color.getHex() );
	this.lightSphere.material.color.copy( this.color );
	this.lightRays.material.color.copy( this.color );

	this.targetSphere.material.color.copy( this.color );
	this.targetLine.material.color.copy( this.color );

	// update target line vertices

	this.targetLine.geometry.vertices[ 0 ].copy( this.light.position );
	this.targetLine.geometry.vertices[ 1 ].copy( this.light.target.position );

	this.targetLine.geometry.computeLineDistances();
	this.targetLine.geometry.verticesNeedUpdate = true;

}

/**
 * @author alteredq / http://alteredqualia.com/
 *
 *	- shows hemisphere light intensity, sky and ground colors and directions
 */

THREE.HemisphereLightHelper = function ( light, sphereSize, arrowLength, domeSize ) {

	THREE.Object3D.call( this );

	this.light = light;

	// position

	this.position = light.position;

	//

	var intensity = THREE.Math.clamp( light.intensity, 0, 1 );

	// sky color

	this.color = light.color.clone();

	this.color.r *= intensity;
	this.color.g *= intensity;
	this.color.b *= intensity;

	var hexColor = this.color.getHex();

	// ground color

	this.groundColor = light.groundColor.clone();

	this.groundColor.r *= intensity;
	this.groundColor.g *= intensity;
	this.groundColor.b *= intensity;

	var hexColorGround = this.groundColor.getHex();

	// double colored light bulb

	var bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8, 0, Math.PI * 2, 0, Math.PI * 0.5 );
	var bulbGroundGeometry = new THREE.SphereGeometry( sphereSize, 16, 8, 0, Math.PI * 2, Math.PI * 0.5, Math.PI );

	var bulbSkyMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );
	var bulbGroundMaterial = new THREE.MeshBasicMaterial( { color: hexColorGround, fog: false } );

	for ( var i = 0, il = bulbGeometry.faces.length; i < il; i ++ ) {

		bulbGeometry.faces[ i ].materialIndex = 0;

	}

	for ( var i = 0, il = bulbGroundGeometry.faces.length; i < il; i ++ ) {

		bulbGroundGeometry.faces[ i ].materialIndex = 1;

	}

	THREE.GeometryUtils.merge( bulbGeometry, bulbGroundGeometry );

	this.lightSphere = new THREE.Mesh( bulbGeometry, new THREE.MeshFaceMaterial( [ bulbSkyMaterial, bulbGroundMaterial ] ) );

	// arrows for sky and ground light directions

	this.lightArrow = new THREE.ArrowHelper( new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, ( sphereSize + arrowLength ) * 1.1, 0 ), arrowLength, hexColor );
	this.lightArrow.rotation.x = Math.PI;

	this.lightArrowGround = new THREE.ArrowHelper( new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, ( sphereSize + arrowLength ) * -1.1, 0 ), arrowLength, hexColorGround );

	var joint = new THREE.Object3D();
	joint.rotation.x = -Math.PI * 0.5;

	joint.add( this.lightSphere );
	joint.add( this.lightArrow );
	joint.add( this.lightArrowGround );

	this.add( joint );

	//

	this.lightSphere.properties.isGizmo = true;
	this.lightSphere.properties.gizmoSubject = light;
	this.lightSphere.properties.gizmoRoot = this;

	//

	this.properties.isGizmo = true;

	//

	this.target = new THREE.Vector3();
	this.lookAt( this.target );

}

THREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.HemisphereLightHelper.prototype.update = function () {

	// update sphere sky and ground colors to light color * light intensity

	var intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );

	this.color.copy( this.light.color );
	this.groundColor.copy( this.light.groundColor );

	this.color.r *= intensity;
	this.color.g *= intensity;
	this.color.b *= intensity;

	this.groundColor.r *= intensity;
	this.groundColor.g *= intensity;
	this.groundColor.b *= intensity;

	this.lightSphere.material.materials[ 0 ].color.copy( this.color );
	this.lightSphere.material.materials[ 1 ].color.copy( this.groundColor );

	this.lightArrow.setColor( this.color.getHex() );
	this.lightArrowGround.setColor( this.groundColor.getHex() );

	this.lookAt( this.target );

}

/**
 * @author alteredq / http://alteredqualia.com/
 *
 *	- shows point light color, intensity, position and distance
 */

THREE.PointLightHelper = function ( light, sphereSize ) {

	THREE.Object3D.call( this );

	this.light = light;

	// position

	this.position = light.position;

	// color

	this.color = light.color.clone();

	var intensity = THREE.Math.clamp( light.intensity, 0, 1 );

	this.color.r *= intensity;
	this.color.g *= intensity;
	this.color.b *= intensity;

	var hexColor = this.color.getHex();

	// light helper

	var bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );
	var raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );
	var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );

	var bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );
	var raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );
	var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	var d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightSphere );
	this.add( this.lightRays );
	this.add( this.lightDistance );

	//

	this.lightSphere.properties.isGizmo = true;
	this.lightSphere.properties.gizmoSubject = light;
	this.lightSphere.properties.gizmoRoot = this;

	//

	this.properties.isGizmo = true;

}

THREE.PointLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.PointLightHelper.prototype.update = function () {

	// update sphere and rays colors to light color * light intensity

	this.color.copy( this.light.color );

	var intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );
	this.color.r *= intensity;
	this.color.g *= intensity;
	this.color.b *= intensity;

	this.lightSphere.material.color.copy( this.color );
	this.lightRays.material.color.copy( this.color );
	this.lightDistance.material.color.copy( this.color );

	//

	var d = this.light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.visible = true;
		this.lightDistance.scale.set( d, d, d );

	}

}

/**
 * @author alteredq / http://alteredqualia.com/
 *
 *	- shows spot light color, intensity, position, orientation, light cone and target
 */

THREE.SpotLightHelper = function ( light, sphereSize, arrowLength ) {

	THREE.Object3D.call( this );

	this.light = light;

	// position

	this.position = light.position;

	// direction

	this.direction = new THREE.Vector3();
	this.direction.sub( light.target.position, light.position );

	// color

	this.color = light.color.clone();

	var intensity = THREE.Math.clamp( light.intensity, 0, 1 );

	this.color.r *= intensity;
	this.color.g *= intensity;
	this.color.b *= intensity;

	var hexColor = this.color.getHex();

	// light helper

	var bulbGeometry = new THREE.SphereGeometry( sphereSize, 16, 8 );
	var raysGeometry = new THREE.AsteriskGeometry( sphereSize * 1.25, sphereSize * 2.25 );
	var coneGeometry = new THREE.CylinderGeometry( 0.0001, 1, 1, 8, 1, true );

	var coneMatrix = new THREE.Matrix4();
	coneMatrix.rotateX( -Math.PI/2 );
	coneMatrix.translate( new THREE.Vector3( 0, -0.5, 0 ) );
	coneGeometry.applyMatrix( coneMatrix );

	var bulbMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false } );
	var raysMaterial = new THREE.LineBasicMaterial( { color: hexColor, fog: false } );
	var coneMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.3, transparent: true } );

	this.lightArrow = new THREE.ArrowHelper( this.direction, null, arrowLength, hexColor );
	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightCone = new THREE.Mesh( coneGeometry, coneMaterial );

	var coneLength = light.distance ? light.distance : 10000;
	var coneWidth = coneLength * Math.tan( light.angle * 0.5 ) * 2;
	this.lightCone.scale.set( coneWidth, coneWidth, coneLength );

	this.lightArrow.cone.material.fog = false;
	this.lightArrow.line.material.fog = false;

	this.lightRays = new THREE.Line( raysGeometry, raysMaterial, THREE.LinePieces );

	this.gyroscope = new THREE.Gyroscope();

	this.gyroscope.add( this.lightArrow );
	this.gyroscope.add( this.lightSphere );
	this.gyroscope.add( this.lightRays );

	this.add( this.gyroscope );
	this.add( this.lightCone );

	this.lookAt( light.target.position );

	this.lightSphere.properties.isGizmo = true;
	this.lightSphere.properties.gizmoSubject = light;
	this.lightSphere.properties.gizmoRoot = this;

	// light target helper

	this.targetSphere = null;

	if ( light.target.properties.targetInverse ) {

		var targetGeo = new THREE.SphereGeometry( sphereSize, 8, 4 );
		var targetMaterial = new THREE.MeshBasicMaterial( { color: hexColor, wireframe: true, fog: false } );

		this.targetSphere = new THREE.Mesh( targetGeo, targetMaterial );
		this.targetSphere.position = light.target.position;

		this.targetSphere.properties.isGizmo = true;
		this.targetSphere.properties.gizmoSubject = light.target;
		this.targetSphere.properties.gizmoRoot = this.targetSphere;

		var lineMaterial = new THREE.LineDashedMaterial( { color: hexColor, dashSize: 4, gapSize: 4, opacity: 0.75, transparent: true, fog: false } );
		var lineGeometry = new THREE.Geometry();
		lineGeometry.vertices.push( this.position.clone() );
		lineGeometry.vertices.push( this.targetSphere.position.clone() );
		lineGeometry.computeLineDistances();

		this.targetLine = new THREE.Line( lineGeometry, lineMaterial );
		this.targetLine.properties.isGizmo = true;

	}

	//

	this.properties.isGizmo = true;

}

THREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.SpotLightHelper.prototype.update = function () {

	// update arrow orientation
	// pointing from light to target

	this.direction.sub( this.light.target.position, this.light.position );
	this.lightArrow.setDirection( this.direction );

	// update light cone orientation and size

	this.lookAt( this.light.target.position );

	var coneLength = this.light.distance ? this.light.distance : 10000;
	var coneWidth = coneLength * Math.tan( this.light.angle * 0.5 ) * 2;
	this.lightCone.scale.set( coneWidth, coneWidth, coneLength );

	// update arrow, spheres, rays and line colors to light color * light intensity

	this.color.copy( this.light.color );

	var intensity = THREE.Math.clamp( this.light.intensity, 0, 1 );
	this.color.r *= intensity;
	this.color.g *= intensity;
	this.color.b *= intensity;

	this.lightArrow.setColor( this.color.getHex() );
	this.lightSphere.material.color.copy( this.color );
	this.lightRays.material.color.copy( this.color );
	this.lightCone.material.color.copy( this.color );

	this.targetSphere.material.color.copy( this.color );
	this.targetLine.material.color.copy( this.color );

	// update target line vertices

	this.targetLine.geometry.vertices[ 0 ].copy( this.light.position );
	this.targetLine.geometry.vertices[ 1 ].copy( this.light.target.position );

	this.targetLine.geometry.computeLineDistances();
	this.targetLine.geometry.verticesNeedUpdate = true;

}

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ImmediateRenderObject = function ( ) {

	THREE.Object3D.call( this );

	this.render = function ( renderCallback ) { };

};

THREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.LensFlare = function ( texture, size, distance, blending, color ) {

	THREE.Object3D.call( this );

	this.lensFlares = [];

	this.positionScreen = new THREE.Vector3();
	this.customUpdateCallback = undefined;

	if( texture !== undefined ) {

		this.add( texture, size, distance, blending, color );

	}

};

THREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );


/*
 * Add: adds another flare
 */

THREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {

	if( size === undefined ) size = -1;
	if( distance === undefined ) distance = 0;
	if( opacity === undefined ) opacity = 1;
	if( color === undefined ) color = new THREE.Color( 0xffffff );
	if( blending === undefined ) blending = THREE.NormalBlending;

	distance = Math.min( distance, Math.max( 0, distance ) );

	this.lensFlares.push( { texture: texture, 			// THREE.Texture
		                    size: size, 				// size in pixels (-1 = use texture.width)
		                    distance: distance, 		// distance (0-1) from light source (0=at light source)
		                    x: 0, y: 0, z: 0,			// screen position (-1 => 1) z = 0 is ontop z = 1 is back
		                    scale: 1, 					// scale
		                    rotation: 1, 				// rotation
		                    opacity: opacity,			// opacity
							color: color,				// color
		                    blending: blending } );		// blending

};


/*
 * Update lens flares update positions on all flares based on the screen position
 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
 */

THREE.LensFlare.prototype.updateLensFlares = function () {

	var f, fl = this.lensFlares.length;
	var flare;
	var vecX = -this.positionScreen.x * 2;
	var vecY = -this.positionScreen.y * 2;

	for( f = 0; f < fl; f ++ ) {

		flare = this.lensFlares[ f ];

		flare.x = this.positionScreen.x + vecX * flare.distance;
		flare.y = this.positionScreen.y + vecY * flare.distance;

		flare.wantedRotation = flare.x * Math.PI * 0.25;
		flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

	}

};












/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.MorphBlendMesh = function( geometry, material ) {

	THREE.Mesh.call( this, geometry, material );

	this.animationsMap = {};
	this.animationsList = [];

	// prepare default animation
	// (all frames played together in 1 second)

	var numFrames = this.geometry.morphTargets.length;

	var name = "__default";

	var startFrame = 0;
	var endFrame = numFrames - 1;

	var fps = numFrames / 1;

	this.createAnimation( name, startFrame, endFrame, fps );
	this.setAnimationWeight( name, 1 );

};

THREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

	var animation = {

		startFrame: start,
		endFrame: end,

		length: end - start + 1,

		fps: fps,
		duration: ( end - start ) / fps,

		lastFrame: 0,
		currentFrame: 0,

		active: false,

		time: 0,
		direction: 1,
		weight: 1,

		directionBackwards: false,
		mirroredLoop: false

	};

	this.animationsMap[ name ] = animation;
	this.animationsList.push( animation );

};

THREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

	var pattern = /([a-z]+)(\d+)/;

	var firstAnimation, frameRanges = {};

	var geometry = this.geometry;

	for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

		var morph = geometry.morphTargets[ i ];
		var chunks = morph.name.match( pattern );

		if ( chunks && chunks.length > 1 ) {

			var name = chunks[ 1 ];
			var num = chunks[ 2 ];

			if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: -Infinity };

			var range = frameRanges[ name ];

			if ( i < range.start ) range.start = i;
			if ( i > range.end ) range.end = i;

			if ( ! firstAnimation ) firstAnimation = name;

		}

	}

	for ( var name in frameRanges ) {

		var range = frameRanges[ name ];
		this.createAnimation( name, range.start, range.end, fps );

	}

	this.firstAnimation = firstAnimation;

};

THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.direction = 1;
		animation.directionBackwards = false;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.direction = -1;
		animation.directionBackwards = true;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.fps = fps;
		animation.duration = ( animation.end - animation.start ) / animation.fps;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.duration = duration;
		animation.fps = ( animation.end - animation.start ) / animation.duration;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.weight = weight;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.time = time;

	}

};

THREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

	var time = 0;

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		time = animation.time;

	}

	return time;

};

THREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

	var duration = -1;

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		duration = animation.duration;

	}

	return duration;

};

THREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.time = 0;
		animation.active = true;

	} else {

		console.warn( "animation[" + name + "] undefined" );

	}

};

THREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.active = false;

	}

};

THREE.MorphBlendMesh.prototype.update = function ( delta ) {

	for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

		var animation = this.animationsList[ i ];

		if ( ! animation.active ) continue;

		var frameTime = animation.duration / animation.length;

		animation.time += animation.direction * delta;

		if ( animation.mirroredLoop ) {

			if ( animation.time > animation.duration || animation.time < 0 ) {

				animation.direction *= -1;

				if ( animation.time > animation.duration ) {

					animation.time = animation.duration;
					animation.directionBackwards = true;

				}

				if ( animation.time < 0 ) {

					animation.time = 0;
					animation.directionBackwards = false;

				}

			}

		} else {

			animation.time = animation.time % animation.duration;

			if ( animation.time < 0 ) animation.time += animation.duration;

		}

		var keyframe = animation.startFrame + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
		var weight = animation.weight;

		if ( keyframe !== animation.currentFrame ) {

			this.morphTargetInfluences[ animation.lastFrame ] = 0;
			this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

			this.morphTargetInfluences[ keyframe ] = 0;

			animation.lastFrame = animation.currentFrame;
			animation.currentFrame = keyframe;

		}

		var mix = ( animation.time % frameTime ) / frameTime;

		if ( animation.directionBackwards ) mix = 1 - mix;

		this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
		this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

	}

};
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.LensFlarePlugin = function ( ) {

	var _gl, _renderer, _lensFlare = {};

	this.init = function ( renderer ) {

		_gl = renderer.context;
		_renderer = renderer;

		_lensFlare.vertices = new Float32Array( 8 + 8 );
		_lensFlare.faces = new Uint16Array( 6 );

		var i = 0;
		_lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = -1;	// vertex
		_lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 0;	// uv... etc.

		_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = -1;
		_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 0;

		_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;
		_lensFlare.vertices[ i++ ] = 1;  _lensFlare.vertices[ i++ ] = 1;

		_lensFlare.vertices[ i++ ] = -1; _lensFlare.vertices[ i++ ] = 1;
		_lensFlare.vertices[ i++ ] = 0;  _lensFlare.vertices[ i++ ] = 1;

		i = 0;
		_lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 1; _lensFlare.faces[ i++ ] = 2;
		_lensFlare.faces[ i++ ] = 0; _lensFlare.faces[ i++ ] = 2; _lensFlare.faces[ i++ ] = 3;

		// buffers

		_lensFlare.vertexBuffer     = _gl.createBuffer();
		_lensFlare.elementBuffer    = _gl.createBuffer();

		_gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );
		_gl.bufferData( _gl.ARRAY_BUFFER, _lensFlare.vertices, _gl.STATIC_DRAW );

		_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );
		_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.faces, _gl.STATIC_DRAW );

		// textures

		_lensFlare.tempTexture      = _gl.createTexture();
		_lensFlare.occlusionTexture = _gl.createTexture();

		_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );
		_gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, 16, 16, 0, _gl.RGB, _gl.UNSIGNED_BYTE, null );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );

		_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );
		_gl.texImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, 16, 16, 0, _gl.RGBA, _gl.UNSIGNED_BYTE, null );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MAG_FILTER, _gl.NEAREST );
		_gl.texParameteri( _gl.TEXTURE_2D, _gl.TEXTURE_MIN_FILTER, _gl.NEAREST );

		if ( _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) <= 0 ) {

			_lensFlare.hasVertexTexture = false;
			_lensFlare.program = createProgram( THREE.ShaderFlares[ "lensFlare" ] );

		} else {

			_lensFlare.hasVertexTexture = true;
			_lensFlare.program = createProgram( THREE.ShaderFlares[ "lensFlareVertexTexture" ] );

		}

		_lensFlare.attributes = {};
		_lensFlare.uniforms = {};

		_lensFlare.attributes.vertex       = _gl.getAttribLocation ( _lensFlare.program, "position" );
		_lensFlare.attributes.uv           = _gl.getAttribLocation ( _lensFlare.program, "uv" );

		_lensFlare.uniforms.renderType     = _gl.getUniformLocation( _lensFlare.program, "renderType" );
		_lensFlare.uniforms.map            = _gl.getUniformLocation( _lensFlare.program, "map" );
		_lensFlare.uniforms.occlusionMap   = _gl.getUniformLocation( _lensFlare.program, "occlusionMap" );
		_lensFlare.uniforms.opacity        = _gl.getUniformLocation( _lensFlare.program, "opacity" );
		_lensFlare.uniforms.color          = _gl.getUniformLocation( _lensFlare.program, "color" );
		_lensFlare.uniforms.scale          = _gl.getUniformLocation( _lensFlare.program, "scale" );
		_lensFlare.uniforms.rotation       = _gl.getUniformLocation( _lensFlare.program, "rotation" );
		_lensFlare.uniforms.screenPosition = _gl.getUniformLocation( _lensFlare.program, "screenPosition" );

	};


	/*
	 * Render lens flares
	 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
	 *         reads these back and calculates occlusion.
	 *         Then _lensFlare.update_lensFlares() is called to re-position and
	 *         update transparency of flares. Then they are rendered.
	 *
	 */

	this.render = function ( scene, camera, viewportWidth, viewportHeight ) {

		var flares = scene.__webglFlares,
			nFlares = flares.length;

		if ( ! nFlares ) return;

		var tempPosition = new THREE.Vector3();

		var invAspect = viewportHeight / viewportWidth,
			halfViewportWidth = viewportWidth * 0.5,
			halfViewportHeight = viewportHeight * 0.5;

		var size = 16 / viewportHeight,
			scale = new THREE.Vector2( size * invAspect, size );

		var screenPosition = new THREE.Vector3( 1, 1, 0 ),
			screenPositionPixels = new THREE.Vector2( 1, 1 );

		var uniforms = _lensFlare.uniforms,
			attributes = _lensFlare.attributes;

		// set _lensFlare program and reset blending

		_gl.useProgram( _lensFlare.program );

		_gl.enableVertexAttribArray( _lensFlare.attributes.vertex );
		_gl.enableVertexAttribArray( _lensFlare.attributes.uv );

		// loop through all lens flares to update their occlusion and positions
		// setup gl and common used attribs/unforms

		_gl.uniform1i( uniforms.occlusionMap, 0 );
		_gl.uniform1i( uniforms.map, 1 );

		_gl.bindBuffer( _gl.ARRAY_BUFFER, _lensFlare.vertexBuffer );
		_gl.vertexAttribPointer( attributes.vertex, 2, _gl.FLOAT, false, 2 * 8, 0 );
		_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );

		_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _lensFlare.elementBuffer );

		_gl.disable( _gl.CULL_FACE );
		_gl.depthMask( false );

		var i, j, jl, flare, sprite;

		for ( i = 0; i < nFlares; i ++ ) {

			size = 16 / viewportHeight;
			scale.set( size * invAspect, size );

			// calc object screen position

			flare = flares[ i ];

			tempPosition.set( flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14] );

			camera.matrixWorldInverse.multiplyVector3( tempPosition );
			camera.projectionMatrix.multiplyVector3( tempPosition );

			// setup arrays for gl programs

			screenPosition.copy( tempPosition )

			screenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;
			screenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;

			// screen cull

			if ( _lensFlare.hasVertexTexture || (
				screenPositionPixels.x > 0 &&
				screenPositionPixels.x < viewportWidth &&
				screenPositionPixels.y > 0 &&
				screenPositionPixels.y < viewportHeight ) ) {

				// save current RGB to temp texture

				_gl.activeTexture( _gl.TEXTURE1 );
				_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );
				_gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );


				// render pink quad

				_gl.uniform1i( uniforms.renderType, 0 );
				_gl.uniform2f( uniforms.scale, scale.x, scale.y );
				_gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

				_gl.disable( _gl.BLEND );
				_gl.enable( _gl.DEPTH_TEST );

				_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );


				// copy result to occlusionMap

				_gl.activeTexture( _gl.TEXTURE0 );
				_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.occlusionTexture );
				_gl.copyTexImage2D( _gl.TEXTURE_2D, 0, _gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );


				// restore graphics

				_gl.uniform1i( uniforms.renderType, 1 );
				_gl.disable( _gl.DEPTH_TEST );

				_gl.activeTexture( _gl.TEXTURE1 );
				_gl.bindTexture( _gl.TEXTURE_2D, _lensFlare.tempTexture );
				_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );


				// update object positions

				flare.positionScreen.copy( screenPosition )

				if ( flare.customUpdateCallback ) {

					flare.customUpdateCallback( flare );

				} else {

					flare.updateLensFlares();

				}

				// render flares

				_gl.uniform1i( uniforms.renderType, 2 );
				_gl.enable( _gl.BLEND );

				for ( j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

					sprite = flare.lensFlares[ j ];

					if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

						screenPosition.x = sprite.x;
						screenPosition.y = sprite.y;
						screenPosition.z = sprite.z;

						size = sprite.size * sprite.scale / viewportHeight;

						scale.x = size * invAspect;
						scale.y = size;

						_gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
						_gl.uniform2f( uniforms.scale, scale.x, scale.y );
						_gl.uniform1f( uniforms.rotation, sprite.rotation );

						_gl.uniform1f( uniforms.opacity, sprite.opacity );
						_gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

						_renderer.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
						_renderer.setTexture( sprite.texture, 1 );

						_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );

					}

				}

			}

		}

		// restore gl

		_gl.enable( _gl.CULL_FACE );
		_gl.enable( _gl.DEPTH_TEST );
		_gl.depthMask( true );

	};

	function createProgram ( shader ) {

		var program = _gl.createProgram();

		var fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );
		var vertexShader = _gl.createShader( _gl.VERTEX_SHADER );

		_gl.shaderSource( fragmentShader, shader.fragmentShader );
		_gl.shaderSource( vertexShader, shader.vertexShader );

		_gl.compileShader( fragmentShader );
		_gl.compileShader( vertexShader );

		_gl.attachShader( program, fragmentShader );
		_gl.attachShader( program, vertexShader );

		_gl.linkProgram( program );

		return program;

	};

};/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ShadowMapPlugin = function ( ) {

	var _gl,
	_renderer,
	_depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,

	_frustum = new THREE.Frustum(),
	_projScreenMatrix = new THREE.Matrix4(),

	_min = new THREE.Vector3(),
	_max = new THREE.Vector3();

	this.init = function ( renderer ) {

		_gl = renderer.context;
		_renderer = renderer;

		var depthShader = THREE.ShaderLib[ "depthRGBA" ];
		var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );

		_depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );
		_depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );
		_depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );
		_depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );

		_depthMaterial._shadowPass = true;
		_depthMaterialMorph._shadowPass = true;
		_depthMaterialSkin._shadowPass = true;
		_depthMaterialMorphSkin._shadowPass = true;

	};

	this.render = function ( scene, camera ) {

		if ( ! ( _renderer.shadowMapEnabled && _renderer.shadowMapAutoUpdate ) ) return;

		this.update( scene, camera );

	};

	this.update = function ( scene, camera ) {

		var i, il, j, jl, n,

		shadowMap, shadowMatrix, shadowCamera,
		program, buffer, material,
		webglObject, object, light,
		renderList,

		lights = [],
		k = 0,

		fog = null;

		// set GL state for depth map

		_gl.clearColor( 1, 1, 1, 1 );
		_gl.disable( _gl.BLEND );

		_gl.enable( _gl.CULL_FACE );
		_gl.frontFace( _gl.CCW );

		if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {

			_gl.cullFace( _gl.FRONT );

		} else {

			_gl.cullFace( _gl.BACK );

		}

		_renderer.setDepthTest( true );

		// preprocess lights
		// 	- skip lights that are not casting shadows
		//	- create virtual lights for cascaded shadow maps

		for ( i = 0, il = scene.__lights.length; i < il; i ++ ) {

			light = scene.__lights[ i ];

			if ( ! light.castShadow ) continue;

			if ( ( light instanceof THREE.DirectionalLight ) && light.shadowCascade ) {

				for ( n = 0; n < light.shadowCascadeCount; n ++ ) {

					var virtualLight;

					if ( ! light.shadowCascadeArray[ n ] ) {

						virtualLight = createVirtualLight( light, n );
						virtualLight.originalCamera = camera;

						var gyro = new THREE.Gyroscope();
						gyro.position = light.shadowCascadeOffset;

						gyro.add( virtualLight );
						gyro.add( virtualLight.target );

						camera.add( gyro );

						light.shadowCascadeArray[ n ] = virtualLight;

						console.log( "Created virtualLight", virtualLight );

					} else {

						virtualLight = light.shadowCascadeArray[ n ];

					}

					updateVirtualLight( light, n );

					lights[ k ] = virtualLight;
					k ++;

				}

			} else {

				lights[ k ] = light;
				k ++;

			}

		}

		// render depth map

		for ( i = 0, il = lights.length; i < il; i ++ ) {

			light = lights[ i ];

			if ( ! light.shadowMap ) {

				var shadowFilter = THREE.LinearFilter;

				if ( _renderer.shadowMapType === THREE.PCFSoftShadowMap ) {

					shadowFilter = THREE.NearestFilter;

				}

				var pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };

				light.shadowMap = new THREE.WebGLRenderTarget( light.shadowMapWidth, light.shadowMapHeight, pars );
				light.shadowMapSize = new THREE.Vector2( light.shadowMapWidth, light.shadowMapHeight );

				light.shadowMatrix = new THREE.Matrix4();

			}

			if ( ! light.shadowCamera ) {

				if ( light instanceof THREE.SpotLight ) {

					light.shadowCamera = new THREE.PerspectiveCamera( light.shadowCameraFov, light.shadowMapWidth / light.shadowMapHeight, light.shadowCameraNear, light.shadowCameraFar );

				} else if ( light instanceof THREE.DirectionalLight ) {

					light.shadowCamera = new THREE.OrthographicCamera( light.shadowCameraLeft, light.shadowCameraRight, light.shadowCameraTop, light.shadowCameraBottom, light.shadowCameraNear, light.shadowCameraFar );

				} else {

					console.error( "Unsupported light type for shadow" );
					continue;

				}

				scene.add( light.shadowCamera );

				if ( _renderer.autoUpdateScene ) scene.updateMatrixWorld();

			}

			if ( light.shadowCameraVisible && ! light.cameraHelper ) {

				light.cameraHelper = new THREE.CameraHelper( light.shadowCamera );
				light.shadowCamera.add( light.cameraHelper );

			}

			if ( light.isVirtual && virtualLight.originalCamera == camera ) {

				updateShadowCamera( camera, light );

			}

			shadowMap = light.shadowMap;
			shadowMatrix = light.shadowMatrix;
			shadowCamera = light.shadowCamera;

			shadowCamera.position.copy( light.matrixWorld.getPosition() );
			shadowCamera.lookAt( light.target.matrixWorld.getPosition() );
			shadowCamera.updateMatrixWorld();

			shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

			if ( light.cameraHelper ) light.cameraHelper.visible = light.shadowCameraVisible;
			if ( light.shadowCameraVisible ) light.cameraHelper.update();

			// compute shadow matrix

			shadowMatrix.set( 0.5, 0.0, 0.0, 0.5,
							  0.0, 0.5, 0.0, 0.5,
							  0.0, 0.0, 0.5, 0.5,
							  0.0, 0.0, 0.0, 1.0 );

			shadowMatrix.multiplySelf( shadowCamera.projectionMatrix );
			shadowMatrix.multiplySelf( shadowCamera.matrixWorldInverse );

			// update camera matrices and frustum

			_projScreenMatrix.multiply( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			// render shadow map

			_renderer.setRenderTarget( shadowMap );
			_renderer.clear();

			// set object matrices & frustum culling

			renderList = scene.__webglObjects;

			for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

				webglObject = renderList[ j ];
				object = webglObject.object;

				webglObject.render = false;

				if ( object.visible && object.castShadow ) {

					if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.contains( object ) ) {

						object._modelViewMatrix.multiply( shadowCamera.matrixWorldInverse, object.matrixWorld );

						webglObject.render = true;

					}

				}

			}

			// render regular objects

			var objectMaterial, useMorphing, useSkinning;

			for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

				webglObject = renderList[ j ];

				if ( webglObject.render ) {

					object = webglObject.object;
					buffer = webglObject.buffer;

					// culling is overriden globally for all objects
					// while rendering depth map

					// need to deal with MeshFaceMaterial somehow
					// in that case just use the first of material.materials for now
					// (proper solution would require to break objects by materials
					//  similarly to regular rendering and then set corresponding
					//  depth materials per each chunk instead of just once per object)

					objectMaterial = getObjectMaterial( object );

					useMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;
					useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;

					if ( object.customDepthMaterial ) {

						material = object.customDepthMaterial;

					} else if ( useSkinning ) {

						material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;

					} else if ( useMorphing ) {

						material = _depthMaterialMorph;

					} else {

						material = _depthMaterial;

					}

					if ( buffer instanceof THREE.BufferGeometry ) {

						_renderer.renderBufferDirect( shadowCamera, scene.__lights, fog, material, buffer, object );

					} else {

						_renderer.renderBuffer( shadowCamera, scene.__lights, fog, material, buffer, object );

					}

				}

			}

			// set matrices and render immediate objects

			renderList = scene.__webglObjectsImmediate;

			for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

				webglObject = renderList[ j ];
				object = webglObject.object;

				if ( object.visible && object.castShadow ) {

					object._modelViewMatrix.multiply( shadowCamera.matrixWorldInverse, object.matrixWorld );

					_renderer.renderImmediateObject( shadowCamera, scene.__lights, fog, _depthMaterial, object );

				}

			}

		}

		// restore GL state

		var clearColor = _renderer.getClearColor(),
		clearAlpha = _renderer.getClearAlpha();

		_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );
		_gl.enable( _gl.BLEND );

		if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {

			_gl.cullFace( _gl.BACK );

		}

	};

	function createVirtualLight( light, cascade ) {

		var virtualLight = new THREE.DirectionalLight();

		virtualLight.isVirtual = true;

		virtualLight.onlyShadow = true;
		virtualLight.castShadow = true;

		virtualLight.shadowCameraNear = light.shadowCameraNear;
		virtualLight.shadowCameraFar = light.shadowCameraFar;

		virtualLight.shadowCameraLeft = light.shadowCameraLeft;
		virtualLight.shadowCameraRight = light.shadowCameraRight;
		virtualLight.shadowCameraBottom = light.shadowCameraBottom;
		virtualLight.shadowCameraTop = light.shadowCameraTop;

		virtualLight.shadowCameraVisible = light.shadowCameraVisible;

		virtualLight.shadowDarkness = light.shadowDarkness;

		virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];
		virtualLight.shadowMapWidth = light.shadowCascadeWidth[ cascade ];
		virtualLight.shadowMapHeight = light.shadowCascadeHeight[ cascade ];

		virtualLight.pointsWorld = [];
		virtualLight.pointsFrustum = [];

		var pointsWorld = virtualLight.pointsWorld,
			pointsFrustum = virtualLight.pointsFrustum;

		for ( var i = 0; i < 8; i ++ ) {

			pointsWorld[ i ] = new THREE.Vector3();
			pointsFrustum[ i ] = new THREE.Vector3();

		}

		var nearZ = light.shadowCascadeNearZ[ cascade ];
		var farZ = light.shadowCascadeFarZ[ cascade ];

		pointsFrustum[ 0 ].set( -1, -1, nearZ );
		pointsFrustum[ 1 ].set(  1, -1, nearZ );
		pointsFrustum[ 2 ].set( -1,  1, nearZ );
		pointsFrustum[ 3 ].set(  1,  1, nearZ );

		pointsFrustum[ 4 ].set( -1, -1, farZ );
		pointsFrustum[ 5 ].set(  1, -1, farZ );
		pointsFrustum[ 6 ].set( -1,  1, farZ );
		pointsFrustum[ 7 ].set(  1,  1, farZ );

		return virtualLight;

	}

	// Synchronize virtual light with the original light

	function updateVirtualLight( light, cascade ) {

		var virtualLight = light.shadowCascadeArray[ cascade ];

		virtualLight.position.copy( light.position );
		virtualLight.target.position.copy( light.target.position );
		virtualLight.lookAt( virtualLight.target );

		virtualLight.shadowCameraVisible = light.shadowCameraVisible;
		virtualLight.shadowDarkness = light.shadowDarkness;

		virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];

		var nearZ = light.shadowCascadeNearZ[ cascade ];
		var farZ = light.shadowCascadeFarZ[ cascade ];

		var pointsFrustum = virtualLight.pointsFrustum;

		pointsFrustum[ 0 ].z = nearZ;
		pointsFrustum[ 1 ].z = nearZ;
		pointsFrustum[ 2 ].z = nearZ;
		pointsFrustum[ 3 ].z = nearZ;

		pointsFrustum[ 4 ].z = farZ;
		pointsFrustum[ 5 ].z = farZ;
		pointsFrustum[ 6 ].z = farZ;
		pointsFrustum[ 7 ].z = farZ;

	}

	// Fit shadow camera's ortho frustum to camera frustum

	function updateShadowCamera( camera, light ) {

		var shadowCamera = light.shadowCamera,
			pointsFrustum = light.pointsFrustum,
			pointsWorld = light.pointsWorld;

		_min.set( Infinity, Infinity, Infinity );
		_max.set( -Infinity, -Infinity, -Infinity );

		for ( var i = 0; i < 8; i ++ ) {

			var p = pointsWorld[ i ];

			p.copy( pointsFrustum[ i ] );
			THREE.ShadowMapPlugin.__projector.unprojectVector( p, camera );

			shadowCamera.matrixWorldInverse.multiplyVector3( p );

			if ( p.x < _min.x ) _min.x = p.x;
			if ( p.x > _max.x ) _max.x = p.x;

			if ( p.y < _min.y ) _min.y = p.y;
			if ( p.y > _max.y ) _max.y = p.y;

			if ( p.z < _min.z ) _min.z = p.z;
			if ( p.z > _max.z ) _max.z = p.z;

		}

		shadowCamera.left = _min.x;
		shadowCamera.right = _max.x;
		shadowCamera.top = _max.y;
		shadowCamera.bottom = _min.y;

		// can't really fit near/far
		//shadowCamera.near = _min.z;
		//shadowCamera.far = _max.z;

		shadowCamera.updateProjectionMatrix();

	}

	// For the moment just ignore objects that have multiple materials with different animation methods
	// Only the first material will be taken into account for deciding which depth material to use for shadow maps

	function getObjectMaterial( object ) {

		return object.material instanceof THREE.MeshFaceMaterial
			? object.material.materials[ 0 ]
			: object.material;

	};

};

THREE.ShadowMapPlugin.__projector = new THREE.Projector();
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SpritePlugin = function ( ) {

	var _gl, _renderer, _sprite = {};

	this.init = function ( renderer ) {

		_gl = renderer.context;
		_renderer = renderer;

		_sprite.vertices = new Float32Array( 8 + 8 );
		_sprite.faces    = new Uint16Array( 6 );

		var i = 0;

		_sprite.vertices[ i++ ] = -1; _sprite.vertices[ i++ ] = -1;	// vertex 0
		_sprite.vertices[ i++ ] = 0;  _sprite.vertices[ i++ ] = 0;	// uv 0

		_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = -1;	// vertex 1
		_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 0;	// uv 1

		_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 1;	// vertex 2
		_sprite.vertices[ i++ ] = 1;  _sprite.vertices[ i++ ] = 1;	// uv 2

		_sprite.vertices[ i++ ] = -1; _sprite.vertices[ i++ ] = 1;	// vertex 3
		_sprite.vertices[ i++ ] = 0;  _sprite.vertices[ i++ ] = 1;	// uv 3

		i = 0;

		_sprite.faces[ i++ ] = 0; _sprite.faces[ i++ ] = 1; _sprite.faces[ i++ ] = 2;
		_sprite.faces[ i++ ] = 0; _sprite.faces[ i++ ] = 2; _sprite.faces[ i++ ] = 3;

		_sprite.vertexBuffer  = _gl.createBuffer();
		_sprite.elementBuffer = _gl.createBuffer();

		_gl.bindBuffer( _gl.ARRAY_BUFFER, _sprite.vertexBuffer );
		_gl.bufferData( _gl.ARRAY_BUFFER, _sprite.vertices, _gl.STATIC_DRAW );

		_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer );
		_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, _sprite.faces, _gl.STATIC_DRAW );

		_sprite.program = createProgram( THREE.ShaderSprite[ "sprite" ] );

		_sprite.attributes = {};
		_sprite.uniforms = {};

		_sprite.attributes.position           = _gl.getAttribLocation ( _sprite.program, "position" );
		_sprite.attributes.uv                 = _gl.getAttribLocation ( _sprite.program, "uv" );

		_sprite.uniforms.uvOffset             = _gl.getUniformLocation( _sprite.program, "uvOffset" );
		_sprite.uniforms.uvScale              = _gl.getUniformLocation( _sprite.program, "uvScale" );

		_sprite.uniforms.rotation             = _gl.getUniformLocation( _sprite.program, "rotation" );
		_sprite.uniforms.scale                = _gl.getUniformLocation( _sprite.program, "scale" );
		_sprite.uniforms.alignment            = _gl.getUniformLocation( _sprite.program, "alignment" );

		_sprite.uniforms.color                = _gl.getUniformLocation( _sprite.program, "color" );
		_sprite.uniforms.map                  = _gl.getUniformLocation( _sprite.program, "map" );
		_sprite.uniforms.opacity              = _gl.getUniformLocation( _sprite.program, "opacity" );

		_sprite.uniforms.useScreenCoordinates = _gl.getUniformLocation( _sprite.program, "useScreenCoordinates" );
		_sprite.uniforms.sizeAttenuation   	  = _gl.getUniformLocation( _sprite.program, "sizeAttenuation" );
		_sprite.uniforms.screenPosition    	  = _gl.getUniformLocation( _sprite.program, "screenPosition" );
		_sprite.uniforms.modelViewMatrix      = _gl.getUniformLocation( _sprite.program, "modelViewMatrix" );
		_sprite.uniforms.projectionMatrix     = _gl.getUniformLocation( _sprite.program, "projectionMatrix" );

		_sprite.uniforms.fogType 		  	  = _gl.getUniformLocation( _sprite.program, "fogType" );
		_sprite.uniforms.fogDensity 		  = _gl.getUniformLocation( _sprite.program, "fogDensity" );
		_sprite.uniforms.fogNear 		  	  = _gl.getUniformLocation( _sprite.program, "fogNear" );
		_sprite.uniforms.fogFar 		  	  = _gl.getUniformLocation( _sprite.program, "fogFar" );
		_sprite.uniforms.fogColor 		  	  = _gl.getUniformLocation( _sprite.program, "fogColor" );

		_sprite.uniforms.alphaTest 		  	  = _gl.getUniformLocation( _sprite.program, "alphaTest" );

	};

	this.render = function ( scene, camera, viewportWidth, viewportHeight ) {

		var sprites = scene.__webglSprites,
			nSprites = sprites.length;

		if ( ! nSprites ) return;

		var attributes = _sprite.attributes,
			uniforms = _sprite.uniforms;

		var invAspect = viewportHeight / viewportWidth;

		var halfViewportWidth = viewportWidth * 0.5,
			halfViewportHeight = viewportHeight * 0.5;

		// setup gl

		_gl.useProgram( _sprite.program );

		_gl.enableVertexAttribArray( attributes.position );
		_gl.enableVertexAttribArray( attributes.uv );

		_gl.disable( _gl.CULL_FACE );
		_gl.enable( _gl.BLEND );

		_gl.bindBuffer( _gl.ARRAY_BUFFER, _sprite.vertexBuffer );
		_gl.vertexAttribPointer( attributes.position, 2, _gl.FLOAT, false, 2 * 8, 0 );
		_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 2 * 8, 8 );

		_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, _sprite.elementBuffer );

		_gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

		_gl.activeTexture( _gl.TEXTURE0 );
		_gl.uniform1i( uniforms.map, 0 );

		var oldFogType = 0;
		var sceneFogType = 0;
		var fog = scene.fog;

		if ( fog ) {

			_gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

			if ( fog instanceof THREE.Fog ) {

				_gl.uniform1f( uniforms.fogNear, fog.near );
				_gl.uniform1f( uniforms.fogFar, fog.far );

				_gl.uniform1i( uniforms.fogType, 1 );
				oldFogType = 1;
				sceneFogType = 1;

			} else if ( fog instanceof THREE.FogExp2 ) {

				_gl.uniform1f( uniforms.fogDensity, fog.density );

				_gl.uniform1i( uniforms.fogType, 2 );
				oldFogType = 2;
				sceneFogType = 2;

			}

		} else {

			_gl.uniform1i( uniforms.fogType, 0 );
			oldFogType = 0;
			sceneFogType = 0;

		}


		// update positions and sort

		var i, sprite, material, screenPosition, size, fogType, scale = [];

		for( i = 0; i < nSprites; i ++ ) {

			sprite = sprites[ i ];
			material = sprite.material;

			if ( ! sprite.visible || material.opacity === 0 ) continue;

			if ( ! material.useScreenCoordinates ) {

				sprite._modelViewMatrix.multiply( camera.matrixWorldInverse, sprite.matrixWorld );
				sprite.z = - sprite._modelViewMatrix.elements[ 14 ];

			} else {

				sprite.z = - sprite.position.z;

			}

		}

		sprites.sort( painterSortStable );

		// render all sprites

		for( i = 0; i < nSprites; i ++ ) {

			sprite = sprites[ i ];
			material = sprite.material;

			if ( ! sprite.visible || material.opacity === 0 ) continue;

			if ( material.map && material.map.image && material.map.image.width ) {

				_gl.uniform1f( uniforms.alphaTest, material.alphaTest );

				if ( material.useScreenCoordinates === true ) {

					_gl.uniform1i( uniforms.useScreenCoordinates, 1 );
					_gl.uniform3f(
						uniforms.screenPosition,
						( ( sprite.position.x * _renderer.devicePixelRatio ) - halfViewportWidth  ) / halfViewportWidth,
						( halfViewportHeight - ( sprite.position.y * _renderer.devicePixelRatio ) ) / halfViewportHeight,
						Math.max( 0, Math.min( 1, sprite.position.z ) )
					);

					scale[ 0 ] = _renderer.devicePixelRatio;
					scale[ 1 ] = _renderer.devicePixelRatio;

				} else {

					_gl.uniform1i( uniforms.useScreenCoordinates, 0 );
					_gl.uniform1i( uniforms.sizeAttenuation, material.sizeAttenuation ? 1 : 0 );
					_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite._modelViewMatrix.elements );

					scale[ 0 ] = 1;
					scale[ 1 ] = 1;

				}

				if ( scene.fog && material.fog ) {

					fogType = sceneFogType;

				} else {

					fogType = 0;

				}

				if ( oldFogType !== fogType ) {

					_gl.uniform1i( uniforms.fogType, fogType );
					oldFogType = fogType;

				}

				size = 1 / ( material.scaleByViewport ? viewportHeight : 1 );

				scale[ 0 ] *= size * invAspect * sprite.scale.x
				scale[ 1 ] *= size * sprite.scale.y;

				_gl.uniform2f( uniforms.uvScale, material.uvScale.x, material.uvScale.y );
				_gl.uniform2f( uniforms.uvOffset, material.uvOffset.x, material.uvOffset.y );
				_gl.uniform2f( uniforms.alignment, material.alignment.x, material.alignment.y );

				_gl.uniform1f( uniforms.opacity, material.opacity );
				_gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

				_gl.uniform1f( uniforms.rotation, sprite.rotation );
				_gl.uniform2fv( uniforms.scale, scale );

				_renderer.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
				_renderer.setDepthTest( material.depthTest );
				_renderer.setDepthWrite( material.depthWrite );
				_renderer.setTexture( material.map, 0 );

				_gl.drawElements( _gl.TRIANGLES, 6, _gl.UNSIGNED_SHORT, 0 );

			}

		}

		// restore gl

		_gl.enable( _gl.CULL_FACE );

	};

	function createProgram ( shader ) {

		var program = _gl.createProgram();

		var fragmentShader = _gl.createShader( _gl.FRAGMENT_SHADER );
		var vertexShader = _gl.createShader( _gl.VERTEX_SHADER );

		_gl.shaderSource( fragmentShader, shader.fragmentShader );
		_gl.shaderSource( vertexShader, shader.vertexShader );

		_gl.compileShader( fragmentShader );
		_gl.compileShader( vertexShader );

		_gl.attachShader( program, fragmentShader );
		_gl.attachShader( program, vertexShader );

		_gl.linkProgram( program );

		return program;

	};

	function painterSortStable ( a, b ) {

		if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return b.id - a.id;

		}

	};

};
/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.DepthPassPlugin = function ( ) {

	this.enabled = false;
	this.renderTarget = null;

	var _gl,
	_renderer,
	_depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,

	_frustum = new THREE.Frustum(),
	_projScreenMatrix = new THREE.Matrix4();

	this.init = function ( renderer ) {

		_gl = renderer.context;
		_renderer = renderer;

		var depthShader = THREE.ShaderLib[ "depthRGBA" ];
		var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );

		_depthMaterial = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms } );
		_depthMaterialMorph = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true } );
		_depthMaterialSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, skinning: true } );
		_depthMaterialMorphSkin = new THREE.ShaderMaterial( { fragmentShader: depthShader.fragmentShader, vertexShader: depthShader.vertexShader, uniforms: depthUniforms, morphTargets: true, skinning: true } );

		_depthMaterial._shadowPass = true;
		_depthMaterialMorph._shadowPass = true;
		_depthMaterialSkin._shadowPass = true;
		_depthMaterialMorphSkin._shadowPass = true;

	};

	this.render = function ( scene, camera ) {

		if ( ! this.enabled ) return;

		this.update( scene, camera );

	};

	this.update = function ( scene, camera ) {

		var i, il, j, jl, n,

		program, buffer, material,
		webglObject, object, light,
		renderList,

		fog = null;

		// set GL state for depth map

		_gl.clearColor( 1, 1, 1, 1 );
		_gl.disable( _gl.BLEND );

		_renderer.setDepthTest( true );

		// update scene

		if ( _renderer.autoUpdateScene ) scene.updateMatrixWorld();

		// update camera matrices and frustum

		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		_projScreenMatrix.multiply( camera.projectionMatrix, camera.matrixWorldInverse );
		_frustum.setFromMatrix( _projScreenMatrix );

		// render depth map

		_renderer.setRenderTarget( this.renderTarget );
		_renderer.clear();

		// set object matrices & frustum culling

		renderList = scene.__webglObjects;

		for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

			webglObject = renderList[ j ];
			object = webglObject.object;

			webglObject.render = false;

			if ( object.visible ) {

				if ( ! ( object instanceof THREE.Mesh || object instanceof THREE.ParticleSystem ) || ! ( object.frustumCulled ) || _frustum.contains( object ) ) {

					object._modelViewMatrix.multiply( camera.matrixWorldInverse, object.matrixWorld );

					webglObject.render = true;

				}

			}

		}

		// render regular objects

		var objectMaterial, useMorphing, useSkinning;

		for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

			webglObject = renderList[ j ];

			if ( webglObject.render ) {

				object = webglObject.object;
				buffer = webglObject.buffer;

				// todo: create proper depth material for particles

				if ( object instanceof THREE.ParticleSystem && !object.customDepthMaterial ) continue;

				objectMaterial = getObjectMaterial( object );

				if ( objectMaterial ) _renderer.setMaterialFaces( object.material );

				useMorphing = object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;
				useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;

				if ( object.customDepthMaterial ) {

					material = object.customDepthMaterial;

				} else if ( useSkinning ) {

					material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;

				} else if ( useMorphing ) {

					material = _depthMaterialMorph;

				} else {

					material = _depthMaterial;

				}

				if ( buffer instanceof THREE.BufferGeometry ) {

					_renderer.renderBufferDirect( camera, scene.__lights, fog, material, buffer, object );

				} else {

					_renderer.renderBuffer( camera, scene.__lights, fog, material, buffer, object );

				}

			}

		}

		// set matrices and render immediate objects

		renderList = scene.__webglObjectsImmediate;

		for ( j = 0, jl = renderList.length; j < jl; j ++ ) {

			webglObject = renderList[ j ];
			object = webglObject.object;

			if ( object.visible ) {

				object._modelViewMatrix.multiply( camera.matrixWorldInverse, object.matrixWorld );

				_renderer.renderImmediateObject( camera, scene.__lights, fog, _depthMaterial, object );

			}

		}

		// restore GL state

		var clearColor = _renderer.getClearColor(),
		clearAlpha = _renderer.getClearAlpha();

		_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );
		_gl.enable( _gl.BLEND );

	};

	// For the moment just ignore objects that have multiple materials with different animation methods
	// Only the first material will be taken into account for deciding which depth material to use

	function getObjectMaterial( object ) {

		return object.material instanceof THREE.MeshFaceMaterial
			? object.material.materials[ 0 ]
			: object.material;

	};

};

/**
 * @author mikael emtinger / http://gomo.se/
 *
 */

THREE.ShaderFlares = {

	'lensFlareVertexTexture': {

		vertexShader: [

			"uniform vec3 screenPosition;",
			"uniform vec2 scale;",
			"uniform float rotation;",
			"uniform int renderType;",

			"uniform sampler2D occlusionMap;",

			"attribute vec2 position;",
			"attribute vec2 uv;",

			"varying vec2 vUV;",
			"varying float vVisibility;",

			"void main() {",

				"vUV = uv;",

				"vec2 pos = position;",

				"if( renderType == 2 ) {",

					"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +",
									  "texture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +",
									  "texture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +",
									  "texture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +",
									  "texture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +",
									  "texture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +",
									  "texture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +",
									  "texture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +",
									  "texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

					"vVisibility = (       visibility.r / 9.0 ) *",
								  "( 1.0 - visibility.g / 9.0 ) *",
								  "(       visibility.b / 9.0 ) *",
								  "( 1.0 - visibility.a / 9.0 );",

					"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
					"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

				"}",

				"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

			"}"

		].join( "\n" ),

		fragmentShader: [

			"precision mediump float;",

			"uniform sampler2D map;",
			"uniform float opacity;",
			"uniform int renderType;",
			"uniform vec3 color;",

			"varying vec2 vUV;",
			"varying float vVisibility;",

			"void main() {",

				// pink square

				"if( renderType == 0 ) {",

					"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

				// restore

				"} else if( renderType == 1 ) {",

					"gl_FragColor = texture2D( map, vUV );",

				// flare

				"} else {",

					"vec4 texture = texture2D( map, vUV );",
					"texture.a *= opacity * vVisibility;",
					"gl_FragColor = texture;",
					"gl_FragColor.rgb *= color;",

				"}",

			"}"
		].join( "\n" )

	},


	'lensFlare': {

		vertexShader: [

			"uniform vec3 screenPosition;",
			"uniform vec2 scale;",
			"uniform float rotation;",
			"uniform int renderType;",

			"attribute vec2 position;",
			"attribute vec2 uv;",

			"varying vec2 vUV;",

			"void main() {",

				"vUV = uv;",

				"vec2 pos = position;",

				"if( renderType == 2 ) {",

					"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
					"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

				"}",

				"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

			"}"

		].join( "\n" ),

		fragmentShader: [

			"precision mediump float;",

			"uniform sampler2D map;",
			"uniform sampler2D occlusionMap;",
			"uniform float opacity;",
			"uniform int renderType;",
			"uniform vec3 color;",

			"varying vec2 vUV;",

			"void main() {",

				// pink square

				"if( renderType == 0 ) {",

					"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );",

				// restore

				"} else if( renderType == 1 ) {",

					"gl_FragColor = texture2D( map, vUV );",

				// flare

				"} else {",

					"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +",
									   "texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +",
									   "texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +",
									   "texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;",

					"visibility = ( 1.0 - visibility / 4.0 );",

					"vec4 texture = texture2D( map, vUV );",
					"texture.a *= opacity * visibility;",
					"gl_FragColor = texture;",
					"gl_FragColor.rgb *= color;",

				"}",

			"}"

		].join( "\n" )

	}

};
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 *
 */

THREE.ShaderSprite = {

	'sprite': {

		vertexShader: [

			"uniform int useScreenCoordinates;",
			"uniform int sizeAttenuation;",
			"uniform vec3 screenPosition;",
			"uniform mat4 modelViewMatrix;",
			"uniform mat4 projectionMatrix;",
			"uniform float rotation;",
			"uniform vec2 scale;",
			"uniform vec2 alignment;",
			"uniform vec2 uvOffset;",
			"uniform vec2 uvScale;",

			"attribute vec2 position;",
			"attribute vec2 uv;",

			"varying vec2 vUV;",

			"void main() {",

				"vUV = uvOffset + uv * uvScale;",

				"vec2 alignedPosition = position + alignment;",

				"vec2 rotatedPosition;",
				"rotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;",
				"rotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;",

				"vec4 finalPosition;",

				"if( useScreenCoordinates != 0 ) {",

					"finalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );",

				"} else {",

					"finalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );",
					"finalPosition.xy += rotatedPosition * ( sizeAttenuation == 1 ? 1.0 : finalPosition.z );",

				"}",

				"gl_Position = finalPosition;",

			"}"

		].join( "\n" ),

		fragmentShader: [

			"precision mediump float;",

			"uniform vec3 color;",
			"uniform sampler2D map;",
			"uniform float opacity;",

			"uniform int fogType;",
			"uniform vec3 fogColor;",
			"uniform float fogDensity;",
			"uniform float fogNear;",
			"uniform float fogFar;",
			"uniform float alphaTest;",

			"varying vec2 vUV;",

			"void main() {",

				"vec4 texture = texture2D( map, vUV );",

				"if ( texture.a < alphaTest ) discard;",

				"gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );",

				"if ( fogType > 0 ) {",

					"float depth = gl_FragCoord.z / gl_FragCoord.w;",
					"float fogFactor = 0.0;",

					"if ( fogType == 1 ) {",

						"fogFactor = smoothstep( fogNear, fogFar, depth );",

					"} else {",

						"const float LOG2 = 1.442695;",
						"float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );",
						"fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );",

					"}",

					"gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );",

				"}",

			"}"

		].join( "\n" )

	}

};

// Export the THREE object for **Node.js**, with
// backwards-compatibility for the old `require()` API. If we're in
// the browser, add `_` as a global object via a string identifier,
// for Closure Compiler "advanced" mode.
if (typeof exports !== 'undefined') {
  if (typeof module !== 'undefined' && module.exports) {
    exports = module.exports = THREE;
  }
  exports.THREE = THREE;
} else {
  this['THREE'] = THREE;
}

},{}],66:[function(require,module,exports){
var voxel = require('voxel');
var ChunkMatrix = require('./lib/chunk_matrix');
var indexer = require('./lib/indexer');

module.exports = Group;

function Group (game) {
    if (!(this instanceof Group)) return new Group(game);
    this.meshes = [];
    this.chunkMatricies = [];
    this.game = game;
    this.indexer = indexer(game);
}

Group.prototype.create = function (generate) {
    var self = this;
    var cm = new ChunkMatrix(self.game, generate);
    cm.on('add', function (mesh) {
        self.chunkMatricies[mesh.id] = cm;
        self.meshes.push(mesh);
    });
    cm.on('remove', function (id) {
        delete self.chunkMatricies[id];
    });
    self.chunkMatricies.push(cm);
    return cm;
};
 
Group.prototype.createBlock = function (pos, val) {
    var self = this;
    var T = self.game.THREE;
    var size = self.game.cubeSize;
    
    var cm = pos.chunkMatrix;
    var d = pos.direction;
    
    var mr = new T.Matrix4().getInverse(cm.rotationObject.matrix);
    var mt = new T.Matrix4().getInverse(cm.translationObject.matrix);
    var m = new T.Matrix4().multiply(mr, mt);
    
    
    return (function draw (offset) {
        var pt = new T.Vector3();
        pt.copy(pos);
        
        pt.x -= d.x * offset;
        pt.y -= d.y * offset;
        pt.z -= d.z * offset;
        offset += size / 8;
        
        var tr = m.multiplyVector3(pt);
        var ci = self.indexer.chunk(tr);
        var vi = self.indexer.voxel(tr);
        
        var value = cm.getByIndex(ci, vi);
        if (!value) {
            cm.setByIndex(ci, vi, 3);
            return true;
        }
        else draw(offset + 0.1)
    })(0)
};

Group.prototype.setBlock = function (pos, val) {
    var ix = this.getIndex(pos);
    var cm = pos.chunkMatrix;
    return cm.setByIndex(ix.chunk, ix.voxel, val);
};

Group.prototype.getBlock = function (pos) {
    var ix = this.getIndex(pos);
    var cm = pos.chunkMatrix;
    return cm.getByIndex(ix.chunk, ix.voxel);
};

Group.prototype.getIndex = function (pos) {
    var T = this.game.THREE;
    var cm = pos.chunkMatrix;
    
    var mr = new T.Matrix4().getInverse(cm.rotationObject.matrix);
    var mt = new T.Matrix4().getInverse(cm.translationObject.matrix);
    var m = new T.Matrix4().multiply(mt, mr);
    
    var tr = m.multiplyVector3(pos);
    var ci = this.indexer.chunk(tr);
    var vi = this.indexer.voxel(tr);
    
    return { chunk: ci, voxel: vi };
};

},{"./lib/chunk_matrix":67,"./lib/indexer":68,"voxel":70}],67:[function(require,module,exports){
var voxelMesh = require('voxel-mesh');
var voxel = require('voxel');

var EventEmitter = require('events').EventEmitter;
var inherits = require('inherits');

var indexer = require('./indexer');

module.exports = ChunkMatrix;
inherits(ChunkMatrix, EventEmitter);

function ChunkMatrix (game, generator) {
    var T = game.THREE;
    var size = game.cubeSize;
    
    var r = this.rotationObject = new T.Object3D;
    var t = this.translationObject = new T.Object3D;
    var inner = new T.Object3D;
    
    inner.add(r);
    t.add(inner);
    game.scene.add(t);
    
    inner.position.x = size / 2;
    inner.position.z = size / 2;
    
    this.generator = generator || function (x,y,z) { return 0 };
    this.rotation = r.rotation;
    this.position = t.position;
    this.chunks = {};
    this.meshes = {};
    this.game = game;
    this.indexer = indexer(game);
    
    this._update('0|0|0');
}

ChunkMatrix.prototype.generateChunk = function (ckey) {
    if (Array.isArray(ckey)) ckey = ckey.join('|');
    var xyz = ckey.split('|');
    
    var d = this.game.chunkSize;
    var low = [ xyz[0]*d, xyz[1]*d, xyz[2]*d ];
    var high = [ low[0]+d, low[1]+d, low[2]+d ];
    
    var chunk = voxel.generate(low, high, this.generator);
    this.chunks[ckey] = chunk;
    return chunk;
};

ChunkMatrix.prototype.setBlock = function (pos, value) {
    var ci = this.indexer.chunk(pos);
    var vi = this.indexer.voxel(pos);
    return this.setByIndex(ci, vi, value);
};

ChunkMatrix.prototype.getBlock = function (pos) {
    var ci = this.indexer.chunk(pos);
    var vi = this.indexer.voxel(pos);
    return this.getByIndex(ci, vi);
};

ChunkMatrix.prototype.setByIndex = function (ci, vi, value) {
    var ckey = typeof ci === 'object' ? ci.join('|') : ci
    if (!this.chunks[ckey]) this.generateChunk(ckey);
    this.chunks[ckey].voxels[vi] = value;
    this._update(ckey);
};

ChunkMatrix.prototype.getByIndex = function (ci, vi) {
    var ckey = typeof ci === 'object' ? ci.join('|') : ci;
    if (!this.chunks[ckey]) return undefined;
    return this.chunks[ckey].voxels[vi];
};
    
ChunkMatrix.prototype._update = function (ci) {
    var game = this.game;
    var T = game.THREE;
    var size = game.cubeSize;
    var csize = size * game.chunkSize;
    var scale = new T.Vector3(size, size, size);
    
    var ckey = typeof ci === 'object' ? ci.join('|') : ci;
    var chunk = this.chunks[ckey];
    if (!chunk) return;
    
    var mesh = voxelMesh(chunk, voxel.meshers.greedy, scale);
    
    if (this.meshes[ckey]) {
        var s = this.meshes[ckey].surfaceMesh || this.meshes[ckey].wireMesh;
        delete this.meshes[s.id];
        this.emit('remove', s);
        this.rotationObject.remove(s);
    }
    this.meshes[ckey] = mesh;
    
    if (game.meshType === 'wireMesh') {
        mesh.createWireMesh();
    }
    else {
        mesh.createSurfaceMesh(game.material);
    }
    
    var surface = mesh.surfaceMesh || mesh.wireMesh;
    surface.position.x = -size / 2;
    surface.position.z = -size / 2;
    
    var xyz = ckey.split('|');
    surface.position.x += xyz[0] * csize;
    surface.position.y += xyz[1] * csize;
    surface.position.z += xyz[2] * csize;
    
    this.rotationObject.add(surface);
    
    game.applyTextures(mesh.geometry);
    
    this.emit('add', surface, this);
    this.emit('update', chunk, ckey);
};

},{"./indexer":68,"events":14,"inherits":46,"voxel":70,"voxel-mesh":76}],68:[function(require,module,exports){
module.exports = Indexer;

function Indexer (opts) {
    if (!(this instanceof Indexer)) return new Indexer(opts);
    this.chunkSize = opts.chunkSize;
    this.cubeSize = opts.cubeSize;
}

Indexer.prototype.chunk = function (pos) {
    var chunkSize = this.chunkSize;
    var cubeSize = this.cubeSize;
    var cx = pos.x / cubeSize / chunkSize;
    var cy = pos.y / cubeSize / chunkSize;
    var cz = pos.z / cubeSize / chunkSize;
    var ckey = [ Math.floor(cx), Math.floor(cy), Math.floor(cz) ];
    return ckey.join('|');
};

Indexer.prototype.voxel = function (pos) {
    var size = this.chunkSize;
    var cubeSize = this.cubeSize;
    var vx = (size + Math.floor(pos.x / cubeSize) % size) % size;
    var vy = (size + Math.floor(pos.y / cubeSize) % size) % size;
    var vz = (size + Math.floor(pos.z / cubeSize) % size) % size;
    var x = Math.abs(vx);
    var y = Math.abs(vy);
    var z = Math.abs(vz);
    return x + y*size + z*size*size;
};

},{}],69:[function(require,module,exports){
var events = require('events')
var inherits = require('inherits')

module.exports = function(opts) {
  return new Chunker(opts)
}

module.exports.Chunker = Chunker

function Chunker(opts) {
  this.distance = opts.chunkDistance || 2
  this.chunkSize = opts.chunkSize || 32
  this.cubeSize = opts.cubeSize || 25
  this.generateVoxelChunk = opts.generateVoxelChunk
  this.chunks = {}
  this.meshes = {}
}

inherits(Chunker, events.EventEmitter)

Chunker.prototype.nearbyChunks = function(position, distance) {
  var current = this.chunkAtPosition(position)
  var x = current[0]
  var y = current[1]
  var z = current[2]
  var dist = distance || this.distance
  var nearby = []
  for (var cx = (x - dist); cx !== (x + dist); ++cx) {
    for (var cy = (y - dist); cy !== (y + dist); ++cy) {
      for (var cz = (z - dist); cz !== (z + dist); ++cz) {
        nearby.push([cx, cy, cz])
      }
    }
  }
  return nearby
}

Chunker.prototype.requestMissingChunks = function(position) {
  var self = this
  this.nearbyChunks(position).map(function(chunk) {
    if (!self.chunks[chunk.join('|')]) {
      self.emit('missingChunk', chunk)
    }
  })
}

Chunker.prototype.getBounds = function(x, y, z) {
  var size = this.chunkSize
  var low = [x * size, y * size, z * size]
  var high = [low[0] + size, low[1] + size, low[2] + size]
  return [low, high]
}

Chunker.prototype.generateChunk = function(x, y, z) {
  var self = this
  var bounds = this.getBounds(x, y, z)
  var chunk = this.generateVoxelChunk(bounds[0], bounds[1], x, y, z)
  var position = [x, y, z]
  chunk.position = position
  this.chunks[position.join('|')] = chunk
  return chunk
}

Chunker.prototype.chunkAtPosition = function(position) {
  var chunkSize = this.chunkSize
  var cubeSize = this.cubeSize
  var cx = position.x / cubeSize / chunkSize
  var cy = position.y / cubeSize / chunkSize
  var cz = position.z / cubeSize / chunkSize
  var chunkPos = [Math.floor(cx), Math.floor(cy), Math.floor(cz)]
  return chunkPos
};

Chunker.prototype.voxelIndex = function(voxelVector) {
  var size = this.chunkSize
  var vidx = voxelVector.x + voxelVector.y*size + voxelVector.z*size*size
  return vidx
}

Chunker.prototype.voxelIndexFromPosition = function(pos) {
  var v = this.voxelVector(pos)
  return this.voxelIndex(v)
}

Chunker.prototype.voxelAtPosition = function(pos, val) {
  var ckey = this.chunkAtPosition(pos).join('|')
  var chunk = this.chunks[ckey]
  if (!chunk) return false
  var vector = this.voxelVector(pos)
  var vidx = this.voxelIndex(vector)
  if (!vidx && vidx !== 0) return false
  if (typeof val !== 'undefined') {
    chunk.voxels[vidx] = val
  }
  var v = chunk.voxels[vidx]
  return v
}

Chunker.prototype.voxelVector = function(pos) {
  var size = this.chunkSize
  var cubeSize = this.cubeSize
  var vx = (size + Math.floor(pos.x / cubeSize) % size) % size
  var vy = (size + Math.floor(pos.y / cubeSize) % size) % size
  var vz = (size + Math.floor(pos.z / cubeSize) % size) % size
  return {x: Math.abs(vx), y: Math.abs(vy), z: Math.abs(vz)}
};

},{"events":14,"inherits":46}],70:[function(require,module,exports){
var chunker = require('./chunker')

module.exports = function(opts) {
  if (!opts.generateVoxelChunk) opts.generateVoxelChunk = function(low, high) {
    return generate(low, high, module.exports.generator['Valley'])
  }
  return chunker(opts)
}

module.exports.meshers = {
  culled: require('./meshers/culled').mesher,
  greedy: require('./meshers/greedy').mesher,
  monotone: require('./meshers/monotone').mesher,
  stupid: require('./meshers/stupid').mesher
}

module.exports.Chunker = chunker.Chunker
module.exports.geometry = {}
module.exports.generator = {}
module.exports.generate = generate

// from https://github.com/mikolalysenko/mikolalysenko.github.com/blob/master/MinecraftMeshes2/js/testdata.js#L4
function generate(l, h, f) {
  var d = [ h[0]-l[0], h[1]-l[1], h[2]-l[2] ]
  var v = new Int8Array(d[0]*d[1]*d[2])
  var n = 0
  for(var k=l[2]; k<h[2]; ++k)
  for(var j=l[1]; j<h[1]; ++j)
  for(var i=l[0]; i<h[0]; ++i, ++n) {
    v[n] = f(i,j,k,n)
  }
  return {voxels:v, dims:d}
}

// shape and terrain generator functions
module.exports.generator['Sphere'] = function(i,j,k) {
  return i*i+j*j+k*k <= 16*16 ? 1 : 0
}

module.exports.generator['Noise'] = function(i,j,k) {
  return Math.random() < 0.1 ? Math.random() * 0xffffff : 0;
}

module.exports.generator['Dense Noise'] = function(i,j,k) {
  return Math.round(Math.random() * 0xffffff);
}

module.exports.generator['Checker'] = function(i,j,k) {
  return !!((i+j+k)&1) ? (((i^j^k)&2) ? 1 : 0xffffff) : 0;
}

module.exports.generator['Hill'] = function(i,j,k) {
  return j <= 16 * Math.exp(-(i*i + k*k) / 64) ? 1 : 0;
}

module.exports.generator['Valley'] = function(i,j,k) {
  return j <= (i*i + k*k) * 31 / (32*32*2) + 1 ? 1 : 0;
}

module.exports.generator['Hilly Terrain'] = function(i,j,k) {
  var h0 = 3.0 * Math.sin(Math.PI * i / 12.0 - Math.PI * k * 0.1) + 27;    
  if(j > h0+1) {
    return 0;
  }
  if(h0 <= j) {
    return 1;
  }
  var h1 = 2.0 * Math.sin(Math.PI * i * 0.25 - Math.PI * k * 0.3) + 20;
  if(h1 <= j) {
    return 2;
  }
  if(2 < j) {
    return Math.random() < 0.1 ? 0x222222 : 0xaaaaaa;
  }
  return 3;
}

module.exports.scale = function ( x, fromLow, fromHigh, toLow, toHigh ) {
  return ( x - fromLow ) * ( toHigh - toLow ) / ( fromHigh - fromLow ) + toLow
}

// convenience function that uses the above functions to prebake some simple voxel geometries
module.exports.generateExamples = function() {
  return {
    'Sphere': generate([-16,-16,-16], [16,16,16], module.exports.generator['Sphere']),
    'Noise': generate([0,0,0], [16,16,16], module.exports.generator['Noise']),
    'Dense Noise': generate([0,0,0], [16,16,16], module.exports.generator['Dense Noise']),
    'Checker': generate([0,0,0], [8,8,8], module.exports.generator['Checker']),
    'Hill': generate([-16, 0, -16], [16,16,16], module.exports.generator['Hill']),
    'Valley': generate([0,0,0], [32,32,32], module.exports.generator['Valley']),
    'Hilly Terrain': generate([0, 0, 0], [32,32,32], module.exports.generator['Hilly Terrain'])
  }
}


},{"./chunker":69,"./meshers/culled":71,"./meshers/greedy":72,"./meshers/monotone":73,"./meshers/stupid":74}],71:[function(require,module,exports){
//Naive meshing (with face culling)
function CulledMesh(volume, dims) {
  //Precalculate direction vectors for convenience
  var dir = new Array(3);
  for(var i=0; i<3; ++i) {
    dir[i] = [[0,0,0], [0,0,0]];
    dir[i][0][(i+1)%3] = 1;
    dir[i][1][(i+2)%3] = 1;
  }
  //March over the volume
  var vertices = []
    , faces = []
    , x = [0,0,0]
    , B = [[false,true]    //Incrementally update bounds (this is a bit ugly)
          ,[false,true]
          ,[false,true]]
    , n = -dims[0]*dims[1];
  for(           B[2]=[false,true],x[2]=-1; x[2]<dims[2]; B[2]=[true,(++x[2]<dims[2]-1)])
  for(n-=dims[0],B[1]=[false,true],x[1]=-1; x[1]<dims[1]; B[1]=[true,(++x[1]<dims[1]-1)])
  for(n-=1,      B[0]=[false,true],x[0]=-1; x[0]<dims[0]; B[0]=[true,(++x[0]<dims[0]-1)], ++n) {
    //Read current voxel and 3 neighboring voxels using bounds check results
    var p =   (B[0][0] && B[1][0] && B[2][0]) ? volume[n]                 : 0
      , b = [ (B[0][1] && B[1][0] && B[2][0]) ? volume[n+1]               : 0
            , (B[0][0] && B[1][1] && B[2][0]) ? volume[n+dims[0]]         : 0
            , (B[0][0] && B[1][0] && B[2][1]) ? volume[n+dims[0]*dims[1]] : 0
          ];
    //Generate faces
    for(var d=0; d<3; ++d)
    if((!!p) !== (!!b[d])) {
      var s = !p ? 1 : 0;
      var t = [x[0],x[1],x[2]]
        , u = dir[d][s]
        , v = dir[d][s^1];
      ++t[d];
      
      var vertex_count = vertices.length;
      vertices.push([t[0],           t[1],           t[2]          ]);
      vertices.push([t[0]+u[0],      t[1]+u[1],      t[2]+u[2]     ]);
      vertices.push([t[0]+u[0]+v[0], t[1]+u[1]+v[1], t[2]+u[2]+v[2]]);
      vertices.push([t[0]     +v[0], t[1]     +v[1], t[2]     +v[2]]);
      faces.push([vertex_count, vertex_count+1, vertex_count+2, vertex_count+3, s ? b[d] : p]);
    }
  }
  return { vertices:vertices, faces:faces };
}


if(exports) {
  exports.mesher = CulledMesh;
}

},{}],72:[function(require,module,exports){
var GreedyMesh = (function() {
//Cache buffer internally
var mask = new Int32Array(4096);

return function(volume, dims) {
  var vertices = [], faces = []
    , dimsX = dims[0]
    , dimsY = dims[1]
    , dimsXY = dimsX * dimsY;

  //Sweep over 3-axes
  for(var d=0; d<3; ++d) {
    var i, j, k, l, w, W, h, n, c
      , u = (d+1)%3
      , v = (d+2)%3
      , x = [0,0,0]
      , q = [0,0,0]
      , du = [0,0,0]
      , dv = [0,0,0]
      , dimsD = dims[d]
      , dimsU = dims[u]
      , dimsV = dims[v]
      , qdimsX, qdimsXY
      , xd

    if (mask.length < dimsU * dimsV) {
      mask = new Int32Array(dimsU * dimsV);
    }

    q[d] =  1;
    x[d] = -1;

    qdimsX  = dimsX  * q[1]
    qdimsXY = dimsXY * q[2]

    // Compute mask
    while (x[d] < dimsD) {
      xd = x[d]
      n = 0;

      for(x[v] = 0; x[v] < dimsV; ++x[v]) {
        for(x[u] = 0; x[u] < dimsU; ++x[u], ++n) {
          var a = xd >= 0      && volume[x[0]      + dimsX * x[1]          + dimsXY * x[2]          ]
            , b = xd < dimsD-1 && volume[x[0]+q[0] + dimsX * x[1] + qdimsX + dimsXY * x[2] + qdimsXY]
          if (a ? b : !b) {
            mask[n] = 0; continue;
          }
          mask[n] = a ? a : -b;
        }
      }

      ++x[d];

      // Generate mesh for mask using lexicographic ordering
      n = 0;
      for (j=0; j < dimsV; ++j) {
        for (i=0; i < dimsU; ) {
          c = mask[n];
          if (!c) {
            i++;  n++; continue;
          }

          //Compute width
          w = 1;
          while (c === mask[n+w] && i+w < dimsU) w++;

          //Compute height (this is slightly awkward)
          for (h=1; j+h < dimsV; ++h) {
            k = 0;
            while (k < w && c === mask[n+k+h*dimsU]) k++
            if (k < w) break;
          }

          // Add quad
          // The du/dv arrays are reused/reset
          // for each iteration.
          du[d] = 0; dv[d] = 0;
          x[u]  = i;  x[v] = j;

          if (c > 0) {
            dv[v] = h; dv[u] = 0;
            du[u] = w; du[v] = 0;
          } else {
            c = -c;
            du[v] = h; du[u] = 0;
            dv[u] = w; dv[v] = 0;
          }
          var vertex_count = vertices.length;
          vertices.push([x[0],             x[1],             x[2]            ]);
          vertices.push([x[0]+du[0],       x[1]+du[1],       x[2]+du[2]      ]);
          vertices.push([x[0]+du[0]+dv[0], x[1]+du[1]+dv[1], x[2]+du[2]+dv[2]]);
          vertices.push([x[0]      +dv[0], x[1]      +dv[1], x[2]      +dv[2]]);
          faces.push([vertex_count, vertex_count+1, vertex_count+2, vertex_count+3, c]);

          //Zero-out mask
          W = n + w;
          for(l=0; l<h; ++l) {
            for(k=n; k<W; ++k) {
              mask[k+l*dimsU] = 0;
            }
          }

          //Increment counters and continue
          i += w; n += w;
        }
      }
    }
  }
  return { vertices:vertices, faces:faces };
}
})();

if(exports) {
  exports.mesher = GreedyMesh;
}

},{}],73:[function(require,module,exports){
"use strict";

var MonotoneMesh = (function(){

function MonotonePolygon(c, v, ul, ur) {
  this.color  = c;
  this.left   = [[ul, v]];
  this.right  = [[ur, v]];
};

MonotonePolygon.prototype.close_off = function(v) {
  this.left.push([ this.left[this.left.length-1][0], v ]);
  this.right.push([ this.right[this.right.length-1][0], v ]);
};

MonotonePolygon.prototype.merge_run = function(v, u_l, u_r) {
  var l = this.left[this.left.length-1][0]
    , r = this.right[this.right.length-1][0]; 
  if(l !== u_l) {
    this.left.push([ l, v ]);
    this.left.push([ u_l, v ]);
  }
  if(r !== u_r) {
    this.right.push([ r, v ]);
    this.right.push([ u_r, v ]);
  }
};


return function(volume, dims) {
  function f(i,j,k) {
    return volume[i + dims[0] * (j + dims[1] * k)];
  }
  //Sweep over 3-axes
  var vertices = [], faces = [];
  for(var d=0; d<3; ++d) {
    var i, j, k
      , u = (d+1)%3   //u and v are orthogonal directions to d
      , v = (d+2)%3
      , x = new Int32Array(3)
      , q = new Int32Array(3)
      , runs = new Int32Array(2 * (dims[u]+1))
      , frontier = new Int32Array(dims[u])  //Frontier is list of pointers to polygons
      , next_frontier = new Int32Array(dims[u])
      , left_index = new Int32Array(2 * dims[v])
      , right_index = new Int32Array(2 * dims[v])
      , stack = new Int32Array(24 * dims[v])
      , delta = [[0,0], [0,0]];
    //q points along d-direction
    q[d] = 1;
    //Initialize sentinel
    for(x[d]=-1; x[d]<dims[d]; ) {
      // --- Perform monotone polygon subdivision ---
      var n = 0
        , polygons = []
        , nf = 0;
      for(x[v]=0; x[v]<dims[v]; ++x[v]) {
        //Make one pass over the u-scan line of the volume to run-length encode polygon
        var nr = 0, p = 0, c = 0;
        for(x[u]=0; x[u]<dims[u]; ++x[u], p = c) {
          //Compute the type for this face
          var a = (0    <= x[d]      ? f(x[0],      x[1],      x[2])      : 0)
            , b = (x[d] <  dims[d]-1 ? f(x[0]+q[0], x[1]+q[1], x[2]+q[2]) : 0);
          c = a;
          if((!a) === (!b)) {
            c = 0;
          } else if(!a) {
            c = -b;
          }
          //If cell type doesn't match, start a new run
          if(p !== c) {
            runs[nr++] = x[u];
            runs[nr++] = c;
          }
        }
        //Add sentinel run
        runs[nr++] = dims[u];
        runs[nr++] = 0;
        //Update frontier by merging runs
        var fp = 0;
        for(var i=0, j=0; i<nf && j<nr-2; ) {
          var p    = polygons[frontier[i]]
            , p_l  = p.left[p.left.length-1][0]
            , p_r  = p.right[p.right.length-1][0]
            , p_c  = p.color
            , r_l  = runs[j]    //Start of run
            , r_r  = runs[j+2]  //End of run
            , r_c  = runs[j+1]; //Color of run
          //Check if we can merge run with polygon
          if(r_r > p_l && p_r > r_l && r_c === p_c) {
            //Merge run
            p.merge_run(x[v], r_l, r_r);
            //Insert polygon into frontier
            next_frontier[fp++] = frontier[i];
            ++i;
            j += 2;
          } else {
            //Check if we need to advance the run pointer
            if(r_r <= p_r) {
              if(!!r_c) {
                var n_poly = new MonotonePolygon(r_c, x[v], r_l, r_r);
                next_frontier[fp++] = polygons.length;
                polygons.push(n_poly);
              }
              j += 2;
            }
            //Check if we need to advance the frontier pointer
            if(p_r <= r_r) {
              p.close_off(x[v]);
              ++i;
            }
          }
        }
        //Close off any residual polygons
        for(; i<nf; ++i) {
          polygons[frontier[i]].close_off(x[v]);
        }
        //Add any extra runs to frontier
        for(; j<nr-2; j+=2) {
          var r_l  = runs[j]
            , r_r  = runs[j+2]
            , r_c  = runs[j+1];
          if(!!r_c) {
            var n_poly = new MonotonePolygon(r_c, x[v], r_l, r_r);
            next_frontier[fp++] = polygons.length;
            polygons.push(n_poly);
          }
        }
        //Swap frontiers
        var tmp = next_frontier;
        next_frontier = frontier;
        frontier = tmp;
        nf = fp;
      }
      //Close off frontier
      for(var i=0; i<nf; ++i) {
        var p = polygons[frontier[i]];
        p.close_off(dims[v]);
      }
      // --- Monotone subdivision of polygon is complete at this point ---
      
      x[d]++;
      
      //Now we just need to triangulate each monotone polygon
      for(var i=0; i<polygons.length; ++i) {
        var p = polygons[i]
          , c = p.color
          , flipped = false;
        if(c < 0) {
          flipped = true;
          c = -c;
        }
        for(var j=0; j<p.left.length; ++j) {
          left_index[j] = vertices.length;
          var y = [0.0,0.0,0.0]
            , z = p.left[j];
          y[d] = x[d];
          y[u] = z[0];
          y[v] = z[1];
          vertices.push(y);
        }
        for(var j=0; j<p.right.length; ++j) {
          right_index[j] = vertices.length;
          var y = [0.0,0.0,0.0]
            , z = p.right[j];
          y[d] = x[d];
          y[u] = z[0];
          y[v] = z[1];
          vertices.push(y);
        }
        //Triangulate the monotone polygon
        var bottom = 0
          , top = 0
          , l_i = 1
          , r_i = 1
          , side = true;  //true = right, false = left
        
        stack[top++] = left_index[0];
        stack[top++] = p.left[0][0];
        stack[top++] = p.left[0][1];
        
        stack[top++] = right_index[0];
        stack[top++] = p.right[0][0];
        stack[top++] = p.right[0][1];
        
        while(l_i < p.left.length || r_i < p.right.length) {
          //Compute next side
          var n_side = false;
          if(l_i === p.left.length) {
            n_side = true;
          } else if(r_i !== p.right.length) {
            var l = p.left[l_i]
              , r = p.right[r_i];
            n_side = l[1] > r[1];
          }
          var idx = n_side ? right_index[r_i] : left_index[l_i]
            , vert = n_side ? p.right[r_i] : p.left[l_i];
          if(n_side !== side) {
            //Opposite side
            while(bottom+3 < top) {
              if(flipped === n_side) {
                faces.push([ stack[bottom], stack[bottom+3], idx, c]);
              } else {
                faces.push([ stack[bottom+3], stack[bottom], idx, c]);              
              }
              bottom += 3;
            }
          } else {
            //Same side
            while(bottom+3 < top) {
              //Compute convexity
              for(var j=0; j<2; ++j)
              for(var k=0; k<2; ++k) {
                delta[j][k] = stack[top-3*(j+1)+k+1] - vert[k];
              }
              var det = delta[0][0] * delta[1][1] - delta[1][0] * delta[0][1];
              if(n_side === (det > 0)) {
                break;
              }
              if(det !== 0) {
                if(flipped === n_side) {
                  faces.push([ stack[top-3], stack[top-6], idx, c ]);
                } else {
                  faces.push([ stack[top-6], stack[top-3], idx, c ]);
                }
              }
              top -= 3;
            }
          }
          //Push vertex
          stack[top++] = idx;
          stack[top++] = vert[0];
          stack[top++] = vert[1];
          //Update loop index
          if(n_side) {
            ++r_i;
          } else {
            ++l_i;
          }
          side = n_side;
        }
      }
    }
  }
  return { vertices:vertices, faces:faces };
}
})();

if(exports) {
  exports.mesher = MonotoneMesh;
}

},{}],74:[function(require,module,exports){
//The stupidest possible way to generate a Minecraft mesh (I think)
function StupidMesh(volume, dims) {
  var vertices = [], faces = [], x = [0,0,0], n = 0;
  for(x[2]=0; x[2]<dims[2]; ++x[2])
  for(x[1]=0; x[1]<dims[1]; ++x[1])
  for(x[0]=0; x[0]<dims[0]; ++x[0], ++n)
  if(!!volume[n]) {
    for(var d=0; d<3; ++d) {
      var t = [x[0], x[1], x[2]]
        , u = [0,0,0]
        , v = [0,0,0];
      u[(d+1)%3] = 1;
      v[(d+2)%3] = 1;
      for(var s=0; s<2; ++s) {
        t[d] = x[d] + s;
        var tmp = u;
        u = v;
        v = tmp;
        var vertex_count = vertices.length;
        vertices.push([t[0],           t[1],           t[2]          ]);
        vertices.push([t[0]+u[0],      t[1]+u[1],      t[2]+u[2]     ]);
        vertices.push([t[0]+u[0]+v[0], t[1]+u[1]+v[1], t[2]+u[2]+v[2]]);
        vertices.push([t[0]     +v[0], t[1]     +v[1], t[2]     +v[2]]);
        faces.push([vertex_count, vertex_count+1, vertex_count+2, vertex_count+3, volume[n]]);
      }
    }
  }
  return { vertices:vertices, faces:faces };
}


if(exports) {
  exports.mesher = StupidMesh;
}

},{}],75:[function(require,module,exports){
module.exports = control

var Stream = require('stream').Stream

function control(control_state, opts) {
  return new Control(control_state, opts)
}

function Control(state, opts) {
  Stream.call(this)

  opts = opts || {}

  this.state = state
  this._pitch_target = 
  this._yaw_target =
  this._roll_target =
  this._target = null
  this.speed = opts.speed || 0.0032
  this.max_speed = opts.maxSpeed || 0.0112
  this.jump_max_speed = opts.jumpMaxSpeed || 0.016
  this.jump_max_timer = opts.jumpTimer || 200
  this.jump_speed = opts.jumpSpeed || 0.004
  this.jump_timer = this.jump_timer_max
  this.jumping = false
  this.acceleration = opts.accelerationCurve || this.acceleration

  this.fire_rate = opts.fireRate || 0
  this.needs_discrete_fire = opts.discreteFire || false
  this.onfire = opts.onfire || this.onfire
  this.firing = 0

  this.x_rotation_per_ms = opts.rotationXMax || opts.rotationMax || 33
  this.y_rotation_per_ms = opts.rotationYMax || opts.rotationMax || 33
  this.z_rotation_per_ms = opts.rotationZMax || opts.rotationMax || 33

  this.x_rotation_clamp = opts.rotationXClamp || Math.PI / 2
  this.y_rotation_clamp = opts.rotationYClamp || Infinity
  this.z_rotation_clamp = opts.rotationZClamp || 0

  this.rotation_scale = opts.rotationScale || 0.002

  this.air_control = 'airControl' in opts ? opts.airControl : true

  this.state.x_rotation_accum =
  this.state.y_rotation_accum = 
  this.state.z_rotation_accum = 0.0

  this.accel_max_timer = opts.accelTimer || 200
  this.x_accel_timer = this.accel_max_timer+0
  this.z_accel_timer = this.accel_max_timer+0

  this.readable =
  this.writable = true

  this.buffer = []
  this.paused = false
}

var cons = Control
  , proto = cons.prototype = new Stream

proto.constructor = cons

var max = Math.max
  , min = Math.min
  , sin = Math.sin
  , abs = Math.abs
  , floor = Math.floor
  , PI = Math.PI

proto.tick = function(dt) {
  if(!this._target) {
    return
  }
  var state = this.state
    , target = this._target
    , speed = this.speed
    , jump_speed = this.jump_speed
    , okay_z = abs(target.velocity.z) < this.max_speed
    , okay_x = abs(target.velocity.x) < this.max_speed
    , at_rest = target.atRestY()

  if(!this._target) return

  if(state.forward || state.backward) {
    this.z_accel_timer = max(0, this.z_accel_timer - dt)
  }
  if(state.backward) {
    if(target.velocity.z < this.max_speed)
      target.velocity.z = max(min(this.max_speed, speed * dt * this.acceleration(this.z_accel_timer, this.accel_max_timer)), target.velocity.z)
  } else if(state.forward) {
    if(target.velocity.z > -this.max_speed)
      target.velocity.z = min(max(-this.max_speed, -speed * dt * this.acceleration(this.z_accel_timer, this.accel_max_timer)), target.velocity.z)
  } else {
    this.z_accel_timer = this.accel_max_timer

  }
 

  if(state.left || state.right) {
    this.x_accel_timer = max(0, this.x_accel_timer - dt)
  }

  if(state.right) {
    if(target.velocity.x < this.max_speed)
      target.velocity.x = max(min(this.max_speed, speed * dt * this.acceleration(this.x_accel_timer, this.accel_max_timer)), target.velocity.x)
  } else if(state.left) {
    if(target.velocity.x > -this.max_speed)
      target.velocity.x = min(max(-this.max_speed, -speed * dt * this.acceleration(this.x_accel_timer, this.accel_max_timer)), target.velocity.x)
  } else {
    this.x_accel_timer = this.accel_max_timer
  }

  if(state.jump) {
    if(!this.jumping && !at_rest) {
      // we're falling, we can't jump
    } else if(at_rest > 0) {
      // we hit our head
      this.jumping = false
    } else {
      this.jumping = true
      if(this.jump_timer > 0) {
        target.velocity.y = min(target.velocity.y + jump_speed * min(dt, this.jump_timer), this.jump_max_speed)
      }
      this.jump_timer = max(this.jump_timer - dt, 0)
    }
  } else {
    this.jumping = false
  }
  this.jump_timer = at_rest < 0 ? this.jump_max_timer : this.jump_timer

  var can_fire = true

  if(state.fire || state.firealt) {
    if(this.firing && this.needs_discrete_fire) {
      this.firing += dt
    } else {
      if(!this.fire_rate || floor(this.firing / this.fire_rate) !== floor((this.firing + dt) / this.fire_rate)) {
        this.onfire(state)
      }
      this.firing += dt
    }
  } else {
    this.firing = 0
  }

  var x_rotation = this.state.x_rotation_accum * this.rotation_scale
    , y_rotation = this.state.y_rotation_accum * this.rotation_scale
    , z_rotation = this.state.z_rotation_accum * this.rotation_scale
    , pitch_target = this._pitch_target
    , yaw_target = this._yaw_target
    , roll_target = this._roll_target

  pitch_target.rotation.x = clamp(pitch_target.rotation.x + clamp(x_rotation, this.x_rotation_per_ms), this.x_rotation_clamp)
  yaw_target.rotation.y = clamp(yaw_target.rotation.y + clamp(y_rotation, this.y_rotation_per_ms), this.y_rotation_clamp)
  roll_target.rotation.z = clamp(roll_target.rotation.z + clamp(z_rotation, this.z_rotation_per_ms), this.z_rotation_clamp)

  if(this.listeners('data').length) {
    this.emitUpdate()
  }

  this.state.x_rotation_accum =
  this.state.y_rotation_accum =
  this.state.z_rotation_accum = 0
}

proto.write = function(changes) {
  for(var key in changes) {
    this.state[key] = changes[key]
  }
}

proto.end = function(deltas) {
  if(deltas) {
    this.write(deltas)
  }
}

proto.createWriteRotationStream = function() {
  var state = this.state
    , stream = new Stream

  state.x_rotation_accum =
  state.y_rotation_accum =
  state.z_rotation_accum = 0

  stream.writable = true
  stream.write = write
  stream.end = end

  return stream

  function write(changes) {
    state.x_rotation_accum -= changes.dy || 0
    state.y_rotation_accum -= changes.dx || 0
    state.z_rotation_accum += changes.dz || 0
  }

  function end(deltas) {
    if(deltas) {
      stream.write(deltas)
    }
  }
}

proto.emitUpdate = function() {
  return this.queue({
      x_rotation_accum: this.state.x_rotation_accum
    , y_rotation_accum: this.state.y_rotation_accum
    , z_rotation_accum: this.state.z_rotation_accum
    , forward: this.state.forward
    , backward: this.state.backward
    , left: this.state.left
    , right: this.state.right
    , fire: this.state.fire
    , firealt: this.state.firealt
    , jump: this.state.jump
  })
}

proto.drain = function() {
  var buf = this.buffer
    , data

  while(buf.length && !this.paused) {
    data = buf.shift()
    if(null === data) {
      return this.emit('end')
    }
    this.emit('data', data)
  }
}

proto.resume = function() {
  this.paused = false
  this.drain()

  if(!this.paused) {
    this.emit('drain')
  }
  return this
}

proto.pause = function() {
  if(this.paused) return

  this.paused = true
  this.emit('pause')
  return this
}

proto.queue = function(data) {
  this.buffer.push(data)
  this.drain()
  return this
}

proto.acceleration = function(current, max) {
  // max -> 0
  var pct = (max - current) / max
  return sin(PI/2*pct)
}

proto.target = function(target) {
  if(target) {
    this._target = target
    this._yaw_target = target.yaw || target
    this._pitch_target = target.pitch || target
    this._roll_target = target.roll || target
  }
  return this._target
}

proto.onfire = function(_) {

}

function clamp(value, to) {
  return isFinite(to) ? max(min(value, to), -to) : value
}

},{"stream":31}],76:[function(require,module,exports){
var THREE = require('three')

module.exports = function(data, scaleFactor, mesher) {
  return new Mesh(data, scaleFactor, mesher)
}

module.exports.Mesh = Mesh

function Mesh(data, mesher, scaleFactor) {
  this.data = data
  var geometry = this.geometry = new THREE.Geometry()
  this.scale = scaleFactor || new THREE.Vector3(10, 10, 10)
  
  var result = mesher( data.voxels, data.dims )
  this.meshed = result

  geometry.vertices.length = 0
  geometry.faces.length = 0

  for (var i = 0; i < result.vertices.length; ++i) {
    var q = result.vertices[i]
    geometry.vertices.push(new THREE.Vector3(q[0], q[1], q[2]))
  } 
  
  for (var i = 0; i < result.faces.length; ++i) {
    geometry.faceVertexUvs[0].push(this.faceVertexUv(i))
    
    var q = result.faces[i]
    if (q.length === 5) {
      var f = new THREE.Face4(q[0], q[1], q[2], q[3])
      f.color = new THREE.Color(q[4])
      f.vertexColors = [f.color,f.color,f.color,f.color]
      geometry.faces.push(f)
    } else if (q.length == 4) {
      var f = new THREE.Face3(q[0], q[1], q[2])
      f.color = new THREE.Color(q[3])
      f.vertexColors = [f.color,f.color,f.color]
      geometry.faces.push(f)
    }
  }
  
  geometry.computeFaceNormals()

  geometry.verticesNeedUpdate = true
  geometry.elementsNeedUpdate = true
  geometry.normalsNeedUpdate = true

  geometry.computeBoundingBox()
  geometry.computeBoundingSphere()

}

Mesh.prototype.createWireMesh = function(hexColor) {    
  var wireMaterial = new THREE.MeshBasicMaterial({
    color : hexColor || 0xffffff,
    wireframe : true
  })
  wireMesh = new THREE.Mesh(this.geometry, wireMaterial)
  wireMesh.scale = this.scale
  wireMesh.doubleSided = true
  this.wireMesh = wireMesh
  return wireMesh
}

Mesh.prototype.createSurfaceMesh = function(material) {
  material = material || new THREE.MeshNormalMaterial()
  var surfaceMesh  = new THREE.Mesh( this.geometry, material )
  surfaceMesh.scale = this.scale
  surfaceMesh.doubleSided = false
  this.surfaceMesh = surfaceMesh
  return surfaceMesh
}

Mesh.prototype.addToScene = function(scene) {
  if (this.wireMesh) scene.add( this.wireMesh )
  if (this.surfaceMesh) scene.add( this.surfaceMesh )
}

Mesh.prototype.setPosition = function(x, y, z) {
  if (this.wireMesh) this.wireMesh.position = new THREE.Vector3(x, y, z)
  if (this.surfaceMesh) this.surfaceMesh.position = new THREE.Vector3(x, y, z)
}

Mesh.prototype.faceVertexUv = function(i) {
  var vs = [
    this.meshed.vertices[i*4+0],
    this.meshed.vertices[i*4+1],
    this.meshed.vertices[i*4+2],
    this.meshed.vertices[i*4+3]
  ]
  var spans = {
    x0: vs[0][0] - vs[1][0],
    x1: vs[1][0] - vs[2][0],
    y0: vs[0][1] - vs[1][1],
    y1: vs[1][1] - vs[2][1],
    z0: vs[0][2] - vs[1][2],
    z1: vs[1][2] - vs[2][2]
  }
  var size = {
    x: Math.max(Math.abs(spans.x0), Math.abs(spans.x1)),
    y: Math.max(Math.abs(spans.y0), Math.abs(spans.y1)),
    z: Math.max(Math.abs(spans.z0), Math.abs(spans.z1))
  }
  if (size.x === 0) {
    if (spans.y0 > spans.y1) {
      var width = size.y
      var height = size.z
    }
    else {
      var width = size.z
      var height = size.y
    }
  }
  if (size.y === 0) {
    if (spans.x0 > spans.x1) {
      var width = size.x
      var height = size.z
    }
    else {
      var width = size.z
      var height = size.x
    }
  }
  if (size.z === 0) {
    if (spans.x0 > spans.x1) {
      var width = size.x
      var height = size.y
    }
    else {
      var width = size.y
      var height = size.x
    }
  }
  if ((size.z === 0 && spans.x0 < spans.x1) || (size.x === 0 && spans.y0 > spans.y1)) {
    return [
      new THREE.Vector2(height, 0),
      new THREE.Vector2(0, 0),
      new THREE.Vector2(0, width),
      new THREE.Vector2(height, width)
    ]
  } else {
    return [
      new THREE.Vector2(0, 0),
      new THREE.Vector2(0, height),
      new THREE.Vector2(width, height),
      new THREE.Vector2(width, 0)
    ]
  }
}
;

},{"three":65}],77:[function(require,module,exports){
module.exports = physical

var aabb = require('aabb-3d')
  , THREE = require('three')

function physical(avatar, collidables, dimensions, terminal) {
  return new Physical(avatar, collidables, dimensions, terminal)
}

function Physical(avatar, collidables, dimensions, terminal) {
  this.avatar = avatar
  this.terminal = terminal || new THREE.Vector3(30, 5.6, 30)
  this.dimensions = dimensions = dimensions || [1, 1, 1]
  this._aabb = aabb([0, 0, 0], dimensions)
  this.resting = {x: false, y: false, z: false}
  this.collidables = collidables
  this.friction = new THREE.Vector3(1, 1, 1)

  this.rotation = this.avatar.rotation
  this.default_friction = 1

  // default yaw/pitch/roll controls to the avatar
  this.yaw =
  this.pitch =
  this.roll = avatar

  this.forces = new THREE.Vector3(0, 0, 0)
  this.attractors = []
  this.acceleration = new THREE.Vector3(0, 0, 0)
  this.velocity = new THREE.Vector3(0, 0, 0)
}

var cons = Physical
  , proto = cons.prototype
  , axes = ['x', 'y', 'z']
  , abs = Math.abs

// make these *once*, so we're not generating
// garbage for every object in the game.
var WORLD_DESIRED = new THREE.Vector3(0, 0, 0)
  , DESIRED = new THREE.Vector3(0, 0, 0)
  , START = new THREE.Vector3(0, 0, 0)
  , END = new THREE.Vector3(0, 0, 0)
  , DIRECTION = new THREE.Vector3()
  , LOCAL_ATTRACTOR = new THREE.Vector3()
  , TOTAL_FORCES = new THREE.Vector3()

proto.applyWorldAcceleration = applyTo('acceleration')
proto.applyWorldVelocity = applyTo('velocity')

function applyTo(which) {
  return function(world) {
    var local = this.avatar.worldToLocal(world)
    this[which].x += local.x
    this[which].y += local.y
    this[which].z += local.z
  }
}

proto.tick = function(dt) {
  var forces = this.forces
    , acceleration = this.acceleration
    , velocity = this.velocity
    , terminal = this.terminal
    , friction = this.friction
    , desired = DESIRED
    , world_desired = WORLD_DESIRED
    , bbox
    , pcs
  TOTAL_FORCES.multiplyScalar(0)

  desired.x =
  desired.y =
  desired.z =
  world_desired.x =
  world_desired.y =
  world_desired.z = 0

  for(var i = 0; i < this.attractors.length; i++) {
    var distance_factor = this.avatar.position.distanceToSquared(this.attractors[i])
    LOCAL_ATTRACTOR.copy(this.attractors[i])
    LOCAL_ATTRACTOR = this.avatar.worldToLocal(LOCAL_ATTRACTOR)

    DIRECTION.sub(LOCAL_ATTRACTOR, this.avatar.position)

    DIRECTION.divideScalar(DIRECTION.length() * distance_factor)
    DIRECTION.multiplyScalar(this.attractors[i].mass)

    TOTAL_FORCES.addSelf(DIRECTION)
  }
  
  if(!this.resting.x) {
    acceleration.x /= 8 * dt
    acceleration.x += TOTAL_FORCES.x * dt
    acceleration.x += forces.x * dt

    velocity.x += acceleration.x * dt
    velocity.x *= friction.x

    if(abs(velocity.x) < terminal.x) {
      desired.x = (velocity.x * dt)
    } else if(velocity.x !== 0) {
      desired.x = (velocity.x / abs(velocity.x)) * terminal.x
    }
  } else {
    acceleration.x = velocity.x = 0
  }
  if(!this.resting.y) {
    acceleration.y /= 8 * dt
    acceleration.y += TOTAL_FORCES.y * dt
    acceleration.y += forces.y * dt

    velocity.y += acceleration.y * dt
    velocity.y *= friction.y

    if(abs(velocity.y) < terminal.y) {
      desired.y = (velocity.y * dt)
    } else if(velocity.y !== 0) {
      desired.y = (velocity.y / abs(velocity.y)) * terminal.y
    }
  } else {
    acceleration.y = velocity.y = 0
  }
  if(!this.resting.z) {
    acceleration.z /= 8 * dt
    acceleration.z += TOTAL_FORCES.z * dt
    acceleration.z += forces.z * dt

    velocity.z += acceleration.z * dt
    velocity.z *= friction.z

    if(abs(velocity.z) < terminal.z) {
      desired.z = (velocity.z * dt)
    } else if(velocity.z !== 0) {
      desired.z = (velocity.z / abs(velocity.z)) * terminal.z
    }
  } else {
    acceleration.z = velocity.z = 0
  }
  
  START.copy(this.avatar.position)
  this.avatar.translateX(desired.x)
  this.avatar.translateY(desired.y)
  this.avatar.translateZ(desired.z)
  END.copy(this.avatar.position)
  this.avatar.position.copy(START)
  world_desired.x = END.x - START.x
  world_desired.y = END.y - START.y
  world_desired.z = END.z - START.z
  this.friction.x =
  this.friction.y =
  this.friction.z = this.default_friction

  // run collisions
  this.resting.x =
  this.resting.y =
  this.resting.z = false

  bbox = this.aabb()
  pcs = this.collidables

  for(var i = 0, len = pcs.length; i < len; ++i) {
    if(pcs[i] !== this) {
      pcs[i].collide(this, bbox, world_desired, this.resting)
    }
  }

  // apply translation
  this.avatar.position.x += world_desired.x
  this.avatar.position.y += world_desired.y
  this.avatar.position.z += world_desired.z
}

proto.subjectTo = function(force) {
  this.forces.x += force[0]
  this.forces.y += force[1]
  this.forces.z += force[2]
  return this
}

proto.attractTo = function(vector, mass) {
  vector.mass = mass
  this.attractors.push(vector)
}

proto.aabb = function() {
  return aabb(
      [this.avatar.position.x, this.avatar.position.y, this.avatar.position.z]
    , this.dimensions
  )
}

// no object -> object collisions for now, thanks
proto.collide = function(other, bbox, world_vec, resting) {
  return
}

proto.atRestX = function() {
  return this.resting.x
}

proto.atRestY = function() {
  return this.resting.y
}

proto.atRestZ = function() {
  return this.resting.z
}

},{"aabb-3d":43,"three":65}],78:[function(require,module,exports){
"use strict"

var EPSILON = 1e-8

function traceRay(voxels, origin, direction, max_d, hit_pos, hit_norm) {
  var ox = origin[0]
    , oy = origin[1]
    , oz = origin[2]
    , px = origin[0]
    , py = origin[1]
    , pz = origin[2]
    , dx = direction[0]
    , dy = direction[1]
    , dz = direction[2]
    , ds = Math.sqrt(dx*dx + dy*dy + dz*dz)
    , t = 0.0
    , nx=0, ny=0, nz=0
    , ix, iy, iz
    , fx, fy, fz
    , ox, oy, oz
    , ex, ey, ez
    , b, step, min_step
  if(ds < EPSILON) {
    if(hit_pos) {
      hit_pos[0] = hit_pos[1] = hit_pos[2]
    }
    if(hit_norm) {
      hit_norm[0] = hit_norm[1] = hit_norm[2]
    }
    return 0;
  }
  dx /= ds
  dy /= ds
  dz /= ds
  if(typeof(max_d) === "undefined") {
    max_d = 64.0
  }
  //Step block-by-block along ray
  while(t <= max_d) {
    ox = px + t * dx
    oy = py + t * dy
    oz = pz + t * dz
    ix = Math.floor(ox)
    iy = Math.floor(oy)
    iz = Math.floor(oz)
    fx = ox - ix
    fy = oy - iy
    fz = oz - iz
    b = voxels.getBlock(ix, iy, iz)
    if(b) {
      if(hit_pos) {
        //Clamp to face on hit
        hit_pos[0] = fx < EPSILON ? +ix : ox
        hit_pos[1] = fy < EPSILON ? +iy : oy
        hit_pos[2] = fz < EPSILON ? +iz : oz
      }
      if(hit_norm) {
        hit_norm[0] = nx
        hit_norm[1] = ny
        hit_norm[2] = nz
      }
      return b
    }
    //Check edge cases
    min_step = EPSILON * (1.0 + t)
    if(t > min_step) {
      ex = nx < 0 ? fx <= min_step : fx >= 1.0 - min_step
      ey = ny < 0 ? fy <= min_step : fy >= 1.0 - min_step
      ez = nz < 0 ? fz <= min_step : fz >= 1.0 - min_step
      if(ex && ey && ez) {
        b = voxels.getBlock(ix+nx, iy+ny, iz) ||
            voxels.getBlock(ix, iy+ny, iz+nz) ||
            voxels.getBlock(ix+nx, iy, iz+nz)
        if(b) {
          if(hit_pos) {
            hit_pos[0] = nx < 0 ? ix-EPSILON : ix + 1.0-EPSILON
            hit_pos[1] = ny < 0 ? iy-EPSILON : iy + 1.0-EPSILON
            hit_pos[2] = nz < 0 ? iz-EPSILON : iz + 1.0-EPSILON
          }
          if(hit_norm) {
            hit_norm[0] = nx
            hit_norm[1] = ny
            hit_norm[2] = nz
          }
          return b
        }
      }
      if(ex && (ey || ez)) {
        b = voxels.getBlock(ix+nx, iy, iz)
        if(b) {
          if(hit_pos) {
            hit_pos[0] = nx < 0 ? ix-EPSILON : ix + 1.0-EPSILON
            hit_pos[1] = fy < EPSILON ? +iy : oy
            hit_pos[2] = fz < EPSILON ? +iz : oz
          }
          if(hit_norm) {
            hit_norm[0] = nx
            hit_norm[1] = ny
            hit_norm[2] = nz
          }
          return b
        }
      }
      if(ey && (ex || ez)) {
        b = voxels.getBlock(ix, iy+ny, iz)
        if(b) {
          if(hit_pos) {
            hit_pos[0] = fx < EPSILON ? +ix : ox
            hit_pos[1] = ny < 0 ? iy-EPSILON : iy + 1.0-EPSILON
            hit_pos[2] = fz < EPSILON ? +iz : oz
          }
          if(hit_norm) {
            hit_norm[0] = nx
            hit_norm[1] = ny
            hit_norm[2] = nz
          }
          return b
        }
      }
      if(ez && (ex || ey)) {
        b = voxels.getBlock(ix, iy, iz+nz)
        if(b) {
          if(hit_pos) {
            hit_pos[0] = fx < EPSILON ? +ix : ox
            hit_pos[1] = fy < EPSILON ? +iy : oy
            hit_pos[2] = nz < 0 ? iz-EPSILON : iz + 1.0-EPSILON
          }
          if(hit_norm) {
            hit_norm[0] = nx
            hit_norm[1] = ny
            hit_norm[2] = nz
          }
          return b
        }
      }
    }
    //Walk to next face of cube along ray
    nx = ny = nz = 0
    step = 2.0
    if(dx < -EPSILON) {
      var s = -fx/dx
      nx = 1
      step = s
    }
    if(dx > EPSILON) {
      var s = (1.0-fx)/dx
      nx = -1
      step = s
    }
    if(dy < -EPSILON) {
      var s = -fy/dy
      if(s < step-min_step) {
        nx = 0
        ny = 1
        step = s
      } else if(s < step+min_step) {
        ny = 1
      }
    }
    if(dy > EPSILON) {
      var s = (1.0-fy)/dy
      if(s < step-min_step) {
        nx = 0
        ny = -1
        step = s
      } else if(s < step+min_step) {
        ny = -1
      }
    }
    if(dz < -EPSILON) {
      var s = -fz/dz
      if(s < step-min_step) {
        nx = ny = 0
        nz = 1
        step = s
      } else if(s < step+min_step) {
        nz = 1
      }
    }
    if(dz > EPSILON) {
      var s = (1.0-fz)/dz
      if(s < step-min_step) {
        nx = ny = 0
        nz = -1
        step = s
      } else if(s < step+min_step) {
        nz = -1
      }
    }
    if(step > max_d - t) {
      step = max_d - t - min_step
    }
    if(step < min_step) {
      step = min_step
    }
    t += step
  }
  if(hit_pos) {
    hit_pos[0] = ox;
    hit_pos[1] = oy;
    hit_pos[2] = oz;
  }
  if(hit_norm) {
    hit_norm[0] = hit_norm[1] = hit_norm[2] = 0;
  }
  return 0
}

module.exports = traceRay
},{}],79:[function(require,module,exports){
module.exports = coordinates

var aabb = require('aabb-3d')
var events = require('events')

function coordinates(spatial, box, regionWidth) {
  var emitter = new events.EventEmitter()
  var lastRegion = [NaN, NaN, NaN]
  var thisRegion

  if (arguments.length === 2) {
    regionWidth = box
    box = aabb([-Infinity, -Infinity, -Infinity], [Infinity, Infinity, Infinity])
  }

  spatial.on('position', box, updateRegion)
  
  function updateRegion(pos) {
    thisRegion = [Math.floor(pos[0] / regionWidth), Math.floor(pos[1] / regionWidth), Math.floor(pos[2] / regionWidth)]
    if (thisRegion[0] !== lastRegion[0] || thisRegion[1] !== lastRegion[1] || thisRegion[2] !== lastRegion[2]) {
      emitter.emit('change', thisRegion)
    }
    lastRegion = thisRegion
  }
 
  return emitter
}
},{"aabb-3d":43,"events":14}],80:[function(require,module,exports){
var transparent = require('opaque').transparent;

function Texture(opts) {
  var self = this;
  if (!(this instanceof Texture)) return new Texture(opts || {});
  this.THREE              = opts.THREE          || require('three');
  this.materials          = [];
  this.texturePath        = opts.texturePath    || '/textures/';
  this.materialParams     = opts.materialParams || {};
  this.materialType       = opts.materialType   || this.THREE.MeshLambertMaterial;
  this.materialIndex      = [];
  this._animations        = [];
  this._materialDefaults  = { ambient: 0xbbbbbb };
  this.applyTextureParams = opts.applyTextureParams || function(map) {
    map.magFilter = self.THREE.NearestFilter;
    map.minFilter = self.THREE.LinearMipMapLinearFilter;
    map.wrapT     = self.THREE.RepeatWrapping;
    map.wrapS     = self.THREE.RepeatWrapping;
  }
}
module.exports = Texture;

Texture.prototype.load = function(names, opts) {
  var self = this;
  opts = self._options(opts);
  if (!isArray(names)) names = [names];
  if (!hasSubArray(names)) names = [names];
  return [].concat.apply([], names.map(function(name) {
    name = self._expandName(name);
    self.materialIndex.push([self.materials.length, self.materials.length + name.length]);
    return name.map(function(n) {
      if (n instanceof self.THREE.Texture) {
        var map = n;
        n = n.name;
      } else if (typeof n === 'string') {
        var map = self.THREE.ImageUtils.loadTexture(self.texturePath + ext(n));
      } else {
        var map = new self.THREE.Texture(n);
        n = map.name;
      }
      self.applyTextureParams.call(self, map);
      var mat = new opts.materialType(opts.materialParams);
      mat.map = map;
      mat.name = n;
      if (opts.transparent == null) self._isTransparent(mat);
      self.materials.push(mat);
      return mat;
    });
  }));
};

Texture.prototype.get = function(index) {
  if (index == null) return this.materials;
  if (typeof index === 'number') {
    index = this.materialIndex[index];
  } else {
    var i = this.find(index);
    if (i !== -1) index = i;
    for (var i = 0; i < this.materialIndex.length; i++) {
      var idx = this.materialIndex[i];
      if (index >= idx[0] && index < idx[1]) {
        index = idx;
        break;
      }
    }
  }
  return this.materials.slice(index[0], index[1]);
};

Texture.prototype.find = function(name) {
  for (var i = 0; i < this.materials.length; i++) {
    if (name === this.materials[i].name) return i;
  }
  return -1;
};

Texture.prototype._expandName = function(name) {
  if (name.top) return [name.back, name.front, name.top, name.bottom, name.left, name.right];
  if (!isArray(name)) name = [name];
  // load the 0 texture to all
  if (name.length === 1) name = [name[0],name[0],name[0],name[0],name[0],name[0]];
  // 0 is top/bottom, 1 is sides
  if (name.length === 2) name = [name[1],name[1],name[0],name[0],name[1],name[1]];
  // 0 is top, 1 is bottom, 2 is sides
  if (name.length === 3) name = [name[2],name[2],name[0],name[1],name[2],name[2]];
  // 0 is top, 1 is bottom, 2 is front/back, 3 is left/right
  if (name.length === 4) name = [name[2],name[2],name[0],name[1],name[3],name[3]];
  return name;
};

Texture.prototype._options = function(opts) {
  opts = opts || {};
  opts.materialType = opts.materialType || this.materialType;
  opts.materialParams = defaults(opts.materialParams || {}, this._materialDefaults, this.materialParams);
  opts.applyTextureParams = opts.applyTextureParams || this.applyTextureParams;
  return opts;
};

Texture.prototype.paint = function(geom) {
  var self = this;
  geom.faces.forEach(function(face, i) {
    var c = face.vertexColors[0];
    var index = Math.floor(c.b*255 + c.g*255*255 + c.r*255*255*255);
    index = self.materialIndex[Math.floor(Math.max(0, index - 1) % self.materialIndex.length)][0];

    // BACK, FRONT, TOP, BOTTOM, LEFT, RIGHT
    if      (face.normal.z === 1)  index += 1;
    else if (face.normal.y === 1)  index += 2;
    else if (face.normal.y === -1) index += 3;
    else if (face.normal.x === -1) index += 4;
    else if (face.normal.x === 1)  index += 5;

    face.materialIndex = index;
  });
};

Texture.prototype.sprite = function(name, w, h, cb) {
  var self = this;
  if (typeof w === 'function') { cb = w; w = null; }
  if (typeof h === 'function') { cb = h; h = null; }
  w = w || 16; h = h || w;
  var img = new Image();
  img.src = self.texturePath + ext(name);
  img.onerror = cb;
  img.onload = function() {
    var textures = [];
    for (var x = 0; x < img.width; x += w) {
      for (var y = 0; y < img.height; y += h) {
        var canvas = document.createElement('canvas');
        canvas.width = w; canvas.height = h;
        var ctx = canvas.getContext('2d');
        ctx.drawImage(img, x, y, w, h, 0, 0, w, h);
        var tex = new self.THREE.Texture(canvas);
        tex.name = name + '_' + x + '_' + y;
        tex.needsUpdate = true;
        textures.push(tex);
      }
    }
    cb(null, textures);
  };
  return self;
};

Texture.prototype.animate = function(names, delay) {
  var self = this;
  delay = delay || 1000;
  names = names.map(function(name) {
    return (typeof name === 'string') ? self.find(name) : name;
  }).filter(function(name) {
    return (name !== -1);
  });
  if (names.length < 2) return false;
  if (self._clock == null) self._clock = new self.THREE.Clock();
  var mat = self.materials[names[0]].clone();
  self.materials.push(mat);
  names = [self.materials.length - 1, delay, 0].concat(names);
  self._animations.push(names);
  return mat;
};

Texture.prototype.tick = function() {
  var self = this;
  if (self._animations.length < 1 || self._clock == null) return false;
  var t = self._clock.getElapsedTime();
  self._animations.forEach(function(anim) {
    var mats = anim.slice(3);
    var i = Math.round(t / (anim[1] / 1000)) % (mats.length);
    if (anim[2] !== i) {
      self.materials[anim[0]].map = self.materials[mats[i]].map;
      self.materials[anim[0]].needsUpdate = true;
      anim[2] = i;
    }
  });
};

Texture.prototype._isTransparent = function(material) {
  if (!material.map) return;
  if (!material.map.image) return;
  if (material.map.image.nodeName.toLowerCase() === 'img') {
    material.map.image.onload = function() {
      if (transparent(this)) {
        material.transparent = true;
        material.needsUpdate = true;
      }
    };
  } else {
    if (transparent(material.map.image)) {
      material.transparent = true;
      material.needsUpdate = true;
    }
  }
};

function ext(name) {
  return (String(name).indexOf('.') !== -1) ? name : name + '.png';
}

// copied from https://github.com/joyent/node/blob/master/lib/util.js#L433
function isArray(ar) {
  return Array.isArray(ar) || (typeof ar === 'object' && Object.prototype.toString.call(ar) === '[object Array]');
}

function hasSubArray(ar) {
  var has = false;
  ar.forEach(function(a) { if (isArray(a)) { has = true; return false; } });
  return has;
}

function defaults(obj) {
  [].slice.call(arguments, 1).forEach(function(from) {
    if (from) for (var k in from) if (obj[k] == null) obj[k] = from[k];
  });
  return obj;
}

},{"opaque":81,"three":65}],81:[function(require,module,exports){
function opaque(image) {
  var canvas, ctx

  if (image.nodeName.toLowerCase() === 'img') {
    canvas = document.createElement('canvas')
    canvas.width = image.width
    canvas.height = image.height
    ctx = canvas.getContext('2d')
    ctx.drawImage(image, 0, 0)
  } else {
    canvas = image
    ctx = canvas.getContext('2d')
  }

  var imageData = ctx.getImageData(0, 0, canvas.height, canvas.width)
    , data = imageData.data

  for (var i = 3, l = data.length; i < l; i += 4)
    if (data[i] !== 255)
      return false

  return true
};

module.exports = opaque
module.exports.opaque = opaque
module.exports.transparent = function(image) {
  return !opaque(image)
};
},{}],82:[function(require,module,exports){
(function (process){
var THREE, temporaryPosition, temporaryVector

module.exports = function(three, opts) {
  temporaryPosition = new three.Vector3
  temporaryVector = new three.Vector3
  
  return new View(three, opts)
}

function View(three, opts) {
  THREE = three // three.js doesn't support multiple instances on a single page
  this.fov = opts.fov || 60
  this.width = opts.width || 512
  this.height = opts.height || 512
  this.aspectRatio = opts.aspectRatio || this.width/this.height
  this.nearPlane = opts.nearPlane || 1
  this.farPlane = opts.farPlane || 10000
  this.skyColor = opts.skyColor || 0xBFD1E5
  this.ortho = opts.ortho
  this.camera = this.ortho?(new THREE.OrthographicCamera(this.width/-2, this.width/2, this.height/2, this.height/-2, this.nearPlane, this.farPlane)):(new THREE.PerspectiveCamera(this.fov, this.aspectRatio, this.nearPlane, this.farPlane))
  this.camera.lookAt(new THREE.Vector3(0, 0, 0))

  if (!process.browser) return

  this.createRenderer()
  this.element = this.renderer.domElement
}

View.prototype.createRenderer = function() {
  this.renderer = new THREE.WebGLRenderer({
    antialias: true
  })
  this.renderer.setSize(this.width, this.height)
  this.renderer.setClearColorHex(this.skyColor, 1.0)
  this.renderer.clear()
}

View.prototype.bindToScene = function(scene) {
  scene.add(this.camera)
}

View.prototype.getCamera = function() {
  return this.camera
}

View.prototype.cameraPosition = function() {
  temporaryPosition.multiplyScalar(0)
  this.camera.matrixWorld.multiplyVector3(temporaryPosition)
  return temporaryPosition
}

View.prototype.cameraVector = function() {
  temporaryVector.multiplyScalar(0)
  temporaryVector.z = -1
  this.camera.matrixWorld.multiplyVector3(temporaryVector)
  temporaryVector.subSelf(this.cameraPosition()).normalize()
  return temporaryVector
}

View.prototype.resizeWindow = function(width, height) {
  if( this.element.parentElement ) {
    width = this.element.parentElement.clientWidth
    height = this.element.parentElement.clientHeight
  }

  this.camera.aspect = this.aspectRatio = width/height

  this.camera.updateProjectionMatrix()

  this.renderer.setSize( width, height )
}

View.prototype.render = function(scene) {
  this.renderer.render(scene, this.camera)
}

View.prototype.appendTo = function(element) {
  if (typeof element === 'object') {
    element.appendChild(this.element)
  }
  else {
    document.querySelector(element).appendChild(this.element)
  }

  this.resizeWindow(this.width,this.height)
}
}).call(this,require('_process'))
},{"_process":18}],83:[function(require,module,exports){
var events = require('events')
var inherits = require('inherits')

module.exports = function(opts) {
  return new Chunker(opts)
}

module.exports.Chunker = Chunker

function Chunker(opts) {
  this.distance = opts.chunkDistance || 2
  this.chunkSize = opts.chunkSize || 32
  this.cubeSize = opts.cubeSize || 25
  this.generateVoxelChunk = opts.generateVoxelChunk
  this.chunks = {}
  this.meshes = {}

  if (this.chunkSize & this.chunkSize-1 !== 0)
    throw new Error('chunkSize must be a power of 2')
  var bits = 0;
  for (var size = this.chunkSize; size > 0; size >>= 1) bits++;
  this.chunkBits = bits - 1;
}

inherits(Chunker, events.EventEmitter)

Chunker.prototype.nearbyChunks = function(position, distance) {
  var current = this.chunkAtPosition(position)
  var x = current[0]
  var y = current[1]
  var z = current[2]
  var dist = distance || this.distance
  var nearby = []
  for (var cx = (x - dist); cx !== (x + dist); ++cx) {
    for (var cy = (y - dist); cy !== (y + dist); ++cy) {
      for (var cz = (z - dist); cz !== (z + dist); ++cz) {
        nearby.push([cx, cy, cz])
      }
    }
  }
  return nearby
}

Chunker.prototype.requestMissingChunks = function(position) {
  var self = this
  this.nearbyChunks(position).map(function(chunk) {
    if (!self.chunks[chunk.join('|')]) {
      self.emit('missingChunk', chunk)
    }
  })
}

Chunker.prototype.getBounds = function(x, y, z) {
  var bits = this.chunkBits
  var low = [x << bits, y << bits, z << bits]
  var high = [(x+1) << bits, (y+1) << bits, (z+1) << bits]
  return [low, high]
}

Chunker.prototype.generateChunk = function(x, y, z) {
  var self = this
  var bounds = this.getBounds(x, y, z)
  var chunk = this.generateVoxelChunk(bounds[0], bounds[1], x, y, z)
  var position = [x, y, z]
  chunk.position = position
  this.chunks[position.join('|')] = chunk
  return chunk
}

Chunker.prototype.chunkAtCoordinates = function(x, y, z) {
  var bits = this.chunkBits;
  var cx = x >> bits;
  var cy = y >> bits;
  var cz = z >> bits;
  var chunkPos = [cx, cy, cz];
  return chunkPos;
}

Chunker.prototype.chunkAtPosition = function(position) {
  var cubeSize = this.cubeSize;
  var x = Math.floor(position[0] / cubeSize)
  var y = Math.floor(position[1] / cubeSize)
  var z = Math.floor(position[2] / cubeSize)
  var chunkPos = this.chunkAtCoordinates(x, y, z)
  return chunkPos
};

Chunker.prototype.voxelIndexFromCoordinates = function(x, y, z) {
  var bits = this.chunkBits
  var mask = (1 << bits) - 1
  var vidx = (x & mask) + ((y & mask) << bits) + ((z & mask) << bits * 2)
  return vidx
}

Chunker.prototype.voxelIndexFromPosition = function(pos) {
  var v = this.voxelVector(pos)
  return this.voxelIndex(v)
}

Chunker.prototype.voxelAtCoordinates = function(x, y, z, val) {
  var ckey = this.chunkAtCoordinates(x, y, z).join('|')
  var chunk = this.chunks[ckey]
  if (!chunk) return false
  var vidx = this.voxelIndexFromCoordinates(x, y, z)
  var v = chunk.voxels[vidx]
  if (typeof val !== 'undefined') {
    chunk.voxels[vidx] = val
  }
  return v
}

Chunker.prototype.voxelAtPosition = function(pos, val) {
  var cubeSize = this.cubeSize;
  var x = Math.floor(pos[0] / cubeSize)
  var y = Math.floor(pos[1] / cubeSize)
  var z = Math.floor(pos[2] / cubeSize)
  var v = this.voxelAtCoordinates(x, y, z, val)
  return v;
}

// deprecated
Chunker.prototype.voxelIndex = function(voxelVector) {
  var vidx = this.voxelIndexFromCoordinates(voxelVector[0], voxelVector[1], voxelVector[2])
  return vidx
}

// deprecated
Chunker.prototype.voxelVector = function(pos) {
  var cubeSize = this.cubeSize
  var mask = (1 << this.chunkBits) - 1
  var vx = (Math.floor(pos[0] / cubeSize)) & mask
  var vy = (Math.floor(pos[1] / cubeSize)) & mask
  var vz = (Math.floor(pos[2] / cubeSize)) & mask
  return [vx, vy, vz]
};

},{"events":14,"inherits":46}],84:[function(require,module,exports){
var chunker = require('./chunker')

module.exports = function(opts) {
  if (!opts.generateVoxelChunk) opts.generateVoxelChunk = function(low, high) {
    return generate(low, high, module.exports.generator['Valley'])
  }
  return chunker(opts)
}

module.exports.meshers = {
  culled: require('./meshers/culled').mesher,
  greedy: require('./meshers/greedy').mesher,
  monotone: require('./meshers/monotone').mesher,
  stupid: require('./meshers/stupid').mesher
}

module.exports.Chunker = chunker.Chunker
module.exports.geometry = {}
module.exports.generator = {}
module.exports.generate = generate

// from https://github.com/mikolalysenko/mikolalysenko.github.com/blob/master/MinecraftMeshes2/js/testdata.js#L4
function generate(l, h, f, game) {
  var d = [ h[0]-l[0], h[1]-l[1], h[2]-l[2] ]
  var v = new Int8Array(d[0]*d[1]*d[2])
  var n = 0
  for(var k=l[2]; k<h[2]; ++k)
  for(var j=l[1]; j<h[1]; ++j)
  for(var i=l[0]; i<h[0]; ++i, ++n) {
    v[n] = f(i,j,k,n,game)
  }
  return {voxels:v, dims:d}
}

// shape and terrain generator functions
module.exports.generator['Sphere'] = function(i,j,k) {
  return i*i+j*j+k*k <= 16*16 ? 1 : 0
}

module.exports.generator['Noise'] = function(i,j,k) {
  return Math.random() < 0.1 ? Math.random() * 0xffffff : 0;
}

module.exports.generator['Dense Noise'] = function(i,j,k) {
  return Math.round(Math.random() * 0xffffff);
}

module.exports.generator['Checker'] = function(i,j,k) {
  return !!((i+j+k)&1) ? (((i^j^k)&2) ? 1 : 0xffffff) : 0;
}

module.exports.generator['Hill'] = function(i,j,k) {
  return j <= 16 * Math.exp(-(i*i + k*k) / 64) ? 1 : 0;
}

module.exports.generator['Valley'] = function(i,j,k) {
  return j <= (i*i + k*k) * 31 / (32*32*2) + 1 ? 1 : 0;
}

module.exports.generator['Hilly Terrain'] = function(i,j,k) {
  var h0 = 3.0 * Math.sin(Math.PI * i / 12.0 - Math.PI * k * 0.1) + 27;    
  if(j > h0+1) {
    return 0;
  }
  if(h0 <= j) {
    return 1;
  }
  var h1 = 2.0 * Math.sin(Math.PI * i * 0.25 - Math.PI * k * 0.3) + 20;
  if(h1 <= j) {
    return 2;
  }
  if(2 < j) {
    return Math.random() < 0.1 ? 0x222222 : 0xaaaaaa;
  }
  return 3;
}

module.exports.scale = function ( x, fromLow, fromHigh, toLow, toHigh ) {
  return ( x - fromLow ) * ( toHigh - toLow ) / ( fromHigh - fromLow ) + toLow
}

// convenience function that uses the above functions to prebake some simple voxel geometries
module.exports.generateExamples = function() {
  return {
    'Sphere': generate([-16,-16,-16], [16,16,16], module.exports.generator['Sphere']),
    'Noise': generate([0,0,0], [16,16,16], module.exports.generator['Noise']),
    'Dense Noise': generate([0,0,0], [16,16,16], module.exports.generator['Dense Noise']),
    'Checker': generate([0,0,0], [8,8,8], module.exports.generator['Checker']),
    'Hill': generate([-16, 0, -16], [16,16,16], module.exports.generator['Hill']),
    'Valley': generate([0,0,0], [32,32,32], module.exports.generator['Valley']),
    'Hilly Terrain': generate([0, 0, 0], [32,32,32], module.exports.generator['Hilly Terrain'])
  }
}


},{"./chunker":83,"./meshers/culled":85,"./meshers/greedy":86,"./meshers/monotone":87,"./meshers/stupid":88}],85:[function(require,module,exports){
module.exports=require(71)
},{"/Users/phil/github/fun/game-editor/node_modules/voxel-engine/node_modules/voxel-chunks/node_modules/voxel/meshers/culled.js":71}],86:[function(require,module,exports){
module.exports=require(72)
},{"/Users/phil/github/fun/game-editor/node_modules/voxel-engine/node_modules/voxel-chunks/node_modules/voxel/meshers/greedy.js":72}],87:[function(require,module,exports){
module.exports=require(73)
},{"/Users/phil/github/fun/game-editor/node_modules/voxel-engine/node_modules/voxel-chunks/node_modules/voxel/meshers/monotone.js":73}],88:[function(require,module,exports){
module.exports=require(74)
},{"/Users/phil/github/fun/game-editor/node_modules/voxel-engine/node_modules/voxel-chunks/node_modules/voxel/meshers/stupid.js":74}],89:[function(require,module,exports){
var skin = require('minecraft-skin');

module.exports = function (game) {
    var mountPoint;
    var possessed;
    
    return function (img, skinOpts) {
        if (!skinOpts) {
          skinOpts = {};
        }
        skinOpts.scale = skinOpts.scale || new game.THREE.Vector3(0.04, 0.04, 0.04);
        var playerSkin = skin(game.THREE, img, skinOpts);
        var player = playerSkin.mesh;
        var physics = game.makePhysical(player);
        physics.playerSkin = playerSkin;
        
        player.position.set(0, 562, -20);
        game.scene.add(player);
        game.addItem(physics);
        
        physics.yaw = player;
        physics.pitch = player.head;
        physics.subjectTo(game.gravity);
        physics.blocksCreation = true;
        
        game.control(physics);
        
        physics.move = function (x, y, z) {
            var xyz = parseXYZ(x, y, z);
            physics.yaw.position.x += xyz.x;
            physics.yaw.position.y += xyz.y;
            physics.yaw.position.z += xyz.z;
        };
        
        physics.moveTo = function (x, y, z) {
            var xyz = parseXYZ(x, y, z);
            physics.yaw.position.x = xyz.x;
            physics.yaw.position.y = xyz.y;
            physics.yaw.position.z = xyz.z;
        };
        
        var pov = 1;
        physics.pov = function (type) {
            if (type === 'first' || type === 1) {
                pov = 1;
            }
            else if (type === 'third' || type === 3) {
                pov = 3;
            }
            physics.possess();
        };
        
        physics.toggle = function () {
            physics.pov(pov === 1 ? 3 : 1);
        };
        
        physics.possess = function () {
            if (possessed) possessed.remove(game.camera);
            var key = pov === 1 ? 'cameraInside' : 'cameraOutside';
            player[key].add(game.camera);
            possessed = player[key];
        };
        
        physics.position = physics.yaw.position;
        
        return physics;
    }
};

function parseXYZ (x, y, z) {
    if (typeof x === 'object' && Array.isArray(x)) {
        return { x: x[0], y: x[1], z: x[2] };
    }
    else if (typeof x === 'object') {
        return { x: x.x || 0, y: x.y || 0, z: x.z || 0 };
    }
    return { x: Number(x), y: Number(y), z: Number(z) };
}

},{"minecraft-skin":90}],90:[function(require,module,exports){
var THREE

module.exports = function(three, image, sizeRatio) {
  return new Skin(three, image, sizeRatio)
}

function Skin(three, image, opts) {
  if (opts) opts.image = opts.image || image
  else opts = { image: image }
  if (typeof image === 'object' && !(image instanceof HTMLElement)) opts = image
  THREE = three // hack until three.js fixes multiple instantiation
  this.sizeRatio = opts.sizeRatio || 8
  this.scale = opts.scale || new three.Vector3(1, 1, 1)
  this.fallbackImage = opts.fallbackImage || 'skin.png'
  this.createCanvases()
  this.charMaterial = this.getMaterial(this.skin, false)
	this.charMaterialTrans = this.getMaterial(this.skin, true)
  if (typeof opts.image === "string") this.fetchImage(opts.image)
  if (opts.image instanceof HTMLElement) this.setImage(opts.image)
  this.mesh = this.createPlayerObject()
}

Skin.prototype.createCanvases = function() {
  this.skinBig = document.createElement('canvas')
  this.skinBigContext = this.skinBig.getContext('2d')
  this.skinBig.width = 64 * this.sizeRatio
  this.skinBig.height = 32 * this.sizeRatio

  this.skin = document.createElement('canvas')
  this.skinContext = this.skin.getContext('2d')
  this.skin.width = 64
  this.skin.height = 32
}

Skin.prototype.fetchImage = function(imageURL) {
  var self = this
  this.image = new Image()
  this.image.crossOrigin = 'anonymous'
  this.image.src = imageURL
  this.image.onload = function() {
    self.setImage(self.image)
  }
}

Skin.prototype.setImage = function (skin) {
  this.image = skin
  this.skinContext.clearRect(0, 0, 64, 32);

  this.skinContext.drawImage(skin, 0, 0);

  var imgdata = this.skinContext.getImageData(0, 0, 64, 32);
  var pixels = imgdata.data;

  this.skinBigContext.clearRect(0, 0, this.skinBig.width, this.skinBig.height);
  this.skinBigContext.save();

  var isOnecolor = true;

  var colorCheckAgainst = [40, 0];
  var colorIndex = (colorCheckAgainst[0]+colorCheckAgainst[1]*64)*4;

  var isPixelDifferent = function (x, y) {
    if(pixels[(x+y*64)*4+0] !== pixels[colorIndex+0] || pixels[(x+y*64)*4+1] !== pixels[colorIndex+1] || pixels[(x+y*64)*4+2] !== pixels[colorIndex+2] || pixels[(x+y*64)*4+3] !== pixels[colorIndex+3]) {
      return true;
    }
    return false;
  };

  // Check if helmet/hat is a solid color
  // Bottom row
  for(var i=32; i < 64; i+=1) {
    for(var j=8; j < 16; j+=1) {
      if(isPixelDifferent(i, j)) {
        isOnecolor = false;
        break;
      }
    }
    if(!isOnecolor) {
      break;
    }
  }
  if(!isOnecolor) {
    // Top row
    for(var i=40; i < 56; i+=1) {
      for(var j=0; j < 8; j+=1) {
        if(isPixelDifferent(i, j)) {
          isOnecolor = false;
          break;
        }
      }
      if(!isOnecolor) {
        break;
      }

    }
  }

  for(var i=0; i < 64; i+=1) {
    for(var j=0; j < 32; j+=1) {
      if(isOnecolor && ((i >= 32 && i < 64 && j >= 8 && j < 16) || (i >= 40 && i < 56 && j >= 0 && j < 8))) {
        pixels[(i+j*64)*4+3] = 0
      }
      this.skinBigContext.fillStyle = 'rgba('+pixels[(i+j*64)*4+0]+', '+pixels[(i+j*64)*4+1]+', '+pixels[(i+j*64)*4+2]+', '+pixels[(i+j*64)*4+3]/255+')';
      this.skinBigContext.fillRect(i * this.sizeRatio, j * this.sizeRatio, this.sizeRatio, this.sizeRatio);
    }
  }

  this.skinBigContext.restore();

  this.skinContext.putImageData(imgdata, 0, 0);

  this.charMaterial.map.needsUpdate = true;
  this.charMaterialTrans.map.needsUpdate = true;

};

Skin.prototype.getMaterial = function(img, transparent) {
  var texture    = new THREE.Texture(img);
  texture.magFilter  = THREE.NearestFilter;
  texture.minFilter  = THREE.NearestFilter;
  texture.format    = transparent ? THREE.RGBAFormat : THREE.RGBFormat;
  texture.needsUpdate  = true;
  var material  = new THREE.MeshBasicMaterial({
    map    : texture,
    transparent  : transparent ? true : false
  });
  return material;
}

Skin.prototype.UVMap = function(mesh, face, x, y, w, h, rotateBy) {
  if (!rotateBy) rotateBy = 0;
  var uvs = mesh.geometry.faceVertexUvs[0][face];
  var tileU = x;
  var tileV = y;
  var tileUvWidth = 1/64;
  var tileUvHeight = 1/32;
  if (uvs[ (0 + rotateBy) % 4 ]) {
    uvs[ (0 + rotateBy) % 4 ].x = (tileU * tileUvWidth)
    uvs[ (0 + rotateBy) % 4 ].y = 1 - (tileV * tileUvHeight)
  }
  if (uvs[ (1 + rotateBy) % 4 ]) {
    uvs[ (1 + rotateBy) % 4 ].x = (tileU * tileUvWidth)
    uvs[ (1 + rotateBy) % 4 ].y = 1 - (tileV * tileUvHeight + h * tileUvHeight)
  }
  if (uvs[ (2 + rotateBy) % 4 ]) {
    uvs[ (2 + rotateBy) % 4 ].x = (tileU * tileUvWidth + w * tileUvWidth)
    uvs[ (2 + rotateBy) % 4 ].y = 1 - (tileV * tileUvHeight + h * tileUvHeight)
  }
  if (uvs[ (3 + rotateBy) % 4 ]) {
    uvs[ (3 + rotateBy) % 4 ].x = (tileU * tileUvWidth + w * tileUvWidth)
    uvs[ (3 + rotateBy) % 4 ].y = 1 - (tileV * tileUvHeight)
  }
}

Skin.prototype.cubeFromPlanes = function (size, mat) {
  var cube = new THREE.Object3D();
  var meshes = [];
  for(var i=0; i < 6; i++) {
    var mesh = new THREE.Mesh(new THREE.PlaneGeometry(size, size), mat);
    mesh.doubleSided = true;
    cube.add(mesh);
    meshes.push(mesh);
  }
  // Front
  meshes[0].rotation.x = Math.PI/2;
  meshes[0].rotation.z = -Math.PI/2;
  meshes[0].position.x = size/2;

  // Back
  meshes[1].rotation.x = Math.PI/2;
  meshes[1].rotation.z = Math.PI/2;
  meshes[1].position.x = -size/2;

  // Top
  meshes[2].position.y = size/2;

  // Bottom
  meshes[3].rotation.y = Math.PI;
  meshes[3].rotation.z = Math.PI;
  meshes[3].position.y = -size/2;

  // Left
  meshes[4].rotation.x = Math.PI/2;
  meshes[4].position.z = size/2;

  // Right
  meshes[5].rotation.x = -Math.PI/2;
  meshes[5].rotation.y = Math.PI;
  meshes[5].position.z = -size/2;

  return cube;
}

//exporting these meshes for manipulation:
//leftLeg
//rightLeg
//leftArm
//rightArm
//body
//head

Skin.prototype.createPlayerObject = function(scene) {
  var headgroup = new THREE.Object3D();
  var upperbody = this.upperbody = new THREE.Object3D();

  // Left leg
  var leftleggeo = new THREE.CubeGeometry(4, 12, 4);
  for(var i=0; i < 8; i+=1) {
    leftleggeo.vertices[i].y -= 6;
  }
  var leftleg = this.leftLeg = new THREE.Mesh(leftleggeo, this.charMaterial);
  leftleg.position.z = -2;
  leftleg.position.y = -6;
  this.UVMap(leftleg, 0, 8, 20, -4, 12);
  this.UVMap(leftleg, 1, 16, 20, -4, 12);
  this.UVMap(leftleg, 2, 4, 16, 4, 4, 3);
  this.UVMap(leftleg, 3, 8, 20, 4, -4, 1);
  this.UVMap(leftleg, 4, 12, 20, -4, 12);
  this.UVMap(leftleg, 5, 4, 20, -4, 12);

  // Right leg
  var rightleggeo = new THREE.CubeGeometry(4, 12, 4);
  for(var i=0; i < 8; i+=1) {
    rightleggeo.vertices[i].y -= 6;
  }
  var rightleg = this.rightLeg =new THREE.Mesh(rightleggeo, this.charMaterial);
  rightleg.position.z = 2;
  rightleg.position.y = -6;
  this.UVMap(rightleg, 0, 4, 20, 4, 12);
  this.UVMap(rightleg, 1, 12, 20, 4, 12);
  this.UVMap(rightleg, 2, 8, 16, -4, 4, 3);
  this.UVMap(rightleg, 3, 12, 20, -4, -4, 1);
  this.UVMap(rightleg, 4, 0, 20, 4, 12);
  this.UVMap(rightleg, 5, 8, 20, 4, 12);

  // Body
  var bodygeo = new THREE.CubeGeometry(4, 12, 8);
  var bodymesh = this.body = new THREE.Mesh(bodygeo, this.charMaterial);
  this.UVMap(bodymesh, 0, 20, 20, 8, 12);
  this.UVMap(bodymesh, 1, 32, 20, 8, 12);
  this.UVMap(bodymesh, 2, 20, 16, 8, 4, 1);
  this.UVMap(bodymesh, 3, 28, 16, 8, 4, 3);
  this.UVMap(bodymesh, 4, 16, 20, 4, 12);
  this.UVMap(bodymesh, 5, 28, 20, 4, 12);
  upperbody.add(bodymesh);


  // Left arm
  var leftarmgeo = new THREE.CubeGeometry(4, 12, 4);
  for(var i=0; i < 8; i+=1) {
    leftarmgeo.vertices[i].y -= 4;
  }
  var leftarm = this.leftArm = new THREE.Mesh(leftarmgeo, this.charMaterial);
  leftarm.position.z = -6;
  leftarm.position.y = 4;
  leftarm.rotation.x = Math.PI/32;
  this.UVMap(leftarm, 0, 48, 20, -4, 12);
  this.UVMap(leftarm, 1, 56, 20, -4, 12);
  this.UVMap(leftarm, 2, 48, 16, -4, 4, 1);
  this.UVMap(leftarm, 3, 52, 16, -4, 4, 3);
  this.UVMap(leftarm, 4, 52, 20, -4, 12);
  this.UVMap(leftarm, 5, 44, 20, -4, 12);
  upperbody.add(leftarm);

  // Right arm
  var rightarmgeo = new THREE.CubeGeometry(4, 12, 4);
  for(var i=0; i < 8; i+=1) {
    rightarmgeo.vertices[i].y -= 4;
  }
  var rightarm =this.rightArm = new THREE.Mesh(rightarmgeo, this.charMaterial);
  rightarm.position.z = 6;
  rightarm.position.y = 4;
  rightarm.rotation.x = -Math.PI/32;
  this.UVMap(rightarm, 0, 44, 20, 4, 12);
  this.UVMap(rightarm, 1, 52, 20, 4, 12);
  this.UVMap(rightarm, 2, 44, 16, 4, 4, 1);
  this.UVMap(rightarm, 3, 48, 16, 4, 4, 3);
  this.UVMap(rightarm, 4, 40, 20, 4, 12);
  this.UVMap(rightarm, 5, 48, 20, 4, 12);
  upperbody.add(rightarm);

  //Head
  var headgeo = new THREE.CubeGeometry(8, 8, 8);
  var headmesh = this.head = new THREE.Mesh(headgeo, this.charMaterial);
  headmesh.position.y = 2;
  this.UVMap(headmesh, 0, 8, 8, 8, 8);
  this.UVMap(headmesh, 1, 24, 8, 8, 8);

  this.UVMap(headmesh, 2, 8, 0, 8, 8, 1);
  this.UVMap(headmesh, 3, 16, 0, 8, 8, 3);

  this.UVMap(headmesh, 4, 0, 8, 8, 8);
  this.UVMap(headmesh, 5, 16, 8, 8, 8);

  var unrotatedHeadMesh = new THREE.Object3D();
  unrotatedHeadMesh.rotation.y = Math.PI / 2;
  unrotatedHeadMesh.add(headmesh);

  headgroup.add(unrotatedHeadMesh);

  var helmet = this.cubeFromPlanes(9, this.charMaterialTrans);
  helmet.position.y = 2;
  this.UVMap(helmet.children[0], 0, 32+8, 8, 8, 8);
  this.UVMap(helmet.children[1], 0, 32+24, 8, 8, 8);
  this.UVMap(helmet.children[2], 0, 32+8, 0, 8, 8, 1);
  this.UVMap(helmet.children[3], 0, 32+16, 0, 8, 8, 3);
  this.UVMap(helmet.children[4], 0, 32+0, 8, 8, 8);
  this.UVMap(helmet.children[5], 0, 32+16, 8, 8, 8);

  headgroup.add(helmet);

  var ears = new THREE.Object3D();

  var eargeo = new THREE.CubeGeometry(1, (9/8)*6, (9/8)*6);
  var leftear = new THREE.Mesh(eargeo, this.charMaterial);
  var rightear = new THREE.Mesh(eargeo, this.charMaterial);

  leftear.position.y = 2+(9/8)*5;
  rightear.position.y = 2+(9/8)*5;
  leftear.position.z = -(9/8)*5;
  rightear.position.z = (9/8)*5;

  // Right ear share same geometry, same uv-maps

  this.UVMap(leftear, 0, 25, 1, 6, 6); // Front side
  this.UVMap(leftear, 1, 32, 1, 6, 6); // Back side

  this.UVMap(leftear, 2, 25, 0, 6, 1, 1); // Top edge
  this.UVMap(leftear, 3, 31, 0, 6, 1, 1); // Bottom edge

  this.UVMap(leftear, 4, 24, 1, 1, 6); // Left edge
  this.UVMap(leftear, 5, 31, 1, 1, 6); // Right edge

  ears.add(leftear);
  ears.add(rightear);

  leftear.visible = rightear.visible = false;

  headgroup.add(ears);
  headgroup.position.y = 8;

  var playerModel = this.playerModel = new THREE.Object3D();

  playerModel.add(leftleg);
  playerModel.add(rightleg);

  playerModel.add(upperbody);

  var playerRotation = new THREE.Object3D();
  playerRotation.rotation.y = Math.PI / 2
  playerRotation.position.y = 12
  playerRotation.add(playerModel)

  var rotatedHead = new THREE.Object3D();
  rotatedHead.rotation.y = -Math.PI/2;
  rotatedHead.add(headgroup);

  playerModel.add(rotatedHead);
  playerModel.position.y = 6;

  var playerGroup = new THREE.Object3D();
  playerGroup.cameraInside = new THREE.Object3D()
  playerGroup.cameraOutside = new THREE.Object3D()

  playerGroup.cameraInside.position.x = 0;
  playerGroup.cameraInside.position.y = 2;
  playerGroup.cameraInside.position.z = 0;

  playerGroup.head = headgroup
  headgroup.add(playerGroup.cameraInside)
  playerGroup.cameraInside.add(playerGroup.cameraOutside)

  playerGroup.cameraOutside.position.z = 100


  playerGroup.add(playerRotation);
  playerGroup.scale = this.scale
  return playerGroup
}

},{}],91:[function(require,module,exports){
(function (process){
var THREE, temporaryPosition, temporaryVector

module.exports = function(three, opts) {
  temporaryPosition = new three.Vector3
  temporaryVector = new three.Vector3
  
  return new View(three, opts)
}

function View(three, opts) {
  THREE = three // three.js doesn't support multiple instances on a single page
  this.fov = opts.fov || 60
  this.width = opts.width || 512
  this.height = opts.height || 512
  this.aspectRatio = opts.aspectRatio || this.width/this.height
  this.nearPlane = opts.nearPlane || 1
  this.farPlane = opts.farPlane || 10000
  this.skyColor = opts.skyColor || 0xBFD1E5
  this.ortho = opts.ortho
  this.camera = this.ortho?(new THREE.OrthographicCamera(this.width/-2, this.width/2, this.height/2, this.height/-2, this.nearPlane, this.farPlane)):(new THREE.PerspectiveCamera(this.fov, this.aspectRatio, this.nearPlane, this.farPlane))
  this.camera.lookAt(new THREE.Vector3(0, 0, 0))

  if (!process.browser) return

  this.createRenderer(opts)
  this.element = this.renderer.domElement
}

View.prototype.createRenderer = function(opts) {
  opts = opts || {}
  opts.antialias = opts.antialias || true
  this.renderer = new THREE.WebGLRenderer(opts)
  this.renderer.setSize(this.width, this.height)
  this.renderer.setClearColorHex(this.skyColor, 1.0)
  this.renderer.clear()
}

View.prototype.bindToScene = function(scene) {
  scene.add(this.camera)
}

View.prototype.getCamera = function() {
  return this.camera
}

View.prototype.cameraPosition = function() {
  temporaryPosition.multiplyScalar(0)
  temporaryPosition.applyMatrix4(this.camera.matrixWorld)
  return [temporaryPosition.x, temporaryPosition.y, temporaryPosition.z]
}

View.prototype.cameraVector = function() {
  temporaryVector.multiplyScalar(0)
  temporaryVector.z = -1
  temporaryVector.transformDirection( this.camera.matrixWorld )
  return [temporaryVector.x, temporaryVector.y, temporaryVector.z]
}

View.prototype.resizeWindow = function(width, height) {
  if (this.element.parentElement) {
    width = width || this.element.parentElement.clientWidth
    height = height || this.element.parentElement.clientHeight
  }

  this.camera.aspect = this.aspectRatio = width/height
  this.width = width
  this.height = height

  this.camera.updateProjectionMatrix()

  this.renderer.setSize( width, height )
}

View.prototype.render = function(scene) {
  this.renderer.render(scene, this.camera)
}

View.prototype.appendTo = function(element) {
  if (typeof element === 'object') {
    element.appendChild(this.element)
  }
  else {
    document.querySelector(element).appendChild(this.element)
  }

  this.resizeWindow(this.width,this.height)
}

}).call(this,require('_process'))
},{"_process":18}],92:[function(require,module,exports){
module.exports=require(83)
},{"/Users/phil/github/fun/game-editor/node_modules/voxel-engine/node_modules/voxel/chunker.js":83,"events":14,"inherits":99}],93:[function(require,module,exports){
var chunker = require('./chunker')

module.exports = function(opts) {
  if (!opts.generateVoxelChunk) opts.generateVoxelChunk = function(low, high) {
    return generate(low, high, module.exports.generator['Valley'])
  }
  return chunker(opts)
}

module.exports.meshers = {
  culled: require('./meshers/culled').mesher,
  greedy: require('./meshers/greedy').mesher,
  transgreedy: require('./meshers/transgreedy').mesher,
  monotone: require('./meshers/monotone').mesher,
  stupid: require('./meshers/stupid').mesher
}

module.exports.Chunker = chunker.Chunker
module.exports.geometry = {}
module.exports.generator = {}
module.exports.generate = generate

// from https://github.com/mikolalysenko/mikolalysenko.github.com/blob/master/MinecraftMeshes2/js/testdata.js#L4
function generate(l, h, f, game) {
  var d = [ h[0]-l[0], h[1]-l[1], h[2]-l[2] ]
  var v = new Int8Array(d[0]*d[1]*d[2])
  var n = 0
  for(var k=l[2]; k<h[2]; ++k)
  for(var j=l[1]; j<h[1]; ++j)
  for(var i=l[0]; i<h[0]; ++i, ++n) {
    v[n] = f(i,j,k,n,game)
  }
  return {voxels:v, dims:d}
}

// shape and terrain generator functions
module.exports.generator['Sphere'] = function(i,j,k) {
  return i*i+j*j+k*k <= 16*16 ? 1 : 0
}

module.exports.generator['Noise'] = function(i,j,k) {
  return Math.random() < 0.1 ? Math.random() * 0xffffff : 0;
}

module.exports.generator['Dense Noise'] = function(i,j,k) {
  return Math.round(Math.random() * 0xffffff);
}

module.exports.generator['Checker'] = function(i,j,k) {
  return !!((i+j+k)&1) ? (((i^j^k)&2) ? 1 : 0xffffff) : 0;
}

module.exports.generator['Hill'] = function(i,j,k) {
  return j <= 16 * Math.exp(-(i*i + k*k) / 64) ? 1 : 0;
}

module.exports.generator['Valley'] = function(i,j,k) {
  return j <= (i*i + k*k) * 31 / (32*32*2) + 1 ? 1 : 0;
}

module.exports.generator['Hilly Terrain'] = function(i,j,k) {
  var h0 = 3.0 * Math.sin(Math.PI * i / 12.0 - Math.PI * k * 0.1) + 27;    
  if(j > h0+1) {
    return 0;
  }
  if(h0 <= j) {
    return 1;
  }
  var h1 = 2.0 * Math.sin(Math.PI * i * 0.25 - Math.PI * k * 0.3) + 20;
  if(h1 <= j) {
    return 2;
  }
  if(2 < j) {
    return Math.random() < 0.1 ? 0x222222 : 0xaaaaaa;
  }
  return 3;
}

module.exports.scale = function ( x, fromLow, fromHigh, toLow, toHigh ) {
  return ( x - fromLow ) * ( toHigh - toLow ) / ( fromHigh - fromLow ) + toLow
}

// convenience function that uses the above functions to prebake some simple voxel geometries
module.exports.generateExamples = function() {
  return {
    'Sphere': generate([-16,-16,-16], [16,16,16], module.exports.generator['Sphere']),
    'Noise': generate([0,0,0], [16,16,16], module.exports.generator['Noise']),
    'Dense Noise': generate([0,0,0], [16,16,16], module.exports.generator['Dense Noise']),
    'Checker': generate([0,0,0], [8,8,8], module.exports.generator['Checker']),
    'Hill': generate([-16, 0, -16], [16,16,16], module.exports.generator['Hill']),
    'Valley': generate([0,0,0], [32,32,32], module.exports.generator['Valley']),
    'Hilly Terrain': generate([0, 0, 0], [32,32,32], module.exports.generator['Hilly Terrain'])
  }
}


},{"./chunker":92,"./meshers/culled":94,"./meshers/greedy":95,"./meshers/monotone":96,"./meshers/stupid":97,"./meshers/transgreedy":98}],94:[function(require,module,exports){
module.exports=require(71)
},{"/Users/phil/github/fun/game-editor/node_modules/voxel-engine/node_modules/voxel-chunks/node_modules/voxel/meshers/culled.js":71}],95:[function(require,module,exports){
module.exports=require(72)
},{"/Users/phil/github/fun/game-editor/node_modules/voxel-engine/node_modules/voxel-chunks/node_modules/voxel/meshers/greedy.js":72}],96:[function(require,module,exports){
module.exports=require(73)
},{"/Users/phil/github/fun/game-editor/node_modules/voxel-engine/node_modules/voxel-chunks/node_modules/voxel/meshers/monotone.js":73}],97:[function(require,module,exports){
module.exports=require(74)
},{"/Users/phil/github/fun/game-editor/node_modules/voxel-engine/node_modules/voxel-chunks/node_modules/voxel/meshers/stupid.js":74}],98:[function(require,module,exports){
var GreedyMesh = (function greedyLoader() {
    
// contains all forward faces (in terms of scan direction)
var mask = new Int32Array(4096);
// and all backwards faces. needed when there are two transparent blocks
// next to each other.
var invMask = new Int32Array(4096);

// setting 16th bit if transparent
var kTransparentMask    = 0x8000;
var kNoFlagsMask        = 0x7FFF;
var kTransparentTypes   = [];

kTransparentTypes[16] = true

function isTransparent(v) {
  return (v & kTransparentMask) === kTransparentMask;
}

function removeFlags(v) {
  return (v & kNoFlagsMask);
}

return function ohSoGreedyMesher(volume, dims, mesherExtraData) {
  var vertices = [], faces = []
    , dimsX = dims[0]
    , dimsY = dims[1]
    , dimsXY = dimsX * dimsY;

  var tVertices = [], tFaces = []

  var transparentTypes = mesherExtraData ? (mesherExtraData.transparentTypes || {}) : {};
  var getType = function(voxels, offset) {
    var type = voxels[offset];
    return type | (type in transparentTypes ? kTransparentMask : 0);
  }


  //Sweep over 3-axes
  for(var d=0; d<3; ++d) {
    var i, j, k, l, w, W, h, n, c
      , u = (d+1)%3
      , v = (d+2)%3
      , x = [0,0,0]
      , q = [0,0,0]
      , du = [0,0,0]
      , dv = [0,0,0]
      , dimsD = dims[d]
      , dimsU = dims[u]
      , dimsV = dims[v]
      , qdimsX, qdimsXY
      , xd

    if (mask.length < dimsU * dimsV) {
      mask = new Int32Array(dimsU * dimsV);
      invMask = new Int32Array(dimsU * dimsV);
    }

    q[d] =  1;
    x[d] = -1;

    qdimsX  = dimsX  * q[1]
    qdimsXY = dimsXY * q[2]

    // Compute mask
    while (x[d] < dimsD) {
      xd = x[d]
      n = 0;

      for(x[v] = 0; x[v] < dimsV; ++x[v]) {
        for(x[u] = 0; x[u] < dimsU; ++x[u], ++n) {
          // Modified to read through getType()
          var a = xd >= 0      && getType(volume, x[0]      + dimsX * x[1]          + dimsXY * x[2]          )
            , b = xd < dimsD-1 && getType(volume, x[0]+q[0] + dimsX * x[1] + qdimsX + dimsXY * x[2] + qdimsXY)

          // both are transparent, add to both directions
          if (isTransparent(a) && isTransparent(b)) {
            mask[n] = a;
            invMask[n] = b;
          // if a is solid and b is not there or transparent
          } else if (a && (!b || isTransparent(b))) {
            mask[n] = a;
            invMask[n] = 0
          // if b is solid and a is not there or transparent
          } else if (b && (!a || isTransparent(a))) {
            mask[n] = 0
            invMask[n] = b;
          // dont draw this face
          } else {
            mask[n] = 0
            invMask[n] = 0
          }
        }
      }

      ++x[d];

      // Generate mesh for mask using lexicographic ordering
      function generateMesh(mask, dimsV, dimsU, vertices, faces, clockwise) {
        clockwise = clockwise === undefined ? true : clockwise;
        var n, j, i, c, w, h, k, du = [0,0,0], dv = [0,0,0];
        n = 0;
        for (j=0; j < dimsV; ++j) {
          for (i=0; i < dimsU; ) {
            c = mask[n];
            if (!c) {
              i++;  n++; continue;
            }

            //Compute width
            w = 1;
            while (c === mask[n+w] && i+w < dimsU) w++;

            //Compute height (this is slightly awkward)
            for (h=1; j+h < dimsV; ++h) {
              k = 0;
              while (k < w && c === mask[n+k+h*dimsU]) k++
              if (k < w) break;
            }

            // Add quad
            // The du/dv arrays are reused/reset
            // for each iteration.
            du[d] = 0; dv[d] = 0;
            x[u]  = i;  x[v] = j;

            if (clockwise) {
            // if (c > 0) {
              dv[v] = h; dv[u] = 0;
              du[u] = w; du[v] = 0;
            } else {
              // c = -c;
              du[v] = h; du[u] = 0;
              dv[u] = w; dv[v] = 0;
            }
            
            // ## enable code to ensure that transparent faces are last in the list
            // if (!isTransparent(c)) {
              var vertex_count = vertices.length;
              vertices.push([x[0],             x[1],             x[2]            ]);
              vertices.push([x[0]+du[0],       x[1]+du[1],       x[2]+du[2]      ]);
              vertices.push([x[0]+du[0]+dv[0], x[1]+du[1]+dv[1], x[2]+du[2]+dv[2]]);
              vertices.push([x[0]      +dv[0], x[1]      +dv[1], x[2]      +dv[2]]);
              faces.push([vertex_count, vertex_count+1, vertex_count+2, vertex_count+3, removeFlags(c)]);
            // } else {
            //   var vertex_count = tVertices.length;
            //   tVertices.push([x[0],             x[1],             x[2]            ]);
            //   tVertices.push([x[0]+du[0],       x[1]+du[1],       x[2]+du[2]      ]);
            //   tVertices.push([x[0]+du[0]+dv[0], x[1]+du[1]+dv[1], x[2]+du[2]+dv[2]]);
            //   tVertices.push([x[0]      +dv[0], x[1]      +dv[1], x[2]      +dv[2]]);
            //   tFaces.push([vertex_count, vertex_count+1, vertex_count+2, vertex_count+3, removeFlags(c)]);
            // }

            //Zero-out mask
            W = n + w;
            for(l=0; l<h; ++l) {
              for(k=n; k<W; ++k) {
                mask[k+l*dimsU] = 0;
              }
            }

            //Increment counters and continue
            i += w; n += w;
          }
        }
      }
      generateMesh(mask, dimsV, dimsU, vertices, faces, true)
      generateMesh(invMask, dimsV, dimsU, vertices, faces, false)
    }
  }
  
  // ## enable code to ensure that transparent faces are last in the list
  // var vertex_count = vertices.length;
  // var newFaces = tFaces.map(function(v) {
  //   return [vertex_count+v[0], vertex_count+v[1], vertex_count+v[2], vertex_count+v[3], v[4]]
  // })
  // 
  // return { vertices:vertices.concat(tVertices), faces:faces.concat(newFaces) };
  
  // TODO: Try sorting by texture to see if we can reduce draw calls.
  // faces.sort(function sortFaces(a, b) {
  //   return b[4] - a[4];
  // })
  return { vertices:vertices, faces:faces };
}
})();

if(exports) {
  exports.mesher = GreedyMesh;
}

},{}],99:[function(require,module,exports){
module.exports=require(46)
},{"/Users/phil/github/fun/game-editor/node_modules/voxel-engine/node_modules/inherits/inherits.js":46}],100:[function(require,module,exports){
var AxisCamera, ColorManager, ColorUtils, GAME, HashManager, IconMaker, Input, Interactions, KeyMouse, MainCamera, PaletteManager, SceneManager, TextureCube, VoxelFactory, exportGeometry, raf;

raf = require("raf");

GAME = require('./src/game');

Input = require('./src/editor/input-manager');

SceneManager = require('./src/editor/scene-manager');

ColorUtils = require('./src/editor/color-utils');

ColorManager = require('./src/editor/color-manager');

AxisCamera = require('./src/editor/axis-camera');

MainCamera = require('./src/main-camera');

HashManager = require('./src/editor/hash-manager');

Interactions = require('./src/editor/interactions');

KeyMouse = require('./src/editor/key-mouse-handlers');

PaletteManager = require('./src/voxels/palette-manager');

VoxelFactory = require('./src/voxels/voxel-factory');

IconMaker = require('./src/editor/icon-maker');

TextureCube = require('./src/voxels/texture-cube');

exportGeometry = require('./export-geometry');

window.startEditor = function() {
  var addColor, addColorToPalette, alreadyCreatedGame, bindEventsAndPlugins, c, cameraHandlers, changeColor, container, exportFunction, getDimensions, init, pickColor, showWelcome, updateColor;
  container = null;
  alreadyCreatedGame = false;
  $('.preview-level').on('click', function() {
    var $preview, fn;
    if (!alreadyCreatedGame) {
      $preview = $('.preview-level');
      $preview.text('Loading...');
      $preview.addClass('disabled');
      $preview.attr('alt', 'This may take a minute');
      HashManager.disableUpdateHash();
      fn = function() {
        exportGeometry(SceneManager);
        GAME(SceneManager);
        alreadyCreatedGame = true;
        return $preview.text('Loaded');
      };
      return setTimeout(fn, 10);
    }
  });
  window.exportGeometry = function() {
    return exportGeometry(SceneManager);
  };
  window.exportImage = function() {
    var $img, color, colorName, iconMaker, image, _i;
    iconMaker = new IconMaker(SceneManager);
    for (color = _i = 0; _i <= 12; color = ++_i) {
      image = new Image();
      colorName = PaletteManager.voxelName(color);
      image.src = iconMaker.renderVoxel(VoxelFactory.freshVoxel(colorName, false));
      $img = $(image);
      $img.attr('data-color', '' + color);
      $img.addClass('color');
      $("i.color[data-color=" + color + "]").replaceWith($img);
    }
    return iconMaker.dispose();
  };
  cameraHandlers = function(id, cameraManager) {
    var updateLabel;
    updateLabel = function() {
      var label, phi, theta, _ref;
      _ref = cameraManager.getRotation(), theta = _ref.theta, phi = _ref.phi;
      theta = Math.round(theta / 180).mod(4);
      label = (function() {
        switch (theta) {
          case 0:
            return 'X';
          case 1:
            return 'Z';
          case 2:
            return '-X';
          case 3:
            return '-Z';
          default:
            return '??';
        }
      })();
      return $("#" + id + " .axis-label").text(label);
    };
    updateLabel();
    setInterval(updateLabel, 1000);
    $("#" + id + " .axis-label").on('click', function() {
      var phi, theta, _ref;
      _ref = cameraManager.getRotation(), theta = _ref.theta, phi = _ref.phi;
      theta += 360;
      if (theta >= 720) {
        theta -= 720;
      }
      cameraManager.rotateCameraTo(theta, phi);
      return updateLabel();
    });
    $("#" + id + " .rotate-left").on('click', function() {
      var phi, theta, _ref;
      _ref = cameraManager.getRotation(), theta = _ref.theta, phi = _ref.phi;
      theta -= 180;
      if (theta < 0) {
        theta += 720;
      }
      cameraManager.rotateCameraTo(theta, phi);
      return updateLabel();
    });
    $("#" + id + " .rotate-right").on('click', function() {
      var phi, theta, _ref;
      _ref = cameraManager.getRotation(), theta = _ref.theta, phi = _ref.phi;
      theta += 180;
      if (theta >= 720) {
        theta -= 720;
      }
      cameraManager.rotateCameraTo(theta, phi);
      return updateLabel();
    });
    $("#" + id + " .zoom-in").on('click', function() {
      return cameraManager.zoom(100);
    });
    return $("#" + id + " .zoom-out").on('click', function() {
      return cameraManager.zoom(-100);
    });
  };
  cameraHandlers('axis-camera-controls', AxisCamera);
  cameraHandlers('main-camera-controls', MainCamera);
  $('#axis-camera-controls .rotate-main').on('click', function() {
    var phi, theta, _ref;
    _ref = AxisCamera.getRotation(), theta = _ref.theta, phi = _ref.phi;
    return MainCamera.rotateCameraTo(theta, phi);
  });
  showWelcome = function() {
    var seenWelcome;
    seenWelcome = localStorage.getItem("seenWelcome");
    if (seenWelcome) {
      return $("#welcome").modal();
    }
    localStorage.setItem("seenWelcome", true);
  };
  addColorToPalette = function(idx) {
    var base, clone, colorBox;
    colorBox = $("i[data-color=\"" + idx + "\"]");
    if (!colorBox.length) {
      base = $(".colorAddButton");
      clone = base.clone();
      clone.removeClass("colorAddButton");
      clone.addClass("colorPickButton");
      colorBox = clone.find(".colorAdd");
      colorBox.removeClass("colorAdd");
      colorBox.addClass("color");
      colorBox.attr("data-color", idx);
      colorBox.text("");
      base.before(clone);
      clone.click(function(e) {
        pickColor(e);
        e.preventDefault();
      });
      clone.on("contextmenu", changeColor);
    }
    colorBox.parent().attr("data-color", "#" + ColorUtils.rgb2hex(ColorManager.colors[idx]));
    colorBox.css("background", "#" + ColorUtils.rgb2hex(ColorManager.colors[idx]));
    if (ColorManager.currentColor === idx && SceneManager.brush) {
      SceneManager.brush.children[0].material.color.setRGB(ColorManager.colors[idx][0], ColorManager.colors[idx][1], ColorManager.colors[idx][2]);
    }
  };
  addColor = function(e) {
    var idx;
    ColorManager.colors.push([0.0, 0.0, 0.0]);
    idx = ColorManager.colors.length - 1;
    ColorManager.currentColor = idx;
    addColorToPalette(idx);
    HashManager.updateHash();
    updateColor(idx);
  };
  updateColor = function(idx) {
    var picker;
    ColorManager.currentColor = idx;
    picker = $("i[data-color=\"" + idx + "\"]").parent().colorpicker("show");
    picker.on("changeColor", function(e) {
      ColorManager.colors[idx] = ColorUtils.hex2rgb(e.color.toHex());
      addColorToPalette(idx);
      SceneManager.scene.children.filter(function(el) {
        return el.isVoxel;
      }).map(function(mesh) {
        SceneManager.scene.remove(mesh.wireMesh);
        SceneManager.scene.remove(mesh);
      });
      HashManager.buildFromHash();
    });
    picker.on("hide", function(e) {
      picker.unbind("click.colorpicker");
    });
  };
  changeColor = function(e) {
    var idx, targetEl;
    targetEl = $(e.currentTarget);
    idx = +targetEl.find(".color").attr("data-color");
    updateColor(idx);
    return false;
  };
  pickColor = function(e) {
    var idx, sort, targetEl, x, x1, x2, y, y1, y2, z, z1, z2, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
    targetEl = $(e.currentTarget);
    idx = +targetEl.find(".color").attr("data-color");
    ColorManager.currentColor = idx;
    SceneManager.brush.children[0].material.color.setRGB(ColorManager.colors[idx][0], ColorManager.colors[idx][1], ColorManager.colors[idx][2]);
    if (Input.startPosition && Input.endPosition) {
      sort = function(a, b) {
        if (a < b) {
          return [a, b];
        }
        return [b, a];
      };
      _ref = Input.startPosition, x1 = _ref.x, y1 = _ref.y, z1 = _ref.z;
      _ref1 = Input.endPosition, x2 = _ref1.x, y2 = _ref1.y, z2 = _ref1.z;
      Input.startPosition = null;
      Input.endPosition = null;
      Interactions.removeRectangle();
      _ref2 = sort(x1, x2), x1 = _ref2[0], x2 = _ref2[1];
      _ref3 = sort(y1, y2), y1 = _ref3[0], y2 = _ref3[1];
      _ref4 = sort(z1, z2), z1 = _ref4[0], z2 = _ref4[1];
      for (x = _i = x1, _ref5 = 16 / 16; _ref5 > 0 ? _i <= x2 : _i >= x2; x = _i += _ref5) {
        for (y = _j = y1, _ref6 = 16 / 16; _ref6 > 0 ? _j <= y2 : _j >= y2; y = _j += _ref6) {
          for (z = _k = z1, _ref7 = 16 / 16; _ref7 > 0 ? _k <= z2 : _k >= z2; z = _k += _ref7) {
            SceneManager.addVoxel(x, y, z, idx);
          }
        }
      }
    }
  };
  bindEventsAndPlugins = function() {
    var actionsMenu;
    $(window).on("hashchange", function() {
      if (updatingHash) {
        return localStorage.setItem("seenWelcome", true);
      }
      window.location.reload();
    });
    $(".colorPickButton").click(pickColor);
    $(".colorPickButton").on("contextmenu", changeColor);
    $(".colorAddButton").click(addColor);
    $(".toggle input").click(function(e) {
      setTimeout((function() {
        var el, state;
        el = $(e.target).parent();
        state = !el.hasClass("toggle-off");
        exports[el.attr("data-action")](state);
      }), 0);
    });
    actionsMenu = $(".actionsMenu");
    actionsMenu.dropkick({
      change: function(value, label) {
        if (value === "noop") {
          return;
        }
        if (value in exports) {
          exports[value]();
        }
        setTimeout((function() {
          actionsMenu.dropkick("reset");
        }), 0);
      }
    });
    $("[data-toggle=tooltip]").tooltip("show");
    $("#tagsinput").tagsInput();
    $("input, textarea").placeholder();
    $(".btn-group").on("click", "a", function() {
      $(this).siblings().removeClass("active");
      $(this).addClass("active");
    });
    $("a[href='#']").click(function(e) {
      e.preventDefault();
    });
  };
  init = function() {
    bindEventsAndPlugins();
    container = document.getElementById("editor-area");
    SceneManager.prepare(container);
    exportImage();
    SceneManager.init(container);
    container.appendChild(SceneManager.renderer.domElement);
    KeyMouse.attachEvents();
    if (window.location.hash) {
      HashManager.buildFromHash();
    }
    HashManager.updateHash();
  };
  exportFunction = function(voxels) {
    var dimensions, funcString;
    dimensions = getDimensions(voxels);
    voxels = voxels.map(function(v) {
      return [v.x, v.y, v.z, v.c];
    });
    funcString = "var voxels = " + JSON.stringify(voxels) + ";";
    funcString += "var dimensions = " + JSON.stringify(dimensions) + ";";
    funcString += "voxels.map(function(voxel) {" + "if (colorMapper(voxel[3])) { addBlock([position.x + voxel[0], position.y + voxel[1], position.z + voxel[2]], colorMapper(voxel[3])) }" + "});";
    return funcString;
  };
  getDimensions = function(voxels) {
    var high, low;
    low = [0, 0, 0];
    high = [0, 0, 0];
    voxels.map(function(voxel) {
      if (voxel.x < low[0]) {
        low[0] = voxel.x;
      }
      if (voxel.x > high[0]) {
        high[0] = voxel.x;
      }
      if (voxel.y < low[1]) {
        low[1] = voxel.y;
      }
      if (voxel.y > high[1]) {
        high[1] = voxel.y;
      }
      if (voxel.z < low[2]) {
        low[2] = voxel.z;
      }
      if (voxel.z > high[2]) {
        high[2] = voxel.z;
      }
    });
    return [(high[0] - low[0]) || 1, (high[1] - low[1]) || 1, (high[2] - low[2]) || 1];
  };
  c = 0;
  while (c < 12) {
    addColorToPalette(c);
    c++;
  }
  showWelcome();
  setTimeout(init, 2000);
  raf(window).on("data", function() {
    return SceneManager.render();
  });
  exports.viewInstructions = function() {
    $("#welcome").modal();
  };
  exports.reset = function() {
    window.location.replace("#/");
    SceneManager.scene.children.filter(function(el) {
      return el.isVoxel;
    }).map(function(mesh) {
      SceneManager.scene.remove(mesh);
    });
  };
  exports.setColor = function(idx) {
    $("i[data-color=\"" + idx + "\"]").click();
  };
  exports.showGrid = function(bool) {
    SceneManager.grid.material.visible = bool;
  };
  $(".play-level").attr("href", "http://philschatz.com/game/" + window.location.hash);
  window.exportMap = function() {
    var voxels, voxelsReal;
    voxels = SceneManager.scene.children.filter(function(el) {
      return el.isVoxel;
    });
    voxelsReal = voxels.map(function(v) {
      return {
        x: (v.position.x - 8) / (16 / 16),
        y: (v.position.y - 8) / (16 / 16),
        z: (v.position.z - 8) / (16 / 16),
        c: v.wireMesh.material.color.getHexString()
      };
    });
    console.log(exportFunction(voxelsReal));
  };
};



},{"./export-geometry":1,"./src/editor/axis-camera":102,"./src/editor/color-manager":103,"./src/editor/color-utils":104,"./src/editor/hash-manager":105,"./src/editor/icon-maker":106,"./src/editor/input-manager":107,"./src/editor/interactions":108,"./src/editor/key-mouse-handlers":109,"./src/editor/scene-manager":110,"./src/game":124,"./src/main-camera":128,"./src/voxels/palette-manager":130,"./src/voxels/texture-cube":131,"./src/voxels/voxel-factory":137,"raf":38}],101:[function(require,module,exports){
var MainCamera;

module.exports = MainCamera = (function() {
  function MainCamera() {}

  MainCamera.prototype.radius = (16 / 16) * 100;

  MainCamera.prototype._theta = 0;

  MainCamera.prototype._phi = 0;

  MainCamera.prototype._target = null;

  MainCamera.prototype.init = function(_scene, camera, container, _target) {
    this._scene = _scene;
    this.camera = camera;
    this.container = container;
    this._target = _target;
  };

  MainCamera.prototype.getRotation = function() {
    return {
      theta: this._theta,
      phi: this._phi
    };
  };

  MainCamera.prototype.setTarget = function(_target) {
    this._target = _target;
  };

  MainCamera.prototype.zoom = function(delta) {
    var aspect, distance, origin, tooClose, tooFar;
    origin = {
      x: 0,
      y: 0,
      z: 0
    };
    delta = -delta / 50;
    distance = this.camera.position.distanceTo(origin);
    tooFar = distance > 200;
    tooClose = Math.abs(this.camera.top) < 5;
    if (delta > 0 && tooFar) {
      return;
    }
    if (delta < 0 && tooClose) {
      return;
    }
    this.radius = distance;
    aspect = this.container.clientWidth / this.container.clientHeight;
    this.camera.top += delta / 2;
    this.camera.bottom -= delta / 2;
    this.camera.left -= delta * aspect / 2;
    this.camera.right += delta * aspect / 2;
    this.camera.updateProjectionMatrix();
    this.camera.translateZ(delta);
  };

  MainCamera.prototype.rotateCameraTo = function(theta, phi) {
    if (theta == null) {
      theta = this._theta;
    }
    if (phi == null) {
      phi = this._phi;
    }
    this._theta = theta;
    this._phi = phi;
    return this.updateCamera();
  };

  MainCamera.prototype.updateCamera = function() {
    this.camera.position.x = this._target.x + this.radius * Math.sin(this._theta * Math.PI / 360) * Math.cos(this._phi * Math.PI / 360);
    this.camera.position.y = this._target.y + this.radius * Math.sin(this._phi * Math.PI / 360);
    this.camera.position.z = this._target.z + this.radius * Math.cos(this._theta * Math.PI / 360) * Math.cos(this._phi * Math.PI / 360);
    return this.camera.updateMatrix();
  };

  MainCamera.prototype.setRaycaster = function(raycaster) {
    this.raycaster = raycaster;
  };

  MainCamera.prototype.getIntersecting = function() {
    var intersect, intersectable, intersections;
    intersectable = [];
    this._scene.children.map(function(c) {
      if (c.isVoxel || c.isPlane || c.isWireMesh) {
        intersectable.push(c);
      }
    });
    if (this.raycaster) {
      intersections = this.raycaster.intersectObjects(intersectable);
      if (intersections.length > 0) {
        intersect = (intersections[0].object.isBrush ? intersections[1] : intersections[0]);
        return intersect;
      }
    }
  };

  return MainCamera;

})();



},{}],102:[function(require,module,exports){
var CameraManager;

CameraManager = require('../camera-manager');

window.axisCamera = module.exports = new CameraManager();



},{"../camera-manager":101}],103:[function(require,module,exports){
var ColorUtils, colors;

ColorUtils = require('./color-utils');

colors = ['000000', '2ECC71', '3498DB', '34495E', 'E67E22', 'ECF0F1', 'FFF160', 'FF0000', '00FF38', 'BD00FF', '08c9ff', 'D32020', 'FFFF00'].map(function(c) {
  return ColorUtils.hex2rgb(c);
});

module.exports = {
  colors: colors,
  currentColor: 0
};



},{"./color-utils":104}],104:[function(require,module,exports){
function v2h(value) {
  value = parseInt(value).toString(16)
  return value.length < 2 ? '0' + value : value
}

module.exports = {

  rgb2hex: function (rgb) {
    return v2h( rgb[ 0 ] * 255 ) + v2h( rgb[ 1 ] * 255 ) + v2h( rgb[ 2 ] * 255 );
  },

  hex2rgb: function (hex) {
    if(hex[0]=='#') hex = hex.substr(1)
    return [parseInt(hex.substr(0,2), 16)/255, parseInt(hex.substr(2,2), 16)/255, parseInt(hex.substr(4,2), 16)/255]
  }
}

},{}],105:[function(require,module,exports){
var HashManager, SceneManager, decode, encode;

SceneManager = require('./scene-manager');

decode = function(string) {
  var output;
  output = [];
  string.split('').forEach(function(v) {
    output.push('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.indexOf(v));
  });
  return output;
};

encode = function(array) {
  var output;
  output = '';
  array.forEach(function(v) {
    output += 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.charAt(v);
  });
  return output;
};

module.exports = new (HashManager = (function() {
  function HashManager() {}

  HashManager.prototype.disableUpdateHash = function() {
    return this._disableUpdateHash = true;
  };

  HashManager.prototype.updateHash = function() {
    var animationFrames, cData, code, current, currentFrame, data, i, last, object, outHash, voxels;
    if (this._disableUpdateHash) {
      return;
    }
    currentFrame = 0;
    animationFrames = [];
    data = [];
    voxels = [];
    code = void 0;
    current = {
      x: 0,
      y: 0,
      z: 0,
      c: 0
    };
    last = {
      x: 0,
      y: 0,
      z: 0,
      c: 0
    };
    for (i in SceneManager.scene.children) {
      object = SceneManager.scene.children[i];
      if (object.isVoxel && object !== SceneManager.plane && object !== SceneManager.brush) {
        current.x = (object.position.x - (16 / 16) / 2) / (16 / 16);
        current.y = (object.position.y - (16 / 16) / 2) / (16 / 16);
        current.z = (object.position.z - (16 / 16) / 2) / (16 / 16);
        current.c = object.colorCode;
        i = 0;
        voxels.push({
          x: current.x,
          y: current.y + 1,
          z: current.z,
          c: current.c + 1
        });
        code = 0;
        if (current.x !== last.x) {
          code += 1000;
        }
        if (current.y !== last.y) {
          code += 100;
        }
        if (current.z !== last.z) {
          code += 10;
        }
        if (current.c !== last.c) {
          code += 1;
        }
        code += 10000;
        data.push(parseInt(code, 2));
        if (current.x !== last.x) {
          data.push(current.x - last.x + 32);
          last.x = current.x;
        }
        if (current.y !== last.y) {
          data.push(current.y - last.y + 32);
          last.y = current.y;
        }
        if (current.z !== last.z) {
          data.push(current.z - last.z + 32);
          last.z = current.z;
        }
        if (current.c !== last.c) {
          data.push(current.c - last.c + 32);
          last.c = current.c;
        }
      }
    }
    data = encode(data);
    animationFrames[currentFrame] = data;
    cData = '';
    outHash = '#' + (cData ? 'C/' + cData : '');
    i = 0;
    while (i < animationFrames.length) {
      if (i === 0) {
        outHash = outHash + ':A/' + animationFrames[i];
      } else {
        outHash = outHash + ':A' + i + '/' + animationFrames[i];
      }
      i++;
    }
    window.updatingHash = true;
    window.location.replace(outHash);
    $('.play-level').attr('href', 'http://philschatz.com/game/' + outHash);
    setTimeout((function() {
      window.updatingHash = false;
    }), 1);
    return voxels;
  };

  HashManager.prototype.buildFromHash = function() {
    var animationFrames, c, chunk, chunks, code, current, data, frameMask, hash, hashChunks, hashMask, hex, hexColors, i, j, l, n, nC;
    hashMask = null;
    hash = window.location.hash.substr(1);
    hashChunks = hash.split(':');
    chunks = {};
    animationFrames = [];
    j = 0;
    n = hashChunks.length;
    while (j < n) {
      chunk = hashChunks[j].split('/');
      chunks[chunk[0]] = chunk[1];
      if (chunk[0].charAt(0) === 'A') {
        animationFrames.push(chunk[1]);
      }
      j++;
    }
    if ((!hashMask || hashMask === 'C') && chunks['C']) {
      hexColors = chunks['C'];
      c = 0;
      nC = hexColors.length / 6;
      while (c < nC) {
        hex = hexColors.substr(c * 6, 6);
        addColorToPalette(c);
        c++;
      }
    }
    frameMask = 'A';
    if ((!hashMask || hashMask === frameMask) && chunks[frameMask]) {
      current = {
        x: 0,
        y: 0,
        z: 0,
        c: 0
      };
      data = decode(chunks[frameMask]);
      i = 0;
      l = data.length;
      while (i < l) {
        code = data[i++].toString(2);
        if (code.charAt(1) === '1') {
          current.x += data[i++] - 32;
        }
        if (code.charAt(2) === '1') {
          current.y += data[i++] - 32;
        }
        if (code.charAt(3) === '1') {
          current.z += data[i++] - 32;
        }
        if (code.charAt(4) === '1') {
          current.c += data[i++] - 32;
        }
        if (code.charAt(0) === '1') {
          if (current.c < 0) {
            throw new Error('BUG: no negative colors');
          }
          SceneManager.addVoxel(current.x * (16 / 16) + (16 / 16) / 2, current.y * (16 / 16) + (16 / 16) / 2, current.z * (16 / 16) + (16 / 16) / 2, current.c);
        }
      }
    }
    this.updateHash();
  };

  return HashManager;

})());



},{"./scene-manager":110}],106:[function(require,module,exports){
var IconMaker, THREE;

THREE = require('../three');

module.exports = IconMaker = (function() {
  IconMaker.prototype.width = 64;

  IconMaker.prototype.height = 64;

  function IconMaker(SceneManager) {
    this.scene = SceneManager.scene;
    this.camera = new THREE.OrthographicCamera((16 / 16) / -2, (16 / 16) / 2, (16 / 16) / -2, (16 / 16) / 2, 1, 1000);
    this.camera.aspect = this.width / this.height;
    this.camera.position.z = -(16 / 16) * 10;
    this.ambient = new THREE.AmbientLight(0x606060);
    this.scene.add(this.ambient);
    this.renderer = SceneManager.renderer;
    this.renderer.setSize(this.width, this.height);
    this.renderer.setClearColor(new THREE.Color().setRGB(1, 1, 1));
    this.canvas = document.createElement('canvas');
    this.canvas.width = this.width;
    this.canvas.height = this.height;
    this.ctx = this.canvas.getContext('2d');
  }

  IconMaker.prototype.dispose = function() {
    this.scene.remove(this.ambient);
    delete this.ambient;
    delete this.scene;
    delete this.camera;
    delete this.renderer;
    delete this.canvas;
    return delete this.ctx;
  };

  IconMaker.prototype.renderVoxel = function(voxel) {
    this.scene.add(voxel);
    this.camera.lookAt(voxel.position);
    this.renderer.render(this.scene, this.camera);
    this.scene.remove(voxel);
    this.ctx.drawImage(this.renderer.domElement, 0, 0, this.width, this.height);
    return this.canvas.toDataURL();
  };

  IconMaker.prototype.renderImage = function(voxel) {
    var data, img;
    data = this.renderVoxel(voxel);
    img = new Image();
    img.src = data;
    return img;
  };

  return IconMaker;

})();



},{"../three":129}],107:[function(require,module,exports){
var THREE;

THREE = require('../three');

module.exports = {
  isShiftDown: false,
  isCtrlDown: false,
  isMouseRotating: false,
  isMouseDown: false,
  isAltDown: false,
  onMouseDownPosition: new THREE.Vector2(),
  onMouseDownPhi: 60,
  onMouseDownTheta: 45,
  mouse2D: new THREE.Vector3(0, 10000, 0.5),
  startPosition: null,
  endPosition: null
};



},{"../three":129}],108:[function(require,module,exports){
var ColorManager, Input, Interactions, MainCamera, SceneManager, THREE;

THREE = require('../three');

ColorManager = require('./color-manager');

MainCamera = require('../main-camera');

Input = require('./input-manager');

SceneManager = require('./scene-manager');

module.exports = new (Interactions = (function() {
  function Interactions() {}

  Interactions.prototype.removeRectangle = function() {
    if (this.rectangle) {
      return SceneManager.scene.remove(this.rectangle);
    }
  };

  Interactions.prototype.interact = function() {
    var bbox, brushMaterials, cube, depth, height, intersect, matrixRotationWorld, newCube, normal, position, updateBrush, width, x1, x2, y1, y2, z1, z2, _ref, _ref1, _ref2;
    if (!MainCamera.raycaster) {
      return;
    }
    if (this._objectHovered) {
      this._objectHovered.material.opacity = 1;
      this._objectHovered = null;
    }
    intersect = MainCamera.getIntersecting();
    if (intersect) {
      normal = intersect.face.normal.clone();
      matrixRotationWorld = new THREE.Matrix4();
      matrixRotationWorld.extractRotation(intersect.object.matrixWorld);
      normal.applyMatrix4(matrixRotationWorld);
      position = new THREE.Vector3().addVectors(intersect.object.position, normal);
      updateBrush = function() {
        SceneManager.brush.position.x = Math.floor(position.x / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
        SceneManager.brush.position.y = Math.floor(position.y / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
        SceneManager.brush.position.z = Math.floor(position.z / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
      };
      if (Input.isAltDown) {
        newCube = [Math.floor(position.x / (16 / 16)), Math.floor(position.y / (16 / 16)), Math.floor(position.z / (16 / 16))];
        if (!SceneManager.brush.currentCube) {
          SceneManager.brush.currentCube = newCube;
        }
        if (SceneManager.brush.currentCube.join('') !== newCube.join('')) {
          if (Input.isShiftDown) {
            if (intersect.object !== SceneManager.plane) {
              SceneManager.scene.remove(intersect.object.wireMesh);
              SceneManager.scene.remove(intersect.object);
            }
          } else {
            if (SceneManager.brush.position.y !== 2000) {
              SceneManager.addVoxel(SceneManager.brush.position.x, SceneManager.brush.position.y, SceneManager.brush.position.z, ColorManager.currentColor);
            }
          }
        }
        updateBrush();
        HashManager.updateHash();
        SceneManager.brush.currentCube = newCube;
        return;
      } else if (Input.isShiftDown) {
        if (intersect.object !== SceneManager.plane) {
          this._objectHovered = intersect.object;
          this._objectHovered.material.opacity = 0.5;
          SceneManager.brush.position.y = 2000;
          return;
        }
      } else if (Input.startPosition && Input.isMouseDown) {
        this.removeRectangle();
        x1 = Math.floor(Input.startPosition.x / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
        y1 = Math.floor(Input.startPosition.y / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
        z1 = Math.floor(Input.startPosition.z / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
        x2 = Math.floor(position.x / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
        y2 = Math.floor(position.y / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
        z2 = Math.floor(position.z / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
        Input.endPosition = {
          x: x2,
          y: y2,
          z: z2
        };
        bbox = function(x1, x2) {
          if (x1 <= x2) {
            return [x1 - (16 / 16) / 2, x2 + (16 / 16) / 2];
          } else {
            return [x1 + (16 / 16) / 2, x2 - (16 / 16) / 2];
          }
        };
        _ref = bbox(x1, x2), x1 = _ref[0], x2 = _ref[1];
        _ref1 = bbox(y1, y2), y1 = _ref1[0], y2 = _ref1[1];
        _ref2 = bbox(z1, z2), z1 = _ref2[0], z2 = _ref2[1];
        width = Math.abs(x2 - x1);
        height = Math.abs(y2 - y1);
        depth = Math.abs(z2 - z1);
        cube = new THREE.BoxGeometry(width, height, depth);
        brushMaterials = [
          new THREE.MeshBasicMaterial({
            vertexColors: THREE.VertexColors,
            opacity: 0.5,
            transparent: true
          }), new THREE.MeshBasicMaterial({
            color: 0x000000,
            wireframe: true
          })
        ];
        brushMaterials[0].color.setRGB(0, 0, 0);
        this.rectangle = THREE.SceneUtils.createMultiMaterialObject(cube, brushMaterials);
        this.rectangle.position.set((x2 - x1) / 2 + x1, (y2 - y1) / 2 + y1, (z2 - z1) / 2 + z1);
        SceneManager.scene.add(this.rectangle);
      } else {
        updateBrush();
        return;
      }
    }
    SceneManager.brush.position.y = 2000;
  };

  return Interactions;

})());



},{"../main-camera":128,"../three":129,"./color-manager":103,"./input-manager":107,"./scene-manager":110}],109:[function(require,module,exports){
var ColorManager, HashManager, Input, Interactions, KeyMouseHandlers, MainCamera, SceneManager, setIsometricAngle;

ColorManager = require('./color-manager');

MainCamera = require('../main-camera');

SceneManager = require('./scene-manager');

Interactions = require('./interactions');

Input = require('./input-manager');

HashManager = require('./hash-manager');

setIsometricAngle = function() {
  var phi, theta;
  theta = Math.floor((MainCamera.getRotation().theta + 180) / 180) * 180;
  phi = 0;
  MainCamera.rotateCameraTo(theta, phi);
};

module.exports = new (KeyMouseHandlers = (function() {
  var translateVoxels;

  function KeyMouseHandlers() {}

  KeyMouseHandlers.prototype.mousewheel = function(event) {
    if ($('.modal').hasClass('in')) {
      return;
    }
    return MainCamera.zoom(event.wheelDeltaY || event.detail);
  };

  KeyMouseHandlers.prototype.onWindowResize = function() {
    MainCamera.camera.aspect = MainCamera.container.clientWidth / MainCamera.container.clientHeight;
    MainCamera.camera.updateProjectionMatrix();
    SceneManager.renderer.setSize(MainCamera.container.clientWidth, MainCamera.container.clientHeight);
    Interactions.interact();
  };

  KeyMouseHandlers.prototype.onDocumentMouseMove = function(event) {
    var intersecting, phi, theta;
    event.preventDefault();
    if (!Input.isMouseRotating) {
      intersecting = MainCamera.getIntersecting();
      if (!intersecting) {
        MainCamera.container.classList.add('rotatable');
      } else {
        MainCamera.container.classList.remove('rotatable');
      }
    }
    if (Input.isMouseRotating) {
      if (!intersecting) {
        theta = -((event.clientX - Input.onMouseDownPosition.x) * 0.5) + Input.onMouseDownTheta;
        phi = ((event.clientY - Input.onMouseDownPosition.y) * 0.5) + Input.onMouseDownPhi;
        phi = Math.min(180, Math.max(-90, phi));
        MainCamera.rotateCameraTo(theta, phi);
      }
    }
    Input.mouse2D.x = (event.clientX / MainCamera.container.clientWidth) * 2 - 1;
    Input.mouse2D.y = -(event.clientY / MainCamera.container.clientHeight) * 2 + 1;
    Interactions.interact();
  };

  KeyMouseHandlers.prototype.onDocumentMouseDown = function(event) {
    var intersect, matrixRotationWorld, normal, phi, position, theta, _ref;
    event.preventDefault();
    Input.isMouseDown = event.which;
    _ref = MainCamera.getRotation(), theta = _ref.theta, phi = _ref.phi;
    Input.onMouseDownTheta = theta;
    Input.onMouseDownPhi = phi;
    Input.onMouseDownPosition.x = event.clientX;
    Input.onMouseDownPosition.y = event.clientY;
    Input.startPosition = null;
    Input.endPosition = null;
    Interactions.removeRectangle();
    intersect = MainCamera.getIntersecting();
    if (intersect) {
      normal = intersect.face.normal.clone();
      matrixRotationWorld = new THREE.Matrix4();
      matrixRotationWorld.extractRotation(intersect.object.matrixWorld);
      normal.applyMatrix4(matrixRotationWorld);
      position = new THREE.Vector3().addVectors(intersect.object.position, normal);
      position.x = Math.floor(position.x / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
      position.y = Math.floor(position.y / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
      position.z = Math.floor(position.z / (16 / 16)) * (16 / 16) + (16 / 16) / 2;
      Input.startPosition = position;
      Input.isMouseRotating = false;
    } else {
      Input.startPosition = null;
      Input.isMouseRotating = Input.isMouseDown === 1;
    }
  };

  KeyMouseHandlers.prototype.onDocumentMouseUp = function(event) {
    var color, intersect, obj, x, y, z, _ref;
    event.preventDefault();
    Input.isMouseDown = false;
    Input.isMouseRotating = false;
    Input.onMouseDownPosition.x = event.clientX - Input.onMouseDownPosition.x;
    Input.onMouseDownPosition.y = event.clientY - Input.onMouseDownPosition.y;
    if (Input.onMouseDownPosition.length() > 5) {
      return;
    }
    intersect = MainCamera.getIntersecting();
    if (intersect) {
      if (Input.isShiftDown) {
        if (intersect.object !== SceneManager.plane) {
          if (intersect.object.isWireMesh) {
            obj = intersect.object.myVoxel;
          } else {
            obj = intersect.object;
          }
          if (obj.wireMesh) {
            SceneManager.scene.remove(obj.wireMesh);
          }
          SceneManager.scene.remove(obj);
        }
      } else {
        _ref = SceneManager.brush.position, x = _ref.x, y = _ref.y, z = _ref.z;
        color = ColorManager.currentColor;
        if (y !== 2000) {
          SceneManager.addVoxel(x, y, z, color);
        }
      }
    }
    HashManager.updateHash();
    SceneManager.render();
    Interactions.interact();
  };

  translateVoxels = function(vector) {
    var child, _i, _len, _ref, _ref1;
    _ref = SceneManager.scene.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (child.isVoxel) {
        child.position.addVectors(child.position, vector);
        if ((_ref1 = child.wireMesh) != null) {
          _ref1.position.addVectors(child.wireMesh.position, vector);
        }
      }
    }
    return HashManager.updateHash();
  };

  KeyMouseHandlers.prototype.onDocumentKeyDown = function(event) {
    switch (event.keyCode) {
      case 189:
        return MainCamera.zoom(-100);
      case 187:
        return MainCamera.zoom(100);
      case 'A'.charCodeAt(0):
        if (Input.isShiftDown) {
          return translateVoxels(new THREE.Vector3(-(16 / 16), 0, 0));
        }
        break;
      case 'D'.charCodeAt(0):
        if (Input.isShiftDown) {
          return translateVoxels(new THREE.Vector3(16 / 16, 0, 0));
        }
        break;
      case 'W'.charCodeAt(0):
        if (Input.isShiftDown) {
          return translateVoxels(new THREE.Vector3(0, 16 / 16, 0));
        }
        break;
      case 'S'.charCodeAt(0):
        if (Input.isShiftDown) {
          return translateVoxels(new THREE.Vector3(0, -(16 / 16), 0));
        }
        break;
      case 'Q'.charCodeAt(0):
        if (Input.isShiftDown) {
          return translateVoxels(new THREE.Vector3(0, 0, -(16 / 16)));
        }
        break;
      case 'E'.charCodeAt(0):
        if (Input.isShiftDown) {
          return translateVoxels(new THREE.Vector3(0, 0, 16 / 16));
        }
        break;
      case 17 - 1:
        return Input.isShiftDown = true;
      case 17:
        return Input.isCtrlDown = true;
      case 18:
        return Input.isAltDown = true;
      case 65:
        return setIsometricAngle();
    }
  };

  KeyMouseHandlers.prototype.onDocumentKeyUp = function(event) {
    switch (event.keyCode) {
      case 16 / 16:
        return Input.isShiftDown = false;
      case 17:
        return Input.isCtrlDown = false;
      case 18:
        return Input.isAltDown = false;
    }
  };

  KeyMouseHandlers.prototype.attachEvents = function() {
    SceneManager.renderer.domElement.addEventListener('mousemove', this.onDocumentMouseMove, false);
    SceneManager.renderer.domElement.addEventListener('mousedown', this.onDocumentMouseDown, false);
    SceneManager.renderer.domElement.addEventListener('mouseup', this.onDocumentMouseUp, false);
    document.addEventListener('keydown', this.onDocumentKeyDown, false);
    document.addEventListener('keyup', this.onDocumentKeyUp, false);
    window.addEventListener('DOMMouseScroll', this.mousewheel, false);
    window.addEventListener('mousewheel', this.mousewheel, false);
    return window.addEventListener('resize', this.onWindowResize, false);
  };

  return KeyMouseHandlers;

})());



},{"../main-camera":128,"./color-manager":103,"./hash-manager":105,"./input-manager":107,"./interactions":108,"./scene-manager":110}],110:[function(require,module,exports){
var AxisCamera, InputManager, MainCamera, PaletteManager, SceneManager, THREE, VoxelFactory;

MainCamera = require('../main-camera');

AxisCamera = require('./axis-camera');

PaletteManager = require('../voxels/palette-manager');

VoxelFactory = require('../voxels/voxel-factory');

THREE = require('../three');

InputManager = require('./input-manager');

module.exports = new (SceneManager = (function() {
  function SceneManager() {}

  SceneManager.prototype.renderer = null;

  SceneManager.prototype.brush = null;

  SceneManager.prototype.scene = null;

  SceneManager.prototype.plane = null;

  SceneManager.prototype._container = null;

  SceneManager.prototype._camera = null;

  SceneManager.prototype._target = new THREE.Vector3(0, 4 * (16 / 16), 0);

  SceneManager.prototype._CubeMaterial = THREE.MeshBasicMaterial;

  SceneManager.prototype._cube = new THREE.BoxGeometry(16 / 16, 16 / 16, 16 / 16);

  SceneManager.prototype._axisCamera = null;

  SceneManager.prototype._projector = null;

  SceneManager.prototype._size = (16 / 16) * 10;

  SceneManager.prototype._step = 16 / 16;

  SceneManager.prototype._showWireframe = true;

  SceneManager.prototype.prepare = function(_container) {
    var hasWebGL;
    this._container = _container;
    window.scene = this.scene = new THREE.Scene();
    hasWebGL = (function() {
      var e;
      try {
        return !!window.WebGLRenderingContext && !!document.createElement('canvas').getContext('experimental-webgl');
      } catch (_error) {
        e = _error;
        return false;
      }
    })();
    if (hasWebGL) {
      this.renderer = new THREE.WebGLRenderer({
        antialias: true
      });
    } else {
      this.renderer = new THREE.CanvasRenderer();
    }
    return this.renderer.setSize(this._container.clientWidth, this._container.clientHeight);
  };

  SceneManager.prototype.init = function(_container) {
    var brushMaterials, geometry, height, i, material, width;
    this._container = _container;
    this.renderer.setSize(this._container.clientWidth, this._container.clientHeight);
    width = 50;
    height = width * (this._container.clientHeight / this._container.clientWidth);
    this._camera = new THREE.OrthographicCamera(-1 * width, 1 * width, 1 * height, -1 * height, 1, 1000);
    MainCamera.init(this.scene, this._camera, this._container, this._target);
    MainCamera.updateCamera({
      x: 0,
      y: 0,
      z: 0
    });
    this._axisCamera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 1000);
    AxisCamera.init(this.scene, this._axisCamera, this._container, this._target);
    AxisCamera.updateCamera({
      x: 0,
      y: 0,
      z: 0
    });
    geometry = new THREE.Geometry();
    i = -this._size;
    while (i <= this._size) {
      geometry.vertices.push(new THREE.Vector3(-this._size, 0, i));
      geometry.vertices.push(new THREE.Vector3(this._size, 0, i));
      geometry.vertices.push(new THREE.Vector3(i, 0, -this._size));
      geometry.vertices.push(new THREE.Vector3(i, 0, this._size));
      i += this._step;
    }
    material = new THREE.LineBasicMaterial({
      color: 0x000000,
      opacity: 0.2
    });
    this.grid = new THREE.Line(geometry, material);
    this.grid.type = THREE.LinePieces;
    this.scene.add(this.grid);
    this._projector = new THREE.Projector();
    this.plane = new THREE.Mesh(new THREE.PlaneGeometry(20 * (16 / 16), 20 * (16 / 16)), new THREE.MeshBasicMaterial());
    this.plane.rotation.x = -Math.PI / 2;
    this.plane.visible = false;
    this.plane.isPlane = true;
    this.plane.name = 'plane';
    this.scene.add(this.plane);
    brushMaterials = [
      new this._CubeMaterial({
        vertexColors: THREE.VertexColors,
        opacity: 0.5,
        transparent: true
      }), new THREE.MeshBasicMaterial({
        color: 0x000000,
        wireframe: true
      })
    ];
    brushMaterials[0].color.setRGB(0, 0, 0);
    this.brush = THREE.SceneUtils.createMultiMaterialObject(this._cube, brushMaterials);
    this.brush.isBrush = true;
    this.brush.position.y = 2000;
    this.brush.overdraw = false;
    return this.scene.add(this.brush);
  };

  SceneManager.prototype.addVoxel = function(x, y, z, color) {
    var colorName, voxel, wireframeCube, wireframeMaterial, wireframeOptions;
    wireframeCube = new THREE.BoxGeometry((16 / 16) + .5, (16 / 16) + .5, (16 / 16) + .5);
    wireframeOptions = {
      color: 0xEEEEEE,
      wireframe: true,
      wireframeLinewidth: 1,
      opacity: 0.05
    };
    wireframeMaterial = new THREE.MeshBasicMaterial(wireframeOptions);
    colorName = PaletteManager.voxelName(color);
    voxel = VoxelFactory.freshVoxel(colorName, true);
    voxel.isVoxel = true;
    voxel.colorCode = color;
    voxel.position.x += x;
    voxel.position.y += y;
    voxel.position.z += z;
    if (voxel.wireMesh) {
      voxel.wireMesh.position.x = x;
      voxel.wireMesh.position.y = y;
      voxel.wireMesh.position.z = z;
      voxel.wireMesh.visible = this._showWireframe;
    }
    voxel.matrixAutoUpdate = false;
    voxel.updateMatrix();
    if (voxel.name == null) {
      voxel.name = x + ',' + y + ',' + z;
    }
    voxel.overdraw = true;
    this.scene.add(voxel);
    if (voxel.wireMesh) {
      this.scene.add(voxel.wireMesh);
    }
  };

  SceneManager.prototype.render = function() {
    var bottom, height, left, view, width, windowHeight, windowWidth;
    if (!this._camera) {
      return console.warn('Trying to render scene before initialized');
    }
    windowWidth = this._container.clientWidth;
    windowHeight = this._container.clientHeight;
    this._camera.lookAt(this._target);
    MainCamera.setRaycaster(this._projector.pickingRay(InputManager.mouse2D.clone(), this._camera));
    this.renderer.setViewport(0, 0, windowWidth, windowHeight);
    this.renderer.setScissor(0, 0, windowWidth, windowHeight);
    this.renderer.enableScissorTest(false);
    this.renderer.setClearColor(new THREE.Color().setRGB(1, 1, 1));
    this.renderer.render(this.scene, this._camera);
    view = {
      left: 3 / 4,
      bottom: 0,
      width: 1 / 4,
      height: 1 / 3,
      background: new THREE.Color().setRGB(0.5, 0.5, 0.7)
    };
    left = Math.floor(windowWidth * view.left);
    bottom = Math.floor(windowHeight * view.bottom);
    width = Math.floor(windowWidth * view.width);
    height = Math.floor(windowHeight * view.height);
    this.renderer.setViewport(left, bottom, width, height);
    this.renderer.setScissor(left, bottom, width, height);
    this.renderer.enableScissorTest(true);
    this.renderer.setClearColor(view.background);
    this._axisCamera.lookAt(this._target);
    this.renderer.render(this.scene, this._axisCamera);
  };

  SceneManager.prototype.setTarget = function(mesh) {
    this._target = mesh.position;
    MainCamera.setTarget(this._target);
    return AxisCamera.setTarget(this._target);
  };

  return SceneManager;

})());



},{"../main-camera":128,"../three":129,"../voxels/palette-manager":130,"../voxels/voxel-factory":137,"./axis-camera":102,"./input-manager":107}],111:[function(require,module,exports){
var Climbing, MovementHelper;

MovementHelper = require('./movement-helper');

module.exports = new (Climbing = (function() {
  function Climbing() {}

  Climbing.prototype.isAllowed = function(PlayerManager, ActionTypes, game) {
    switch (PlayerManager.currentAction()) {
      case this:
        return true;
      case null:
      case ActionTypes.IDLE:
      case ActionTypes.JUMPING:
      case ActionTypes.WALKING:
      case ActionTypes.RUNNING:
        return (window.game.buttons.forward || window.game.buttons.backward) && MovementHelper.isClimbing();
    }
  };

  Climbing.prototype.begin = function() {};

  Climbing.prototype.end = function() {};

  Climbing.prototype.act = function(elapsedTime, ActionTypes, game) {};

  Climbing.prototype.isAnimationLooping = function() {
    return false;
  };

  Climbing.prototype.disallowsRespawns = function() {
    return false;
  };

  Climbing.prototype.preventsRotations = function() {
    return true;
  };

  return Climbing;

})());



},{"./movement-helper":115}],112:[function(require,module,exports){
var GameManager, PaletteManager;

PaletteManager = require('../../voxels/palette-manager');

GameManager = new (GameManager = (function() {
  function GameManager() {}

  GameManager.prototype.DEBUG = false;

  GameManager.prototype._loadMax = 50;

  GameManager.prototype._cachedInfo = null;

  GameManager.prototype._getGame = function() {
    return window.game;
  };

  GameManager.prototype._getBlock = function(coord) {
    return this._getGame().getBlock(coord);
  };

  GameManager.prototype.load = function() {
    var B, a, aboveColor, b, collideEnd, collideStart, dir, multiplier, myColor, pos, type, wallDepth, wallType, y, _i, _results;
    this._sparseCollisionMap = [{}, {}, {}, {}];
    _results = [];
    for (dir = _i = 0; _i <= 3; dir = ++_i) {
      multiplier = dir < 2 ? -1 : 1;
      _results.push((function() {
        var _j, _ref, _results1;
        _results1 = [];
        for (y = _j = 0, _ref = this._loadMax; 0 <= _ref ? _j <= _ref : _j >= _ref; y = 0 <= _ref ? ++_j : --_j) {
          _results1.push((function() {
            var _k, _l, _ref1, _ref2, _ref3, _ref4, _ref5, _results2;
            _results2 = [];
            for (a = _k = _ref1 = -this._loadMax, _ref2 = this._loadMax; _ref1 <= _ref2 ? _k <= _ref2 : _k >= _ref2; a = _ref1 <= _ref2 ? ++_k : --_k) {
              wallDepth = null;
              type = null;
              collideStart = null;
              collideEnd = null;
              for (b = _l = _ref3 = -this._loadMax, _ref4 = this._loadMax; _ref3 <= _ref4 ? _l <= _ref4 : _l >= _ref4; b = _ref3 <= _ref4 ? ++_l : --_l) {
                B = b * multiplier;
                if (dir % 2 === 0) {
                  pos = [a, y, B];
                }
                if (dir % 2 === 1) {
                  pos = [B, y, a];
                }
                myColor = this._getBlock(pos);
                if ((wallDepth == null) && myColor) {
                  wallDepth = B;
                  wallType = PaletteManager.collisionFor(myColor);
                }
                pos[1] = y + 1;
                aboveColor = this._getBlock(pos);
                if (myColor && (collideStart == null) && !aboveColor) {
                  type = PaletteManager.collisionFor(myColor);
                  if (type === 'top' || type === 'all') {
                    collideStart = B;
                  }
                }
                if (aboveColor && (collideStart != null) && collideStart !== B && (collideEnd == null)) {
                  collideEnd = B - multiplier;
                }
                if (!aboveColor) {
                  if ((collideStart != null) && collideStart !== B && (collideEnd == null)) {
                    if (myColor) {
                      type = PaletteManager.collisionFor(myColor);
                      if (type !== 'top' && type !== 'all') {
                        collideEnd = B - multiplier;
                      }
                    } else {
                      collideEnd = B - multiplier;
                    }
                  }
                }
              }
              if (wallDepth != null) {
                if (!(((collideStart != null) && (collideEnd != null)) || ((collideStart == null) && (collideEnd == null)))) {
                  throw new Error('BUG: collideStart should always have a matching collideEnd');
                }
                if (collideEnd != null) {
                  if (!(collideStart <= collideEnd)) {
                    _ref5 = [collideEnd, collideStart], collideStart = _ref5[0], collideEnd = _ref5[1];
                  }
                }
                _results2.push(this._sparseCollisionMap[dir]["" + y + "|" + a] = {
                  wallDepth: wallDepth,
                  wallType: wallType,
                  collideStart: collideStart,
                  collideEnd: collideEnd
                });
              } else {
                _results2.push(void 0);
              }
            }
            return _results2;
          }).call(this));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  GameManager.prototype._clearDebugVoxels = function() {
    var debugs, item, _i, _j, _len, _len1, _ref, _results;
    if (!this.DEBUG) {
      return;
    }
    if (window.scene == null) {
      return;
    }
    debugs = [];
    _ref = window.scene.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (item.isDebug) {
        debugs.push(item);
      }
    }
    _results = [];
    for (_j = 0, _len1 = debugs.length; _j < _len1; _j++) {
      item = debugs[_j];
      _results.push(window.scene.remove(item));
    }
    return _results;
  };

  GameManager.prototype._addDebugVoxel = function(_arg, c) {
    var color, size, voxel, wireframeCube, wireframeMaterial, wireframeOptions, x, y, z;
    x = _arg[0], y = _arg[1], z = _arg[2];
    if (!this.DEBUG) {
      return;
    }
    if (window.scene == null) {
      return;
    }
    color = (function() {
      switch (c) {
        case 1:
          return 0xFF0000;
        case 2:
          return 0x999999;
        case 3:
          return 0x333333;
        default:
          return 0x0000FF;
      }
    })();
    size = (16 / 16) + .5 + 2 * ((c - 1) * .2);
    wireframeCube = new THREE.BoxGeometry(size, size, size);
    wireframeOptions = {
      color: color,
      wireframe: true,
      wireframeLinewidth: 1,
      opacity: .5
    };
    wireframeMaterial = new THREE.MeshBasicMaterial(wireframeOptions);
    voxel = new THREE.Mesh(wireframeCube, wireframeMaterial);
    voxel.isDebug = true;
    voxel.position.x = x + size / 2;
    voxel.position.y = y + size / 2;
    voxel.position.z = z + size / 2;
    return window.scene.add(voxel);
  };

  GameManager.prototype.invalidateCache = function() {
    return this._cachedInfo = null;
  };

  GameManager.prototype.get2DInfo = function() {
    var a, axis, coord, dir, info, key, multiplier, perpendicAxis, y, _ref, _ref1;
    if (this._cachedInfo) {
      return this._cachedInfo;
    }
    dir = this._getGame().controlling.rotation.y / Math.PI * 2;
    dir = Math.round(dir).mod(4);
    multiplier = 1;
    if (dir >= 2) {
      multiplier = -1;
    }
    if (dir.mod(2) === 0) {
      axis = 0;
      perpendicAxis = 2;
    } else {
      axis = 2;
      perpendicAxis = 0;
    }
    this._cachedInfo = {
      axis: axis,
      perpendicAxis: perpendicAxis,
      dir: dir,
      multiplier: multiplier
    };
    this._clearDebugVoxels();
    coord = [null, null, null];
    _ref = this._sparseCollisionMap[dir];
    for (key in _ref) {
      info = _ref[key];
      _ref1 = key.split('|'), y = _ref1[0], a = _ref1[1];
      y = parseInt(y);
      a = parseInt(a);
      coord[1] = y;
      coord[axis] = a;
      if (info.wallDepth != null) {
        coord[perpendicAxis] = info.wallDepth;
        this._addDebugVoxel(coord, 1);
      }
      if (info.collideEnd) {
        if (info.wallDepth === info.collideStart) {
          coord[perpendicAxis] = info.collideEnd;
        } else {
          coord[perpendicAxis] = info.collideStart;
        }
        this._addDebugVoxel(coord, 2);
      }
    }
    return this._cachedInfo;
  };

  GameManager.prototype.getFlattenedInfo = function(coords, isReversed) {
    var x, y, z;
    x = coords[0], y = coords[1], z = coords[2];
    return this.getFlattenedInfoCoords(x, y, z, isReversed);
  };

  GameManager.prototype.getFlattenedInfoCoords = function(x, y, z, isReversed) {
    var a, axis, dir, perpendicAxis, _ref;
    _ref = this.get2DInfo(), axis = _ref.axis, perpendicAxis = _ref.perpendicAxis, dir = _ref.dir;
    a = (function() {
      switch (axis) {
        case 0:
          return x;
        case 2:
          return z;
        default:
          throw new Error('Invalid Axis');
      }
    })();
    a = Math.floor(a);
    y = Math.floor(y);
    if (isReversed) {
      dir = (dir + 2) % 4;
    }
    return this._sparseCollisionMap[dir]["" + y + "|" + a] || {};
  };

  GameManager.prototype.blockTypeAt = function(coords) {
    var color;
    color = this._getBlock(coords);
    if (color) {
      return PaletteManager.collisionFor(color);
    } else {
      return void 0;
    }
  };

  return GameManager;

})());

module.exports = window.GameManager = GameManager;



},{"../../voxels/palette-manager":130}],113:[function(require,module,exports){
var Idle, MovementHelper;

MovementHelper = require('./movement-helper');

module.exports = new (Idle = (function() {
  function Idle() {}

  Idle.prototype.isAllowed = function(PlayerManager, ActionTypes, game) {
    switch (PlayerManager.currentAction()) {
      case this:
        return true;
      case null:
      case ActionTypes.JUMPING:
      case ActionTypes.WALKING:
      case ActionTypes.RUNNING:
        return PlayerManager.isGrounded() && !MovementHelper.isWalking() && !PlayerManager.pushingInstance;
    }
  };

  Idle.prototype.begin = function() {};

  Idle.prototype.end = function() {};

  Idle.prototype.act = function(elapsedTime, ActionTypes, game) {};

  Idle.prototype.isAnimationLooping = function() {
    return false;
  };

  Idle.prototype.disallowsRespawns = function() {
    return false;
  };

  Idle.prototype.preventsRotations = function() {
    return true;
  };

  return Idle;

})());



},{"./movement-helper":115}],114:[function(require,module,exports){
var Jumping, MovementHelper;

MovementHelper = require('./movement-helper');

module.exports = new (Jumping = (function() {
  function Jumping() {}

  Jumping.prototype.isAllowed = function(PlayerManager, ActionTypes, game) {
    switch (PlayerManager.currentAction()) {
      case this:
        return true;
      case null:
      case ActionTypes.IDLE:
      case ActionTypes.SLIDING:
      case ActionTypes.CLIMBING:
      case ActionTypes.TEETERING:
      case ActionTypes.GRABBING:
      case ActionTypes.PUSHING:
      case ActionTypes.LOOKING_AROUND:
      case ActionTypes.WALKING:
      case ActionTypes.RUNNING:
        return MovementHelper.isJumping();
    }
  };

  Jumping.prototype.begin = function() {};

  Jumping.prototype.end = function() {};

  Jumping.prototype.act = function() {};

  return Jumping;

})());



},{"./movement-helper":115}],115:[function(require,module,exports){
var GameManager, MovementHelper;

GameManager = require('./game-manager');

module.exports = new (MovementHelper = (function() {
  function MovementHelper() {}

  MovementHelper.prototype.isWalking = function() {
    var state;
    state = window.game.controls.state;
    return state.left || state.right;
  };

  MovementHelper.prototype.isRunning = function() {
    return false;
  };

  MovementHelper.prototype.isJumping = function() {
    var state;
    state = window.game.controls.state;
    return state.jump || window.game.controlling.velocity.y > 0;
  };

  MovementHelper.prototype.isClimbing = function() {
    var collideEnd, collideStart, playerBase, state, wallDepth, wallType, _ref, _ref1;
    state = window.game.controls.state;
    playerBase = window.game.controlling.aabb().base;
    if (state.forward) {
      _ref = GameManager.getFlattenedInfo(playerBase), wallDepth = _ref.wallDepth, wallType = _ref.wallType, collideStart = _ref.collideStart, collideEnd = _ref.collideEnd;
      return wallType === 'ladder';
    } else if (state.backward) {
      _ref1 = GameManager.getFlattenedInfo(playerBase), wallDepth = _ref1.wallDepth, wallType = _ref1.wallType, collideStart = _ref1.collideStart, collideEnd = _ref1.collideEnd;
      return wallType === 'ladder';
    }
  };

  return MovementHelper;

})());



},{"./game-manager":112}],116:[function(require,module,exports){
var ActionTypes, PlayerManager;

ActionTypes = require('./types');

module.exports = new (PlayerManager = (function() {
  function PlayerManager() {}

  PlayerManager.prototype._currentAction = null;

  PlayerManager.prototype._isGrounded = true;

  PlayerManager.prototype.pushingInstance = null;

  PlayerManager.prototype.isGrounded = function() {
    return this._isGrounded;
  };

  PlayerManager.prototype.changeAction = function(actionType) {
    var _ref;
    if (!actionType) {
      return;
    }
    if (this._currentAction !== actionType) {
      if ((_ref = this._currentAction) != null) {
        _ref.end();
      }
      this._currentAction = actionType;
      return this._currentAction.begin();
    }
  };

  PlayerManager.prototype.currentAction = function() {
    return this._currentAction;
  };

  PlayerManager.prototype.tick = function(elapsedTime, game) {
    var actionType, name, _ref;
    for (name in ActionTypes) {
      actionType = ActionTypes[name];
      if (this.currentAction() === actionType) {
        continue;
      }
      if (actionType.isAllowed(this, ActionTypes, game)) {
        this.changeAction(actionType);
      }
    }
    return this.changeAction((_ref = this.currentAction()) != null ? _ref.act(elapsedTime, ActionTypes, game) : void 0);
  };

  PlayerManager.prototype.reset = function() {
    return this.changeAction(ActionTypes.IDLE);
  };

  PlayerManager.prototype.isClimbing = function() {
    return this.currentAction() === ActionTypes.CLIMBING;
  };

  return PlayerManager;

})());



},{"./types":118}],117:[function(require,module,exports){
var MovementHelper, Running;

MovementHelper = require('./movement-helper');

module.exports = new (Running = (function() {
  function Running() {}

  Running.prototype.isAllowed = function(PlayerManager, ActionTypes) {
    switch (PlayerManager.currentAction()) {
      case this:
        return true;
      case ActionTypes.WALKING:
        return PlayerManager.isGrounded() && MovementHelper.isRunning() && !PlayerManager.pushingInstance;
    }
  };

  Running.prototype.begin = function() {};

  Running.prototype.end = function() {};

  Running.prototype.act = function(elapsedTime, ActionTypes) {
    return this;
  };

  return Running;

})());



},{"./movement-helper":115}],118:[function(require,module,exports){
var ActionTypes;

module.exports = ActionTypes = {
  IDLE: require('./idle'),
  WALKING: require('./walking'),
  RUNNING: require('./running'),
  JUMPING: require('./jumping'),
  CLIMBING: require('./climbing')
};


/* State Diagram:

Idle -> LookingAround, Walking, Jumping, Pushing, Climbing, Rotating, Floating (if Falling is not possible)
LookingAround -> ...

Walking -> Idle, Jumping, Pushing, Running, Climbing
Running -> Idle, Jumping, Pushing, Climbing
Jumping -> Idle, Walking, Climbing

Climbing -> Idle, Traversing, Jumping
Traversing -> Idle, Climbing, Jumping
Rotating -> Idle

Floating -> Jumping, Climbing
 */


/* Disallowed keys for various states

Idle -
LookingAround -
Walking - A,D
Running - A,D
Jumping - A,D
Climbing -
Traversing - A,D
Rotating - forward,backward,left,right,jump
Floating - forward,backward

Note: A level (game) can also set this list and they get anded together
 */



},{"./climbing":111,"./idle":113,"./jumping":114,"./running":117,"./walking":119}],119:[function(require,module,exports){
var MovementHelper, Walking;

MovementHelper = require('./movement-helper');

module.exports = new (Walking = (function() {
  function Walking() {}

  Walking.prototype.isAllowed = function(PlayerManager, ActionTypes, game) {
    switch (PlayerManager.currentAction()) {
      case this:
        return true;
      case null:
      case ActionTypes.IDLE:
      case ActionTypes.SLIDING:
      case ActionTypes.TEETERING:
      case ActionTypes.GRABBING:
      case ActionTypes.PUSHING:
      case ActionTypes.LOOKING_AROUND:
      case ActionTypes.RUNNING:
        return PlayerManager.isGrounded() && MovementHelper.isWalking() && !MovementHelper.isJumping() && !PlayerManager.pushingInstance;
    }
  };

  Walking.prototype.begin = function() {};

  Walking.prototype.end = function() {};

  Walking.prototype.act = function(elapsedTime, ActionTypes, game) {
    if (MovementHelper.isRunning()) {
      return ActionTypes.RUNNING;
    }
    return this;
  };

  Walking.prototype.isAnimationLooping = function() {
    return false;
  };

  Walking.prototype.disallowsRespawns = function() {
    return false;
  };

  Walking.prototype.preventsRotations = function() {
    return true;
  };

  return Walking;

})());



},{"./movement-helper":115}],120:[function(require,module,exports){
var GameManager, PlayerManager, axes, desiredVectorCoords, isPlayerBehind, tmpCoord, _;

_ = require('underscore');

GameManager = require('../actions/game-manager');

PlayerManager = require('../actions/player-manager');

isPlayerBehind = function(multiplier, playerDepth, depth) {
  if (depth == null) {
    return false;
  }
  return multiplier * (playerDepth - depth) < 0;
};

tmpCoord = [null, null, null];

axes = ['x', 'y', 'z'];

desiredVectorCoords = [null, null, null];

module.exports = function(other, bbox, desired_vector, resting) {
  var hit, self;
  self = this;
  desiredVectorCoords[0] = desired_vector.x;
  desiredVectorCoords[1] = desired_vector.y;
  desiredVectorCoords[2] = desired_vector.z;
  hit = function(collisionAxis, tile, coords, dir, edge) {
    var axis, collideEnd, collideStart, isBehindWall, isBehindWallMultiplier, isCameraAxis, isHit, isVelocityAxis, multiplier, newCoords, newDepth, perpendicAxis, playerBase, playerDepth, scaleJustToBeSafe, setNewDepth, wallDepth, wallType, y, _ref, _ref1, _ref2, _ref3, _ref4;
    if (coords[1] < -2) {
      console.warn('You died by falling too much');
      return true;
    }
    isHit = false;
    y = coords[1];
    _ref = GameManager.get2DInfo(), perpendicAxis = _ref.perpendicAxis, multiplier = _ref.multiplier, axis = _ref.axis;
    isCameraAxis = axis === collisionAxis;
    isVelocityAxis = desiredVectorCoords[collisionAxis] !== 0;
    playerBase = this.controlling.aabb().base;
    playerDepth = Math.floor(playerBase[perpendicAxis]);
    newDepth = playerDepth;
    scaleJustToBeSafe = 1.5;
    setNewDepth = function(depth) {
      if (Math.floor(depth) !== Math.floor(newDepth)) {
        return newDepth = Math.floor(depth);
      }
    };
    if (isVelocityAxis) {
      wallDepth = GameManager.getFlattenedInfo(playerBase).wallDepth;
      isBehindWall = isPlayerBehind(multiplier, playerDepth, wallDepth) && !isPlayerBehind(-1 * multiplier, playerDepth, (_ref1 = GameManager.getFlattenedInfo(playerBase, true)) != null ? _ref1.wallDepth : void 0);
      isBehindWallMultiplier = isBehindWall ? -1 : 1;
      _ref2 = GameManager.getFlattenedInfo(coords, isBehindWall), wallDepth = _ref2.wallDepth, wallType = _ref2.wallType, collideStart = _ref2.collideStart, collideEnd = _ref2.collideEnd;
      if (PlayerManager.isClimbing()) {
        if (playerBase[collisionAxis] !== coords[collisionAxis]) {
          _ref3 = GameManager.getFlattenedInfoCoords(coords[0], coords[1], coords[2], isBehindWall), wallType = _ref3.wallType, wallDepth = _ref3.wallDepth;
          if (wallType === 'ladder') {
            setNewDepth(wallDepth);
          } else {
            isHit = true;
            desiredVectorCoords[collisionAxis] = desired_vector[axes[collisionAxis]] = 0;
            other.velocity[axes[collisionAxis]] = 0;
            other.acceleration[axes[collisionAxis]] = 0;
            resting[axes[collisionAxis]] = 1;
            other.friction[axes[(collisionAxis + 1) % 3]] = other.friction[axes[(collisionAxis + 2) % 3]] = 1;
            return true;
          }
        }
      } else {
        if (collisionAxis === 1 && dir === 1) {

        } else if (collisionAxis === 1 && dir === -1 && coords[1] <= playerBase[1] + dir) {
          if (collideStart != null) {
            isHit = true;
            if ((collideStart <= playerDepth && playerDepth <= collideEnd)) {
              setNewDepth(playerDepth);
            } else if (playerDepth < collideStart) {
              setNewDepth(collideStart);
            } else if (playerDepth > collideEnd) {
              setNewDepth(collideEnd);
            }
          } else if (wallType === 'top' || wallType === 'all') {
            isHit = true;
            setNewDepth(wallDepth);
          }
        } else if (isCameraAxis) {
          _ref4 = GameManager.getFlattenedInfoCoords(coords[0], y - 1, coords[2], isBehindWall), collideStart = _ref4.collideStart, collideEnd = _ref4.collideEnd;
          if (collideStart != null) {
            if ((collideStart <= playerDepth && playerDepth <= collideEnd)) {
              setNewDepth(playerDepth);
            } else if (playerDepth < collideStart) {
              setNewDepth(collideStart);
            } else if (playerDepth > collideEnd) {
              setNewDepth(collideEnd);
            }
          }
          if ((wallDepth != null) && (collideStart == null)) {
            setNewDepth(wallDepth + multiplier * isBehindWallMultiplier);
          }
        }
      }
    }
    if ((newDepth != null) && Math.floor(newDepth) !== Math.floor(playerDepth)) {
      newCoords = playerBase;
      console.log('moving from:', playerBase);
      newCoords[perpendicAxis] = Math.floor(newDepth) + .5;
      console.log('moving to  :', newCoords);
      this.controlling.moveTo(newCoords[0], newCoords[1], newCoords[2]);
    }
    if (!isHit) {
      return;
    }
    if (Math.abs(desiredVectorCoords[collisionAxis]) < Math.abs(edge)) {
      return;
    }
    desiredVectorCoords[collisionAxis] = desired_vector[axes[collisionAxis]] = edge;
    other.acceleration[axes[collisionAxis]] = 0;
    resting[axes[collisionAxis]] = dir;
    other.friction[axes[(collisionAxis + 1) % 3]] = other.friction[axes[(collisionAxis + 2) % 3]] = (collisionAxis === 1 ? self.friction : 1);
    return true;
  };
  this.collideVoxels(bbox, desiredVectorCoords, hit.bind(this));
};



},{"../actions/game-manager":112,"../actions/player-manager":116,"underscore":39}],121:[function(require,module,exports){
module.exports = function(field, tilesize, dimensions, offset) {
  var collide, coords;
  collide = function(box, vec, oncollision) {
    var collideaxis;
    collideaxis = function(i_axis) {
      var dir, done, edge, edge_vector, i, i_end, i_start, j, j_axis, j_end, j_start, k, k_axis, k_end, k_start, leading, posi, step, tile;
      j_axis = (i_axis + 1) % 3;
      k_axis = (i_axis + 2) % 3;
      posi = vec[i_axis] > 0;
      leading = box[(posi ? "max" : "base")][i_axis];
      dir = (posi ? 1 : -1);
      i_start = Math.floor(leading / tilesize);
      i_end = (Math.floor((leading + vec[i_axis]) / tilesize)) + dir;
      j_start = Math.floor(box.base[j_axis] / tilesize);
      j_end = Math.ceil(box.max[j_axis] / tilesize);
      k_start = Math.floor(box.base[k_axis] / tilesize);
      k_end = Math.ceil(box.max[k_axis] / tilesize);
      done = false;
      edge_vector = void 0;
      edge = void 0;
      tile = void 0;
      step = 0;
      i = i_start;
      while (!done && i !== i_end) {
        if (i < offset[i_axis] || i >= dimensions[i_axis]) {
          continue;
        }
        j = j_start;
        while (!done && j !== j_end) {
          if (j < offset[j_axis] || j >= dimensions[j_axis]) {
            continue;
          }
          k = k_start;
          while (k !== k_end) {
            if (k < offset[k_axis] || k >= dimensions[k_axis]) {
              continue;
            }
            coords[i_axis] = i;
            coords[j_axis] = j;
            coords[k_axis] = k;
            edge = (dir > 0 ? i * tilesize : (i + 1) * tilesize);
            edge_vector = edge - leading;
            if (oncollision(i_axis, tile, coords, dir, edge_vector)) {
              done = true;
              break;
            }
            ++k;
          }
          ++j;
        }
        ++step;
        i += dir;
      }
      coords[0] = coords[1] = coords[2] = 0;
      coords[i_axis] = vec[i_axis];
      box.translate(coords);
    };
    if (vec[0] === 0 && vec[1] === 0 && vec[2] === 0) {
      return;
    }
    collideaxis(0);
    collideaxis(1);
    collideaxis(2);
  };
  dimensions = dimensions || [Math.sqrt(field.length) >> 0, Math.sqrt(field.length) >> 0, Math.sqrt(field.length) >> 0];
  offset = offset || [0, 0, 0];
  field = (typeof field === "function" ? field : (function(x, y, z) {
    return this[x + y * dimensions[1] + (z * dimensions[1] * dimensions[2])];
  }).bind(field));
  coords = void 0;
  coords = [0, 0, 0];
  return collide;
};



},{}],122:[function(require,module,exports){
var ActionTypes, PI, PlayerManager, abs, clamp, floor, max, min, sin, tick;

PlayerManager = require('../actions/player-manager');

ActionTypes = require('../actions/types');

max = Math.max;

min = Math.min;

sin = Math.sin;

abs = Math.abs;

floor = Math.floor;

PI = Math.PI;

clamp = function(value, to) {
  if (isFinite(to)) {
    return max(min(value, to), -to);
  } else {
    return value;
  }
};

module.exports = tick = function(dt) {
  var at_rest, can_fire, jump_speed, okay_x, okay_z, pitch_target, roll_target, speed, state, target, x_rotation, y_rotation, yaw_target, z_rotation;
  if (!this._target) {
    return;
  }
  state = this.state;
  target = this._target;
  speed = this.speed;
  jump_speed = this.jump_speed;
  if (PlayerManager.isClimbing()) {
    target.velocity.x = 0;
    target.velocity.y = 0;
    target.velocity.z = 0;
    target.resting.y = true;
    if (state.forward) {
      target.velocity.y = this.max_speed / 3;
      target.resting.y = false;
    } else if (state.backward) {
      target.velocity.y = -this.max_speed / 3;
      target.resting.y = false;
    } else if (state.left) {
      target.velocity.x = -this.max_speed / 3;
    } else if (state.right) {
      target.velocity.x = this.max_speed / 3;
    }
    if (state.jump) {
      PlayerManager.changeAction(ActionTypes.JUMPING);
      target.resting.y = false;
      this.jumping = true;
      if (this.jump_timer > 0) {
        target.velocity.y = min(target.velocity.y + jump_speed * min(dt, this.jump_timer), this.jump_max_speed);
      }
      this.jump_timer = this.jump_max_timer;
    } else {
      this.jumping = false;
    }
    this.jump_timer = (at_rest < 0 ? this.jump_max_timer : this.jump_timer);
  } else {
    okay_z = abs(target.velocity.z) < this.max_speed;
    okay_x = abs(target.velocity.x) < this.max_speed;
    at_rest = target.atRestY();
    if (!this._target) {
      return;
    }
    if (state.forward || state.backward) {
      this.z_accel_timer = max(0, this.z_accel_timer - dt);
    }
    if (state.left || state.right) {
      this.x_accel_timer = max(0, this.x_accel_timer - dt);
    }
    if (state.right) {
      if (target.velocity.x < this.max_speed) {
        target.velocity.x = max(min(this.max_speed, speed * dt * this.acceleration(this.x_accel_timer, this.accel_max_timer)), target.velocity.x);
      }
    } else if (state.left) {
      if (target.velocity.x > -this.max_speed) {
        target.velocity.x = min(max(-this.max_speed, -speed * dt * this.acceleration(this.x_accel_timer, this.accel_max_timer)), target.velocity.x);
      }
    } else {
      this.x_accel_timer = this.accel_max_timer;
    }
    if (state.jump) {
      if (!this.jumping && !at_rest) {

      } else if (at_rest > 0) {
        this.jumping = false;
      } else {
        this.jumping = true;
        if (this.jump_timer > 0) {
          target.velocity.y = min(target.velocity.y + jump_speed * min(dt, this.jump_timer), this.jump_max_speed);
        }
        this.jump_timer = max(this.jump_timer - dt, 0);
      }
    } else {
      this.jumping = false;
    }
    this.jump_timer = (at_rest < 0 ? this.jump_max_timer : this.jump_timer);
    can_fire = true;
    if (state.fire || state.firealt) {
      if (this.firing && this.needs_discrete_fire) {
        this.firing += dt;
      } else {
        if (!this.fire_rate || floor(this.firing / this.fire_rate) !== floor((this.firing + dt) / this.fire_rate)) {
          this.onfire(state);
        }
        this.firing += dt;
      }
    } else {
      this.firing = 0;
    }
    x_rotation = this.state.x_rotation_accum * this.rotation_scale;
    y_rotation = this.state.y_rotation_accum * this.rotation_scale;
    z_rotation = this.state.z_rotation_accum * this.rotation_scale;
    pitch_target = this._pitch_target;
    yaw_target = this._yaw_target;
    roll_target = this._roll_target;
    pitch_target.rotation.x = clamp(pitch_target.rotation.x + clamp(x_rotation, this.x_rotation_per_ms), this.x_rotation_clamp);
    yaw_target.rotation.y = clamp(yaw_target.rotation.y + clamp(y_rotation, this.y_rotation_per_ms), this.y_rotation_clamp);
    roll_target.rotation.z = clamp(roll_target.rotation.z + clamp(z_rotation, this.z_rotation_per_ms), this.z_rotation_clamp);
    if (this.listeners("data").length) {
      this.emitUpdate();
    }
    this.state.x_rotation_accum = this.state.y_rotation_accum = this.state.z_rotation_accum = 0;
  }
};



},{"../actions/player-manager":116,"../actions/types":118}],123:[function(require,module,exports){
var DESIRED, DIRECTION, END, LOCAL_ATTRACTOR, Physical, PlayerManager, START, THREE, TOTAL_FORCES, WORLD_DESIRED, aabb, abs, applyTo, axes, cons, physical, proto;

THREE = require('../../three');

PlayerManager = require('../actions/player-manager');

aabb = require('aabb-3d');

physical = function(avatar, collidables, dimensions, terminal) {
  return new Physical(avatar, collidables, dimensions, terminal);
};

Physical = function(avatar, collidables, dimensions, terminal) {
  this.avatar = avatar;
  this.terminal = terminal || new THREE.Vector3(30, 5.6, 30);
  this.dimensions = dimensions = dimensions || [1, 1, 1];
  this._aabb = aabb([0, 0, 0], dimensions);
  this.resting = {
    x: false,
    y: false,
    z: false
  };
  this.collidables = collidables;
  this.friction = new THREE.Vector3(1, 1, 1);
  this.rotation = this.avatar.rotation;
  this.default_friction = 1;
  this.yaw = this.pitch = this.roll = avatar;
  this.forces = new THREE.Vector3(0, 0, 0);
  this.attractors = [];
  this.acceleration = new THREE.Vector3(0, 0, 0);
  this.velocity = new THREE.Vector3(0, 0, 0);
  return this;
};

applyTo = function(which) {
  return function(world) {
    var local;
    local = this.avatar.worldToLocal(world);
    this[which].x += local.x;
    this[which].y += local.y;
    this[which].z += local.z;
  };
};

module.exports = physical;

cons = Physical;

proto = cons.prototype;

axes = ['x', 'y', 'z'];

abs = Math.abs;

WORLD_DESIRED = new THREE.Vector3(0, 0, 0);

DESIRED = new THREE.Vector3(0, 0, 0);

START = new THREE.Vector3(0, 0, 0);

END = new THREE.Vector3(0, 0, 0);

DIRECTION = new THREE.Vector3();

LOCAL_ATTRACTOR = new THREE.Vector3();

TOTAL_FORCES = new THREE.Vector3();

proto.applyWorldAcceleration = applyTo('acceleration');

proto.applyWorldVelocity = applyTo('velocity');

proto.tick = function(dt) {
  var acceleration, bbox, desired, distance_factor, forces, friction, i, len, pcs, terminal, velocity, world_desired;
  forces = this.forces;
  acceleration = this.acceleration;
  velocity = this.velocity;
  terminal = this.terminal;
  friction = this.friction;
  desired = DESIRED;
  world_desired = WORLD_DESIRED;
  bbox = void 0;
  pcs = void 0;
  TOTAL_FORCES.multiplyScalar(0);
  desired.x = desired.y = desired.z = world_desired.x = world_desired.y = world_desired.z = 0;
  i = 0;
  while (i < this.attractors.length) {
    distance_factor = this.avatar.position.distanceToSquared(this.attractors[i]);
    LOCAL_ATTRACTOR.copy(this.attractors[i]);
    LOCAL_ATTRACTOR = this.avatar.worldToLocal(LOCAL_ATTRACTOR);
    DIRECTION.sub(LOCAL_ATTRACTOR, this.avatar.position);
    DIRECTION.divideScalar(DIRECTION.length() * distance_factor);
    DIRECTION.multiplyScalar(this.attractors[i].mass);
    TOTAL_FORCES.addSelf(DIRECTION);
    i++;
  }
  if (!this.resting.x) {
    acceleration.x /= 8 * dt;
    acceleration.x += TOTAL_FORCES.x * dt;
    acceleration.x += forces.x * dt;
    velocity.x += acceleration.x * dt;
    velocity.x *= friction.x;
    if (abs(velocity.x) < terminal.x) {
      desired.x = velocity.x * dt;
    } else {
      if (velocity.x !== 0) {
        desired.x = (velocity.x / abs(velocity.x)) * terminal.x;
      }
    }
  } else {
    acceleration.x = velocity.x = 0;
  }
  if (!this.resting.y) {
    acceleration.y /= 8 * dt;
    acceleration.y += TOTAL_FORCES.y * dt;
    acceleration.y += forces.y * dt;
    if (PlayerManager.isClimbing()) {
      acceleration.y = 0;
    }
    velocity.y += acceleration.y * dt;
    velocity.y *= friction.y;
    if (abs(velocity.y) < terminal.y) {
      desired.y = velocity.y * dt;
    } else {
      if (velocity.y !== 0) {
        desired.y = (velocity.y / abs(velocity.y)) * terminal.y;
      }
    }
  } else {
    acceleration.y = velocity.y = 0;
  }
  if (!this.resting.z) {
    acceleration.z /= 8 * dt;
    acceleration.z += TOTAL_FORCES.z * dt;
    acceleration.z += forces.z * dt;
    velocity.z += acceleration.z * dt;
    velocity.z *= friction.z;
    if (abs(velocity.z) < terminal.z) {
      desired.z = velocity.z * dt;
    } else {
      if (velocity.z !== 0) {
        desired.z = (velocity.z / abs(velocity.z)) * terminal.z;
      }
    }
  } else {
    acceleration.z = velocity.z = 0;
  }
  START.copy(this.avatar.position);
  this.avatar.translateX(desired.x);
  this.avatar.translateY(desired.y);
  this.avatar.translateZ(desired.z);
  END.copy(this.avatar.position);
  this.avatar.position.copy(START);
  world_desired.x = END.x - START.x;
  world_desired.y = END.y - START.y;
  world_desired.z = END.z - START.z;
  this.friction.x = this.friction.y = this.friction.z = this.default_friction;
  this.resting.x = this.resting.y = this.resting.z = false;
  bbox = this.aabb();
  pcs = this.collidables;
  i = 0;
  len = pcs.length;
  while (i < len) {
    if (pcs[i] !== this) {
      pcs[i].collide(this, bbox, world_desired, this.resting);
    }
    ++i;
  }
  this.avatar.position.x += world_desired.x;
  this.avatar.position.y += world_desired.y;
  this.avatar.position.z += world_desired.z;
};

proto.subjectTo = function(force) {
  this.forces.x += force[0];
  this.forces.y += force[1];
  this.forces.z += force[2];
  return this;
};

proto.attractTo = function(vector, mass) {
  vector.mass = mass;
  this.attractors.push(vector);
};

proto.aabb = function() {
  return aabb([this.avatar.position.x, this.avatar.position.y, this.avatar.position.z], this.dimensions);
};

proto.collide = function(other, bbox, world_vec, resting) {};

proto.atRestX = function() {
  return this.resting.x;
};

proto.atRestY = function() {
  return this.resting.y;
};

proto.atRestZ = function() {
  return this.resting.z;
};



},{"../../three":129,"../actions/player-manager":116,"aabb-3d":8}],124:[function(require,module,exports){
var ActionTypes, CollideTerrain, Collision3DTilemap, GameManager, MainCamera, PALETTE, PLAYER_SIZE, VoxelControlTick, VoxelPhysical, createGame, kbControls, mapConfig, player, skin, voxel, voxelView;

ActionTypes = require('./actions/types');

window.PlayerManager = require('./actions/player-manager');

createGame = require('voxel-engine');

kbControls = require('kb-controls');

player = require('voxel-player');

skin = require('minecraft-skin');

voxel = require('voxel');

voxelView = require('voxel-view');

VoxelPhysical = require('./customized/voxel-physical');

Collision3DTilemap = require('./customized/collision-3d-tilemap');

VoxelControlTick = require('./customized/voxel-control-tick');

CollideTerrain = require('./collisions/terrain');

GameManager = require('./actions/game-manager');

window.MainCamera = MainCamera = require('../main-camera');

mapConfig = require('./maps/my');

PALETTE = require('../voxels/palette-manager');

mapConfig.playerPosition = [-1.5, 10, 2.5];

PLAYER_SIZE = [.4, .9, .4];

module.exports = function(SceneManager) {
  var THREE, collisionTypes, createGame_showChunk, createPlayer, game, initialCoords, myMap, myTextures, rotateCamera, rotatingCameraDir, rotatingCameraTo, substack, view;
  createGame.prototype.addLights = function() {
    return this.scene = SceneManager.scene;
  };
  createGame.prototype.render = function() {};
  createGame.prototype.tick = function(delta) {
    var i, len, playerPos;
    if (!this.pausedPhysics) {
      i = 0;
      len = this.items.length;
      while (i < len) {
        this.items[i].tick(delta);
        ++i;
      }
      if (this.materials) {
        this.materials.tick();
      }
    }
    if (Object.keys(this.chunksNeedsUpdate).length > 0) {
      this.updateDirtyChunks();
    }
    this.emit("tick", delta);
    if (!this.controls) {
      return;
    }
    playerPos = this.playerPosition();
    this.spatial.emit("position", playerPos, playerPos);
  };
  myMap = mapConfig.map;
  myTextures = mapConfig.textures;
  collisionTypes = mapConfig.collisionTypes;
  THREE = createGame.THREE;
  view = new voxelView(THREE, {
    ortho: true,
    width: window.innerWidth,
    height: window.innerHeight
  });
  view.element = SceneManager.renderer.domElement;
  view.camera.position.z = 1000;
  view.camera.scale.set(.85, .85, .85);
  Number.prototype.mod = function(n) {
    return ((this % n) + n) % n;
  };
  createGame.prototype.gravity = [0, -0.0000090, 0];
  createGame.prototype.collideTerrain = CollideTerrain;
  createGame_showChunk = createGame.prototype.showChunk;
  createGame.prototype.showChunk = function(chunk) {};
  createGame.prototype.initializeControls = function(opts) {
    this.buttons = kbControls(document.body, opts.keybindings || this.defaultButtons);
    this.buttons.disable();
    this.optout = false;
    this.hookupControls(this.buttons, opts);
    return this.onControlChange(true);
  };
  createGame.prototype.onControlChange = function(gained, stream) {
    this.paused = false;
    if (!gained && !this.optout) {
      return this.buttons.disable();
    } else {
      return this.buttons.enable();
    }
  };
  createGame.prototype.makePhysical = function(target, envelope, blocksCreation) {
    var obj;
    obj = VoxelPhysical(target, this.potentialCollisionSet(), envelope || PLAYER_SIZE);
    obj.blocksCreation = !!blocksCreation;
    return obj;
  };
  game = createGame({
    view: view,
    generate: myMap,
    chunkDistance: 2,
    materials: myTextures,
    worldOrigin: [0, 0, 0],
    controls: {
      discreteFire: true
    },
    keybindings: {
      '<up>': 'forward',
      '<left>': 'left',
      '<down>': 'backward',
      '<right>': 'right',
      '<mouse 1>': 'fire',
      '<mouse 2>': 'firealt',
      '<space>': 'jump',
      '<shift>': 'crouch',
      '<control>': 'alt',
      A: 'rotate_counterclockwise',
      D: 'rotate_clockwise'
    }
  });
  window.game = game;
  game.collideVoxels = Collision3DTilemap(game.getBlock.bind(game), 1, [Infinity, Infinity, Infinity], [-Infinity, -Infinity, -Infinity]);
  game.controls.tick = VoxelControlTick.bind(game.controls);
  createPlayer = player(game);
  substack = createPlayer('substack.png');
  substack.playerSkin.mesh.scale.x = 1 / 16;
  substack.playerSkin.mesh.scale.y = 1 / 16;
  substack.playerSkin.mesh.scale.z = 1 / 16;
  substack.possess();
  SceneManager.setTarget(substack.avatar);
  initialCoords = mapConfig.playerPosition || [0, 5, 0];
  substack.yaw.position.set(initialCoords[0], initialCoords[1], initialCoords[2]);
  rotatingCameraTo = null;
  rotatingCameraDir = 0;
  game.on('tick', function(elapsedTime) {
    PlayerManager.tick(elapsedTime, game);
  });
  rotateCamera = function() {
    var phi, theta;
    theta = game.controlling.rotation.y * 360 / Math.PI;
    phi = 0;
    return MainCamera.rotateCameraTo(theta, phi);
  };
  game.on('tick', function() {
    var boxes, cameraAxis, cameraDir, cameraPerpendicAxis, cameraType, isDoneRotating, playerX, playerY, y;
    if (!rotatingCameraDir && game.controls.state.rotate_clockwise) {
      y = game.controlling.rotation.y;
      y = Math.round(y * 2 / Math.PI);
      y += 1;
      rotatingCameraDir = 1;
      rotatingCameraTo = y * Math.PI / 2;
      game.controlling.pitch.rotation.x = 0;
      game.controlling.pitch.rotation.x = 0;
      game.pausedPhysics = true;
    } else if (!rotatingCameraDir && game.controls.state.rotate_counterclockwise) {
      y = game.controlling.rotation.y;
      y = Math.round(y * 2 / Math.PI);
      y -= 1;
      rotatingCameraDir = -1;
      rotatingCameraTo = y * Math.PI / 2;
      game.controlling.pitch.rotation.x = 0;
      game.controlling.pitch.rotation.x = 0;
      game.pausedPhysics = true;
    }
    if (this.controlling.position.y < -10) {
      PlayerManager.reset();
      this.controlling.moveTo(initialCoords[0], initialCoords[1], initialCoords[2]);
      this.controlling.velocity.x = 0;
      this.controlling.velocity.y = 0;
      this.controlling.velocity.z = 0;
      this.controlling.acceleration.x = 0;
      this.controlling.acceleration.y = 0;
      this.controlling.acceleration.z = 0;
    }
    boxes = '';
    cameraType = this.controlling.rotation.y / Math.PI * 2;
    cameraType = Math.round(cameraType).mod(4);
    cameraDir = 1;
    cameraAxis = void 0;
    cameraPerpendicAxis = void 0;
    if (cameraType >= 2) {
      cameraDir = -1;
    }
    if (cameraType.mod(2) === 0) {
      cameraAxis = 0;
      cameraPerpendicAxis = 2;
    } else {
      cameraAxis = 2;
      cameraPerpendicAxis = 0;
    }
    playerX = Math.floor(this.controlling.aabb().base[cameraAxis]);
    playerY = Math.floor(this.controlling.aabb().base[1]);
    boxes += 'me = [' + Math.floor(this.controlling.aabb().base[0]) + ', ' + Math.floor(this.controlling.aabb().base[1]) + ', ' + Math.floor(this.controlling.aabb().base[2]) + ']';
    boxes += '<br/>cameraAxis = ' + cameraAxis;
    boxes += '<br/>cameraDir = ' + cameraDir;
    if (PlayerManager.currentAction()) {
      boxes += '<br/>curAction = ' + PlayerManager.currentAction().constructor.name;
    }
    document.getElementById('player-boxes').innerHTML = boxes;
    if (rotatingCameraDir) {
      game.controlling.rotation.y += rotatingCameraDir * Math.PI / 50;
      isDoneRotating = (rotatingCameraDir > 0 && game.controlling.rotation.y - rotatingCameraTo > 0) || (rotatingCameraDir < 0 && game.controlling.rotation.y - rotatingCameraTo < 0);
      if (isDoneRotating) {
        game.controlling.rotation.y = rotatingCameraTo;
        rotatingCameraDir = 0;
        GameManager.invalidateCache();
        game.pausedPhysics = false;
      }
      rotateCamera();
    } else {
      MainCamera.updateCamera();
    }
  });
  return GameManager.load();
};



},{"../main-camera":128,"../voxels/palette-manager":130,"./actions/game-manager":112,"./actions/player-manager":116,"./actions/types":118,"./collisions/terrain":120,"./customized/collision-3d-tilemap":121,"./customized/voxel-control-tick":122,"./customized/voxel-physical":123,"./maps/my":127,"kb-controls":32,"minecraft-skin":37,"voxel":93,"voxel-engine":40,"voxel-player":89,"voxel-view":91}],125:[function(require,module,exports){
var THE_MAP, addVoxel, buildFromHash, decode, getVoxel;

THE_MAP = window.THE_MAP = {};

addVoxel = function(x, y, z, c) {
  if (!c) {
    return;
  }
  c = c + 1;
  x = '' + x;
  y = '' + y;
  z = '' + z;
  if (THE_MAP[x] == null) {
    THE_MAP[x] = {};
  }
  if (THE_MAP[x][y] == null) {
    THE_MAP[x][y] = {};
  }
  THE_MAP[x][y][z] = c;
};

getVoxel = function(i, j, k) {
  var x, y, z;
  x = THE_MAP['' + i];
  if (!x) {
    return 0;
  }
  y = x['' + j];
  if (!y) {
    return 0;
  }
  z = y['' + k];
  return z || 0;
};

decode = function(string) {
  var output;
  output = [];
  string.split('').forEach(function(v) {
    output.push('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.indexOf(v));
  });
  return output;
};

buildFromHash = function(hash, variantChooser) {
  var animationFrames, chunk, chunks, code, color, current, data, frameMask, hashChunks, hashMask, i, j, l, n;
  if (hash == null) {
    hash = window.location.hash.substr(1);
  }
  hashMask = null;
  hashChunks = hash.split(':');
  chunks = {};
  animationFrames = [];
  n = hashChunks.length;
  j = 0;
  while (j < n) {
    chunk = hashChunks[j].split('/');
    chunks[chunk[0]] = chunk[1];
    j++;
  }
  frameMask = 'A';
  if ((!hashMask || hashMask === frameMask) && chunks[frameMask]) {
    current = {
      x: 0,
      y: 0,
      z: 0,
      c: 0
    };
    data = decode(chunks[frameMask]);
    i = 0;
    l = data.length;
    while (i < l) {
      code = data[i++].toString(2);
      if (code.charAt(1) === '1') {
        current.x += data[i++] - 32;
      }
      if (code.charAt(2) === '1') {
        current.y += data[i++] - 32;
      }
      if (code.charAt(3) === '1') {
        current.z += data[i++] - 32;
      }
      if (code.charAt(4) === '1') {
        current.c += data[i++] - 32;
      }
      if (code.charAt(0) === '1') {
        color = current.c;
        if (variantChooser) {
          color = variantChooser(color);
        }
        addVoxel(current.x, current.y, current.z, color);
      }
    }
  }
  return getVoxel;
};

module.exports = buildFromHash;



},{}],126:[function(require,module,exports){
var collisionTypes, fromHash, hash, newColor, origColor, playerPosition, textureVariantAry, textureVariantColors, textureVariants, textures, variantMapper, variantName, variantNames, _i, _j, _len, _len1;

fromHash = require('./from-hash');

hash = ':A/aWpaieaePaiiaiiammaiiakkaiiaSdaoYakcaieaXoShahfbbhhYhShYfShYhShYfShYhYhSfYhShYhSfYhShYhSfYhShYhSfYhShSeYfSfYhSfYfSfYhSfYfSfYhSfYfahfYfYfShYfSfYfShYfSfYfShYfSfYfShYfSfSiYhShYfShYhWhhYfYfShYhYhShYfYfShYhYhShYfYfShYhYhYhSfSfYhShShYhSfSfYhShShYhSfaihSfSfahhSfaffYhSfYfSfYhaffYhaffYhaffYhSfYfahfYfafhSfYfShYfSfYfShYfSfYfShaffShaffSiafeahhYfaihYeaihShYfSfYfShaqmfYhbiShShYhYhYhYhYhYhaadSfSfSfamlSfSfSfSfabfYhYhYhYhYhcahShShShShShShYhYhYhYhYhYhSfSfSfSfSfSfYfYfYfYfYfbeifSfSfSfSfahhSfahhSfajhSfahhSfahhSfahhSfSiShShSkShShffeffShShafefhihhSfYcShaffShaffShafeShShUhSfSfbhfhSfSfbfffSfSfSfSfYhYhYjYhYhYhaahYhYhYhaefYhakhShShShShShShShShShaffShbfehYfThfShaffShYfYfYfcfhSfSfSfSfSfSfSfSfSfSfYhYhYhYhYhYhYhYhShShShShShShShShShShaffYfahhYfYfYfYfYfYfbfhfShYfSfSfSeSfSfSbSfSfYhYhYmaXtSfSfSeSfSfSbSfSfYoajhSfYhafiShSkShShShShShShYhaefShaffShaffShaffShadfShaffShddhjSfSfSfSfSfSfSfSfSfSfSfSfSfYhYhYhYhYhYhYhYhYhYhYhYhYhShShShShShShShShShShShShShYfYfYfYfYfYfYfYfYfYfYfYfSfSfSfSfSfSfSfSfSfSfSfSfahrSfSfSfSfSfSfSfSfSfSfSfahrSfSfSfSfSfSfSfSfSfSfSffaalcYhYhShYfYfappYhfYmVmYfYfYfTfhVheVeiUfUfUfUfUfUfUfdcpefjfhhYfYfYfXYfhUhUhUhUhUhUhUhUhccYUhUhUhUhUhUhUhUhVhefjfhhYfYfYfShYhYhYhYhYhYhYhYhYhYhYhShYfYfYfYfYfYfYfYfYfYfYffoYihUhUhUhUhUhUhUhUhVhedcXiUhUhUhUhUhUhUhUhVhedcYiUfUiUhUhUhUhUhUhVheXZhbShShShShShShShShShShShShShYfYfYfYfYfUhUhUhUhVikShShShShShXfbdShShShShShfehbjYfYfYfdkfdYfYeYfajhZfhUfYhYhYdajhYfYfYfajhYeYfajhYeYffiffhYfahfYfehhhfehffbfffbhihZffShShYkYfYfYfffhcjYhYhYhYhShYfYfYfYfShYhYhYhYhShYfYfYfYfShYhYhYhYhfehekVhhVhhfiddabmRiYhYhYhYhYhYhYhYhYhYhYhblkeSfSfSfSfSfSfSfSfSfSfSfYhShShShShShShShShShShShahVShShShShShShShShShShShYhSfSfSfSfSfSfSfSfSfSfSfYhShShShShShShShShShShShYhSfSfSfSfSfSfSfSfSfSfSfYhShShShShShShShShShShShYhSfSfSfSfSfSfSfSfSfSfSfYhShShShShShShShShShShShfahZnYfYfYfSfSfSfYhYhYhShShXhhhYfYfYfSfSfSfYhYhYhShShXhhfYfYfYfSfSfSfYhYhYhShShXhhhYfYfYfSfSfSfYhYhYhShShXhhfYfYfYfSfSfSfYhYhYhShShXhhhYfYfYfSfSfSfYhYhYhShShXhhfYfYfYfSfSfSfYhYhYhShShXhhhYfYfYfSfSfSfYhYhYhShShXhhfYfYfYfSfSfSfYhYhYhShShXhhhYfYfYfSfSfSfYhYhYhShShXhhfYfYfYfSfSfSfYhYhYhShShXhhhYfYfYfSfSfSfYhYhYhShShXhhfYfYfYfSfSfSfYhYhYhShSh';

collisionTypes = [null, null, null, null, 'top', 'top', 'top', null, null, null, 'top', null, null, null];

textures = ['stone', ['grass', 'grass', 'square-light-pyramid-in'], 'square-medium-pyramid-in', 'square-dark-pyramid-in', ['grass', 'grass', 'square-grasstop-light-pyramid-out'], 'bridge-post-top', 'bridge', 'bridge-post-1', 'obelisk-3', 'obelisk-2', 'obelisk-1', 'lighthouse-red', 'lighthouse-white'];

textureVariants = [null, ['square-light-pyramid-in', 'square-light-pyramid-out', 'square-light-square-in', 'square-light-square-out'], ['square-medium-pyramid-in', 'square-medium-pyramid-out', 'square-medium-square-in', 'square-medium-square-out'], ['square-dark-pyramid-in', 'square-dark-pyramid-out', 'square-dark-square-big', 'square-dark-square-in'], ['square-grasstop-light-pyramid-out', 'square-grasstop-light-square-out'], null, null, ['bridge-post-1', 'bridge-post-2']];

textureVariants = [];

textureVariantColors = [];

newColor = textures.length;

for (origColor = _i = 0, _len = textureVariants.length; _i < _len; origColor = ++_i) {
  variantNames = textureVariants[origColor];
  if (variantNames) {
    textureVariantAry = [];
    for (_j = 0, _len1 = variantNames.length; _j < _len1; _j++) {
      variantName = variantNames[_j];
      textures.push(variantName);
      textureVariantAry.push(newColor);
      newColor++;
    }
    textureVariantColors.push(textureVariantAry);
  } else {
    textureVariantColors.push(null);
  }
}

playerPosition = [1, 7, 3];

variantMapper = function(c) {
  var variants;
  variants = textureVariantColors[c];
  if (!variants) {
    return c;
  }
  return variants[Math.floor(Math.random() * variants.length)];
};

module.exports = {
  textures: textures,
  build: function() {
    var map;
    map = fromHash(hash, variantMapper);
    return {
      map: map,
      textures: textures,
      collisionTypes: collisionTypes,
      playerPosition: playerPosition
    };
  }
};



},{"./from-hash":125}],127:[function(require,module,exports){
var lighthouseMap, mapFromHash, mapInfo;

lighthouseMap = require("./lighthouse");

mapFromHash = require("./from-hash");

if (window.location.hash.length > 2) {
  mapInfo = {
    map: mapFromHash(),
    textures: lighthouseMap.textures
  };
} else {
  mapInfo = lighthouseMap.build();
}

module.exports = mapInfo;



},{"./from-hash":125,"./lighthouse":126}],128:[function(require,module,exports){
var CameraManager, MainCamera,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CameraManager = require('./camera-manager');

window.mainCamera = module.exports = new (MainCamera = (function(_super) {
  __extends(MainCamera, _super);

  function MainCamera() {
    return MainCamera.__super__.constructor.apply(this, arguments);
  }

  MainCamera.prototype._theta = 90;

  MainCamera.prototype._phi = 60;

  return MainCamera;

})(CameraManager));



},{"./camera-manager":101}],129:[function(require,module,exports){
var THREE;

require('../js/exporters/BufferGeometryExporter');

require('../js/exporters/GeometryExporter');

require('../js/exporters/MaterialExporter');

require('../js/exporters/ObjectExporter');

require('../js/loaders/ObjectLoader');

THREE = window.THREE;

module.exports = THREE;



},{"../js/exporters/BufferGeometryExporter":3,"../js/exporters/GeometryExporter":4,"../js/exporters/MaterialExporter":5,"../js/exporters/ObjectExporter":6,"../js/loaders/ObjectLoader":7}],130:[function(require,module,exports){

/* Example JSON format:
{
  name: 'Ladder Top'
  collision: 'ladder'
   * For large voxels there may be multiple collision cubes.
  collisions: [
     * origin is bottom-left-front corner
    {x:, y:, z:, collision: 'top'} # can be .5 for 1/2 voxels maybe?
  ]

  type: 'geometry' # or 'texture'
  geometry_url: './geometries/ladder-top.json'
   * or for textures:
  top_url   : './textures/grass-top.png'
  bottom_url: './textures/brick-bottom.png'
  front_url : './textures/brick-front.png'
  back_url  : './textures/brick-front.png'
  left_url  : './textures/brick-left.png'
  right_url : './textures/brick-right.png'
}
 */
var PALETTE;

PALETTE = require('./types/nature-palette');

module.exports = {
  voxelName: function(color) {
    return PALETTE.colors[color];
  },
  collisionFor: function(color) {
    var voxelName;
    color -= 1;
    voxelName = PALETTE.colors[color];
    if (voxelName && PALETTE.voxels[voxelName]) {
      return PALETTE.voxels[voxelName].collision;
    } else {
      return null;
    }
  },
  allVoxelConfigs: function() {
    return PALETTE.voxels;
  }
};



},{"./types/nature-palette":136}],131:[function(require,module,exports){
var THREE, TextureCubeBuilder;

THREE = require('../three');

module.exports = new (TextureCubeBuilder = (function() {
  TextureCubeBuilder.prototype._materialNames = {};

  TextureCubeBuilder.prototype._materials = [];

  TextureCubeBuilder.prototype._meshMaterial = null;

  function TextureCubeBuilder() {
    this._meshMaterial = new THREE.MeshFaceMaterial(this._materials);
  }

  TextureCubeBuilder.prototype.meshFaceMaterial = function() {
    return this._meshMaterial;
  };

  TextureCubeBuilder.prototype.freshCube = function(textureSides) {
    var alreadyReindexedFaces, cube, face, faces, geometry, i, img, mat, materialIndex, side, tex, _i, _j, _len;
    geometry = new THREE.CubeGeometry(16 / 16, 16 / 16, 16 / 16);
    alreadyReindexedFaces = [];
    for (i = _i = 0; _i <= 5; i = ++_i) {
      side = textureSides[i];
      if (this._materialNames[side] == null) {
        img = new Image();
        tex = new THREE.Texture(img);
        img.src = "./src/voxels/types/" + side;
        img.tex = tex;
        img.onload = function() {
          return this.tex.needsUpdate = true;
        };
        mat = new THREE.MeshBasicMaterial({
          color: 0xffffff,
          map: tex,
          transparent: false,
          overdraw: true
        });
        materialIndex = this._materials.length;
        this._materials.push(mat);
        this._materialNames[side] = materialIndex;
      }
      faces = geometry.faces.filter(function(face) {
        if (face.materialIndex === i && alreadyReindexedFaces.indexOf(face) < 0) {
          return true;
        }
      });
      for (_j = 0, _len = faces.length; _j < _len; _j++) {
        face = faces[_j];
        face.materialIndex = this._materialNames[side];
        alreadyReindexedFaces.push(face);
      }
    }
    cube = new THREE.Mesh(geometry, this._meshMaterial);
    cube.name = textureSides[0];
    return cube;
  };

  return TextureCubeBuilder;

})());



},{"../three":129}],132:[function(require,module,exports){
module.exports={"metadata":{"version":4.3,"type":"Object","generator":"ObjectExporter"},"geometries":[{"uuid":"AB3E9F30-8380-4812-9224-55B1955A64E7","type":"Geometry","data":{"vertices":[100,400,400,100,400,350,100,350,400,100,350,350,50,400,350,50,400,400,50,350,350,50,350,400,150,400,400,150,400,350,150,350,400,150,350,350,100,400,350,100,400,400,100,350,350,100,350,400,200,400,400,200,400,350,200,350,400,200,350,350,150,400,350,150,400,400,150,350,350,150,350,400,250,400,400,250,400,350,250,350,400,250,350,350,200,400,350,200,400,400,200,350,350,200,350,400,300,400,400,300,400,350,300,350,400,300,350,350,250,400,350,250,400,400,250,350,350,250,350,400,350,400,400,350,400,350,350,350,400,350,350,350,300,400,350,300,400,400,300,350,350,300,350,400,400,400,400,400,400,350,400,350,400,400,350,350,350,400,350,350,400,400,350,350,350,350,350,400,50,400,400,50,400,350,50,350,400,50,350,350,0,400,350,0,400,400,0,350,350,0,350,400,-300,400,400,-300,400,350,-300,350,400,-300,350,350,-350,400,350,-350,400,400,-350,350,350,-350,350,400,-250,400,400,-250,400,350,-250,350,400,-250,350,350,-300,400,350,-300,400,400,-300,350,350,-300,350,400,-200,400,400,-200,400,350,-200,350,400,-200,350,350,-250,400,350,-250,400,400,-250,350,350,-250,350,400,-150,400,400,-150,400,350,-150,350,400,-150,350,350,-200,400,350,-200,400,400,-200,350,350,-200,350,400,-100,400,400,-100,400,350,-100,350,400,-100,350,350,-150,400,350,-150,400,400,-150,350,350,-150,350,400,-50,400,400,-50,400,350,-50,350,400,-50,350,350,-100,400,350,-100,400,400,-100,350,350,-100,350,400,0,400,400,0,400,350,0,350,400,0,350,350,-50,400,350,-50,400,400,-50,350,350,-50,350,400,-350,400,400,-350,400,350,-350,350,400,-350,350,350,-400,400,350,-400,400,400,-400,350,350,-400,350,400,-350,400,-350,-350,400,-400,-350,350,-350,-350,350,-400,-400,400,-400,-400,400,-350,-400,350,-400,-400,350,-350,-300,400,-350,-300,400,-400,-300,350,-350,-300,350,-400,-350,400,-400,-350,400,-350,-350,350,-400,-350,350,-350,-250,400,-350,-250,400,-400,-250,350,-350,-250,350,-400,-300,400,-400,-300,400,-350,-300,350,-400,-300,350,-350,-200,400,-350,-200,400,-400,-200,350,-350,-200,350,-400,-250,400,-400,-250,400,-350,-250,350,-400,-250,350,-350,-150,400,-350,-150,400,-400,-150,350,-350,-150,350,-400,-200,400,-400,-200,400,-350,-200,350,-400,-200,350,-350,-100,400,-350,-100,400,-400,-100,350,-350,-100,350,-400,-150,400,-400,-150,400,-350,-150,350,-400,-150,350,-350,-50,400,-350,-50,400,-400,-50,350,-350,-50,350,-400,-100,400,-400,-100,400,-350,-100,350,-400,-100,350,-350,0,400,-350,0,400,-400,0,350,-350,0,350,-400,-50,400,-400,-50,400,-350,-50,350,-400,-50,350,-350,50,400,-350,50,400,-400,50,350,-350,50,350,-400,0,400,-400,0,400,-350,0,350,-400,0,350,-350,100,400,-350,100,400,-400,100,350,-350,100,350,-400,50,400,-400,50,400,-350,50,350,-400,50,350,-350,150,400,-350,150,400,-400,150,350,-350,150,350,-400,100,400,-400,100,400,-350,100,350,-400,100,350,-350,200,400,-350,200,400,-400,200,350,-350,200,350,-400,150,400,-400,150,400,-350,150,350,-400,150,350,-350,250,400,-350,250,400,-400,250,350,-350,250,350,-400,200,400,-400,200,400,-350,200,350,-400,200,350,-350,300,400,-350,300,400,-400,300,350,-350,300,350,-400,250,400,-400,250,400,-350,250,350,-400,250,350,-350,350,400,-350,350,400,-400,350,350,-350,350,350,-400,300,400,-400,300,400,-350,300,350,-400,300,350,-350,400,400,-350,400,400,-400,400,350,-350,400,350,-400,350,400,-400,350,400,-350,350,350,-400,350,350,-350,400,400,-300,400,400,-350,400,350,-300,400,350,-350,350,400,-350,350,400,-300,350,350,-350,350,350,-300,400,400,-250,400,400,-300,400,350,-250,400,350,-300,350,400,-300,350,400,-250,350,350,-300,350,350,-250,400,400,-200,400,400,-250,400,350,-200,400,350,-250,350,400,-250,350,400,-200,350,350,-250,350,350,-200,400,400,-150,400,400,-200,400,350,-150,400,350,-200,350,400,-200,350,400,-150,350,350,-200,350,350,-150,400,400,-100,400,400,-150,400,350,-100,400,350,-150,350,400,-150,350,400,-100,350,350,-150,350,350,-100,400,400,-50,400,400,-100,400,350,-50,400,350,-100,350,400,-100,350,400,-50,350,350,-100,350,350,-50,400,400,0,400,400,-50,400,350,0,400,350,-50,350,400,-50,350,400,0,350,350,-50,350,350,0,400,400,50,400,400,0,400,350,50,400,350,0,350,400,0,350,400,50,350,350,0,350,350,50,400,400,100,400,400,50,400,350,100,400,350,50,350,400,50,350,400,100,350,350,50,350,350,100,400,400,150,400,400,100,400,350,150,400,350,100,350,400,100,350,400,150,350,350,100,350,350,150,400,400,200,400,400,150,400,350,200,400,350,150,350,400,150,350,400,200,350,350,150,350,350,200,400,400,250,400,400,200,400,350,250,400,350,200,350,400,200,350,400,250,350,350,200,350,350,250,400,400,300,400,400,250,400,350,300,400,350,250,350,400,250,350,400,300,350,350,250,350,350,300,400,400,350,400,400,300,400,350,350,400,350,300,350,400,300,350,400,350,350,350,300,350,350,350,-350,400,-300,-350,400,-350,-350,350,-300,-350,350,-350,-400,400,-350,-400,400,-300,-400,350,-350,-400,350,-300,-350,400,-250,-350,400,-300,-350,350,-250,-350,350,-300,-400,400,-300,-400,400,-250,-400,350,-300,-400,350,-250,-350,400,-200,-350,400,-250,-350,350,-200,-350,350,-250,-400,400,-250,-400,400,-200,-400,350,-250,-400,350,-200,-350,400,-150,-350,400,-200,-350,350,-150,-350,350,-200,-400,400,-200,-400,400,-150,-400,350,-200,-400,350,-150,-350,400,-100,-350,400,-150,-350,350,-100,-350,350,-150,-400,400,-150,-400,400,-100,-400,350,-150,-400,350,-100,-350,400,-50,-350,400,-100,-350,350,-50,-350,350,-100,-400,400,-100,-400,400,-50,-400,350,-100,-400,350,-50,-350,400,0,-350,400,-50,-350,350,0,-350,350,-50,-400,400,-50,-400,400,0,-400,350,-50,-400,350,0,-350,400,50,-350,400,0,-350,350,50,-350,350,0,-400,400,0,-400,400,50,-400,350,0,-400,350,50,-350,400,100,-350,400,50,-350,350,100,-350,350,50,-400,400,50,-400,400,100,-400,350,50,-400,350,100,-350,400,150,-350,400,100,-350,350,150,-350,350,100,-400,400,100,-400,400,150,-400,350,100,-400,350,150,-350,400,200,-350,400,150,-350,350,200,-350,350,150,-400,400,150,-400,400,200,-400,350,150,-400,350,200,-350,400,250,-350,400,200,-350,350,250,-350,350,200,-400,400,200,-400,400,250,-400,350,200,-400,350,250,-350,400,300,-350,400,250,-350,350,300,-350,350,250,-400,400,250,-400,400,300,-400,350,250,-400,350,300,-350,400,350,-350,400,300,-350,350,350,-350,350,300,-400,400,300,-400,400,350,-400,350,300,-400,350,350,400,450,-350,400,450,-400,400,400,-350,400,400,-400,350,450,-400,350,450,-350,350,400,-400,350,400,-350,400,450,-300,400,450,-350,400,400,-300,400,400,-350,350,450,-350,350,450,-300,350,400,-350,350,400,-300,400,450,-200,400,450,-250,400,400,-200,400,400,-250,350,450,-250,350,450,-200,350,400,-250,350,400,-200,400,450,-150,400,450,-200,400,400,-150,400,400,-200,350,450,-200,350,450,-150,350,400,-200,350,400,-150,400,450,-100,400,450,-150,400,400,-100,400,400,-150,350,450,-150,350,450,-100,350,400,-150,350,400,-100,400,450,-50,400,450,-100,400,400,-50,400,400,-100,350,450,-100,350,450,-50,350,400,-100,350,400,-50,400,450,0,400,450,-50,400,400,0,400,400,-50,350,450,-50,350,450,0,350,400,-50,350,400,0,400,450,50,400,450,0,400,400,50,400,400,0,350,450,0,350,450,50,350,400,0,350,400,50,400,450,100,400,450,50,400,400,100,400,400,50,350,450,50,350,450,100,350,400,50,350,400,100,400,450,150,400,450,100,400,400,150,400,400,100,350,450,100,350,450,150,350,400,100,350,400,150,400,450,200,400,450,150,400,400,200,400,400,150,350,450,150,350,450,200,350,400,150,350,400,200,400,450,250,400,450,200,400,400,250,400,400,200,350,450,200,350,450,250,350,400,200,350,400,250,400,450,300,400,450,250,400,400,300,400,400,250,350,450,250,350,450,300,350,400,250,350,400,300,400,450,350,400,450,300,400,400,350,400,400,300,350,450,300,350,450,350,350,400,300,350,400,350,400,450,400,400,450,350,400,400,400,400,400,350,350,450,350,350,450,400,350,400,350,350,400,400,400,450,-250,400,450,-300,400,400,-250,400,400,-300,350,450,-300,350,450,-250,350,400,-300,350,400,-250,400,500,-350,400,500,-400,400,450,-350,400,450,-400,350,500,-400,350,500,-350,350,450,-400,350,450,-350,400,500,-300,400,500,-350,400,450,-300,400,450,-350,350,500,-350,350,500,-300,350,450,-350,350,450,-300,400,500,-250,400,500,-300,400,450,-250,400,450,-300,350,500,-300,350,500,-250,350,450,-300,350,450,-250,400,500,-200,400,500,-250,400,450,-200,400,450,-250,350,500,-250,350,500,-200,350,450,-250,350,450,-200,400,500,-150,400,500,-200,400,450,-150,400,450,-200,350,500,-200,350,500,-150,350,450,-200,350,450,-150,400,500,-100,400,500,-150,400,450,-100,400,450,-150,350,500,-150,350,500,-100,350,450,-150,350,450,-100,400,500,-50,400,500,-100,400,450,-50,400,450,-100,350,500,-100,350,500,-50,350,450,-100,350,450,-50,400,500,100,400,500,50,400,450,100,400,450,50,350,500,50,350,500,100,350,450,50,350,450,100,400,500,150,400,500,100,400,450,150,400,450,100,350,500,100,350,500,150,350,450,100,350,450,150,400,500,200,400,500,150,400,450,200,400,450,150,350,500,150,350,500,200,350,450,150,350,450,200,400,500,250,400,500,200,400,450,250,400,450,200,350,500,200,350,500,250,350,450,200,350,450,250,400,500,300,400,500,250,400,450,300,400,450,250,350,500,250,350,500,300,350,450,250,350,450,300,400,500,350,400,500,300,400,450,350,400,450,300,350,500,300,350,500,350,350,450,300,350,450,350,400,500,400,400,500,350,400,450,400,400,450,350,350,500,350,350,500,400,350,450,350,350,450,400,400,500,50,400,500,0,400,450,50,400,450,0,350,500,0,350,500,50,350,450,0,350,450,50,400,500,0,400,500,-50,400,450,0,400,450,-50,350,500,-50,350,500,0,350,450,-50,350,450,0,400,550,-350,400,550,-400,400,500,-350,400,500,-400,350,550,-400,350,550,-350,350,500,-400,350,500,-350,400,550,-300,400,550,-350,400,500,-300,400,500,-350,350,550,-350,350,550,-300,350,500,-350,350,500,-300,400,550,-250,400,550,-300,400,500,-250,400,500,-300,350,550,-300,350,550,-250,350,500,-300,350,500,-250,400,550,-200,400,550,-250,400,500,-200,400,500,-250,350,550,-250,350,550,-200,350,500,-250,350,500,-200,400,550,-150,400,550,-200,400,500,-150,400,500,-200,350,550,-200,350,550,-150,350,500,-200,350,500,-150,400,550,-100,400,550,-150,400,500,-100,400,500,-150,350,550,-150,350,550,-100,350,500,-150,350,500,-100,400,550,0,400,550,-50,400,500,0,400,500,-50,350,550,-50,350,550,0,350,500,-50,350,500,0,400,550,50,400,550,0,400,500,50,400,500,0,350,550,0,350,550,50,350,500,0,350,500,50,400,550,-50,400,550,-100,400,500,-50,400,500,-100,350,550,-100,350,550,-50,350,500,-100,350,500,-50,400,550,100,400,550,50,400,500,100,400,500,50,350,550,50,350,550,100,350,500,50,350,500,100,400,550,200,400,550,150,400,500,200,400,500,150,350,550,150,350,550,200,350,500,150,350,500,200,400,550,250,400,550,200,400,500,250,400,500,200,350,550,200,350,550,250,350,500,200,350,500,250,400,550,300,400,550,250,400,500,300,400,500,250,350,550,250,350,550,300,350,500,250,350,500,300,400,550,350,400,550,300,400,500,350,400,500,300,350,550,300,350,550,350,350,500,300,350,500,350,400,550,400,400,550,350,400,500,400,400,500,350,350,550,350,350,550,400,350,500,350,350,500,400,400,550,150,400,550,100,400,500,150,400,500,100,350,550,100,350,550,150,350,500,100,350,500,150,400,600,-350,400,600,-400,400,550,-350,400,550,-400,350,600,-400,350,600,-350,350,550,-400,350,550,-350,400,600,-300,400,600,-350,400,550,-300,400,550,-350,350,600,-350,350,600,-300,350,550,-350,350,550,-300,400,600,-250,400,600,-300,400,550,-250,400,550,-300,350,600,-300,350,600,-250,350,550,-300,350,550,-250,400,600,-200,400,600,-250,400,550,-200,400,550,-250,350,600,-250,350,600,-200,350,550,-250,350,550,-200,400,600,-150,400,600,-200,400,550,-150,400,550,-200,350,600,-200,350,600,-150,350,550,-200,350,550,-150,400,600,-100,400,600,-150,400,550,-100,400,550,-150,350,600,-150,350,600,-100,350,550,-150,350,550,-100,400,600,-50,400,600,-100,400,550,-50,400,550,-100,350,600,-100,350,600,-50,350,550,-100,350,550,-50,400,600,0,400,600,-50,400,550,0,400,550,-50,350,600,-50,350,600,0,350,550,-50,350,550,0,400,600,50,400,600,0,400,550,50,400,550,0,350,600,0,350,600,50,350,550,0,350,550,50,400,600,100,400,600,50,400,550,100,400,550,50,350,600,50,350,600,100,350,550,50,350,550,100,400,600,150,400,600,100,400,550,150,400,550,100,350,600,100,350,600,150,350,550,100,350,550,150,400,600,200,400,600,150,400,550,200,400,550,150,350,600,150,350,600,200,350,550,150,350,550,200,400,600,250,400,600,200,400,550,250,400,550,200,350,600,200,350,600,250,350,550,200,350,550,250,400,600,300,400,600,250,400,550,300,400,550,250,350,600,250,350,600,300,350,550,250,350,550,300,400,600,350,400,600,300,400,550,350,400,550,300,350,600,300,350,600,350,350,550,300,350,550,350,400,600,400,400,600,350,400,550,400,400,550,350,350,600,350,350,600,400,350,550,350,350,550,400,400,650,-350,400,650,-400,400,600,-350,400,600,-400,350,650,-400,350,650,-350,350,600,-400,350,600,-350,400,650,-300,400,650,-350,400,600,-300,400,600,-350,350,650,-350,350,650,-300,350,600,-350,350,600,-300,400,650,-250,400,650,-300,400,600,-250,400,600,-300,350,650,-300,350,650,-250,350,600,-300,350,600,-250,400,650,-150,400,650,-200,400,600,-150,400,600,-200,350,650,-200,350,650,-150,350,600,-200,350,600,-150,400,650,-100,400,650,-150,400,600,-100,400,600,-150,350,650,-150,350,650,-100,350,600,-150,350,600,-100,400,650,-50,400,650,-100,400,600,-50,400,600,-100,350,650,-100,350,650,-50,350,600,-100,350,600,-50,400,650,0,400,650,-50,400,600,0,400,600,-50,350,650,-50,350,650,0,350,600,-50,350,600,0,400,650,50,400,650,0,400,600,50,400,600,0,350,650,0,350,650,50,350,600,0,350,600,50,400,650,100,400,650,50,400,600,100,400,600,50,350,650,50,350,650,100,350,600,50,350,600,100,400,650,150,400,650,100,400,600,150,400,600,100,350,650,100,350,650,150,350,600,100,350,600,150,400,650,200,400,650,150,400,600,200,400,600,150,350,650,150,350,650,200,350,600,150,350,600,200,400,650,300,400,650,250,400,600,300,400,600,250,350,650,250,350,650,300,350,600,250,350,600,300,400,650,350,400,650,300,400,600,350,400,600,300,350,650,300,350,650,350,350,600,300,350,600,350,400,650,400,400,650,350,400,600,400,400,600,350,350,650,350,350,650,400,350,600,350,350,600,400,400,650,-200,400,650,-250,400,600,-200,400,600,-250,350,650,-250,350,650,-200,350,600,-250,350,600,-200,400,650,250,400,650,200,400,600,250,400,600,200,350,650,200,350,650,250,350,600,200,350,600,250,100,450,400,100,450,350,100,400,400,100,400,350,50,450,350,50,450,400,50,400,350,50,400,400,200,450,400,200,450,350,200,400,400,200,400,350,150,450,350,150,450,400,150,400,350,150,400,400,250,450,400,250,450,350,250,400,400,250,400,350,200,450,350,200,450,400,200,400,350,200,400,400,300,450,400,300,450,350,300,400,400,300,400,350,250,450,350,250,450,400,250,400,350,250,400,400,350,450,400,350,450,350,350,400,400,350,400,350,300,450,350,300,450,400,300,400,350,300,400,400,100,500,400,100,500,350,100,450,400,100,450,350,50,500,350,50,500,400,50,450,350,50,450,400,150,500,400,150,500,350,150,450,400,150,450,350,100,500,350,100,500,400,100,450,350,100,450,400,200,500,400,200,500,350,200,450,400,200,450,350,150,500,350,150,500,400,150,450,350,150,450,400,250,500,400,250,500,350,250,450,400,250,450,350,200,500,350,200,500,400,200,450,350,200,450,400,300,500,400,300,500,350,300,450,400,300,450,350,250,500,350,250,500,400,250,450,350,250,450,400,350,500,400,350,500,350,350,450,400,350,450,350,300,500,350,300,500,400,300,450,350,300,450,400,100,550,400,100,550,350,100,500,400,100,500,350,50,550,350,50,550,400,50,500,350,50,500,400,150,550,400,150,550,350,150,500,400,150,500,350,100,550,350,100,550,400,100,500,350,100,500,400,200,550,400,200,550,350,200,500,400,200,500,350,150,550,350,150,550,400,150,500,350,150,500,400,250,550,400,250,550,350,250,500,400,250,500,350,200,550,350,200,550,400,200,500,350,200,500,400,300,550,400,300,550,350,300,500,400,300,500,350,250,550,350,250,550,400,250,500,350,250,500,400,350,550,400,350,550,350,350,500,400,350,500,350,300,550,350,300,550,400,300,500,350,300,500,400,100,600,400,100,600,350,100,550,400,100,550,350,50,600,350,50,600,400,50,550,350,50,550,400,150,600,400,150,600,350,150,550,400,150,550,350,100,600,350,100,600,400,100,550,350,100,550,400,200,600,400,200,600,350,200,550,400,200,550,350,150,600,350,150,600,400,150,550,350,150,550,400,250,600,400,250,600,350,250,550,400,250,550,350,200,600,350,200,600,400,200,550,350,200,550,400,300,600,400,300,600,350,300,550,400,300,550,350,250,600,350,250,600,400,250,550,350,250,550,400,350,600,400,350,600,350,350,550,400,350,550,350,300,600,350,300,600,400,300,550,350,300,550,400,150,450,400,150,450,350,150,400,400,150,400,350,100,450,350,100,450,400,100,400,350,100,400,400,50,450,400,50,450,350,50,400,400,50,400,350,0,450,350,0,450,400,0,400,350,0,400,400,50,500,400,50,500,350,50,450,400,50,450,350,0,500,350,0,500,400,0,450,350,0,450,400,50,550,400,50,550,350,50,500,400,50,500,350,0,550,350,0,550,400,0,500,350,0,500,400,50,600,400,50,600,350,50,550,400,50,550,350,0,600,350,0,600,400,0,550,350,0,550,400,0,450,400,0,450,350,0,400,400,0,400,350,-50,450,350,-50,450,400,-50,400,350,-50,400,400,0,500,400,0,500,350,0,450,400,0,450,350,-50,500,350,-50,500,400,-50,450,350,-50,450,400,0,550,400,0,550,350,0,500,400,0,500,350,-50,550,350,-50,550,400,-50,500,350,-50,500,400,0,600,400,0,600,350,0,550,400,0,550,350,-50,600,350,-50,600,400,-50,550,350,-50,550,400,-350,450,400,-350,450,350,-350,400,400,-350,400,350,-400,450,350,-400,450,400,-400,400,350,-400,400,400,-300,450,400,-300,450,350,-300,400,400,-300,400,350,-350,450,350,-350,450,400,-350,400,350,-350,400,400,-250,450,400,-250,450,350,-250,400,400,-250,400,350,-300,450,350,-300,450,400,-300,400,350,-300,400,400,-150,450,400,-150,450,350,-150,400,400,-150,400,350,-200,450,350,-200,450,400,-200,400,350,-200,400,400,-50,450,400,-50,450,350,-50,400,400,-50,400,350,-100,450,350,-100,450,400,-100,400,350,-100,400,400,-350,500,400,-350,500,350,-350,450,400,-350,450,350,-400,500,350,-400,500,400,-400,450,350,-400,450,400,-300,500,400,-300,500,350,-300,450,400,-300,450,350,-350,500,350,-350,500,400,-350,450,350,-350,450,400,-250,500,400,-250,500,350,-250,450,400,-250,450,350,-300,500,350,-300,500,400,-300,450,350,-300,450,400,-200,500,400,-200,500,350,-200,450,400,-200,450,350,-250,500,350,-250,500,400,-250,450,350,-250,450,400,-150,500,400,-150,500,350,-150,450,400,-150,450,350,-200,500,350,-200,500,400,-200,450,350,-200,450,400,-100,500,400,-100,500,350,-100,450,400,-100,450,350,-150,500,350,-150,500,400,-150,450,350,-150,450,400,-50,500,400,-50,500,350,-50,450,400,-50,450,350,-100,500,350,-100,500,400,-100,450,350,-100,450,400,-350,550,400,-350,550,350,-350,500,400,-350,500,350,-400,550,350,-400,550,400,-400,500,350,-400,500,400,-300,550,400,-300,550,350,-300,500,400,-300,500,350,-350,550,350,-350,550,400,-350,500,350,-350,500,400,-250,550,400,-250,550,350,-250,500,400,-250,500,350,-300,550,350,-300,550,400,-300,500,350,-300,500,400,-200,550,400,-200,550,350,-200,500,400,-200,500,350,-250,550,350,-250,550,400,-250,500,350,-250,500,400,-150,550,400,-150,550,350,-150,500,400,-150,500,350,-200,550,350,-200,550,400,-200,500,350,-200,500,400,-100,550,400,-100,550,350,-100,500,400,-100,500,350,-150,550,350,-150,550,400,-150,500,350,-150,500,400,-50,550,400,-50,550,350,-50,500,400,-50,500,350,-100,550,350,-100,550,400,-100,500,350,-100,500,400,-350,600,400,-350,600,350,-350,550,400,-350,550,350,-400,600,350,-400,600,400,-400,550,350,-400,550,400,-300,600,400,-300,600,350,-300,550,400,-300,550,350,-350,600,350,-350,600,400,-350,550,350,-350,550,400,-250,600,400,-250,600,350,-250,550,400,-250,550,350,-300,600,350,-300,600,400,-300,550,350,-300,550,400,-200,600,400,-200,600,350,-200,550,400,-200,550,350,-250,600,350,-250,600,400,-250,550,350,-250,550,400,-150,600,400,-150,600,350,-150,550,400,-150,550,350,-200,600,350,-200,600,400,-200,550,350,-200,550,400,-100,600,400,-100,600,350,-100,550,400,-100,550,350,-150,600,350,-150,600,400,-150,550,350,-150,550,400,-50,600,400,-50,600,350,-50,550,400,-50,550,350,-100,600,350,-100,600,400,-100,550,350,-100,550,400,-100,450,400,-100,450,350,-100,400,400,-100,400,350,-150,450,350,-150,450,400,-150,400,350,-150,400,400,-200,450,400,-200,450,350,-200,400,400,-200,400,350,-250,450,350,-250,450,400,-250,400,350,-250,400,400,-350,650,400,-350,650,350,-350,600,400,-350,600,350,-400,650,350,-400,650,400,-400,600,350,-400,600,400,-300,650,400,-300,650,350,-300,600,400,-300,600,350,-350,650,350,-350,650,400,-350,600,350,-350,600,400,-250,650,400,-250,650,350,-250,600,400,-250,600,350,-300,650,350,-300,650,400,-300,600,350,-300,600,400,-100,650,400,-100,650,350,-100,600,400,-100,600,350,-150,650,350,-150,650,400,-150,600,350,-150,600,400,-50,650,400,-50,650,350,-50,600,400,-50,600,350,-100,650,350,-100,650,400,-100,600,350,-100,600,400,0,650,400,0,650,350,0,600,400,0,600,350,-50,650,350,-50,650,400,-50,600,350,-50,600,400,50,650,400,50,650,350,50,600,400,50,600,350,0,650,350,0,650,400,0,600,350,0,600,400,100,650,400,100,650,350,100,600,400,100,600,350,50,650,350,50,650,400,50,600,350,50,600,400,150,650,400,150,650,350,150,600,400,150,600,350,100,650,350,100,650,400,100,600,350,100,600,400,200,650,400,200,650,350,200,600,400,200,600,350,150,650,350,150,650,400,150,600,350,150,600,400,350,650,400,350,650,350,350,600,400,350,600,350,300,650,350,300,650,400,300,600,350,300,600,400,-350,450,200,-350,450,150,-350,400,200,-350,400,150,-400,450,150,-400,450,200,-400,400,150,-400,400,200,-350,500,200,-350,500,150,-350,450,200,-350,450,150,-400,500,150,-400,500,200,-400,450,150,-400,450,200,-350,550,200,-350,550,150,-350,500,200,-350,500,150,-400,550,150,-400,550,200,-400,500,150,-400,500,200,-350,600,200,-350,600,150,-350,550,200,-350,550,150,-400,600,150,-400,600,200,-400,550,150,-400,550,200,-350,500,250,-350,500,200,-350,450,250,-350,450,200,-400,500,200,-400,500,250,-400,450,200,-400,450,250,-350,550,250,-350,550,200,-350,500,250,-350,500,200,-400,550,200,-400,550,250,-400,500,200,-400,500,250,-350,600,250,-350,600,200,-350,550,250,-350,550,200,-400,600,200,-400,600,250,-400,550,200,-400,550,250,-350,450,300,-350,450,250,-350,400,300,-350,400,250,-400,450,250,-400,450,300,-400,400,250,-400,400,300,-350,500,300,-350,500,250,-350,450,300,-350,450,250,-400,500,250,-400,500,300,-400,450,250,-400,450,300,-350,550,300,-350,550,250,-350,500,300,-350,500,250,-400,550,250,-400,550,300,-400,500,250,-400,500,300,-350,600,300,-350,600,250,-350,550,300,-350,550,250,-400,600,250,-400,600,300,-400,550,250,-400,550,300,-350,450,350,-350,450,300,-350,400,350,-350,400,300,-400,450,300,-400,450,350,-400,400,300,-400,400,350,-350,500,350,-350,500,300,-350,450,350,-350,450,300,-400,500,300,-400,500,350,-400,450,300,-400,450,350,-350,550,350,-350,550,300,-350,500,350,-350,500,300,-400,550,300,-400,550,350,-400,500,300,-400,500,350,-350,600,350,-350,600,300,-350,550,350,-350,550,300,-400,600,300,-400,600,350,-400,550,300,-400,550,350,-350,450,250,-350,450,200,-350,400,250,-350,400,200,-400,450,200,-400,450,250,-400,400,200,-400,400,250,-350,450,150,-350,450,100,-350,400,150,-350,400,100,-400,450,100,-400,450,150,-400,400,100,-400,400,150,-350,500,150,-350,500,100,-350,450,150,-350,450,100,-400,500,100,-400,500,150,-400,450,100,-400,450,150,-350,550,150,-350,550,100,-350,500,150,-350,500,100,-400,550,100,-400,550,150,-400,500,100,-400,500,150,-350,600,150,-350,600,100,-350,550,150,-350,550,100,-400,600,100,-400,600,150,-400,550,100,-400,550,150,-350,450,-50,-350,450,-100,-350,400,-50,-350,400,-100,-400,450,-100,-400,450,-50,-400,400,-100,-400,400,-50,-350,500,-50,-350,500,-100,-350,450,-50,-350,450,-100,-400,500,-100,-400,500,-50,-400,450,-100,-400,450,-50,-350,550,-50,-350,550,-100,-350,500,-50,-350,500,-100,-400,550,-100,-400,550,-50,-400,500,-100,-400,500,-50,-350,600,-50,-350,600,-100,-350,550,-50,-350,550,-100,-400,600,-100,-400,600,-50,-400,550,-100,-400,550,-50,-350,450,0,-350,450,-50,-350,400,0,-350,400,-50,-400,450,-50,-400,450,0,-400,400,-50,-400,400,0,-350,600,0,-350,600,-50,-350,550,0,-350,550,-50,-400,600,-50,-400,600,0,-400,550,-50,-400,550,0,-350,450,50,-350,450,0,-350,400,50,-350,400,0,-400,450,0,-400,450,50,-400,400,0,-400,400,50,-350,600,50,-350,600,0,-350,550,50,-350,550,0,-400,600,0,-400,600,50,-400,550,0,-400,550,50,-350,450,100,-350,450,50,-350,400,100,-350,400,50,-400,450,50,-400,450,100,-400,400,50,-400,400,100,-350,500,100,-350,500,50,-350,450,100,-350,450,50,-400,500,50,-400,500,100,-400,450,50,-400,450,100,-350,550,100,-350,550,50,-350,500,100,-350,500,50,-400,550,50,-400,550,100,-400,500,50,-400,500,100,-350,600,100,-350,600,50,-350,550,100,-350,550,50,-400,600,50,-400,600,100,-400,550,50,-400,550,100,-350,500,50,-350,500,0,-350,450,50,-350,450,0,-400,500,0,-400,500,50,-400,450,0,-400,450,50,-350,500,0,-350,500,-50,-350,450,0,-350,450,-50,-400,500,-50,-400,500,0,-400,450,-50,-400,450,0,-350,550,50,-350,550,0,-350,500,50,-350,500,0,-400,550,0,-400,550,50,-400,500,0,-400,500,50,-350,550,0,-350,550,-50,-350,500,0,-350,500,-50,-400,550,-50,-400,550,0,-400,500,-50,-400,500,0,-350,450,-100,-350,450,-150,-350,400,-100,-350,400,-150,-400,450,-150,-400,450,-100,-400,400,-150,-400,400,-100,-350,500,-100,-350,500,-150,-350,450,-100,-350,450,-150,-400,500,-150,-400,500,-100,-400,450,-150,-400,450,-100,-350,550,-100,-350,550,-150,-350,500,-100,-350,500,-150,-400,550,-150,-400,550,-100,-400,500,-150,-400,500,-100,-350,600,-100,-350,600,-150,-350,550,-100,-350,550,-150,-400,600,-150,-400,600,-100,-400,550,-150,-400,550,-100,-350,450,-350,-350,450,-400,-350,400,-350,-350,400,-400,-400,450,-400,-400,450,-350,-400,400,-400,-400,400,-350,-350,500,-350,-350,500,-400,-350,450,-350,-350,450,-400,-400,500,-400,-400,500,-350,-400,450,-400,-400,450,-350,-350,550,-350,-350,550,-400,-350,500,-350,-350,500,-400,-400,550,-400,-400,550,-350,-400,500,-400,-400,500,-350,-350,600,-350,-350,600,-400,-350,550,-350,-350,550,-400,-400,600,-400,-400,600,-350,-400,550,-400,-400,550,-350,-350,450,-300,-350,450,-350,-350,400,-300,-350,400,-350,-400,450,-350,-400,450,-300,-400,400,-350,-400,400,-300,-350,500,-300,-350,500,-350,-350,450,-300,-350,450,-350,-400,500,-350,-400,500,-300,-400,450,-350,-400,450,-300,-350,550,-300,-350,550,-350,-350,500,-300,-350,500,-350,-400,550,-350,-400,550,-300,-400,500,-350,-400,500,-300,-350,600,-300,-350,600,-350,-350,550,-300,-350,550,-350,-400,600,-350,-400,600,-300,-400,550,-350,-400,550,-300,-350,500,-250,-350,500,-300,-350,450,-250,-350,450,-300,-400,500,-300,-400,500,-250,-400,450,-300,-400,450,-250,-350,550,-250,-350,550,-300,-350,500,-250,-350,500,-300,-400,550,-300,-400,550,-250,-400,500,-300,-400,500,-250,-350,600,-250,-350,600,-300,-350,550,-250,-350,550,-300,-400,600,-300,-400,600,-250,-400,550,-300,-400,550,-250,-350,450,-200,-350,450,-250,-350,400,-200,-350,400,-250,-400,450,-250,-400,450,-200,-400,400,-250,-400,400,-200,-350,500,-200,-350,500,-250,-350,450,-200,-350,450,-250,-400,500,-250,-400,500,-200,-400,450,-250,-400,450,-200,-350,550,-200,-350,550,-250,-350,500,-200,-350,500,-250,-400,550,-250,-400,550,-200,-400,500,-250,-400,500,-200,-350,600,-200,-350,600,-250,-350,550,-200,-350,550,-250,-400,600,-250,-400,600,-200,-400,550,-250,-400,550,-200,-350,450,-150,-350,450,-200,-350,400,-150,-350,400,-200,-400,450,-200,-400,450,-150,-400,400,-200,-400,400,-150,-350,500,-150,-350,500,-200,-350,450,-150,-350,450,-200,-400,500,-200,-400,500,-150,-400,450,-200,-400,450,-150,-350,550,-150,-350,550,-200,-350,500,-150,-350,500,-200,-400,550,-200,-400,550,-150,-400,500,-200,-400,500,-150,-350,600,-150,-350,600,-200,-350,550,-150,-350,550,-200,-400,600,-200,-400,600,-150,-400,550,-200,-400,550,-150,-350,450,-250,-350,450,-300,-350,400,-250,-350,400,-300,-400,450,-300,-400,450,-250,-400,400,-300,-400,400,-250,-350,650,-350,-350,650,-400,-350,600,-350,-350,600,-400,-400,650,-400,-400,650,-350,-400,600,-400,-400,600,-350,-350,650,-300,-350,650,-350,-350,600,-300,-350,600,-350,-400,650,-350,-400,650,-300,-400,600,-350,-400,600,-300,-350,650,-250,-350,650,-300,-350,600,-250,-350,600,-300,-400,650,-300,-400,650,-250,-400,600,-300,-400,600,-250,-350,650,-150,-350,650,-200,-350,600,-150,-350,600,-200,-400,650,-200,-400,650,-150,-400,600,-200,-400,600,-150,-350,650,-100,-350,650,-150,-350,600,-100,-350,600,-150,-400,650,-150,-400,650,-100,-400,600,-150,-400,600,-100,-350,650,-50,-350,650,-100,-350,600,-50,-350,600,-100,-400,650,-100,-400,650,-50,-400,600,-100,-400,600,-50,-350,650,0,-350,650,-50,-350,600,0,-350,600,-50,-400,650,-50,-400,650,0,-400,600,-50,-400,600,0,-350,650,50,-350,650,0,-350,600,50,-350,600,0,-400,650,0,-400,650,50,-400,600,0,-400,600,50,-350,650,100,-350,650,50,-350,600,100,-350,600,50,-400,650,50,-400,650,100,-400,600,50,-400,600,100,-350,650,150,-350,650,100,-350,600,150,-350,600,100,-400,650,100,-400,650,150,-400,600,100,-400,600,150,-350,650,200,-350,650,150,-350,600,200,-350,600,150,-400,650,150,-400,650,200,-400,600,150,-400,600,200,-350,650,300,-350,650,250,-350,600,300,-350,600,250,-400,650,250,-400,650,300,-400,600,250,-400,600,300,-350,650,350,-350,650,300,-350,600,350,-350,600,300,-400,650,300,-400,650,350,-400,600,300,-400,600,350,-350,650,250,-350,650,200,-350,600,250,-350,600,200,-400,650,200,-400,650,250,-400,600,200,-400,600,250,-350,650,-200,-350,650,-250,-350,600,-200,-350,600,-250,-400,650,-250,-400,650,-200,-400,600,-250,-400,600,-200,-300,450,-350,-300,450,-400,-300,400,-350,-300,400,-400,-350,450,-400,-350,450,-350,-350,400,-400,-350,400,-350,-250,450,-350,-250,450,-400,-250,400,-350,-250,400,-400,-300,450,-400,-300,450,-350,-300,400,-400,-300,400,-350,-150,450,-350,-150,450,-400,-150,400,-350,-150,400,-400,-200,450,-400,-200,450,-350,-200,400,-400,-200,400,-350,-50,450,-350,-50,450,-400,-50,400,-350,-50,400,-400,-100,450,-400,-100,450,-350,-100,400,-400,-100,400,-350,-300,500,-350,-300,500,-400,-300,450,-350,-300,450,-400,-350,500,-400,-350,500,-350,-350,450,-400,-350,450,-350,-250,500,-350,-250,500,-400,-250,450,-350,-250,450,-400,-300,500,-400,-300,500,-350,-300,450,-400,-300,450,-350,-200,500,-350,-200,500,-400,-200,450,-350,-200,450,-400,-250,500,-400,-250,500,-350,-250,450,-400,-250,450,-350,-150,500,-350,-150,500,-400,-150,450,-350,-150,450,-400,-200,500,-400,-200,500,-350,-200,450,-400,-200,450,-350,-100,500,-350,-100,500,-400,-100,450,-350,-100,450,-400,-150,500,-400,-150,500,-350,-150,450,-400,-150,450,-350,-50,500,-350,-50,500,-400,-50,450,-350,-50,450,-400,-100,500,-400,-100,500,-350,-100,450,-400,-100,450,-350,-300,550,-350,-300,550,-400,-300,500,-350,-300,500,-400,-350,550,-400,-350,550,-350,-350,500,-400,-350,500,-350,-250,550,-350,-250,550,-400,-250,500,-350,-250,500,-400,-300,550,-400,-300,550,-350,-300,500,-400,-300,500,-350,-200,550,-350,-200,550,-400,-200,500,-350,-200,500,-400,-250,550,-400,-250,550,-350,-250,500,-400,-250,500,-350,-150,550,-350,-150,550,-400,-150,500,-350,-150,500,-400,-200,550,-400,-200,550,-350,-200,500,-400,-200,500,-350,-100,550,-350,-100,550,-400,-100,500,-350,-100,500,-400,-150,550,-400,-150,550,-350,-150,500,-400,-150,500,-350,-50,550,-350,-50,550,-400,-50,500,-350,-50,500,-400,-100,550,-400,-100,550,-350,-100,500,-400,-100,500,-350,-300,600,-350,-300,600,-400,-300,550,-350,-300,550,-400,-350,600,-400,-350,600,-350,-350,550,-400,-350,550,-350,-250,600,-350,-250,600,-400,-250,550,-350,-250,550,-400,-300,600,-400,-300,600,-350,-300,550,-400,-300,550,-350,-200,600,-350,-200,600,-400,-200,550,-350,-200,550,-400,-250,600,-400,-250,600,-350,-250,550,-400,-250,550,-350,-150,600,-350,-150,600,-400,-150,550,-350,-150,550,-400,-200,600,-400,-200,600,-350,-200,550,-400,-200,550,-350,-100,600,-350,-100,600,-400,-100,550,-350,-100,550,-400,-150,600,-400,-150,600,-350,-150,550,-400,-150,550,-350,-50,600,-350,-50,600,-400,-50,550,-350,-50,550,-400,-100,600,-400,-100,600,-350,-100,550,-400,-100,550,-350,0,450,-350,0,450,-400,0,400,-350,0,400,-400,-50,450,-400,-50,450,-350,-50,400,-400,-50,400,-350,0,500,-350,0,500,-400,0,450,-350,0,450,-400,-50,500,-400,-50,500,-350,-50,450,-400,-50,450,-350,0,550,-350,0,550,-400,0,500,-350,0,500,-400,-50,550,-400,-50,550,-350,-50,500,-400,-50,500,-350,0,600,-350,0,600,-400,0,550,-350,0,550,-400,-50,600,-400,-50,600,-350,-50,550,-400,-50,550,-350,50,450,-350,50,450,-400,50,400,-350,50,400,-400,0,450,-400,0,450,-350,0,400,-400,0,400,-350,50,500,-350,50,500,-400,50,450,-350,50,450,-400,0,500,-400,0,500,-350,0,450,-400,0,450,-350,50,550,-350,50,550,-400,50,500,-350,50,500,-400,0,550,-400,0,550,-350,0,500,-400,0,500,-350,50,600,-350,50,600,-400,50,550,-350,50,550,-400,0,600,-400,0,600,-350,0,550,-400,0,550,-350,-200,450,-350,-200,450,-400,-200,400,-350,-200,400,-400,-250,450,-400,-250,450,-350,-250,400,-400,-250,400,-350,-100,450,-350,-100,450,-400,-100,400,-350,-100,400,-400,-150,450,-400,-150,450,-350,-150,400,-400,-150,400,-350,100,450,-350,100,450,-400,100,400,-350,100,400,-400,50,450,-400,50,450,-350,50,400,-400,50,400,-350,200,450,-350,200,450,-400,200,400,-350,200,400,-400,150,450,-400,150,450,-350,150,400,-400,150,400,-350,250,450,-350,250,450,-400,250,400,-350,250,400,-400,200,450,-400,200,450,-350,200,400,-400,200,400,-350,300,450,-350,300,450,-400,300,400,-350,300,400,-400,250,450,-400,250,450,-350,250,400,-400,250,400,-350,350,450,-350,350,450,-400,350,400,-350,350,400,-400,300,450,-400,300,450,-350,300,400,-400,300,400,-350,100,500,-350,100,500,-400,100,450,-350,100,450,-400,50,500,-400,50,500,-350,50,450,-400,50,450,-350,150,500,-350,150,500,-400,150,450,-350,150,450,-400,100,500,-400,100,500,-350,100,450,-400,100,450,-350,200,500,-350,200,500,-400,200,450,-350,200,450,-400,150,500,-400,150,500,-350,150,450,-400,150,450,-350,250,500,-350,250,500,-400,250,450,-350,250,450,-400,200,500,-400,200,500,-350,200,450,-400,200,450,-350,300,500,-350,300,500,-400,300,450,-350,300,450,-400,250,500,-400,250,500,-350,250,450,-400,250,450,-350,350,500,-350,350,500,-400,350,450,-350,350,450,-400,300,500,-400,300,500,-350,300,450,-400,300,450,-350,100,550,-350,100,550,-400,100,500,-350,100,500,-400,50,550,-400,50,550,-350,50,500,-400,50,500,-350,150,550,-350,150,550,-400,150,500,-350,150,500,-400,100,550,-400,100,550,-350,100,500,-400,100,500,-350,200,550,-350,200,550,-400,200,500,-350,200,500,-400,150,550,-400,150,550,-350,150,500,-400,150,500,-350,250,550,-350,250,550,-400,250,500,-350,250,500,-400,200,550,-400,200,550,-350,200,500,-400,200,500,-350,300,550,-350,300,550,-400,300,500,-350,300,500,-400,250,550,-400,250,550,-350,250,500,-400,250,500,-350,350,550,-350,350,550,-400,350,500,-350,350,500,-400,300,550,-400,300,550,-350,300,500,-400,300,500,-350,100,600,-350,100,600,-400,100,550,-350,100,550,-400,50,600,-400,50,600,-350,50,550,-400,50,550,-350,150,600,-350,150,600,-400,150,550,-350,150,550,-400,100,600,-400,100,600,-350,100,550,-400,100,550,-350,200,600,-350,200,600,-400,200,550,-350,200,550,-400,150,600,-400,150,600,-350,150,550,-400,150,550,-350,250,600,-350,250,600,-400,250,550,-350,250,550,-400,200,600,-400,200,600,-350,200,550,-400,200,550,-350,300,600,-350,300,600,-400,300,550,-350,300,550,-400,250,600,-400,250,600,-350,250,550,-400,250,550,-350,350,600,-350,350,600,-400,350,550,-350,350,550,-400,300,600,-400,300,600,-350,300,550,-400,300,550,-350,150,450,-350,150,450,-400,150,400,-350,150,400,-400,100,450,-400,100,450,-350,100,400,-400,100,400,-350,-300,650,-350,-300,650,-400,-300,600,-350,-300,600,-400,-350,650,-400,-350,650,-350,-350,600,-400,-350,600,-350,-250,650,-350,-250,650,-400,-250,600,-350,-250,600,-400,-300,650,-400,-300,650,-350,-300,600,-400,-300,600,-350,-100,650,-350,-100,650,-400,-100,600,-350,-100,600,-400,-150,650,-400,-150,650,-350,-150,600,-400,-150,600,-350,-50,650,-350,-50,650,-400,-50,600,-350,-50,600,-400,-100,650,-400,-100,650,-350,-100,600,-400,-100,600,-350,0,650,-350,0,650,-400,0,600,-350,0,600,-400,-50,650,-400,-50,650,-350,-50,600,-400,-50,600,-350,50,650,-350,50,650,-400,50,600,-350,50,600,-400,0,650,-400,0,650,-350,0,600,-400,0,600,-350,100,650,-350,100,650,-400,100,600,-350,100,600,-400,50,650,-400,50,650,-350,50,600,-400,50,600,-350,150,650,-350,150,650,-400,150,600,-350,150,600,-400,100,650,-400,100,650,-350,100,600,-400,100,600,-350,200,650,-350,200,650,-400,200,600,-350,200,600,-400,150,650,-400,150,650,-350,150,600,-400,150,600,-350,350,650,-350,350,650,-400,350,600,-350,350,600,-400,300,650,-400,300,650,-350,300,600,-400,300,600,-350,400,700,-350,400,700,-400,400,650,-350,400,650,-400,350,700,-400,350,700,-350,350,650,-400,350,650,-350,400,700,-300,400,700,-350,400,650,-300,400,650,-350,350,700,-350,350,700,-300,350,650,-350,350,650,-300,400,700,-250,400,700,-300,400,650,-250,400,650,-300,350,700,-300,350,700,-250,350,650,-300,350,650,-250,400,700,-200,400,700,-250,400,650,-200,400,650,-250,350,700,-250,350,700,-200,350,650,-250,350,650,-200,400,700,-150,400,700,-200,400,650,-150,400,650,-200,350,700,-200,350,700,-150,350,650,-200,350,650,-150,400,700,-100,400,700,-150,400,650,-100,400,650,-150,350,700,-150,350,700,-100,350,650,-150,350,650,-100,400,700,-50,400,700,-100,400,650,-50,400,650,-100,350,700,-100,350,700,-50,350,650,-100,350,650,-50,400,700,0,400,700,-50,400,650,0,400,650,-50,350,700,-50,350,700,0,350,650,-50,350,650,0,400,700,50,400,700,0,400,650,50,400,650,0,350,700,0,350,700,50,350,650,0,350,650,50,400,700,100,400,700,50,400,650,100,400,650,50,350,700,50,350,700,100,350,650,50,350,650,100,400,700,150,400,700,100,400,650,150,400,650,100,350,700,100,350,700,150,350,650,100,350,650,150,400,700,200,400,700,150,400,650,200,400,650,150,350,700,150,350,700,200,350,650,150,350,650,200,400,700,250,400,700,200,400,650,250,400,650,200,350,700,200,350,700,250,350,650,200,350,650,250,400,700,300,400,700,250,400,650,300,400,650,250,350,700,250,350,700,300,350,650,250,350,650,300,400,700,350,400,700,300,400,650,350,400,650,300,350,700,300,350,700,350,350,650,300,350,650,350,400,700,400,400,700,350,400,650,400,400,650,350,350,700,350,350,700,400,350,650,350,350,650,400,-350,700,-350,-350,700,-400,-350,650,-350,-350,650,-400,-400,700,-400,-400,700,-350,-400,650,-400,-400,650,-350,-350,700,-300,-350,700,-350,-350,650,-300,-350,650,-350,-400,700,-350,-400,700,-300,-400,650,-350,-400,650,-300,-350,700,-250,-350,700,-300,-350,650,-250,-350,650,-300,-400,700,-300,-400,700,-250,-400,650,-300,-400,650,-250,-350,700,-200,-350,700,-250,-350,650,-200,-350,650,-250,-400,700,-250,-400,700,-200,-400,650,-250,-400,650,-200,-350,700,-150,-350,700,-200,-350,650,-150,-350,650,-200,-400,700,-200,-400,700,-150,-400,650,-200,-400,650,-150,-350,700,-100,-350,700,-150,-350,650,-100,-350,650,-150,-400,700,-150,-400,700,-100,-400,650,-150,-400,650,-100,-350,700,-50,-350,700,-100,-350,650,-50,-350,650,-100,-400,700,-100,-400,700,-50,-400,650,-100,-400,650,-50,-350,700,0,-350,700,-50,-350,650,0,-350,650,-50,-400,700,-50,-400,700,0,-400,650,-50,-400,650,0,-350,700,50,-350,700,0,-350,650,50,-350,650,0,-400,700,0,-400,700,50,-400,650,0,-400,650,50,-350,700,100,-350,700,50,-350,650,100,-350,650,50,-400,700,50,-400,700,100,-400,650,50,-400,650,100,-350,700,150,-350,700,100,-350,650,150,-350,650,100,-400,700,100,-400,700,150,-400,650,100,-400,650,150,-350,700,200,-350,700,150,-350,650,200,-350,650,150,-400,700,150,-400,700,200,-400,650,150,-400,650,200,-350,700,250,-350,700,200,-350,650,250,-350,650,200,-400,700,200,-400,700,250,-400,650,200,-400,650,250,-350,700,300,-350,700,250,-350,650,300,-350,650,250,-400,700,250,-400,700,300,-400,650,250,-400,650,300,-350,700,350,-350,700,300,-350,650,350,-350,650,300,-400,700,300,-400,700,350,-400,650,300,-400,650,350,-350,700,400,-350,700,350,-350,650,400,-350,650,350,-400,700,350,-400,700,400,-400,650,350,-400,650,400,300,700,400,300,700,350,300,650,400,300,650,350,250,700,350,250,700,400,250,650,350,250,650,400,350,700,400,350,700,350,350,650,400,350,650,350,300,700,350,300,700,400,300,650,350,300,650,400,-300,700,400,-300,700,350,-300,650,400,-300,650,350,-350,700,350,-350,700,400,-350,650,350,-350,650,400,-250,700,400,-250,700,350,-250,650,400,-250,650,350,-300,700,350,-300,700,400,-300,650,350,-300,650,400,-150,700,400,-150,700,350,-150,650,400,-150,650,350,-200,700,350,-200,700,400,-200,650,350,-200,650,400,-100,700,400,-100,700,350,-100,650,400,-100,650,350,-150,700,350,-150,700,400,-150,650,350,-150,650,400,-50,700,400,-50,700,350,-50,650,400,-50,650,350,-100,700,350,-100,700,400,-100,650,350,-100,650,400,0,700,400,0,700,350,0,650,400,0,650,350,-50,700,350,-50,700,400,-50,650,350,-50,650,400,50,700,400,50,700,350,50,650,400,50,650,350,0,700,350,0,700,400,0,650,350,0,650,400,100,700,400,100,700,350,100,650,400,100,650,350,50,700,350,50,700,400,50,650,350,50,650,400,150,700,400,150,700,350,150,650,400,150,650,350,100,700,350,100,700,400,100,650,350,100,650,400,200,700,400,200,700,350,200,650,400,200,650,350,150,700,350,150,700,400,150,650,350,150,650,400,300,650,400,300,650,350,300,600,400,300,600,350,250,650,350,250,650,400,250,600,350,250,600,400,250,650,400,250,650,350,250,600,400,250,600,350,200,650,350,200,650,400,200,600,350,200,600,400,-150,650,400,-150,650,350,-150,600,400,-150,600,350,-200,650,350,-200,650,400,-200,600,350,-200,600,400,-200,650,400,-200,650,350,-200,600,400,-200,600,350,-250,650,350,-250,650,400,-250,600,350,-250,600,400,250,700,400,250,700,350,250,650,400,250,650,350,200,700,350,200,700,400,200,650,350,200,650,400,-200,700,400,-200,700,350,-200,650,400,-200,650,350,-250,700,350,-250,700,400,-250,650,350,-250,650,400,-150,650,-350,-150,650,-400,-150,600,-350,-150,600,-400,-200,650,-400,-200,650,-350,-200,600,-400,-200,600,-350,-200,650,-350,-200,650,-400,-200,600,-350,-200,600,-400,-250,650,-400,-250,650,-350,-250,600,-400,-250,600,-350,250,650,-350,250,650,-400,250,600,-350,250,600,-400,200,650,-400,200,650,-350,200,600,-400,200,600,-350,300,650,-350,300,650,-400,300,600,-350,300,600,-400,250,650,-400,250,650,-350,250,600,-400,250,600,-350,-300,700,-350,-300,700,-400,-300,650,-350,-300,650,-400,-350,700,-400,-350,700,-350,-350,650,-400,-350,650,-350,-250,700,-350,-250,700,-400,-250,650,-350,-250,650,-400,-300,700,-400,-300,700,-350,-300,650,-400,-300,650,-350,-150,700,-350,-150,700,-400,-150,650,-350,-150,650,-400,-200,700,-400,-200,700,-350,-200,650,-400,-200,650,-350,-100,700,-350,-100,700,-400,-100,650,-350,-100,650,-400,-150,700,-400,-150,700,-350,-150,650,-400,-150,650,-350,-50,700,-350,-50,700,-400,-50,650,-350,-50,650,-400,-100,700,-400,-100,700,-350,-100,650,-400,-100,650,-350,0,700,-350,0,700,-400,0,650,-350,0,650,-400,-50,700,-400,-50,700,-350,-50,650,-400,-50,650,-350,50,700,-350,50,700,-400,50,650,-350,50,650,-400,0,700,-400,0,700,-350,0,650,-400,0,650,-350,100,700,-350,100,700,-400,100,650,-350,100,650,-400,50,700,-400,50,700,-350,50,650,-400,50,650,-350,150,700,-350,150,700,-400,150,650,-350,150,650,-400,100,700,-400,100,700,-350,100,650,-400,100,650,-350,200,700,-350,200,700,-400,200,650,-350,200,650,-400,150,700,-400,150,700,-350,150,650,-400,150,650,-350,300,700,-350,300,700,-400,300,650,-350,300,650,-400,250,700,-400,250,700,-350,250,650,-400,250,650,-350,350,700,-350,350,700,-400,350,650,-350,350,650,-400,300,700,-400,300,700,-350,300,650,-400,300,650,-350,-200,700,-350,-200,700,-400,-200,650,-350,-200,650,-400,-250,700,-400,-250,700,-350,-250,650,-400,-250,650,-350,250,700,-350,250,700,-400,250,650,-350,250,650,-400,200,700,-400,200,700,-350,200,650,-400,200,650,-350,250,700,350,250,700,300,250,650,350,250,650,300,200,700,300,200,700,350,200,650,300,200,650,350,250,700,300,250,700,250,250,650,300,250,650,250,200,700,250,200,700,300,200,650,250,200,650,300,-200,700,350,-200,700,300,-200,650,350,-200,650,300,-250,700,300,-250,700,350,-250,650,300,-250,650,350,-200,700,300,-200,700,250,-200,650,300,-200,650,250,-250,700,250,-250,700,300,-250,650,250,-250,650,300,-200,700,250,-200,700,200,-200,650,250,-200,650,200,-250,700,200,-250,700,250,-250,650,200,-250,650,250,-200,700,200,-200,700,150,-200,650,200,-200,650,150,-250,700,150,-250,700,200,-250,650,150,-250,650,200,-200,700,150,-200,700,100,-200,650,150,-200,650,100,-250,700,100,-250,700,150,-250,650,100,-250,650,150,-200,700,100,-200,700,50,-200,650,100,-200,650,50,-250,700,50,-250,700,100,-250,650,50,-250,650,100,-200,700,50,-200,700,0,-200,650,50,-200,650,0,-250,700,0,-250,700,50,-250,650,0,-250,650,50,-200,700,0,-200,700,-50,-200,650,0,-200,650,-50,-250,700,-50,-250,700,0,-250,650,-50,-250,650,0,-200,700,-50,-200,700,-100,-200,650,-50,-200,650,-100,-250,700,-100,-250,700,-50,-250,650,-100,-250,650,-50,-200,700,-100,-200,700,-150,-200,650,-100,-200,650,-150,-250,700,-150,-250,700,-100,-250,650,-150,-250,650,-100,-200,700,-150,-200,700,-200,-200,650,-150,-200,650,-200,-250,700,-200,-250,700,-150,-250,650,-200,-250,650,-150,-200,700,-200,-200,700,-250,-200,650,-200,-200,650,-250,-250,700,-250,-250,700,-200,-250,650,-250,-250,650,-200,-200,700,-250,-200,700,-300,-200,650,-250,-200,650,-300,-250,700,-300,-250,700,-250,-250,650,-300,-250,650,-250,-200,700,-300,-200,700,-350,-200,650,-300,-200,650,-350,-250,700,-350,-250,700,-300,-250,650,-350,-250,650,-300,250,700,250,250,700,200,250,650,250,250,650,200,200,700,200,200,700,250,200,650,200,200,650,250,250,700,200,250,700,150,250,650,200,250,650,150,200,700,150,200,700,200,200,650,150,200,650,200,250,700,150,250,700,100,250,650,150,250,650,100,200,700,100,200,700,150,200,650,100,200,650,150,250,700,100,250,700,50,250,650,100,250,650,50,200,700,50,200,700,100,200,650,50,200,650,100,250,700,50,250,700,0,250,650,50,250,650,0,200,700,0,200,700,50,200,650,0,200,650,50,250,700,0,250,700,-50,250,650,0,250,650,-50,200,700,-50,200,700,0,200,650,-50,200,650,0,250,700,-50,250,700,-100,250,650,-50,250,650,-100,200,700,-100,200,700,-50,200,650,-100,200,650,-50,250,700,-100,250,700,-150,250,650,-100,250,650,-150,200,700,-150,200,700,-100,200,650,-150,200,650,-100,250,700,-150,250,700,-200,250,650,-150,250,650,-200,200,700,-200,200,700,-150,200,650,-200,200,650,-150,250,700,-200,250,700,-250,250,650,-200,250,650,-250,200,700,-250,200,700,-200,200,650,-250,200,650,-200,250,700,-250,250,700,-300,250,650,-250,250,650,-300,200,700,-300,200,700,-250,200,650,-300,200,650,-250,250,700,-300,250,700,-350,250,650,-300,250,650,-350,200,700,-350,200,700,-300,200,650,-350,200,650,-300,300,750,-350,300,750,-400,300,700,-350,300,700,-400,250,750,-400,250,750,-350,250,700,-400,250,700,-350,350,750,-350,350,750,-400,350,700,-350,350,700,-400,300,750,-400,300,750,-350,300,700,-400,300,700,-350,400,750,-350,400,750,-400,400,700,-350,400,700,-400,350,750,-400,350,750,-350,350,700,-400,350,700,-350,300,750,-300,300,750,-350,300,700,-300,300,700,-350,250,750,-350,250,750,-300,250,700,-350,250,700,-300,350,750,-300,350,750,-350,350,700,-300,350,700,-350,300,750,-350,300,750,-300,300,700,-350,300,700,-300,400,750,-300,400,750,-350,400,700,-300,400,700,-350,350,750,-350,350,750,-300,350,700,-350,350,700,-300,300,750,-250,300,750,-300,300,700,-250,300,700,-300,250,750,-300,250,750,-250,250,700,-300,250,700,-250,350,750,-250,350,750,-300,350,700,-250,350,700,-300,300,750,-300,300,750,-250,300,700,-300,300,700,-250,400,750,-250,400,750,-300,400,700,-250,400,700,-300,350,750,-300,350,750,-250,350,700,-300,350,700,-250,300,750,-200,300,750,-250,300,700,-200,300,700,-250,250,750,-250,250,750,-200,250,700,-250,250,700,-200,350,750,-200,350,750,-250,350,700,-200,350,700,-250,300,750,-250,300,750,-200,300,700,-250,300,700,-200,400,750,-200,400,750,-250,400,700,-200,400,700,-250,350,750,-250,350,750,-200,350,700,-250,350,700,-200,300,750,-150,300,750,-200,300,700,-150,300,700,-200,250,750,-200,250,750,-150,250,700,-200,250,700,-150,350,750,-150,350,750,-200,350,700,-150,350,700,-200,300,750,-200,300,750,-150,300,700,-200,300,700,-150,400,750,-150,400,750,-200,400,700,-150,400,700,-200,350,750,-200,350,750,-150,350,700,-200,350,700,-150,300,750,-100,300,750,-150,300,700,-100,300,700,-150,250,750,-150,250,750,-100,250,700,-150,250,700,-100,350,750,-100,350,750,-150,350,700,-100,350,700,-150,300,750,-150,300,750,-100,300,700,-150,300,700,-100,400,750,-100,400,750,-150,400,700,-100,400,700,-150,350,750,-150,350,750,-100,350,700,-150,350,700,-100,300,750,-50,300,750,-100,300,700,-50,300,700,-100,250,750,-100,250,750,-50,250,700,-100,250,700,-50,350,750,-50,350,750,-100,350,700,-50,350,700,-100,300,750,-100,300,750,-50,300,700,-100,300,700,-50,400,750,-50,400,750,-100,400,700,-50,400,700,-100,350,750,-100,350,750,-50,350,700,-100,350,700,-50,300,750,0,300,750,-50,300,700,0,300,700,-50,250,750,-50,250,750,0,250,700,-50,250,700,0,350,750,0,350,750,-50,350,700,0,350,700,-50,300,750,-50,300,750,0,300,700,-50,300,700,0,400,750,0,400,750,-50,400,700,0,400,700,-50,350,750,-50,350,750,0,350,700,-50,350,700,0,300,750,50,300,750,0,300,700,50,300,700,0,250,750,0,250,750,50,250,700,0,250,700,50,350,750,50,350,750,0,350,700,50,350,700,0,300,750,0,300,750,50,300,700,0,300,700,50,400,750,50,400,750,0,400,700,50,400,700,0,350,750,0,350,750,50,350,700,0,350,700,50,300,750,100,300,750,50,300,700,100,300,700,50,250,750,50,250,750,100,250,700,50,250,700,100,350,750,100,350,750,50,350,700,100,350,700,50,300,750,50,300,750,100,300,700,50,300,700,100,300,750,150,300,750,100,300,700,150,300,700,100,250,750,100,250,750,150,250,700,100,250,700,150,350,750,150,350,750,100,350,700,150,350,700,100,300,750,100,300,750,150,300,700,100,300,700,150,400,750,150,400,750,100,400,700,150,400,700,100,350,750,100,350,750,150,350,700,100,350,700,150,300,750,200,300,750,150,300,700,200,300,700,150,250,750,150,250,750,200,250,700,150,250,700,200,350,750,200,350,750,150,350,700,200,350,700,150,300,750,150,300,750,200,300,700,150,300,700,200,400,750,200,400,750,150,400,700,200,400,700,150,350,750,150,350,750,200,350,700,150,350,700,200,300,750,250,300,750,200,300,700,250,300,700,200,250,750,200,250,750,250,250,700,200,250,700,250,350,750,250,350,750,200,350,700,250,350,700,200,300,750,200,300,750,250,300,700,200,300,700,250,400,750,250,400,750,200,400,700,250,400,700,200,350,750,200,350,750,250,350,700,200,350,700,250,300,750,300,300,750,250,300,700,300,300,700,250,250,750,250,250,750,300,250,700,250,250,700,300,350,750,300,350,750,250,350,700,300,350,700,250,300,750,250,300,750,300,300,700,250,300,700,300,400,750,300,400,750,250,400,700,300,400,700,250,350,750,250,350,750,300,350,700,250,350,700,300,300,750,350,300,750,300,300,700,350,300,700,300,250,750,300,250,750,350,250,700,300,250,700,350,350,750,350,350,750,300,350,700,350,350,700,300,300,750,300,300,750,350,300,700,300,300,700,350,400,750,350,400,750,300,400,700,350,400,700,300,350,750,300,350,750,350,350,700,300,350,700,350,300,750,400,300,750,350,300,700,400,300,700,350,250,750,350,250,750,400,250,700,350,250,700,400,350,750,400,350,750,350,350,700,400,350,700,350,300,750,350,300,750,400,300,700,350,300,700,400,400,750,400,400,750,350,400,700,400,400,700,350,350,750,350,350,750,400,350,700,350,350,700,400,-150,750,-350,-150,750,-400,-150,700,-350,-150,700,-400,-200,750,-400,-200,750,-350,-200,700,-400,-200,700,-350,-100,750,-350,-100,750,-400,-100,700,-350,-100,700,-400,-150,750,-400,-150,750,-350,-150,700,-400,-150,700,-350,-50,750,-350,-50,750,-400,-50,700,-350,-50,700,-400,-100,750,-400,-100,750,-350,-100,700,-400,-100,700,-350,0,750,-350,0,750,-400,0,700,-350,0,700,-400,-50,750,-400,-50,750,-350,-50,700,-400,-50,700,-350,50,750,-350,50,750,-400,50,700,-350,50,700,-400,0,750,-400,0,750,-350,0,700,-400,0,700,-350,100,750,-350,100,750,-400,100,700,-350,100,700,-400,50,750,-400,50,750,-350,50,700,-400,50,700,-350,150,750,-350,150,750,-400,150,700,-350,150,700,-400,100,750,-400,100,750,-350,100,700,-400,100,700,-350,200,750,-350,200,750,-400,200,700,-350,200,700,-400,150,750,-400,150,750,-350,150,700,-400,150,700,-350,-150,750,-300,-150,750,-350,-150,700,-300,-150,700,-350,-200,750,-350,-200,750,-300,-200,700,-350,-200,700,-300,-100,750,-300,-100,750,-350,-100,700,-300,-100,700,-350,-150,750,-350,-150,750,-300,-150,700,-350,-150,700,-300,-50,750,-300,-50,750,-350,-50,700,-300,-50,700,-350,-100,750,-350,-100,750,-300,-100,700,-350,-100,700,-300,0,750,-300,0,750,-350,0,700,-300,0,700,-350,-50,750,-350,-50,750,-300,-50,700,-350,-50,700,-300,50,750,-300,50,750,-350,50,700,-300,50,700,-350,0,750,-350,0,750,-300,0,700,-350,0,700,-300,100,750,-300,100,750,-350,100,700,-300,100,700,-350,50,750,-350,50,750,-300,50,700,-350,50,700,-300,150,750,-300,150,750,-350,150,700,-300,150,700,-350,100,750,-350,100,750,-300,100,700,-350,100,700,-300,200,750,-300,200,750,-350,200,700,-300,200,700,-350,150,750,-350,150,750,-300,150,700,-350,150,700,-300,-150,750,-250,-150,750,-300,-150,700,-250,-150,700,-300,-200,750,-300,-200,750,-250,-200,700,-300,-200,700,-250,-100,750,-250,-100,750,-300,-100,700,-250,-100,700,-300,-150,750,-300,-150,750,-250,-150,700,-300,-150,700,-250,-50,750,-250,-50,750,-300,-50,700,-250,-50,700,-300,-100,750,-300,-100,750,-250,-100,700,-300,-100,700,-250,0,750,-250,0,750,-300,0,700,-250,0,700,-300,-50,750,-300,-50,750,-250,-50,700,-300,-50,700,-250,50,750,-250,50,750,-300,50,700,-250,50,700,-300,0,750,-300,0,750,-250,0,700,-300,0,700,-250,100,750,-250,100,750,-300,100,700,-250,100,700,-300,50,750,-300,50,750,-250,50,700,-300,50,700,-250,150,750,-250,150,750,-300,150,700,-250,150,700,-300,100,750,-300,100,750,-250,100,700,-300,100,700,-250,200,750,-250,200,750,-300,200,700,-250,200,700,-300,150,750,-300,150,750,-250,150,700,-300,150,700,-250,-150,750,-200,-150,750,-250,-150,700,-200,-150,700,-250,-200,750,-250,-200,750,-200,-200,700,-250,-200,700,-200,-100,750,-200,-100,750,-250,-100,700,-200,-100,700,-250,-150,750,-250,-150,750,-200,-150,700,-250,-150,700,-200,-50,750,-200,-50,750,-250,-50,700,-200,-50,700,-250,-100,750,-250,-100,750,-200,-100,700,-250,-100,700,-200,0,750,-200,0,750,-250,0,700,-200,0,700,-250,-50,750,-250,-50,750,-200,-50,700,-250,-50,700,-200,50,750,-200,50,750,-250,50,700,-200,50,700,-250,0,750,-250,0,750,-200,0,700,-250,0,700,-200,100,750,-200,100,750,-250,100,700,-200,100,700,-250,50,750,-250,50,750,-200,50,700,-250,50,700,-200,150,750,-200,150,750,-250,150,700,-200,150,700,-250,100,750,-250,100,750,-200,100,700,-250,100,700,-200,200,750,-200,200,750,-250,200,700,-200,200,700,-250,150,750,-250,150,750,-200,150,700,-250,150,700,-200,-150,750,-150,-150,750,-200,-150,700,-150,-150,700,-200,-200,750,-200,-200,750,-150,-200,700,-200,-200,700,-150,-100,750,-150,-100,750,-200,-100,700,-150,-100,700,-200,-150,750,-200,-150,750,-150,-150,700,-200,-150,700,-150,-50,750,-150,-50,750,-200,-50,700,-150,-50,700,-200,-100,750,-200,-100,750,-150,-100,700,-200,-100,700,-150,0,750,-150,0,750,-200,0,700,-150,0,700,-200,-50,750,-200,-50,750,-150,-50,700,-200,-50,700,-150,50,750,-150,50,750,-200,50,700,-150,50,700,-200,0,750,-200,0,750,-150,0,700,-200,0,700,-150,100,750,-150,100,750,-200,100,700,-150,100,700,-200,50,750,-200,50,750,-150,50,700,-200,50,700,-150,150,750,-150,150,750,-200,150,700,-150,150,700,-200,100,750,-200,100,750,-150,100,700,-200,100,700,-150,200,750,-150,200,750,-200,200,700,-150,200,700,-200,150,750,-200,150,750,-150,150,700,-200,150,700,-150,-150,750,-100,-150,750,-150,-150,700,-100,-150,700,-150,-200,750,-150,-200,750,-100,-200,700,-150,-200,700,-100,-100,750,-100,-100,750,-150,-100,700,-100,-100,700,-150,-150,750,-150,-150,750,-100,-150,700,-150,-150,700,-100,-50,750,-100,-50,750,-150,-50,700,-100,-50,700,-150,-100,750,-150,-100,750,-100,-100,700,-150,-100,700,-100,0,750,-100,0,750,-150,0,700,-100,0,700,-150,-50,750,-150,-50,750,-100,-50,700,-150,-50,700,-100,50,750,-100,50,750,-150,50,700,-100,50,700,-150,0,750,-150,0,750,-100,0,700,-150,0,700,-100,100,750,-100,100,750,-150,100,700,-100,100,700,-150,50,750,-150,50,750,-100,50,700,-150,50,700,-100,150,750,-100,150,750,-150,150,700,-100,150,700,-150,100,750,-150,100,750,-100,100,700,-150,100,700,-100,200,750,-100,200,750,-150,200,700,-100,200,700,-150,150,750,-150,150,750,-100,150,700,-150,150,700,-100,-150,750,-50,-150,750,-100,-150,700,-50,-150,700,-100,-200,750,-100,-200,750,-50,-200,700,-100,-200,700,-50,-100,750,-50,-100,750,-100,-100,700,-50,-100,700,-100,-150,750,-100,-150,750,-50,-150,700,-100,-150,700,-50,-50,750,-50,-50,750,-100,-50,700,-50,-50,700,-100,-100,750,-100,-100,750,-50,-100,700,-100,-100,700,-50,0,750,-50,0,750,-100,0,700,-50,0,700,-100,-50,750,-100,-50,750,-50,-50,700,-100,-50,700,-50,50,750,-50,50,750,-100,50,700,-50,50,700,-100,0,750,-100,0,750,-50,0,700,-100,0,700,-50,100,750,-50,100,750,-100,100,700,-50,100,700,-100,50,750,-100,50,750,-50,50,700,-100,50,700,-50,150,750,-50,150,750,-100,150,700,-50,150,700,-100,100,750,-100,100,750,-50,100,700,-100,100,700,-50,200,750,-50,200,750,-100,200,700,-50,200,700,-100,150,750,-100,150,750,-50,150,700,-100,150,700,-50,-150,750,0,-150,750,-50,-150,700,0,-150,700,-50,-200,750,-50,-200,750,0,-200,700,-50,-200,700,0,-100,750,0,-100,750,-50,-100,700,0,-100,700,-50,-150,750,-50,-150,750,0,-150,700,-50,-150,700,0,-50,750,0,-50,750,-50,-50,700,0,-50,700,-50,-100,750,-50,-100,750,0,-100,700,-50,-100,700,0,0,750,0,0,750,-50,0,700,0,0,700,-50,-50,750,-50,-50,750,0,-50,700,-50,-50,700,0,50,750,0,50,750,-50,50,700,0,50,700,-50,0,750,-50,0,750,0,0,700,-50,0,700,0,100,750,0,100,750,-50,100,700,0,100,700,-50,50,750,-50,50,750,0,50,700,-50,50,700,0,150,750,0,150,750,-50,150,700,0,150,700,-50,100,750,-50,100,750,0,100,700,-50,100,700,0,200,750,0,200,750,-50,200,700,0,200,700,-50,150,750,-50,150,750,0,150,700,-50,150,700,0,-150,750,50,-150,750,0,-150,700,50,-150,700,0,-200,750,0,-200,750,50,-200,700,0,-200,700,50,-100,750,50,-100,750,0,-100,700,50,-100,700,0,-150,750,0,-150,750,50,-150,700,0,-150,700,50,-50,750,50,-50,750,0,-50,700,50,-50,700,0,-100,750,0,-100,750,50,-100,700,0,-100,700,50,0,750,50,0,750,0,0,700,50,0,700,0,-50,750,0,-50,750,50,-50,700,0,-50,700,50,50,750,50,50,750,0,50,700,50,50,700,0,0,750,0,0,750,50,0,700,0,0,700,50,100,750,50,100,750,0,100,700,50,100,700,0,50,750,0,50,750,50,50,700,0,50,700,50,150,750,50,150,750,0,150,700,50,150,700,0,100,750,0,100,750,50,100,700,0,100,700,50,200,750,50,200,750,0,200,700,50,200,700,0,150,750,0,150,750,50,150,700,0,150,700,50,-150,750,100,-150,750,50,-150,700,100,-150,700,50,-200,750,50,-200,750,100,-200,700,50,-200,700,100,-100,750,100,-100,750,50,-100,700,100,-100,700,50,-150,750,50,-150,750,100,-150,700,50,-150,700,100,-50,750,100,-50,750,50,-50,700,100,-50,700,50,-100,750,50,-100,750,100,-100,700,50,-100,700,100,0,750,100,0,750,50,0,700,100,0,700,50,-50,750,50,-50,750,100,-50,700,50,-50,700,100,50,750,100,50,750,50,50,700,100,50,700,50,0,750,50,0,750,100,0,700,50,0,700,100,100,750,100,100,750,50,100,700,100,100,700,50,50,750,50,50,750,100,50,700,50,50,700,100,150,750,100,150,750,50,150,700,100,150,700,50,100,750,50,100,750,100,100,700,50,100,700,100,200,750,100,200,750,50,200,700,100,200,700,50,150,750,50,150,750,100,150,700,50,150,700,100,-150,750,150,-150,750,100,-150,700,150,-150,700,100,-200,750,100,-200,750,150,-200,700,100,-200,700,150,-100,750,150,-100,750,100,-100,700,150,-100,700,100,-150,750,100,-150,750,150,-150,700,100,-150,700,150,-50,750,150,-50,750,100,-50,700,150,-50,700,100,-100,750,100,-100,750,150,-100,700,100,-100,700,150,0,750,150,0,750,100,0,700,150,0,700,100,-50,750,100,-50,750,150,-50,700,100,-50,700,150,50,750,150,50,750,100,50,700,150,50,700,100,0,750,100,0,750,150,0,700,100,0,700,150,100,750,150,100,750,100,100,700,150,100,700,100,50,750,100,50,750,150,50,700,100,50,700,150,150,750,150,150,750,100,150,700,150,150,700,100,100,750,100,100,750,150,100,700,100,100,700,150,200,750,150,200,750,100,200,700,150,200,700,100,150,750,100,150,750,150,150,700,100,150,700,150,-150,750,200,-150,750,150,-150,700,200,-150,700,150,-200,750,150,-200,750,200,-200,700,150,-200,700,200,-100,750,200,-100,750,150,-100,700,200,-100,700,150,-150,750,150,-150,750,200,-150,700,150,-150,700,200,-50,750,200,-50,750,150,-50,700,200,-50,700,150,-100,750,150,-100,750,200,-100,700,150,-100,700,200,0,750,200,0,750,150,0,700,200,0,700,150,-50,750,150,-50,750,200,-50,700,150,-50,700,200,50,750,200,50,750,150,50,700,200,50,700,150,0,750,150,0,750,200,0,700,150,0,700,200,100,750,200,100,750,150,100,700,200,100,700,150,50,750,150,50,750,200,50,700,150,50,700,200,150,750,200,150,750,150,150,700,200,150,700,150,100,750,150,100,750,200,100,700,150,100,700,200,200,750,200,200,750,150,200,700,200,200,700,150,150,750,150,150,750,200,150,700,150,150,700,200,-150,750,250,-150,750,200,-150,700,250,-150,700,200,-200,750,200,-200,750,250,-200,700,200,-200,700,250,-100,750,250,-100,750,200,-100,700,250,-100,700,200,-150,750,200,-150,750,250,-150,700,200,-150,700,250,-50,750,250,-50,750,200,-50,700,250,-50,700,200,-100,750,200,-100,750,250,-100,700,200,-100,700,250,0,750,250,0,750,200,0,700,250,0,700,200,-50,750,200,-50,750,250,-50,700,200,-50,700,250,50,750,250,50,750,200,50,700,250,50,700,200,0,750,200,0,750,250,0,700,200,0,700,250,100,750,250,100,750,200,100,700,250,100,700,200,50,750,200,50,750,250,50,700,200,50,700,250,150,750,250,150,750,200,150,700,250,150,700,200,100,750,200,100,750,250,100,700,200,100,700,250,200,750,250,200,750,200,200,700,250,200,700,200,150,750,200,150,750,250,150,700,200,150,700,250,-150,750,300,-150,750,250,-150,700,300,-150,700,250,-200,750,250,-200,750,300,-200,700,250,-200,700,300,-100,750,300,-100,750,250,-100,700,300,-100,700,250,-150,750,250,-150,750,300,-150,700,250,-150,700,300,-50,750,300,-50,750,250,-50,700,300,-50,700,250,-100,750,250,-100,750,300,-100,700,250,-100,700,300,0,750,300,0,750,250,0,700,300,0,700,250,-50,750,250,-50,750,300,-50,700,250,-50,700,300,50,750,300,50,750,250,50,700,300,50,700,250,0,750,250,0,750,300,0,700,250,0,700,300,100,750,300,100,750,250,100,700,300,100,700,250,50,750,250,50,750,300,50,700,250,50,700,300,150,750,300,150,750,250,150,700,300,150,700,250,100,750,250,100,750,300,100,700,250,100,700,300,200,750,300,200,750,250,200,700,300,200,700,250,150,750,250,150,750,300,150,700,250,150,700,300,-150,750,350,-150,750,300,-150,700,350,-150,700,300,-200,750,300,-200,750,350,-200,700,300,-200,700,350,-100,750,350,-100,750,300,-100,700,350,-100,700,300,-150,750,300,-150,750,350,-150,700,300,-150,700,350,-50,750,350,-50,750,300,-50,700,350,-50,700,300,-100,750,300,-100,750,350,-100,700,300,-100,700,350,0,750,350,0,750,300,0,700,350,0,700,300,-50,750,300,-50,750,350,-50,700,300,-50,700,350,50,750,350,50,750,300,50,700,350,50,700,300,0,750,300,0,750,350,0,700,300,0,700,350,100,750,350,100,750,300,100,700,350,100,700,300,50,750,300,50,750,350,50,700,300,50,700,350,150,750,350,150,750,300,150,700,350,150,700,300,100,750,300,100,750,350,100,700,300,100,700,350,200,750,350,200,750,300,200,700,350,200,700,300,150,750,300,150,750,350,150,700,300,150,700,350,-150,750,400,-150,750,350,-150,700,400,-150,700,350,-200,750,350,-200,750,400,-200,700,350,-200,700,400,-100,750,400,-100,750,350,-100,700,400,-100,700,350,-150,750,350,-150,750,400,-150,700,350,-150,700,400,-50,750,400,-50,750,350,-50,700,400,-50,700,350,-100,750,350,-100,750,400,-100,700,350,-100,700,400,0,750,400,0,750,350,0,700,400,0,700,350,-50,750,350,-50,750,400,-50,700,350,-50,700,400,50,750,400,50,750,350,50,700,400,50,700,350,0,750,350,0,750,400,0,700,350,0,700,400,100,750,400,100,750,350,100,700,400,100,700,350,50,750,350,50,750,400,50,700,350,50,700,400,150,750,400,150,750,350,150,700,400,150,700,350,100,750,350,100,750,400,100,700,350,100,700,400,200,750,400,200,750,350,200,700,400,200,700,350,150,750,350,150,750,400,150,700,350,150,700,400,-350,750,-350,-350,750,-400,-350,700,-350,-350,700,-400,-400,750,-400,-400,750,-350,-400,700,-400,-400,700,-350,-300,750,-350,-300,750,-400,-300,700,-350,-300,700,-400,-350,750,-400,-350,750,-350,-350,700,-400,-350,700,-350,-250,750,-350,-250,750,-400,-250,700,-350,-250,700,-400,-300,750,-400,-300,750,-350,-300,700,-400,-300,700,-350,-350,750,-300,-350,750,-350,-350,700,-300,-350,700,-350,-400,750,-350,-400,750,-300,-400,700,-350,-400,700,-300,-300,750,-300,-300,750,-350,-300,700,-300,-300,700,-350,-350,750,-350,-350,750,-300,-350,700,-350,-350,700,-300,-250,750,-300,-250,750,-350,-250,700,-300,-250,700,-350,-300,750,-350,-300,750,-300,-300,700,-350,-300,700,-300,-350,750,-250,-350,750,-300,-350,700,-250,-350,700,-300,-400,750,-300,-400,750,-250,-400,700,-300,-400,700,-250,-300,750,-250,-300,750,-300,-300,700,-250,-300,700,-300,-350,750,-300,-350,750,-250,-350,700,-300,-350,700,-250,-250,750,-250,-250,750,-300,-250,700,-250,-250,700,-300,-300,750,-300,-300,750,-250,-300,700,-300,-300,700,-250,-350,750,-200,-350,750,-250,-350,700,-200,-350,700,-250,-400,750,-250,-400,750,-200,-400,700,-250,-400,700,-200,-300,750,-200,-300,750,-250,-300,700,-200,-300,700,-250,-350,750,-250,-350,750,-200,-350,700,-250,-350,700,-200,-250,750,-200,-250,750,-250,-250,700,-200,-250,700,-250,-300,750,-250,-300,750,-200,-300,700,-250,-300,700,-200,-350,750,-150,-350,750,-200,-350,700,-150,-350,700,-200,-400,750,-200,-400,750,-150,-400,700,-200,-400,700,-150,-300,750,-150,-300,750,-200,-300,700,-150,-300,700,-200,-350,750,-200,-350,750,-150,-350,700,-200,-350,700,-150,-250,750,-150,-250,750,-200,-250,700,-150,-250,700,-200,-300,750,-200,-300,750,-150,-300,700,-200,-300,700,-150,-350,750,-100,-350,750,-150,-350,700,-100,-350,700,-150,-400,750,-150,-400,750,-100,-400,700,-150,-400,700,-100,-300,750,-100,-300,750,-150,-300,700,-100,-300,700,-150,-350,750,-150,-350,750,-100,-350,700,-150,-350,700,-100,-250,750,-100,-250,750,-150,-250,700,-100,-250,700,-150,-300,750,-150,-300,750,-100,-300,700,-150,-300,700,-100,-350,750,-50,-350,750,-100,-350,700,-50,-350,700,-100,-400,750,-100,-400,750,-50,-400,700,-100,-400,700,-50,-300,750,-50,-300,750,-100,-300,700,-50,-300,700,-100,-350,750,-100,-350,750,-50,-350,700,-100,-350,700,-50,-250,750,-50,-250,750,-100,-250,700,-50,-250,700,-100,-300,750,-100,-300,750,-50,-300,700,-100,-300,700,-50,-350,750,0,-350,750,-50,-350,700,0,-350,700,-50,-400,750,-50,-400,750,0,-400,700,-50,-400,700,0,-300,750,0,-300,750,-50,-300,700,0,-300,700,-50,-350,750,-50,-350,750,0,-350,700,-50,-350,700,0,-250,750,0,-250,750,-50,-250,700,0,-250,700,-50,-300,750,-50,-300,750,0,-300,700,-50,-300,700,0,-350,750,50,-350,750,0,-350,700,50,-350,700,0,-400,750,0,-400,750,50,-400,700,0,-400,700,50,-300,750,50,-300,750,0,-300,700,50,-300,700,0,-350,750,0,-350,750,50,-350,700,0,-350,700,50,-250,750,50,-250,750,0,-250,700,50,-250,700,0,-300,750,0,-300,750,50,-300,700,0,-300,700,50,-350,750,100,-350,750,50,-350,700,100,-350,700,50,-400,750,50,-400,750,100,-400,700,50,-400,700,100,-300,750,100,-300,750,50,-300,700,100,-300,700,50,-350,750,50,-350,750,100,-350,700,50,-350,700,100,-250,750,100,-250,750,50,-250,700,100,-250,700,50,-300,750,50,-300,750,100,-300,700,50,-300,700,100,-300,750,150,-300,750,100,-300,700,150,-300,700,100,-350,750,100,-350,750,150,-350,700,100,-350,700,150,-250,750,150,-250,750,100,-250,700,150,-250,700,100,-300,750,100,-300,750,150,-300,700,100,-300,700,150,-350,750,200,-350,750,150,-350,700,200,-350,700,150,-400,750,150,-400,750,200,-400,700,150,-400,700,200,-300,750,200,-300,750,150,-300,700,200,-300,700,150,-350,750,150,-350,750,200,-350,700,150,-350,700,200,-250,750,200,-250,750,150,-250,700,200,-250,700,150,-300,750,150,-300,750,200,-300,700,150,-300,700,200,-350,750,250,-350,750,200,-350,700,250,-350,700,200,-400,750,200,-400,750,250,-400,700,200,-400,700,250,-300,750,250,-300,750,200,-300,700,250,-300,700,200,-350,750,200,-350,750,250,-350,700,200,-350,700,250,-250,750,250,-250,750,200,-250,700,250,-250,700,200,-300,750,200,-300,750,250,-300,700,200,-300,700,250,-350,750,300,-350,750,250,-350,700,300,-350,700,250,-400,750,250,-400,750,300,-400,700,250,-400,700,300,-300,750,300,-300,750,250,-300,700,300,-300,700,250,-350,750,250,-350,750,300,-350,700,250,-350,700,300,-250,750,300,-250,750,250,-250,700,300,-250,700,250,-300,750,250,-300,750,300,-300,700,250,-300,700,300,-350,750,350,-350,750,300,-350,700,350,-350,700,300,-400,750,300,-400,750,350,-400,700,300,-400,700,350,-300,750,350,-300,750,300,-300,700,350,-300,700,300,-350,750,300,-350,750,350,-350,700,300,-350,700,350,-250,750,350,-250,750,300,-250,700,350,-250,700,300,-300,750,300,-300,750,350,-300,700,300,-300,700,350,-350,750,400,-350,750,350,-350,700,400,-350,700,350,-400,750,350,-400,750,400,-400,700,350,-400,700,400,-300,750,400,-300,750,350,-300,700,400,-300,700,350,-350,750,350,-350,750,400,-350,700,350,-350,700,400,-250,750,400,-250,750,350,-250,700,400,-250,700,350,-300,750,350,-300,750,400,-300,700,350,-300,700,400,400,750,100,400,750,50,400,700,100,400,700,50,350,750,50,350,750,100,350,700,50,350,700,100,300,800,-350,300,800,-400,300,750,-350,300,750,-400,250,800,-400,250,800,-350,250,750,-400,250,750,-350,350,800,-350,350,800,-400,350,750,-350,350,750,-400,300,800,-400,300,800,-350,300,750,-400,300,750,-350,400,800,-350,400,800,-400,400,750,-350,400,750,-400,350,800,-400,350,800,-350,350,750,-400,350,750,-350,300,800,-300,300,800,-350,300,750,-300,300,750,-350,250,800,-350,250,800,-300,250,750,-350,250,750,-300,350,800,-300,350,800,-350,350,750,-300,350,750,-350,300,800,-350,300,800,-300,300,750,-350,300,750,-300,400,800,-300,400,800,-350,400,750,-300,400,750,-350,350,800,-350,350,800,-300,350,750,-350,350,750,-300,300,800,-250,300,800,-300,300,750,-250,300,750,-300,250,800,-300,250,800,-250,250,750,-300,250,750,-250,350,800,-250,350,800,-300,350,750,-250,350,750,-300,300,800,-300,300,800,-250,300,750,-300,300,750,-250,400,800,-250,400,800,-300,400,750,-250,400,750,-300,350,800,-300,350,800,-250,350,750,-300,350,750,-250,300,800,-200,300,800,-250,300,750,-200,300,750,-250,250,800,-250,250,800,-200,250,750,-250,250,750,-200,350,800,-200,350,800,-250,350,750,-200,350,750,-250,300,800,-250,300,800,-200,300,750,-250,300,750,-200,400,800,-200,400,800,-250,400,750,-200,400,750,-250,350,800,-250,350,800,-200,350,750,-250,350,750,-200,300,800,-150,300,800,-200,300,750,-150,300,750,-200,250,800,-200,250,800,-150,250,750,-200,250,750,-150,350,800,-150,350,800,-200,350,750,-150,350,750,-200,300,800,-200,300,800,-150,300,750,-200,300,750,-150,400,800,-150,400,800,-200,400,750,-150,400,750,-200,350,800,-200,350,800,-150,350,750,-200,350,750,-150,300,800,-100,300,800,-150,300,750,-100,300,750,-150,250,800,-150,250,800,-100,250,750,-150,250,750,-100,350,800,-100,350,800,-150,350,750,-100,350,750,-150,300,800,-150,300,800,-100,300,750,-150,300,750,-100,400,800,-100,400,800,-150,400,750,-100,400,750,-150,350,800,-150,350,800,-100,350,750,-150,350,750,-100,300,800,-50,300,800,-100,300,750,-50,300,750,-100,250,800,-100,250,800,-50,250,750,-100,250,750,-50,350,800,-50,350,800,-100,350,750,-50,350,750,-100,300,800,-100,300,800,-50,300,750,-100,300,750,-50,400,800,-50,400,800,-100,400,750,-50,400,750,-100,350,800,-100,350,800,-50,350,750,-100,350,750,-50,300,800,0,300,800,-50,300,750,0,300,750,-50,250,800,-50,250,800,0,250,750,-50,250,750,0,350,800,0,350,800,-50,350,750,0,350,750,-50,300,800,-50,300,800,0,300,750,-50,300,750,0,400,800,0,400,800,-50,400,750,0,400,750,-50,350,800,-50,350,800,0,350,750,-50,350,750,0,300,800,50,300,800,0,300,750,50,300,750,0,250,800,0,250,800,50,250,750,0,250,750,50,350,800,50,350,800,0,350,750,50,350,750,0,300,800,0,300,800,50,300,750,0,300,750,50,400,800,50,400,800,0,400,750,50,400,750,0,350,800,0,350,800,50,350,750,0,350,750,50,300,800,100,300,800,50,300,750,100,300,750,50,250,800,50,250,800,100,250,750,50,250,750,100,350,800,100,350,800,50,350,750,100,350,750,50,300,800,50,300,800,100,300,750,50,300,750,100,400,800,100,400,800,50,400,750,100,400,750,50,350,800,50,350,800,100,350,750,50,350,750,100,300,800,150,300,800,100,300,750,150,300,750,100,250,800,100,250,800,150,250,750,100,250,750,150,350,800,150,350,800,100,350,750,150,350,750,100,300,800,100,300,800,150,300,750,100,300,750,150,400,800,150,400,800,100,400,750,150,400,750,100,350,800,100,350,800,150,350,750,100,350,750,150,300,800,200,300,800,150,300,750,200,300,750,150,250,800,150,250,800,200,250,750,150,250,750,200,350,800,200,350,800,150,350,750,200,350,750,150,300,800,150,300,800,200,300,750,150,300,750,200,400,800,200,400,800,150,400,750,200,400,750,150,350,800,150,350,800,200,350,750,150,350,750,200,300,800,250,300,800,200,300,750,250,300,750,200,250,800,200,250,800,250,250,750,200,250,750,250,350,800,250,350,800,200,350,750,250,350,750,200,300,800,200,300,800,250,300,750,200,300,750,250,400,800,250,400,800,200,400,750,250,400,750,200,350,800,200,350,800,250,350,750,200,350,750,250,300,800,300,300,800,250,300,750,300,300,750,250,250,800,250,250,800,300,250,750,250,250,750,300,350,800,300,350,800,250,350,750,300,350,750,250,300,800,250,300,800,300,300,750,250,300,750,300,400,800,300,400,800,250,400,750,300,400,750,250,350,800,250,350,800,300,350,750,250,350,750,300,300,800,350,300,800,300,300,750,350,300,750,300,250,800,300,250,800,350,250,750,300,250,750,350,350,800,350,350,800,300,350,750,350,350,750,300,300,800,300,300,800,350,300,750,300,300,750,350,400,800,350,400,800,300,400,750,350,400,750,300,350,800,300,350,800,350,350,750,300,350,750,350,300,800,400,300,800,350,300,750,400,300,750,350,250,800,350,250,800,400,250,750,350,250,750,400,350,800,400,350,800,350,350,750,400,350,750,350,300,800,350,300,800,400,300,750,350,300,750,400,400,800,400,400,800,350,400,750,400,400,750,350,350,800,350,350,800,400,350,750,350,350,750,400,-350,750,150,-350,750,100,-350,700,150,-350,700,100,-400,750,100,-400,750,150,-400,700,100,-400,700,150,-150,800,-350,-150,800,-400,-150,750,-350,-150,750,-400,-200,800,-400,-200,800,-350,-200,750,-400,-200,750,-350,-100,800,-350,-100,800,-400,-100,750,-350,-100,750,-400,-150,800,-400,-150,800,-350,-150,750,-400,-150,750,-350,-50,800,-350,-50,800,-400,-50,750,-350,-50,750,-400,-100,800,-400,-100,800,-350,-100,750,-400,-100,750,-350,0,800,-350,0,800,-400,0,750,-350,0,750,-400,-50,800,-400,-50,800,-350,-50,750,-400,-50,750,-350,50,800,-350,50,800,-400,50,750,-350,50,750,-400,0,800,-400,0,800,-350,0,750,-400,0,750,-350,100,800,-350,100,800,-400,100,750,-350,100,750,-400,50,800,-400,50,800,-350,50,750,-400,50,750,-350,150,800,-350,150,800,-400,150,750,-350,150,750,-400,100,800,-400,100,800,-350,100,750,-400,100,750,-350,200,800,-350,200,800,-400,200,750,-350,200,750,-400,150,800,-400,150,800,-350,150,750,-400,150,750,-350,-150,800,-300,-150,800,-350,-150,750,-300,-150,750,-350,-200,800,-350,-200,800,-300,-200,750,-350,-200,750,-300,-100,800,-300,-100,800,-350,-100,750,-300,-100,750,-350,-150,800,-350,-150,800,-300,-150,750,-350,-150,750,-300,-50,800,-300,-50,800,-350,-50,750,-300,-50,750,-350,-100,800,-350,-100,800,-300,-100,750,-350,-100,750,-300,0,800,-300,0,800,-350,0,750,-300,0,750,-350,-50,800,-350,-50,800,-300,-50,750,-350,-50,750,-300,50,800,-300,50,800,-350,50,750,-300,50,750,-350,0,800,-350,0,800,-300,0,750,-350,0,750,-300,100,800,-300,100,800,-350,100,750,-300,100,750,-350,50,800,-350,50,800,-300,50,750,-350,50,750,-300,150,800,-300,150,800,-350,150,750,-300,150,750,-350,100,800,-350,100,800,-300,100,750,-350,100,750,-300,200,800,-300,200,800,-350,200,750,-300,200,750,-350,150,800,-350,150,800,-300,150,750,-350,150,750,-300,-150,800,-250,-150,800,-300,-150,750,-250,-150,750,-300,-200,800,-300,-200,800,-250,-200,750,-300,-200,750,-250,-100,800,-250,-100,800,-300,-100,750,-250,-100,750,-300,-150,800,-300,-150,800,-250,-150,750,-300,-150,750,-250,-50,800,-250,-50,800,-300,-50,750,-250,-50,750,-300,-100,800,-300,-100,800,-250,-100,750,-300,-100,750,-250,0,800,-250,0,800,-300,0,750,-250,0,750,-300,-50,800,-300,-50,800,-250,-50,750,-300,-50,750,-250,50,800,-250,50,800,-300,50,750,-250,50,750,-300,0,800,-300,0,800,-250,0,750,-300,0,750,-250,100,800,-250,100,800,-300,100,750,-250,100,750,-300,50,800,-300,50,800,-250,50,750,-300,50,750,-250,150,800,-250,150,800,-300,150,750,-250,150,750,-300,100,800,-300,100,800,-250,100,750,-300,100,750,-250,200,800,-250,200,800,-300,200,750,-250,200,750,-300,150,800,-300,150,800,-250,150,750,-300,150,750,-250,-150,800,-200,-150,800,-250,-150,750,-200,-150,750,-250,-200,800,-250,-200,800,-200,-200,750,-250,-200,750,-200,-100,800,-200,-100,800,-250,-100,750,-200,-100,750,-250,-150,800,-250,-150,800,-200,-150,750,-250,-150,750,-200,-50,800,-200,-50,800,-250,-50,750,-200,-50,750,-250,-100,800,-250,-100,800,-200,-100,750,-250,-100,750,-200,0,800,-200,0,800,-250,0,750,-200,0,750,-250,-50,800,-250,-50,800,-200,-50,750,-250,-50,750,-200,50,800,-200,50,800,-250,50,750,-200,50,750,-250,0,800,-250,0,800,-200,0,750,-250,0,750,-200,100,800,-200,100,800,-250,100,750,-200,100,750,-250,50,800,-250,50,800,-200,50,750,-250,50,750,-200,150,800,-200,150,800,-250,150,750,-200,150,750,-250,100,800,-250,100,800,-200,100,750,-250,100,750,-200,200,800,-200,200,800,-250,200,750,-200,200,750,-250,150,800,-250,150,800,-200,150,750,-250,150,750,-200,-150,800,-150,-150,800,-200,-150,750,-150,-150,750,-200,-200,800,-200,-200,800,-150,-200,750,-200,-200,750,-150,-100,800,-150,-100,800,-200,-100,750,-150,-100,750,-200,-150,800,-200,-150,800,-150,-150,750,-200,-150,750,-150,-50,800,-150,-50,800,-200,-50,750,-150,-50,750,-200,-100,800,-200,-100,800,-150,-100,750,-200,-100,750,-150,0,800,-150,0,800,-200,0,750,-150,0,750,-200,-50,800,-200,-50,800,-150,-50,750,-200,-50,750,-150,50,800,-150,50,800,-200,50,750,-150,50,750,-200,0,800,-200,0,800,-150,0,750,-200,0,750,-150,100,800,-150,100,800,-200,100,750,-150,100,750,-200,50,800,-200,50,800,-150,50,750,-200,50,750,-150,150,800,-150,150,800,-200,150,750,-150,150,750,-200,100,800,-200,100,800,-150,100,750,-200,100,750,-150,200,800,-150,200,800,-200,200,750,-150,200,750,-200,150,800,-200,150,800,-150,150,750,-200,150,750,-150,-150,800,-100,-150,800,-150,-150,750,-100,-150,750,-150,-200,800,-150,-200,800,-100,-200,750,-150,-200,750,-100,-100,800,-100,-100,800,-150,-100,750,-100,-100,750,-150,-150,800,-150,-150,800,-100,-150,750,-150,-150,750,-100,-50,800,-100,-50,800,-150,-50,750,-100,-50,750,-150,-100,800,-150,-100,800,-100,-100,750,-150,-100,750,-100,0,800,-100,0,800,-150,0,750,-100,0,750,-150,-50,800,-150,-50,800,-100,-50,750,-150,-50,750,-100,50,800,-100,50,800,-150,50,750,-100,50,750,-150,0,800,-150,0,800,-100,0,750,-150,0,750,-100,100,800,-100,100,800,-150,100,750,-100,100,750,-150,50,800,-150,50,800,-100,50,750,-150,50,750,-100,150,800,-100,150,800,-150,150,750,-100,150,750,-150,100,800,-150,100,800,-100,100,750,-150,100,750,-100,200,800,-100,200,800,-150,200,750,-100,200,750,-150,150,800,-150,150,800,-100,150,750,-150,150,750,-100,-150,800,-50,-150,800,-100,-150,750,-50,-150,750,-100,-200,800,-100,-200,800,-50,-200,750,-100,-200,750,-50,-100,800,-50,-100,800,-100,-100,750,-50,-100,750,-100,-150,800,-100,-150,800,-50,-150,750,-100,-150,750,-50,-50,800,-50,-50,800,-100,-50,750,-50,-50,750,-100,-100,800,-100,-100,800,-50,-100,750,-100,-100,750,-50,0,800,-50,0,800,-100,0,750,-50,0,750,-100,-50,800,-100,-50,800,-50,-50,750,-100,-50,750,-50,50,800,-50,50,800,-100,50,750,-50,50,750,-100,0,800,-100,0,800,-50,0,750,-100,0,750,-50,100,800,-50,100,800,-100,100,750,-50,100,750,-100,50,800,-100,50,800,-50,50,750,-100,50,750,-50,150,800,-50,150,800,-100,150,750,-50,150,750,-100,100,800,-100,100,800,-50,100,750,-100,100,750,-50,200,800,-50,200,800,-100,200,750,-50,200,750,-100,150,800,-100,150,800,-50,150,750,-100,150,750,-50,-150,800,0,-150,800,-50,-150,750,0,-150,750,-50,-200,800,-50,-200,800,0,-200,750,-50,-200,750,0,-100,800,0,-100,800,-50,-100,750,0,-100,750,-50,-150,800,-50,-150,800,0,-150,750,-50,-150,750,0,-50,800,0,-50,800,-50,-50,750,0,-50,750,-50,-100,800,-50,-100,800,0,-100,750,-50,-100,750,0,0,800,0,0,800,-50,0,750,0,0,750,-50,-50,800,-50,-50,800,0,-50,750,-50,-50,750,0,50,800,0,50,800,-50,50,750,0,50,750,-50,0,800,-50,0,800,0,0,750,-50,0,750,0,100,800,0,100,800,-50,100,750,0,100,750,-50,50,800,-50,50,800,0,50,750,-50,50,750,0,150,800,0,150,800,-50,150,750,0,150,750,-50,100,800,-50,100,800,0,100,750,-50,100,750,0,200,800,0,200,800,-50,200,750,0,200,750,-50,150,800,-50,150,800,0,150,750,-50,150,750,0,-150,800,50,-150,800,0,-150,750,50,-150,750,0,-200,800,0,-200,800,50,-200,750,0,-200,750,50,-100,800,50,-100,800,0,-100,750,50,-100,750,0,-150,800,0,-150,800,50,-150,750,0,-150,750,50,-50,800,50,-50,800,0,-50,750,50,-50,750,0,-100,800,0,-100,800,50,-100,750,0,-100,750,50,0,800,50,0,800,0,0,750,50,0,750,0,-50,800,0,-50,800,50,-50,750,0,-50,750,50,50,800,50,50,800,0,50,750,50,50,750,0,0,800,0,0,800,50,0,750,0,0,750,50,100,800,50,100,800,0,100,750,50,100,750,0,50,800,0,50,800,50,50,750,0,50,750,50,150,800,50,150,800,0,150,750,50,150,750,0,100,800,0,100,800,50,100,750,0,100,750,50,200,800,50,200,800,0,200,750,50,200,750,0,150,800,0,150,800,50,150,750,0,150,750,50,-150,800,100,-150,800,50,-150,750,100,-150,750,50,-200,800,50,-200,800,100,-200,750,50,-200,750,100,-100,800,100,-100,800,50,-100,750,100,-100,750,50,-150,800,50,-150,800,100,-150,750,50,-150,750,100,-50,800,100,-50,800,50,-50,750,100,-50,750,50,-100,800,50,-100,800,100,-100,750,50,-100,750,100,0,800,100,0,800,50,0,750,100,0,750,50,-50,800,50,-50,800,100,-50,750,50,-50,750,100,50,800,100,50,800,50,50,750,100,50,750,50,0,800,50,0,800,100,0,750,50,0,750,100,100,800,100,100,800,50,100,750,100,100,750,50,50,800,50,50,800,100,50,750,50,50,750,100,150,800,100,150,800,50,150,750,100,150,750,50,100,800,50,100,800,100,100,750,50,100,750,100,200,800,100,200,800,50,200,750,100,200,750,50,150,800,50,150,800,100,150,750,50,150,750,100,-150,800,150,-150,800,100,-150,750,150,-150,750,100,-200,800,100,-200,800,150,-200,750,100,-200,750,150,-100,800,150,-100,800,100,-100,750,150,-100,750,100,-150,800,100,-150,800,150,-150,750,100,-150,750,150,-50,800,150,-50,800,100,-50,750,150,-50,750,100,-100,800,100,-100,800,150,-100,750,100,-100,750,150,0,800,150,0,800,100,0,750,150,0,750,100,-50,800,100,-50,800,150,-50,750,100,-50,750,150,50,800,150,50,800,100,50,750,150,50,750,100,0,800,100,0,800,150,0,750,100,0,750,150,100,800,150,100,800,100,100,750,150,100,750,100,50,800,100,50,800,150,50,750,100,50,750,150,150,800,150,150,800,100,150,750,150,150,750,100,100,800,100,100,800,150,100,750,100,100,750,150,200,800,150,200,800,100,200,750,150,200,750,100,150,800,100,150,800,150,150,750,100,150,750,150,-150,800,200,-150,800,150,-150,750,200,-150,750,150,-200,800,150,-200,800,200,-200,750,150,-200,750,200,-100,800,200,-100,800,150,-100,750,200,-100,750,150,-150,800,150,-150,800,200,-150,750,150,-150,750,200,-50,800,200,-50,800,150,-50,750,200,-50,750,150,-100,800,150,-100,800,200,-100,750,150,-100,750,200,0,800,200,0,800,150,0,750,200,0,750,150,-50,800,150,-50,800,200,-50,750,150,-50,750,200,50,800,200,50,800,150,50,750,200,50,750,150,0,800,150,0,800,200,0,750,150,0,750,200,100,800,200,100,800,150,100,750,200,100,750,150,50,800,150,50,800,200,50,750,150,50,750,200,150,800,200,150,800,150,150,750,200,150,750,150,100,800,150,100,800,200,100,750,150,100,750,200,200,800,200,200,800,150,200,750,200,200,750,150,150,800,150,150,800,200,150,750,150,150,750,200,-150,800,250,-150,800,200,-150,750,250,-150,750,200,-200,800,200,-200,800,250,-200,750,200,-200,750,250,-100,800,250,-100,800,200,-100,750,250,-100,750,200,-150,800,200,-150,800,250,-150,750,200,-150,750,250,-50,800,250,-50,800,200,-50,750,250,-50,750,200,-100,800,200,-100,800,250,-100,750,200,-100,750,250,0,800,250,0,800,200,0,750,250,0,750,200,-50,800,200,-50,800,250,-50,750,200,-50,750,250,50,800,250,50,800,200,50,750,250,50,750,200,0,800,200,0,800,250,0,750,200,0,750,250,100,800,250,100,800,200,100,750,250,100,750,200,50,800,200,50,800,250,50,750,200,50,750,250,150,800,250,150,800,200,150,750,250,150,750,200,100,800,200,100,800,250,100,750,200,100,750,250,200,800,250,200,800,200,200,750,250,200,750,200,150,800,200,150,800,250,150,750,200,150,750,250,-150,800,300,-150,800,250,-150,750,300,-150,750,250,-200,800,250,-200,800,300,-200,750,250,-200,750,300,-100,800,300,-100,800,250,-100,750,300,-100,750,250,-150,800,250,-150,800,300,-150,750,250,-150,750,300,-50,800,300,-50,800,250,-50,750,300,-50,750,250,-100,800,250,-100,800,300,-100,750,250,-100,750,300,0,800,300,0,800,250,0,750,300,0,750,250,-50,800,250,-50,800,300,-50,750,250,-50,750,300,50,800,300,50,800,250,50,750,300,50,750,250,0,800,250,0,800,300,0,750,250,0,750,300,100,800,300,100,800,250,100,750,300,100,750,250,50,800,250,50,800,300,50,750,250,50,750,300,150,800,300,150,800,250,150,750,300,150,750,250,100,800,250,100,800,300,100,750,250,100,750,300,200,800,300,200,800,250,200,750,300,200,750,250,150,800,250,150,800,300,150,750,250,150,750,300,-150,800,350,-150,800,300,-150,750,350,-150,750,300,-200,800,300,-200,800,350,-200,750,300,-200,750,350,-100,800,350,-100,800,300,-100,750,350,-100,750,300,-150,800,300,-150,800,350,-150,750,300,-150,750,350,-50,800,350,-50,800,300,-50,750,350,-50,750,300,-100,800,300,-100,800,350,-100,750,300,-100,750,350,0,800,350,0,800,300,0,750,350,0,750,300,-50,800,300,-50,800,350,-50,750,300,-50,750,350,50,800,350,50,800,300,50,750,350,50,750,300,0,800,300,0,800,350,0,750,300,0,750,350,100,800,350,100,800,300,100,750,350,100,750,300,50,800,300,50,800,350,50,750,300,50,750,350,150,800,350,150,800,300,150,750,350,150,750,300,100,800,300,100,800,350,100,750,300,100,750,350,200,800,350,200,800,300,200,750,350,200,750,300,150,800,300,150,800,350,150,750,300,150,750,350,-150,800,400,-150,800,350,-150,750,400,-150,750,350,-200,800,350,-200,800,400,-200,750,350,-200,750,400,-100,800,400,-100,800,350,-100,750,400,-100,750,350,-150,800,350,-150,800,400,-150,750,350,-150,750,400,-50,800,400,-50,800,350,-50,750,400,-50,750,350,-100,800,350,-100,800,400,-100,750,350,-100,750,400,0,800,400,0,800,350,0,750,400,0,750,350,-50,800,350,-50,800,400,-50,750,350,-50,750,400,50,800,400,50,800,350,50,750,400,50,750,350,0,800,350,0,800,400,0,750,350,0,750,400,100,800,400,100,800,350,100,750,400,100,750,350,50,800,350,50,800,400,50,750,350,50,750,400,150,800,400,150,800,350,150,750,400,150,750,350,100,800,350,100,800,400,100,750,350,100,750,400,200,800,400,200,800,350,200,750,400,200,750,350,150,800,350,150,800,400,150,750,350,150,750,400,-350,800,-350,-350,800,-400,-350,750,-350,-350,750,-400,-400,800,-400,-400,800,-350,-400,750,-400,-400,750,-350,-300,800,-350,-300,800,-400,-300,750,-350,-300,750,-400,-350,800,-400,-350,800,-350,-350,750,-400,-350,750,-350,-250,800,-350,-250,800,-400,-250,750,-350,-250,750,-400,-300,800,-400,-300,800,-350,-300,750,-400,-300,750,-350,-350,800,-300,-350,800,-350,-350,750,-300,-350,750,-350,-400,800,-350,-400,800,-300,-400,750,-350,-400,750,-300,-300,800,-300,-300,800,-350,-300,750,-300,-300,750,-350,-350,800,-350,-350,800,-300,-350,750,-350,-350,750,-300,-250,800,-300,-250,800,-350,-250,750,-300,-250,750,-350,-300,800,-350,-300,800,-300,-300,750,-350,-300,750,-300,-350,800,-250,-350,800,-300,-350,750,-250,-350,750,-300,-400,800,-300,-400,800,-250,-400,750,-300,-400,750,-250,-300,800,-250,-300,800,-300,-300,750,-250,-300,750,-300,-350,800,-300,-350,800,-250,-350,750,-300,-350,750,-250,-250,800,-250,-250,800,-300,-250,750,-250,-250,750,-300,-300,800,-300,-300,800,-250,-300,750,-300,-300,750,-250,-350,800,-200,-350,800,-250,-350,750,-200,-350,750,-250,-400,800,-250,-400,800,-200,-400,750,-250,-400,750,-200,-300,800,-200,-300,800,-250,-300,750,-200,-300,750,-250,-350,800,-250,-350,800,-200,-350,750,-250,-350,750,-200,-250,800,-200,-250,800,-250,-250,750,-200,-250,750,-250,-300,800,-250,-300,800,-200,-300,750,-250,-300,750,-200,-350,800,-150,-350,800,-200,-350,750,-150,-350,750,-200,-400,800,-200,-400,800,-150,-400,750,-200,-400,750,-150,-300,800,-150,-300,800,-200,-300,750,-150,-300,750,-200,-350,800,-200,-350,800,-150,-350,750,-200,-350,750,-150,-250,800,-150,-250,800,-200,-250,750,-150,-250,750,-200,-300,800,-200,-300,800,-150,-300,750,-200,-300,750,-150,-350,800,-100,-350,800,-150,-350,750,-100,-350,750,-150,-400,800,-150,-400,800,-100,-400,750,-150,-400,750,-100,-300,800,-100,-300,800,-150,-300,750,-100,-300,750,-150,-350,800,-150,-350,800,-100,-350,750,-150,-350,750,-100,-250,800,-100,-250,800,-150,-250,750,-100,-250,750,-150,-300,800,-150,-300,800,-100,-300,750,-150,-300,750,-100,-350,800,-50,-350,800,-100,-350,750,-50,-350,750,-100,-400,800,-100,-400,800,-50,-400,750,-100,-400,750,-50,-300,800,-50,-300,800,-100,-300,750,-50,-300,750,-100,-350,800,-100,-350,800,-50,-350,750,-100,-350,750,-50,-250,800,-50,-250,800,-100,-250,750,-50,-250,750,-100,-300,800,-100,-300,800,-50,-300,750,-100,-300,750,-50,-350,800,0,-350,800,-50,-350,750,0,-350,750,-50,-400,800,-50,-400,800,0,-400,750,-50,-400,750,0,-300,800,0,-300,800,-50,-300,750,0,-300,750,-50,-350,800,-50,-350,800,0,-350,750,-50,-350,750,0,-250,800,0,-250,800,-50,-250,750,0,-250,750,-50,-300,800,-50,-300,800,0,-300,750,-50,-300,750,0,-350,800,50,-350,800,0,-350,750,50,-350,750,0,-400,800,0,-400,800,50,-400,750,0,-400,750,50,-300,800,50,-300,800,0,-300,750,50,-300,750,0,-350,800,0,-350,800,50,-350,750,0,-350,750,50,-250,800,50,-250,800,0,-250,750,50,-250,750,0,-300,800,0,-300,800,50,-300,750,0,-300,750,50,-350,800,100,-350,800,50,-350,750,100,-350,750,50,-400,800,50,-400,800,100,-400,750,50,-400,750,100,-300,800,100,-300,800,50,-300,750,100,-300,750,50,-350,800,50,-350,800,100,-350,750,50,-350,750,100,-250,800,100,-250,800,50,-250,750,100,-250,750,50,-300,800,50,-300,800,100,-300,750,50,-300,750,100,-350,800,150,-350,800,100,-350,750,150,-350,750,100,-400,800,100,-400,800,150,-400,750,100,-400,750,150,-300,800,150,-300,800,100,-300,750,150,-300,750,100,-350,800,100,-350,800,150,-350,750,100,-350,750,150,-250,800,150,-250,800,100,-250,750,150,-250,750,100,-300,800,100,-300,800,150,-300,750,100,-300,750,150,-350,800,200,-350,800,150,-350,750,200,-350,750,150,-400,800,150,-400,800,200,-400,750,150,-400,750,200,-300,800,200,-300,800,150,-300,750,200,-300,750,150,-350,800,150,-350,800,200,-350,750,150,-350,750,200,-250,800,200,-250,800,150,-250,750,200,-250,750,150,-300,800,150,-300,800,200,-300,750,150,-300,750,200,-350,800,250,-350,800,200,-350,750,250,-350,750,200,-400,800,200,-400,800,250,-400,750,200,-400,750,250,-300,800,250,-300,800,200,-300,750,250,-300,750,200,-350,800,200,-350,800,250,-350,750,200,-350,750,250,-250,800,250,-250,800,200,-250,750,250,-250,750,200,-300,800,200,-300,800,250,-300,750,200,-300,750,250,-350,800,300,-350,800,250,-350,750,300,-350,750,250,-400,800,250,-400,800,300,-400,750,250,-400,750,300,-300,800,300,-300,800,250,-300,750,300,-300,750,250,-350,800,250,-350,800,300,-350,750,250,-350,750,300,-250,800,300,-250,800,250,-250,750,300,-250,750,250,-300,800,250,-300,800,300,-300,750,250,-300,750,300,-350,800,350,-350,800,300,-350,750,350,-350,750,300,-400,800,300,-400,800,350,-400,750,300,-400,750,350,-300,800,350,-300,800,300,-300,750,350,-300,750,300,-350,800,300,-350,800,350,-350,750,300,-350,750,350,-250,800,350,-250,800,300,-250,750,350,-250,750,300,-300,800,300,-300,800,350,-300,750,300,-300,750,350,-300,800,400,-300,800,350,-300,750,400,-300,750,350,-350,800,350,-350,800,400,-350,750,350,-350,750,400,-250,800,400,-250,800,350,-250,750,400,-250,750,350,-300,800,350,-300,800,400,-300,750,350,-300,750,400,-350,800,400,-350,800,350,-350,750,400,-350,750,350,-400,800,350,-400,800,400,-400,750,350,-400,750,400,400,50,400,400,50,350,400,0,400,400,0,350,350,50,350,350,50,400,350,0,350,350,0,400,-350,50,400,-350,50,350,-350,0,400,-350,0,350,-400,50,350,-400,50,400,-400,0,350,-400,0,400,400,50,-350,400,50,-400,400,0,-350,400,0,-400,350,50,-400,350,50,-350,350,0,-400,350,0,-350,-350,50,-350,-350,50,-400,-350,0,-350,-350,0,-400,-400,50,-400,-400,50,-350,-400,0,-400,-400,0,-350],"normals":[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],"colors":[8020836,8809324,9859699,10913657,12165509,0],"uvs":[[0,1,0,0,1,1,1,0]],"faces":[120,0,2,1,0,1,2,0,0,0,0,0,120,2,3,1,1,3,2,0,0,0,0,0,120,4,6,5,0,1,2,1,1,1,1,0,120,6,7,5,1,3,2,1,1,1,1,0,120,4,5,1,0,1,2,2,2,2,2,0,120,5,0,1,1,3,2,2,2,2,2,0,120,7,6,2,0,1,2,3,3,3,3,0,120,6,3,2,1,3,2,3,3,3,3,0,120,5,7,0,0,1,2,4,4,4,4,0,120,7,2,0,1,3,2,4,4,4,4,0,120,1,3,4,0,1,2,5,5,5,5,0,120,3,6,4,1,3,2,5,5,5,5,0,120,8,10,9,0,1,2,0,0,0,0,0,120,10,11,9,1,3,2,0,0,0,0,0,120,12,14,13,0,1,2,1,1,1,1,0,120,14,15,13,1,3,2,1,1,1,1,0,120,12,13,9,0,1,2,2,2,2,2,0,120,13,8,9,1,3,2,2,2,2,2,0,120,15,14,10,0,1,2,3,3,3,3,0,120,14,11,10,1,3,2,3,3,3,3,0,120,13,15,8,0,1,2,4,4,4,4,0,120,15,10,8,1,3,2,4,4,4,4,0,120,9,11,12,0,1,2,5,5,5,5,0,120,11,14,12,1,3,2,5,5,5,5,0,120,16,18,17,0,1,2,0,0,0,0,0,120,18,19,17,1,3,2,0,0,0,0,0,120,20,22,21,0,1,2,1,1,1,1,0,120,22,23,21,1,3,2,1,1,1,1,0,120,20,21,17,0,1,2,2,2,2,2,0,120,21,16,17,1,3,2,2,2,2,2,0,120,23,22,18,0,1,2,3,3,3,3,0,120,22,19,18,1,3,2,3,3,3,3,0,120,21,23,16,0,1,2,4,4,4,4,0,120,23,18,16,1,3,2,4,4,4,4,0,120,17,19,20,0,1,2,5,5,5,5,0,120,19,22,20,1,3,2,5,5,5,5,0,120,24,26,25,0,1,2,0,0,0,0,0,120,26,27,25,1,3,2,0,0,0,0,0,120,28,30,29,0,1,2,1,1,1,1,0,120,30,31,29,1,3,2,1,1,1,1,0,120,28,29,25,0,1,2,2,2,2,2,0,120,29,24,25,1,3,2,2,2,2,2,0,120,31,30,26,0,1,2,3,3,3,3,0,120,30,27,26,1,3,2,3,3,3,3,0,120,29,31,24,0,1,2,4,4,4,4,0,120,31,26,24,1,3,2,4,4,4,4,0,120,25,27,28,0,1,2,5,5,5,5,0,120,27,30,28,1,3,2,5,5,5,5,0,120,32,34,33,0,1,2,0,0,0,0,0,120,34,35,33,1,3,2,0,0,0,0,0,120,36,38,37,0,1,2,1,1,1,1,0,120,38,39,37,1,3,2,1,1,1,1,0,120,36,37,33,0,1,2,2,2,2,2,0,120,37,32,33,1,3,2,2,2,2,2,0,120,39,38,34,0,1,2,3,3,3,3,0,120,38,35,34,1,3,2,3,3,3,3,0,120,37,39,32,0,1,2,4,4,4,4,0,120,39,34,32,1,3,2,4,4,4,4,0,120,33,35,36,0,1,2,5,5,5,5,0,120,35,38,36,1,3,2,5,5,5,5,0,120,40,42,41,0,1,2,0,0,0,0,0,120,42,43,41,1,3,2,0,0,0,0,0,120,44,46,45,0,1,2,1,1,1,1,0,120,46,47,45,1,3,2,1,1,1,1,0,120,44,45,41,0,1,2,2,2,2,2,0,120,45,40,41,1,3,2,2,2,2,2,0,120,47,46,42,0,1,2,3,3,3,3,0,120,46,43,42,1,3,2,3,3,3,3,0,120,45,47,40,0,1,2,4,4,4,4,0,120,47,42,40,1,3,2,4,4,4,4,0,120,41,43,44,0,1,2,5,5,5,5,0,120,43,46,44,1,3,2,5,5,5,5,0,120,48,50,49,0,1,2,0,0,0,0,0,120,50,51,49,1,3,2,0,0,0,0,0,120,52,54,53,0,1,2,1,1,1,1,0,120,54,55,53,1,3,2,1,1,1,1,0,120,52,53,49,0,1,2,2,2,2,2,0,120,53,48,49,1,3,2,2,2,2,2,0,120,55,54,50,0,1,2,3,3,3,3,0,120,54,51,50,1,3,2,3,3,3,3,0,120,53,55,48,0,1,2,4,4,4,4,0,120,55,50,48,1,3,2,4,4,4,4,0,120,49,51,52,0,1,2,5,5,5,5,0,120,51,54,52,1,3,2,5,5,5,5,0,120,56,58,57,0,1,2,0,0,0,0,1,120,58,59,57,1,3,2,0,0,0,0,1,120,60,62,61,0,1,2,1,1,1,1,1,120,62,63,61,1,3,2,1,1,1,1,1,120,60,61,57,0,1,2,2,2,2,2,1,120,61,56,57,1,3,2,2,2,2,2,1,120,63,62,58,0,1,2,3,3,3,3,1,120,62,59,58,1,3,2,3,3,3,3,1,120,61,63,56,0,1,2,4,4,4,4,1,120,63,58,56,1,3,2,4,4,4,4,1,120,57,59,60,0,1,2,5,5,5,5,1,120,59,62,60,1,3,2,5,5,5,5,1,120,64,66,65,0,1,2,0,0,0,0,0,120,66,67,65,1,3,2,0,0,0,0,0,120,68,70,69,0,1,2,1,1,1,1,0,120,70,71,69,1,3,2,1,1,1,1,0,120,68,69,65,0,1,2,2,2,2,2,0,120,69,64,65,1,3,2,2,2,2,2,0,120,71,70,66,0,1,2,3,3,3,3,0,120,70,67,66,1,3,2,3,3,3,3,0,120,69,71,64,0,1,2,4,4,4,4,0,120,71,66,64,1,3,2,4,4,4,4,0,120,65,67,68,0,1,2,5,5,5,5,0,120,67,70,68,1,3,2,5,5,5,5,0,120,72,74,73,0,1,2,0,0,0,0,0,120,74,75,73,1,3,2,0,0,0,0,0,120,76,78,77,0,1,2,1,1,1,1,0,120,78,79,77,1,3,2,1,1,1,1,0,120,76,77,73,0,1,2,2,2,2,2,0,120,77,72,73,1,3,2,2,2,2,2,0,120,79,78,74,0,1,2,3,3,3,3,0,120,78,75,74,1,3,2,3,3,3,3,0,120,77,79,72,0,1,2,4,4,4,4,0,120,79,74,72,1,3,2,4,4,4,4,0,120,73,75,76,0,1,2,5,5,5,5,0,120,75,78,76,1,3,2,5,5,5,5,0,120,80,82,81,0,1,2,0,0,0,0,0,120,82,83,81,1,3,2,0,0,0,0,0,120,84,86,85,0,1,2,1,1,1,1,0,120,86,87,85,1,3,2,1,1,1,1,0,120,84,85,81,0,1,2,2,2,2,2,0,120,85,80,81,1,3,2,2,2,2,2,0,120,87,86,82,0,1,2,3,3,3,3,0,120,86,83,82,1,3,2,3,3,3,3,0,120,85,87,80,0,1,2,4,4,4,4,0,120,87,82,80,1,3,2,4,4,4,4,0,120,81,83,84,0,1,2,5,5,5,5,0,120,83,86,84,1,3,2,5,5,5,5,0,120,88,90,89,0,1,2,0,0,0,0,0,120,90,91,89,1,3,2,0,0,0,0,0,120,92,94,93,0,1,2,1,1,1,1,0,120,94,95,93,1,3,2,1,1,1,1,0,120,92,93,89,0,1,2,2,2,2,2,0,120,93,88,89,1,3,2,2,2,2,2,0,120,95,94,90,0,1,2,3,3,3,3,0,120,94,91,90,1,3,2,3,3,3,3,0,120,93,95,88,0,1,2,4,4,4,4,0,120,95,90,88,1,3,2,4,4,4,4,0,120,89,91,92,0,1,2,5,5,5,5,0,120,91,94,92,1,3,2,5,5,5,5,0,120,96,98,97,0,1,2,0,0,0,0,0,120,98,99,97,1,3,2,0,0,0,0,0,120,100,102,101,0,1,2,1,1,1,1,0,120,102,103,101,1,3,2,1,1,1,1,0,120,100,101,97,0,1,2,2,2,2,2,0,120,101,96,97,1,3,2,2,2,2,2,0,120,103,102,98,0,1,2,3,3,3,3,0,120,102,99,98,1,3,2,3,3,3,3,0,120,101,103,96,0,1,2,4,4,4,4,0,120,103,98,96,1,3,2,4,4,4,4,0,120,97,99,100,0,1,2,5,5,5,5,0,120,99,102,100,1,3,2,5,5,5,5,0,120,104,106,105,0,1,2,0,0,0,0,0,120,106,107,105,1,3,2,0,0,0,0,0,120,108,110,109,0,1,2,1,1,1,1,0,120,110,111,109,1,3,2,1,1,1,1,0,120,108,109,105,0,1,2,2,2,2,2,0,120,109,104,105,1,3,2,2,2,2,2,0,120,111,110,106,0,1,2,3,3,3,3,0,120,110,107,106,1,3,2,3,3,3,3,0,120,109,111,104,0,1,2,4,4,4,4,0,120,111,106,104,1,3,2,4,4,4,4,0,120,105,107,108,0,1,2,5,5,5,5,0,120,107,110,108,1,3,2,5,5,5,5,0,120,112,114,113,0,1,2,0,0,0,0,0,120,114,115,113,1,3,2,0,0,0,0,0,120,116,118,117,0,1,2,1,1,1,1,0,120,118,119,117,1,3,2,1,1,1,1,0,120,116,117,113,0,1,2,2,2,2,2,0,120,117,112,113,1,3,2,2,2,2,2,0,120,119,118,114,0,1,2,3,3,3,3,0,120,118,115,114,1,3,2,3,3,3,3,0,120,117,119,112,0,1,2,4,4,4,4,0,120,119,114,112,1,3,2,4,4,4,4,0,120,113,115,116,0,1,2,5,5,5,5,0,120,115,118,116,1,3,2,5,5,5,5,0,120,120,122,121,0,1,2,0,0,0,0,0,120,122,123,121,1,3,2,0,0,0,0,0,120,124,126,125,0,1,2,1,1,1,1,0,120,126,127,125,1,3,2,1,1,1,1,0,120,124,125,121,0,1,2,2,2,2,2,0,120,125,120,121,1,3,2,2,2,2,2,0,120,127,126,122,0,1,2,3,3,3,3,0,120,126,123,122,1,3,2,3,3,3,3,0,120,125,127,120,0,1,2,4,4,4,4,0,120,127,122,120,1,3,2,4,4,4,4,0,120,121,123,124,0,1,2,5,5,5,5,0,120,123,126,124,1,3,2,5,5,5,5,0,120,128,130,129,0,1,2,0,0,0,0,0,120,130,131,129,1,3,2,0,0,0,0,0,120,132,134,133,0,1,2,1,1,1,1,0,120,134,135,133,1,3,2,1,1,1,1,0,120,132,133,129,0,1,2,2,2,2,2,0,120,133,128,129,1,3,2,2,2,2,2,0,120,135,134,130,0,1,2,3,3,3,3,0,120,134,131,130,1,3,2,3,3,3,3,0,120,133,135,128,0,1,2,4,4,4,4,0,120,135,130,128,1,3,2,4,4,4,4,0,120,129,131,132,0,1,2,5,5,5,5,0,120,131,134,132,1,3,2,5,5,5,5,0,120,136,138,137,0,1,2,0,0,0,0,0,120,138,139,137,1,3,2,0,0,0,0,0,120,140,142,141,0,1,2,1,1,1,1,0,120,142,143,141,1,3,2,1,1,1,1,0,120,140,141,137,0,1,2,2,2,2,2,0,120,141,136,137,1,3,2,2,2,2,2,0,120,143,142,138,0,1,2,3,3,3,3,0,120,142,139,138,1,3,2,3,3,3,3,0,120,141,143,136,0,1,2,4,4,4,4,0,120,143,138,136,1,3,2,4,4,4,4,0,120,137,139,140,0,1,2,5,5,5,5,0,120,139,142,140,1,3,2,5,5,5,5,0,120,144,146,145,0,1,2,0,0,0,0,0,120,146,147,145,1,3,2,0,0,0,0,0,120,148,150,149,0,1,2,1,1,1,1,0,120,150,151,149,1,3,2,1,1,1,1,0,120,148,149,145,0,1,2,2,2,2,2,0,120,149,144,145,1,3,2,2,2,2,2,0,120,151,150,146,0,1,2,3,3,3,3,0,120,150,147,146,1,3,2,3,3,3,3,0,120,149,151,144,0,1,2,4,4,4,4,0,120,151,146,144,1,3,2,4,4,4,4,0,120,145,147,148,0,1,2,5,5,5,5,0,120,147,150,148,1,3,2,5,5,5,5,0,120,152,154,153,0,1,2,0,0,0,0,0,120,154,155,153,1,3,2,0,0,0,0,0,120,156,158,157,0,1,2,1,1,1,1,0,120,158,159,157,1,3,2,1,1,1,1,0,120,156,157,153,0,1,2,2,2,2,2,0,120,157,152,153,1,3,2,2,2,2,2,0,120,159,158,154,0,1,2,3,3,3,3,0,120,158,155,154,1,3,2,3,3,3,3,0,120,157,159,152,0,1,2,4,4,4,4,0,120,159,154,152,1,3,2,4,4,4,4,0,120,153,155,156,0,1,2,5,5,5,5,0,120,155,158,156,1,3,2,5,5,5,5,0,120,160,162,161,0,1,2,0,0,0,0,0,120,162,163,161,1,3,2,0,0,0,0,0,120,164,166,165,0,1,2,1,1,1,1,0,120,166,167,165,1,3,2,1,1,1,1,0,120,164,165,161,0,1,2,2,2,2,2,0,120,165,160,161,1,3,2,2,2,2,2,0,120,167,166,162,0,1,2,3,3,3,3,0,120,166,163,162,1,3,2,3,3,3,3,0,120,165,167,160,0,1,2,4,4,4,4,0,120,167,162,160,1,3,2,4,4,4,4,0,120,161,163,164,0,1,2,5,5,5,5,0,120,163,166,164,1,3,2,5,5,5,5,0,120,168,170,169,0,1,2,0,0,0,0,0,120,170,171,169,1,3,2,0,0,0,0,0,120,172,174,173,0,1,2,1,1,1,1,0,120,174,175,173,1,3,2,1,1,1,1,0,120,172,173,169,0,1,2,2,2,2,2,0,120,173,168,169,1,3,2,2,2,2,2,0,120,175,174,170,0,1,2,3,3,3,3,0,120,174,171,170,1,3,2,3,3,3,3,0,120,173,175,168,0,1,2,4,4,4,4,0,120,175,170,168,1,3,2,4,4,4,4,0,120,169,171,172,0,1,2,5,5,5,5,0,120,171,174,172,1,3,2,5,5,5,5,0,120,176,178,177,0,1,2,0,0,0,0,0,120,178,179,177,1,3,2,0,0,0,0,0,120,180,182,181,0,1,2,1,1,1,1,0,120,182,183,181,1,3,2,1,1,1,1,0,120,180,181,177,0,1,2,2,2,2,2,0,120,181,176,177,1,3,2,2,2,2,2,0,120,183,182,178,0,1,2,3,3,3,3,0,120,182,179,178,1,3,2,3,3,3,3,0,120,181,183,176,0,1,2,4,4,4,4,0,120,183,178,176,1,3,2,4,4,4,4,0,120,177,179,180,0,1,2,5,5,5,5,0,120,179,182,180,1,3,2,5,5,5,5,0,120,184,186,185,0,1,2,0,0,0,0,0,120,186,187,185,1,3,2,0,0,0,0,0,120,188,190,189,0,1,2,1,1,1,1,0,120,190,191,189,1,3,2,1,1,1,1,0,120,188,189,185,0,1,2,2,2,2,2,0,120,189,184,185,1,3,2,2,2,2,2,0,120,191,190,186,0,1,2,3,3,3,3,0,120,190,187,186,1,3,2,3,3,3,3,0,120,189,191,184,0,1,2,4,4,4,4,0,120,191,186,184,1,3,2,4,4,4,4,0,120,185,187,188,0,1,2,5,5,5,5,0,120,187,190,188,1,3,2,5,5,5,5,0,120,192,194,193,0,1,2,0,0,0,0,1,120,194,195,193,1,3,2,0,0,0,0,1,120,196,198,197,0,1,2,1,1,1,1,1,120,198,199,197,1,3,2,1,1,1,1,1,120,196,197,193,0,1,2,2,2,2,2,1,120,197,192,193,1,3,2,2,2,2,2,1,120,199,198,194,0,1,2,3,3,3,3,1,120,198,195,194,1,3,2,3,3,3,3,1,120,197,199,192,0,1,2,4,4,4,4,1,120,199,194,192,1,3,2,4,4,4,4,1,120,193,195,196,0,1,2,5,5,5,5,1,120,195,198,196,1,3,2,5,5,5,5,1,120,200,202,201,0,1,2,0,0,0,0,0,120,202,203,201,1,3,2,0,0,0,0,0,120,204,206,205,0,1,2,1,1,1,1,0,120,206,207,205,1,3,2,1,1,1,1,0,120,204,205,201,0,1,2,2,2,2,2,0,120,205,200,201,1,3,2,2,2,2,2,0,120,207,206,202,0,1,2,3,3,3,3,0,120,206,203,202,1,3,2,3,3,3,3,0,120,205,207,200,0,1,2,4,4,4,4,0,120,207,202,200,1,3,2,4,4,4,4,0,120,201,203,204,0,1,2,5,5,5,5,0,120,203,206,204,1,3,2,5,5,5,5,0,120,208,210,209,0,1,2,0,0,0,0,0,120,210,211,209,1,3,2,0,0,0,0,0,120,212,214,213,0,1,2,1,1,1,1,0,120,214,215,213,1,3,2,1,1,1,1,0,120,212,213,209,0,1,2,2,2,2,2,0,120,213,208,209,1,3,2,2,2,2,2,0,120,215,214,210,0,1,2,3,3,3,3,0,120,214,211,210,1,3,2,3,3,3,3,0,120,213,215,208,0,1,2,4,4,4,4,0,120,215,210,208,1,3,2,4,4,4,4,0,120,209,211,212,0,1,2,5,5,5,5,0,120,211,214,212,1,3,2,5,5,5,5,0,120,216,218,217,0,1,2,0,0,0,0,0,120,218,219,217,1,3,2,0,0,0,0,0,120,220,222,221,0,1,2,1,1,1,1,0,120,222,223,221,1,3,2,1,1,1,1,0,120,220,221,217,0,1,2,2,2,2,2,0,120,221,216,217,1,3,2,2,2,2,2,0,120,223,222,218,0,1,2,3,3,3,3,0,120,222,219,218,1,3,2,3,3,3,3,0,120,221,223,216,0,1,2,4,4,4,4,0,120,223,218,216,1,3,2,4,4,4,4,0,120,217,219,220,0,1,2,5,5,5,5,0,120,219,222,220,1,3,2,5,5,5,5,0,120,224,226,225,0,1,2,0,0,0,0,0,120,226,227,225,1,3,2,0,0,0,0,0,120,228,230,229,0,1,2,1,1,1,1,0,120,230,231,229,1,3,2,1,1,1,1,0,120,228,229,225,0,1,2,2,2,2,2,0,120,229,224,225,1,3,2,2,2,2,2,0,120,231,230,226,0,1,2,3,3,3,3,0,120,230,227,226,1,3,2,3,3,3,3,0,120,229,231,224,0,1,2,4,4,4,4,0,120,231,226,224,1,3,2,4,4,4,4,0,120,225,227,228,0,1,2,5,5,5,5,0,120,227,230,228,1,3,2,5,5,5,5,0,120,232,234,233,0,1,2,0,0,0,0,0,120,234,235,233,1,3,2,0,0,0,0,0,120,236,238,237,0,1,2,1,1,1,1,0,120,238,239,237,1,3,2,1,1,1,1,0,120,236,237,233,0,1,2,2,2,2,2,0,120,237,232,233,1,3,2,2,2,2,2,0,120,239,238,234,0,1,2,3,3,3,3,0,120,238,235,234,1,3,2,3,3,3,3,0,120,237,239,232,0,1,2,4,4,4,4,0,120,239,234,232,1,3,2,4,4,4,4,0,120,233,235,236,0,1,2,5,5,5,5,0,120,235,238,236,1,3,2,5,5,5,5,0,120,240,242,241,0,1,2,0,0,0,0,0,120,242,243,241,1,3,2,0,0,0,0,0,120,244,246,245,0,1,2,1,1,1,1,0,120,246,247,245,1,3,2,1,1,1,1,0,120,244,245,241,0,1,2,2,2,2,2,0,120,245,240,241,1,3,2,2,2,2,2,0,120,247,246,242,0,1,2,3,3,3,3,0,120,246,243,242,1,3,2,3,3,3,3,0,120,245,247,240,0,1,2,4,4,4,4,0,120,247,242,240,1,3,2,4,4,4,4,0,120,241,243,244,0,1,2,5,5,5,5,0,120,243,246,244,1,3,2,5,5,5,5,0,120,248,250,249,0,1,2,0,0,0,0,0,120,250,251,249,1,3,2,0,0,0,0,0,120,252,254,253,0,1,2,1,1,1,1,0,120,254,255,253,1,3,2,1,1,1,1,0,120,252,253,249,0,1,2,2,2,2,2,0,120,253,248,249,1,3,2,2,2,2,2,0,120,255,254,250,0,1,2,3,3,3,3,0,120,254,251,250,1,3,2,3,3,3,3,0,120,253,255,248,0,1,2,4,4,4,4,0,120,255,250,248,1,3,2,4,4,4,4,0,120,249,251,252,0,1,2,5,5,5,5,0,120,251,254,252,1,3,2,5,5,5,5,0,120,256,258,257,0,1,2,0,0,0,0,0,120,258,259,257,1,3,2,0,0,0,0,0,120,260,262,261,0,1,2,1,1,1,1,0,120,262,263,261,1,3,2,1,1,1,1,0,120,260,261,257,0,1,2,2,2,2,2,0,120,261,256,257,1,3,2,2,2,2,2,0,120,263,262,258,0,1,2,3,3,3,3,0,120,262,259,258,1,3,2,3,3,3,3,0,120,261,263,256,0,1,2,4,4,4,4,0,120,263,258,256,1,3,2,4,4,4,4,0,120,257,259,260,0,1,2,5,5,5,5,0,120,259,262,260,1,3,2,5,5,5,5,0,120,264,266,265,0,1,2,0,0,0,0,0,120,266,267,265,1,3,2,0,0,0,0,0,120,268,270,269,0,1,2,1,1,1,1,0,120,270,271,269,1,3,2,1,1,1,1,0,120,268,269,265,0,1,2,2,2,2,2,0,120,269,264,265,1,3,2,2,2,2,2,0,120,271,270,266,0,1,2,3,3,3,3,0,120,270,267,266,1,3,2,3,3,3,3,0,120,269,271,264,0,1,2,4,4,4,4,0,120,271,266,264,1,3,2,4,4,4,4,0,120,265,267,268,0,1,2,5,5,5,5,0,120,267,270,268,1,3,2,5,5,5,5,0,120,272,274,273,0,1,2,0,0,0,0,0,120,274,275,273,1,3,2,0,0,0,0,0,120,276,278,277,0,1,2,1,1,1,1,0,120,278,279,277,1,3,2,1,1,1,1,0,120,276,277,273,0,1,2,2,2,2,2,0,120,277,272,273,1,3,2,2,2,2,2,0,120,279,278,274,0,1,2,3,3,3,3,0,120,278,275,274,1,3,2,3,3,3,3,0,120,277,279,272,0,1,2,4,4,4,4,0,120,279,274,272,1,3,2,4,4,4,4,0,120,273,275,276,0,1,2,5,5,5,5,0,120,275,278,276,1,3,2,5,5,5,5,0,120,280,282,281,0,1,2,0,0,0,0,0,120,282,283,281,1,3,2,0,0,0,0,0,120,284,286,285,0,1,2,1,1,1,1,0,120,286,287,285,1,3,2,1,1,1,1,0,120,284,285,281,0,1,2,2,2,2,2,0,120,285,280,281,1,3,2,2,2,2,2,0,120,287,286,282,0,1,2,3,3,3,3,0,120,286,283,282,1,3,2,3,3,3,3,0,120,285,287,280,0,1,2,4,4,4,4,0,120,287,282,280,1,3,2,4,4,4,4,0,120,281,283,284,0,1,2,5,5,5,5,0,120,283,286,284,1,3,2,5,5,5,5,0,120,288,290,289,0,1,2,0,0,0,0,0,120,290,291,289,1,3,2,0,0,0,0,0,120,292,294,293,0,1,2,1,1,1,1,0,120,294,295,293,1,3,2,1,1,1,1,0,120,292,293,289,0,1,2,2,2,2,2,0,120,293,288,289,1,3,2,2,2,2,2,0,120,295,294,290,0,1,2,3,3,3,3,0,120,294,291,290,1,3,2,3,3,3,3,0,120,293,295,288,0,1,2,4,4,4,4,0,120,295,290,288,1,3,2,4,4,4,4,0,120,289,291,292,0,1,2,5,5,5,5,0,120,291,294,292,1,3,2,5,5,5,5,0,120,296,298,297,0,1,2,0,0,0,0,0,120,298,299,297,1,3,2,0,0,0,0,0,120,300,302,301,0,1,2,1,1,1,1,0,120,302,303,301,1,3,2,1,1,1,1,0,120,300,301,297,0,1,2,2,2,2,2,0,120,301,296,297,1,3,2,2,2,2,2,0,120,303,302,298,0,1,2,3,3,3,3,0,120,302,299,298,1,3,2,3,3,3,3,0,120,301,303,296,0,1,2,4,4,4,4,0,120,303,298,296,1,3,2,4,4,4,4,0,120,297,299,300,0,1,2,5,5,5,5,0,120,299,302,300,1,3,2,5,5,5,5,0,120,304,306,305,0,1,2,0,0,0,0,0,120,306,307,305,1,3,2,0,0,0,0,0,120,308,310,309,0,1,2,1,1,1,1,0,120,310,311,309,1,3,2,1,1,1,1,0,120,308,309,305,0,1,2,2,2,2,2,0,120,309,304,305,1,3,2,2,2,2,2,0,120,311,310,306,0,1,2,3,3,3,3,0,120,310,307,306,1,3,2,3,3,3,3,0,120,309,311,304,0,1,2,4,4,4,4,0,120,311,306,304,1,3,2,4,4,4,4,0,120,305,307,308,0,1,2,5,5,5,5,0,120,307,310,308,1,3,2,5,5,5,5,0,120,312,314,313,0,1,2,0,0,0,0,0,120,314,315,313,1,3,2,0,0,0,0,0,120,316,318,317,0,1,2,1,1,1,1,0,120,318,319,317,1,3,2,1,1,1,1,0,120,316,317,313,0,1,2,2,2,2,2,0,120,317,312,313,1,3,2,2,2,2,2,0,120,319,318,314,0,1,2,3,3,3,3,0,120,318,315,314,1,3,2,3,3,3,3,0,120,317,319,312,0,1,2,4,4,4,4,0,120,319,314,312,1,3,2,4,4,4,4,0,120,313,315,316,0,1,2,5,5,5,5,0,120,315,318,316,1,3,2,5,5,5,5,0,120,320,322,321,0,1,2,0,0,0,0,0,120,322,323,321,1,3,2,0,0,0,0,0,120,324,326,325,0,1,2,1,1,1,1,0,120,326,327,325,1,3,2,1,1,1,1,0,120,324,325,321,0,1,2,2,2,2,2,0,120,325,320,321,1,3,2,2,2,2,2,0,120,327,326,322,0,1,2,3,3,3,3,0,120,326,323,322,1,3,2,3,3,3,3,0,120,325,327,320,0,1,2,4,4,4,4,0,120,327,322,320,1,3,2,4,4,4,4,0,120,321,323,324,0,1,2,5,5,5,5,0,120,323,326,324,1,3,2,5,5,5,5,0,120,328,330,329,0,1,2,0,0,0,0,0,120,330,331,329,1,3,2,0,0,0,0,0,120,332,334,333,0,1,2,1,1,1,1,0,120,334,335,333,1,3,2,1,1,1,1,0,120,332,333,329,0,1,2,2,2,2,2,0,120,333,328,329,1,3,2,2,2,2,2,0,120,335,334,330,0,1,2,3,3,3,3,0,120,334,331,330,1,3,2,3,3,3,3,0,120,333,335,328,0,1,2,4,4,4,4,0,120,335,330,328,1,3,2,4,4,4,4,0,120,329,331,332,0,1,2,5,5,5,5,0,120,331,334,332,1,3,2,5,5,5,5,0,120,336,338,337,0,1,2,0,0,0,0,0,120,338,339,337,1,3,2,0,0,0,0,0,120,340,342,341,0,1,2,1,1,1,1,0,120,342,343,341,1,3,2,1,1,1,1,0,120,340,341,337,0,1,2,2,2,2,2,0,120,341,336,337,1,3,2,2,2,2,2,0,120,343,342,338,0,1,2,3,3,3,3,0,120,342,339,338,1,3,2,3,3,3,3,0,120,341,343,336,0,1,2,4,4,4,4,0,120,343,338,336,1,3,2,4,4,4,4,0,120,337,339,340,0,1,2,5,5,5,5,0,120,339,342,340,1,3,2,5,5,5,5,0,120,344,346,345,0,1,2,0,0,0,0,0,120,346,347,345,1,3,2,0,0,0,0,0,120,348,350,349,0,1,2,1,1,1,1,0,120,350,351,349,1,3,2,1,1,1,1,0,120,348,349,345,0,1,2,2,2,2,2,0,120,349,344,345,1,3,2,2,2,2,2,0,120,351,350,346,0,1,2,3,3,3,3,0,120,350,347,346,1,3,2,3,3,3,3,0,120,349,351,344,0,1,2,4,4,4,4,0,120,351,346,344,1,3,2,4,4,4,4,0,120,345,347,348,0,1,2,5,5,5,5,0,120,347,350,348,1,3,2,5,5,5,5,0,120,352,354,353,0,1,2,0,0,0,0,0,120,354,355,353,1,3,2,0,0,0,0,0,120,356,358,357,0,1,2,1,1,1,1,0,120,358,359,357,1,3,2,1,1,1,1,0,120,356,357,353,0,1,2,2,2,2,2,0,120,357,352,353,1,3,2,2,2,2,2,0,120,359,358,354,0,1,2,3,3,3,3,0,120,358,355,354,1,3,2,3,3,3,3,0,120,357,359,352,0,1,2,4,4,4,4,0,120,359,354,352,1,3,2,4,4,4,4,0,120,353,355,356,0,1,2,5,5,5,5,0,120,355,358,356,1,3,2,5,5,5,5,0,120,360,362,361,0,1,2,0,0,0,0,0,120,362,363,361,1,3,2,0,0,0,0,0,120,364,366,365,0,1,2,1,1,1,1,0,120,366,367,365,1,3,2,1,1,1,1,0,120,364,365,361,0,1,2,2,2,2,2,0,120,365,360,361,1,3,2,2,2,2,2,0,120,367,366,362,0,1,2,3,3,3,3,0,120,366,363,362,1,3,2,3,3,3,3,0,120,365,367,360,0,1,2,4,4,4,4,0,120,367,362,360,1,3,2,4,4,4,4,0,120,361,363,364,0,1,2,5,5,5,5,0,120,363,366,364,1,3,2,5,5,5,5,0,120,368,370,369,0,1,2,0,0,0,0,0,120,370,371,369,1,3,2,0,0,0,0,0,120,372,374,373,0,1,2,1,1,1,1,0,120,374,375,373,1,3,2,1,1,1,1,0,120,372,373,369,0,1,2,2,2,2,2,0,120,373,368,369,1,3,2,2,2,2,2,0,120,375,374,370,0,1,2,3,3,3,3,0,120,374,371,370,1,3,2,3,3,3,3,0,120,373,375,368,0,1,2,4,4,4,4,0,120,375,370,368,1,3,2,4,4,4,4,0,120,369,371,372,0,1,2,5,5,5,5,0,120,371,374,372,1,3,2,5,5,5,5,0,120,376,378,377,0,1,2,0,0,0,0,0,120,378,379,377,1,3,2,0,0,0,0,0,120,380,382,381,0,1,2,1,1,1,1,0,120,382,383,381,1,3,2,1,1,1,1,0,120,380,381,377,0,1,2,2,2,2,2,0,120,381,376,377,1,3,2,2,2,2,2,0,120,383,382,378,0,1,2,3,3,3,3,0,120,382,379,378,1,3,2,3,3,3,3,0,120,381,383,376,0,1,2,4,4,4,4,0,120,383,378,376,1,3,2,4,4,4,4,0,120,377,379,380,0,1,2,5,5,5,5,0,120,379,382,380,1,3,2,5,5,5,5,0,120,384,386,385,0,1,2,0,0,0,0,0,120,386,387,385,1,3,2,0,0,0,0,0,120,388,390,389,0,1,2,1,1,1,1,0,120,390,391,389,1,3,2,1,1,1,1,0,120,388,389,385,0,1,2,2,2,2,2,0,120,389,384,385,1,3,2,2,2,2,2,0,120,391,390,386,0,1,2,3,3,3,3,0,120,390,387,386,1,3,2,3,3,3,3,0,120,389,391,384,0,1,2,4,4,4,4,0,120,391,386,384,1,3,2,4,4,4,4,0,120,385,387,388,0,1,2,5,5,5,5,0,120,387,390,388,1,3,2,5,5,5,5,0,120,392,394,393,0,1,2,0,0,0,0,0,120,394,395,393,1,3,2,0,0,0,0,0,120,396,398,397,0,1,2,1,1,1,1,0,120,398,399,397,1,3,2,1,1,1,1,0,120,396,397,393,0,1,2,2,2,2,2,0,120,397,392,393,1,3,2,2,2,2,2,0,120,399,398,394,0,1,2,3,3,3,3,0,120,398,395,394,1,3,2,3,3,3,3,0,120,397,399,392,0,1,2,4,4,4,4,0,120,399,394,392,1,3,2,4,4,4,4,0,120,393,395,396,0,1,2,5,5,5,5,0,120,395,398,396,1,3,2,5,5,5,5,0,120,400,402,401,0,1,2,0,0,0,0,0,120,402,403,401,1,3,2,0,0,0,0,0,120,404,406,405,0,1,2,1,1,1,1,0,120,406,407,405,1,3,2,1,1,1,1,0,120,404,405,401,0,1,2,2,2,2,2,0,120,405,400,401,1,3,2,2,2,2,2,0,120,407,406,402,0,1,2,3,3,3,3,0,120,406,403,402,1,3,2,3,3,3,3,0,120,405,407,400,0,1,2,4,4,4,4,0,120,407,402,400,1,3,2,4,4,4,4,0,120,401,403,404,0,1,2,5,5,5,5,0,120,403,406,404,1,3,2,5,5,5,5,0,120,408,410,409,0,1,2,0,0,0,0,0,120,410,411,409,1,3,2,0,0,0,0,0,120,412,414,413,0,1,2,1,1,1,1,0,120,414,415,413,1,3,2,1,1,1,1,0,120,412,413,409,0,1,2,2,2,2,2,0,120,413,408,409,1,3,2,2,2,2,2,0,120,415,414,410,0,1,2,3,3,3,3,0,120,414,411,410,1,3,2,3,3,3,3,0,120,413,415,408,0,1,2,4,4,4,4,0,120,415,410,408,1,3,2,4,4,4,4,0,120,409,411,412,0,1,2,5,5,5,5,0,120,411,414,412,1,3,2,5,5,5,5,0,120,416,418,417,0,1,2,0,0,0,0,0,120,418,419,417,1,3,2,0,0,0,0,0,120,420,422,421,0,1,2,1,1,1,1,0,120,422,423,421,1,3,2,1,1,1,1,0,120,420,421,417,0,1,2,2,2,2,2,0,120,421,416,417,1,3,2,2,2,2,2,0,120,423,422,418,0,1,2,3,3,3,3,0,120,422,419,418,1,3,2,3,3,3,3,0,120,421,423,416,0,1,2,4,4,4,4,0,120,423,418,416,1,3,2,4,4,4,4,0,120,417,419,420,0,1,2,5,5,5,5,0,120,419,422,420,1,3,2,5,5,5,5,0,120,424,426,425,0,1,2,0,0,0,0,0,120,426,427,425,1,3,2,0,0,0,0,0,120,428,430,429,0,1,2,1,1,1,1,0,120,430,431,429,1,3,2,1,1,1,1,0,120,428,429,425,0,1,2,2,2,2,2,0,120,429,424,425,1,3,2,2,2,2,2,0,120,431,430,426,0,1,2,3,3,3,3,0,120,430,427,426,1,3,2,3,3,3,3,0,120,429,431,424,0,1,2,4,4,4,4,0,120,431,426,424,1,3,2,4,4,4,4,0,120,425,427,428,0,1,2,5,5,5,5,0,120,427,430,428,1,3,2,5,5,5,5,0,120,432,434,433,0,1,2,0,0,0,0,0,120,434,435,433,1,3,2,0,0,0,0,0,120,436,438,437,0,1,2,1,1,1,1,0,120,438,439,437,1,3,2,1,1,1,1,0,120,436,437,433,0,1,2,2,2,2,2,0,120,437,432,433,1,3,2,2,2,2,2,0,120,439,438,434,0,1,2,3,3,3,3,0,120,438,435,434,1,3,2,3,3,3,3,0,120,437,439,432,0,1,2,4,4,4,4,0,120,439,434,432,1,3,2,4,4,4,4,0,120,433,435,436,0,1,2,5,5,5,5,0,120,435,438,436,1,3,2,5,5,5,5,0,120,440,442,441,0,1,2,0,0,0,0,0,120,442,443,441,1,3,2,0,0,0,0,0,120,444,446,445,0,1,2,1,1,1,1,0,120,446,447,445,1,3,2,1,1,1,1,0,120,444,445,441,0,1,2,2,2,2,2,0,120,445,440,441,1,3,2,2,2,2,2,0,120,447,446,442,0,1,2,3,3,3,3,0,120,446,443,442,1,3,2,3,3,3,3,0,120,445,447,440,0,1,2,4,4,4,4,0,120,447,442,440,1,3,2,4,4,4,4,0,120,441,443,444,0,1,2,5,5,5,5,0,120,443,446,444,1,3,2,5,5,5,5,0,120,448,450,449,0,1,2,0,0,0,0,0,120,450,451,449,1,3,2,0,0,0,0,0,120,452,454,453,0,1,2,1,1,1,1,0,120,454,455,453,1,3,2,1,1,1,1,0,120,452,453,449,0,1,2,2,2,2,2,0,120,453,448,449,1,3,2,2,2,2,2,0,120,455,454,450,0,1,2,3,3,3,3,0,120,454,451,450,1,3,2,3,3,3,3,0,120,453,455,448,0,1,2,4,4,4,4,0,120,455,450,448,1,3,2,4,4,4,4,0,120,449,451,452,0,1,2,5,5,5,5,0,120,451,454,452,1,3,2,5,5,5,5,0,120,456,458,457,0,1,2,0,0,0,0,0,120,458,459,457,1,3,2,0,0,0,0,0,120,460,462,461,0,1,2,1,1,1,1,0,120,462,463,461,1,3,2,1,1,1,1,0,120,460,461,457,0,1,2,2,2,2,2,0,120,461,456,457,1,3,2,2,2,2,2,0,120,463,462,458,0,1,2,3,3,3,3,0,120,462,459,458,1,3,2,3,3,3,3,0,120,461,463,456,0,1,2,4,4,4,4,0,120,463,458,456,1,3,2,4,4,4,4,0,120,457,459,460,0,1,2,5,5,5,5,0,120,459,462,460,1,3,2,5,5,5,5,0,120,464,466,465,0,1,2,0,0,0,0,0,120,466,467,465,1,3,2,0,0,0,0,0,120,468,470,469,0,1,2,1,1,1,1,0,120,470,471,469,1,3,2,1,1,1,1,0,120,468,469,465,0,1,2,2,2,2,2,0,120,469,464,465,1,3,2,2,2,2,2,0,120,471,470,466,0,1,2,3,3,3,3,0,120,470,467,466,1,3,2,3,3,3,3,0,120,469,471,464,0,1,2,4,4,4,4,0,120,471,466,464,1,3,2,4,4,4,4,0,120,465,467,468,0,1,2,5,5,5,5,0,120,467,470,468,1,3,2,5,5,5,5,0,120,472,474,473,0,1,2,0,0,0,0,0,120,474,475,473,1,3,2,0,0,0,0,0,120,476,478,477,0,1,2,1,1,1,1,0,120,478,479,477,1,3,2,1,1,1,1,0,120,476,477,473,0,1,2,2,2,2,2,0,120,477,472,473,1,3,2,2,2,2,2,0,120,479,478,474,0,1,2,3,3,3,3,0,120,478,475,474,1,3,2,3,3,3,3,0,120,477,479,472,0,1,2,4,4,4,4,0,120,479,474,472,1,3,2,4,4,4,4,0,120,473,475,476,0,1,2,5,5,5,5,0,120,475,478,476,1,3,2,5,5,5,5,0,120,480,482,481,0,1,2,0,0,0,0,1,120,482,483,481,1,3,2,0,0,0,0,1,120,484,486,485,0,1,2,1,1,1,1,1,120,486,487,485,1,3,2,1,1,1,1,1,120,484,485,481,0,1,2,2,2,2,2,1,120,485,480,481,1,3,2,2,2,2,2,1,120,487,486,482,0,1,2,3,3,3,3,1,120,486,483,482,1,3,2,3,3,3,3,1,120,485,487,480,0,1,2,4,4,4,4,1,120,487,482,480,1,3,2,4,4,4,4,1,120,481,483,484,0,1,2,5,5,5,5,1,120,483,486,484,1,3,2,5,5,5,5,1,120,488,490,489,0,1,2,0,0,0,0,1,120,490,491,489,1,3,2,0,0,0,0,1,120,492,494,493,0,1,2,1,1,1,1,1,120,494,495,493,1,3,2,1,1,1,1,1,120,492,493,489,0,1,2,2,2,2,2,1,120,493,488,489,1,3,2,2,2,2,2,1,120,495,494,490,0,1,2,3,3,3,3,1,120,494,491,490,1,3,2,3,3,3,3,1,120,493,495,488,0,1,2,4,4,4,4,1,120,495,490,488,1,3,2,4,4,4,4,1,120,489,491,492,0,1,2,5,5,5,5,1,120,491,494,492,1,3,2,5,5,5,5,1,120,496,498,497,0,1,2,0,0,0,0,1,120,498,499,497,1,3,2,0,0,0,0,1,120,500,502,501,0,1,2,1,1,1,1,1,120,502,503,501,1,3,2,1,1,1,1,1,120,500,501,497,0,1,2,2,2,2,2,1,120,501,496,497,1,3,2,2,2,2,2,1,120,503,502,498,0,1,2,3,3,3,3,1,120,502,499,498,1,3,2,3,3,3,3,1,120,501,503,496,0,1,2,4,4,4,4,1,120,503,498,496,1,3,2,4,4,4,4,1,120,497,499,500,0,1,2,5,5,5,5,1,120,499,502,500,1,3,2,5,5,5,5,1,120,504,506,505,0,1,2,0,0,0,0,1,120,506,507,505,1,3,2,0,0,0,0,1,120,508,510,509,0,1,2,1,1,1,1,1,120,510,511,509,1,3,2,1,1,1,1,1,120,508,509,505,0,1,2,2,2,2,2,1,120,509,504,505,1,3,2,2,2,2,2,1,120,511,510,506,0,1,2,3,3,3,3,1,120,510,507,506,1,3,2,3,3,3,3,1,120,509,511,504,0,1,2,4,4,4,4,1,120,511,506,504,1,3,2,4,4,4,4,1,120,505,507,508,0,1,2,5,5,5,5,1,120,507,510,508,1,3,2,5,5,5,5,1,120,512,514,513,0,1,2,0,0,0,0,0,120,514,515,513,1,3,2,0,0,0,0,0,120,516,518,517,0,1,2,1,1,1,1,0,120,518,519,517,1,3,2,1,1,1,1,0,120,516,517,513,0,1,2,2,2,2,2,0,120,517,512,513,1,3,2,2,2,2,2,0,120,519,518,514,0,1,2,3,3,3,3,0,120,518,515,514,1,3,2,3,3,3,3,0,120,517,519,512,0,1,2,4,4,4,4,0,120,519,514,512,1,3,2,4,4,4,4,0,120,513,515,516,0,1,2,5,5,5,5,0,120,515,518,516,1,3,2,5,5,5,5,0,120,520,522,521,0,1,2,0,0,0,0,1,120,522,523,521,1,3,2,0,0,0,0,1,120,524,526,525,0,1,2,1,1,1,1,1,120,526,527,525,1,3,2,1,1,1,1,1,120,524,525,521,0,1,2,2,2,2,2,1,120,525,520,521,1,3,2,2,2,2,2,1,120,527,526,522,0,1,2,3,3,3,3,1,120,526,523,522,1,3,2,3,3,3,3,1,120,525,527,520,0,1,2,4,4,4,4,1,120,527,522,520,1,3,2,4,4,4,4,1,120,521,523,524,0,1,2,5,5,5,5,1,120,523,526,524,1,3,2,5,5,5,5,1,120,528,530,529,0,1,2,0,0,0,0,1,120,530,531,529,1,3,2,0,0,0,0,1,120,532,534,533,0,1,2,1,1,1,1,1,120,534,535,533,1,3,2,1,1,1,1,1,120,532,533,529,0,1,2,2,2,2,2,1,120,533,528,529,1,3,2,2,2,2,2,1,120,535,534,530,0,1,2,3,3,3,3,1,120,534,531,530,1,3,2,3,3,3,3,1,120,533,535,528,0,1,2,4,4,4,4,1,120,535,530,528,1,3,2,4,4,4,4,1,120,529,531,532,0,1,2,5,5,5,5,1,120,531,534,532,1,3,2,5,5,5,5,1,120,536,538,537,0,1,2,0,0,0,0,1,120,538,539,537,1,3,2,0,0,0,0,1,120,540,542,541,0,1,2,1,1,1,1,1,120,542,543,541,1,3,2,1,1,1,1,1,120,540,541,537,0,1,2,2,2,2,2,1,120,541,536,537,1,3,2,2,2,2,2,1,120,543,542,538,0,1,2,3,3,3,3,1,120,542,539,538,1,3,2,3,3,3,3,1,120,541,543,536,0,1,2,4,4,4,4,1,120,543,538,536,1,3,2,4,4,4,4,1,120,537,539,540,0,1,2,5,5,5,5,1,120,539,542,540,1,3,2,5,5,5,5,1,120,544,546,545,0,1,2,0,0,0,0,1,120,546,547,545,1,3,2,0,0,0,0,1,120,548,550,549,0,1,2,1,1,1,1,1,120,550,551,549,1,3,2,1,1,1,1,1,120,548,549,545,0,1,2,2,2,2,2,1,120,549,544,545,1,3,2,2,2,2,2,1,120,551,550,546,0,1,2,3,3,3,3,1,120,550,547,546,1,3,2,3,3,3,3,1,120,549,551,544,0,1,2,4,4,4,4,1,120,551,546,544,1,3,2,4,4,4,4,1,120,545,547,548,0,1,2,5,5,5,5,1,120,547,550,548,1,3,2,5,5,5,5,1,120,552,554,553,0,1,2,0,0,0,0,2,120,554,555,553,1,3,2,0,0,0,0,2,120,556,558,557,0,1,2,1,1,1,1,2,120,558,559,557,1,3,2,1,1,1,1,2,120,556,557,553,0,1,2,2,2,2,2,2,120,557,552,553,1,3,2,2,2,2,2,2,120,559,558,554,0,1,2,3,3,3,3,2,120,558,555,554,1,3,2,3,3,3,3,2,120,557,559,552,0,1,2,4,4,4,4,2,120,559,554,552,1,3,2,4,4,4,4,2,120,553,555,556,0,1,2,5,5,5,5,2,120,555,558,556,1,3,2,5,5,5,5,2,120,560,562,561,0,1,2,0,0,0,0,1,120,562,563,561,1,3,2,0,0,0,0,1,120,564,566,565,0,1,2,1,1,1,1,1,120,566,567,565,1,3,2,1,1,1,1,1,120,564,565,561,0,1,2,2,2,2,2,1,120,565,560,561,1,3,2,2,2,2,2,1,120,567,566,562,0,1,2,3,3,3,3,1,120,566,563,562,1,3,2,3,3,3,3,1,120,565,567,560,0,1,2,4,4,4,4,1,120,567,562,560,1,3,2,4,4,4,4,1,120,561,563,564,0,1,2,5,5,5,5,1,120,563,566,564,1,3,2,5,5,5,5,1,120,568,570,569,0,1,2,0,0,0,0,0,120,570,571,569,1,3,2,0,0,0,0,0,120,572,574,573,0,1,2,1,1,1,1,0,120,574,575,573,1,3,2,1,1,1,1,0,120,572,573,569,0,1,2,2,2,2,2,0,120,573,568,569,1,3,2,2,2,2,2,0,120,575,574,570,0,1,2,3,3,3,3,0,120,574,571,570,1,3,2,3,3,3,3,0,120,573,575,568,0,1,2,4,4,4,4,0,120,575,570,568,1,3,2,4,4,4,4,0,120,569,571,572,0,1,2,5,5,5,5,0,120,571,574,572,1,3,2,5,5,5,5,0,120,576,578,577,0,1,2,0,0,0,0,1,120,578,579,577,1,3,2,0,0,0,0,1,120,580,582,581,0,1,2,1,1,1,1,1,120,582,583,581,1,3,2,1,1,1,1,1,120,580,581,577,0,1,2,2,2,2,2,1,120,581,576,577,1,3,2,2,2,2,2,1,120,583,582,578,0,1,2,3,3,3,3,1,120,582,579,578,1,3,2,3,3,3,3,1,120,581,583,576,0,1,2,4,4,4,4,1,120,583,578,576,1,3,2,4,4,4,4,1,120,577,579,580,0,1,2,5,5,5,5,1,120,579,582,580,1,3,2,5,5,5,5,1,120,584,586,585,0,1,2,0,0,0,0,1,120,586,587,585,1,3,2,0,0,0,0,1,120,588,590,589,0,1,2,1,1,1,1,1,120,590,591,589,1,3,2,1,1,1,1,1,120,588,589,585,0,1,2,2,2,2,2,1,120,589,584,585,1,3,2,2,2,2,2,1,120,591,590,586,0,1,2,3,3,3,3,1,120,590,587,586,1,3,2,3,3,3,3,1,120,589,591,584,0,1,2,4,4,4,4,1,120,591,586,584,1,3,2,4,4,4,4,1,120,585,587,588,0,1,2,5,5,5,5,1,120,587,590,588,1,3,2,5,5,5,5,1,120,592,594,593,0,1,2,0,0,0,0,1,120,594,595,593,1,3,2,0,0,0,0,1,120,596,598,597,0,1,2,1,1,1,1,1,120,598,599,597,1,3,2,1,1,1,1,1,120,596,597,593,0,1,2,2,2,2,2,1,120,597,592,593,1,3,2,2,2,2,2,1,120,599,598,594,0,1,2,3,3,3,3,1,120,598,595,594,1,3,2,3,3,3,3,1,120,597,599,592,0,1,2,4,4,4,4,1,120,599,594,592,1,3,2,4,4,4,4,1,120,593,595,596,0,1,2,5,5,5,5,1,120,595,598,596,1,3,2,5,5,5,5,1,120,600,602,601,0,1,2,0,0,0,0,0,120,602,603,601,1,3,2,0,0,0,0,0,120,604,606,605,0,1,2,1,1,1,1,0,120,606,607,605,1,3,2,1,1,1,1,0,120,604,605,601,0,1,2,2,2,2,2,0,120,605,600,601,1,3,2,2,2,2,2,0,120,607,606,602,0,1,2,3,3,3,3,0,120,606,603,602,1,3,2,3,3,3,3,0,120,605,607,600,0,1,2,4,4,4,4,0,120,607,602,600,1,3,2,4,4,4,4,0,120,601,603,604,0,1,2,5,5,5,5,0,120,603,606,604,1,3,2,5,5,5,5,0,120,608,610,609,0,1,2,0,0,0,0,1,120,610,611,609,1,3,2,0,0,0,0,1,120,612,614,613,0,1,2,1,1,1,1,1,120,614,615,613,1,3,2,1,1,1,1,1,120,612,613,609,0,1,2,2,2,2,2,1,120,613,608,609,1,3,2,2,2,2,2,1,120,615,614,610,0,1,2,3,3,3,3,1,120,614,611,610,1,3,2,3,3,3,3,1,120,613,615,608,0,1,2,4,4,4,4,1,120,615,610,608,1,3,2,4,4,4,4,1,120,609,611,612,0,1,2,5,5,5,5,1,120,611,614,612,1,3,2,5,5,5,5,1,120,616,618,617,0,1,2,0,0,0,0,1,120,618,619,617,1,3,2,0,0,0,0,1,120,620,622,621,0,1,2,1,1,1,1,1,120,622,623,621,1,3,2,1,1,1,1,1,120,620,621,617,0,1,2,2,2,2,2,1,120,621,616,617,1,3,2,2,2,2,2,1,120,623,622,618,0,1,2,3,3,3,3,1,120,622,619,618,1,3,2,3,3,3,3,1,120,621,623,616,0,1,2,4,4,4,4,1,120,623,618,616,1,3,2,4,4,4,4,1,120,617,619,620,0,1,2,5,5,5,5,1,120,619,622,620,1,3,2,5,5,5,5,1,120,624,626,625,0,1,2,0,0,0,0,1,120,626,627,625,1,3,2,0,0,0,0,1,120,628,630,629,0,1,2,1,1,1,1,1,120,630,631,629,1,3,2,1,1,1,1,1,120,628,629,625,0,1,2,2,2,2,2,1,120,629,624,625,1,3,2,2,2,2,2,1,120,631,630,626,0,1,2,3,3,3,3,1,120,630,627,626,1,3,2,3,3,3,3,1,120,629,631,624,0,1,2,4,4,4,4,1,120,631,626,624,1,3,2,4,4,4,4,1,120,625,627,628,0,1,2,5,5,5,5,1,120,627,630,628,1,3,2,5,5,5,5,1,120,632,634,633,0,1,2,0,0,0,0,1,120,634,635,633,1,3,2,0,0,0,0,1,120,636,638,637,0,1,2,1,1,1,1,1,120,638,639,637,1,3,2,1,1,1,1,1,120,636,637,633,0,1,2,2,2,2,2,1,120,637,632,633,1,3,2,2,2,2,2,1,120,639,638,634,0,1,2,3,3,3,3,1,120,638,635,634,1,3,2,3,3,3,3,1,120,637,639,632,0,1,2,4,4,4,4,1,120,639,634,632,1,3,2,4,4,4,4,1,120,633,635,636,0,1,2,5,5,5,5,1,120,635,638,636,1,3,2,5,5,5,5,1,120,640,642,641,0,1,2,0,0,0,0,1,120,642,643,641,1,3,2,0,0,0,0,1,120,644,646,645,0,1,2,1,1,1,1,1,120,646,647,645,1,3,2,1,1,1,1,1,120,644,645,641,0,1,2,2,2,2,2,1,120,645,640,641,1,3,2,2,2,2,2,1,120,647,646,642,0,1,2,3,3,3,3,1,120,646,643,642,1,3,2,3,3,3,3,1,120,645,647,640,0,1,2,4,4,4,4,1,120,647,642,640,1,3,2,4,4,4,4,1,120,641,643,644,0,1,2,5,5,5,5,1,120,643,646,644,1,3,2,5,5,5,5,1,120,648,650,649,0,1,2,0,0,0,0,0,120,650,651,649,1,3,2,0,0,0,0,0,120,652,654,653,0,1,2,1,1,1,1,0,120,654,655,653,1,3,2,1,1,1,1,0,120,652,653,649,0,1,2,2,2,2,2,0,120,653,648,649,1,3,2,2,2,2,2,0,120,655,654,650,0,1,2,3,3,3,3,0,120,654,651,650,1,3,2,3,3,3,3,0,120,653,655,648,0,1,2,4,4,4,4,0,120,655,650,648,1,3,2,4,4,4,4,0,120,649,651,652,0,1,2,5,5,5,5,0,120,651,654,652,1,3,2,5,5,5,5,0,120,656,658,657,0,1,2,0,0,0,0,1,120,658,659,657,1,3,2,0,0,0,0,1,120,660,662,661,0,1,2,1,1,1,1,1,120,662,663,661,1,3,2,1,1,1,1,1,120,660,661,657,0,1,2,2,2,2,2,1,120,661,656,657,1,3,2,2,2,2,2,1,120,663,662,658,0,1,2,3,3,3,3,1,120,662,659,658,1,3,2,3,3,3,3,1,120,661,663,656,0,1,2,4,4,4,4,1,120,663,658,656,1,3,2,4,4,4,4,1,120,657,659,660,0,1,2,5,5,5,5,1,120,659,662,660,1,3,2,5,5,5,5,1,120,664,666,665,0,1,2,0,0,0,0,1,120,666,667,665,1,3,2,0,0,0,0,1,120,668,670,669,0,1,2,1,1,1,1,1,120,670,671,669,1,3,2,1,1,1,1,1,120,668,669,665,0,1,2,2,2,2,2,1,120,669,664,665,1,3,2,2,2,2,2,1,120,671,670,666,0,1,2,3,3,3,3,1,120,670,667,666,1,3,2,3,3,3,3,1,120,669,671,664,0,1,2,4,4,4,4,1,120,671,666,664,1,3,2,4,4,4,4,1,120,665,667,668,0,1,2,5,5,5,5,1,120,667,670,668,1,3,2,5,5,5,5,1,120,672,674,673,0,1,2,0,0,0,0,2,120,674,675,673,1,3,2,0,0,0,0,2,120,676,678,677,0,1,2,1,1,1,1,2,120,678,679,677,1,3,2,1,1,1,1,2,120,676,677,673,0,1,2,2,2,2,2,2,120,677,672,673,1,3,2,2,2,2,2,2,120,679,678,674,0,1,2,3,3,3,3,2,120,678,675,674,1,3,2,3,3,3,3,2,120,677,679,672,0,1,2,4,4,4,4,2,120,679,674,672,1,3,2,4,4,4,4,2,120,673,675,676,0,1,2,5,5,5,5,2,120,675,678,676,1,3,2,5,5,5,5,2,120,680,682,681,0,1,2,0,0,0,0,1,120,682,683,681,1,3,2,0,0,0,0,1,120,684,686,685,0,1,2,1,1,1,1,1,120,686,687,685,1,3,2,1,1,1,1,1,120,684,685,681,0,1,2,2,2,2,2,1,120,685,680,681,1,3,2,2,2,2,2,1,120,687,686,682,0,1,2,3,3,3,3,1,120,686,683,682,1,3,2,3,3,3,3,1,120,685,687,680,0,1,2,4,4,4,4,1,120,687,682,680,1,3,2,4,4,4,4,1,120,681,683,684,0,1,2,5,5,5,5,1,120,683,686,684,1,3,2,5,5,5,5,1,120,688,690,689,0,1,2,0,0,0,0,1,120,690,691,689,1,3,2,0,0,0,0,1,120,692,694,693,0,1,2,1,1,1,1,1,120,694,695,693,1,3,2,1,1,1,1,1,120,692,693,689,0,1,2,2,2,2,2,1,120,693,688,689,1,3,2,2,2,2,2,1,120,695,694,690,0,1,2,3,3,3,3,1,120,694,691,690,1,3,2,3,3,3,3,1,120,693,695,688,0,1,2,4,4,4,4,1,120,695,690,688,1,3,2,4,4,4,4,1,120,689,691,692,0,1,2,5,5,5,5,1,120,691,694,692,1,3,2,5,5,5,5,1,120,696,698,697,0,1,2,0,0,0,0,1,120,698,699,697,1,3,2,0,0,0,0,1,120,700,702,701,0,1,2,1,1,1,1,1,120,702,703,701,1,3,2,1,1,1,1,1,120,700,701,697,0,1,2,2,2,2,2,1,120,701,696,697,1,3,2,2,2,2,2,1,120,703,702,698,0,1,2,3,3,3,3,1,120,702,699,698,1,3,2,3,3,3,3,1,120,701,703,696,0,1,2,4,4,4,4,1,120,703,698,696,1,3,2,4,4,4,4,1,120,697,699,700,0,1,2,5,5,5,5,1,120,699,702,700,1,3,2,5,5,5,5,1,120,704,706,705,0,1,2,0,0,0,0,1,120,706,707,705,1,3,2,0,0,0,0,1,120,708,710,709,0,1,2,1,1,1,1,1,120,710,711,709,1,3,2,1,1,1,1,1,120,708,709,705,0,1,2,2,2,2,2,1,120,709,704,705,1,3,2,2,2,2,2,1,120,711,710,706,0,1,2,3,3,3,3,1,120,710,707,706,1,3,2,3,3,3,3,1,120,709,711,704,0,1,2,4,4,4,4,1,120,711,706,704,1,3,2,4,4,4,4,1,120,705,707,708,0,1,2,5,5,5,5,1,120,707,710,708,1,3,2,5,5,5,5,1,120,712,714,713,0,1,2,0,0,0,0,1,120,714,715,713,1,3,2,0,0,0,0,1,120,716,718,717,0,1,2,1,1,1,1,1,120,718,719,717,1,3,2,1,1,1,1,1,120,716,717,713,0,1,2,2,2,2,2,1,120,717,712,713,1,3,2,2,2,2,2,1,120,719,718,714,0,1,2,3,3,3,3,1,120,718,715,714,1,3,2,3,3,3,3,1,120,717,719,712,0,1,2,4,4,4,4,1,120,719,714,712,1,3,2,4,4,4,4,1,120,713,715,716,0,1,2,5,5,5,5,1,120,715,718,716,1,3,2,5,5,5,5,1,120,720,722,721,0,1,2,0,0,0,0,0,120,722,723,721,1,3,2,0,0,0,0,0,120,724,726,725,0,1,2,1,1,1,1,0,120,726,727,725,1,3,2,1,1,1,1,0,120,724,725,721,0,1,2,2,2,2,2,0,120,725,720,721,1,3,2,2,2,2,2,0,120,727,726,722,0,1,2,3,3,3,3,0,120,726,723,722,1,3,2,3,3,3,3,0,120,725,727,720,0,1,2,4,4,4,4,0,120,727,722,720,1,3,2,4,4,4,4,0,120,721,723,724,0,1,2,5,5,5,5,0,120,723,726,724,1,3,2,5,5,5,5,0,120,728,730,729,0,1,2,0,0,0,0,0,120,730,731,729,1,3,2,0,0,0,0,0,120,732,734,733,0,1,2,1,1,1,1,0,120,734,735,733,1,3,2,1,1,1,1,0,120,732,733,729,0,1,2,2,2,2,2,0,120,733,728,729,1,3,2,2,2,2,2,0,120,735,734,730,0,1,2,3,3,3,3,0,120,734,731,730,1,3,2,3,3,3,3,0,120,733,735,728,0,1,2,4,4,4,4,0,120,735,730,728,1,3,2,4,4,4,4,0,120,729,731,732,0,1,2,5,5,5,5,0,120,731,734,732,1,3,2,5,5,5,5,0,120,736,738,737,0,1,2,0,0,0,0,1,120,738,739,737,1,3,2,0,0,0,0,1,120,740,742,741,0,1,2,1,1,1,1,1,120,742,743,741,1,3,2,1,1,1,1,1,120,740,741,737,0,1,2,2,2,2,2,1,120,741,736,737,1,3,2,2,2,2,2,1,120,743,742,738,0,1,2,3,3,3,3,1,120,742,739,738,1,3,2,3,3,3,3,1,120,741,743,736,0,1,2,4,4,4,4,1,120,743,738,736,1,3,2,4,4,4,4,1,120,737,739,740,0,1,2,5,5,5,5,1,120,739,742,740,1,3,2,5,5,5,5,1,120,744,746,745,0,1,2,0,0,0,0,1,120,746,747,745,1,3,2,0,0,0,0,1,120,748,750,749,0,1,2,1,1,1,1,1,120,750,751,749,1,3,2,1,1,1,1,1,120,748,749,745,0,1,2,2,2,2,2,1,120,749,744,745,1,3,2,2,2,2,2,1,120,751,750,746,0,1,2,3,3,3,3,1,120,750,747,746,1,3,2,3,3,3,3,1,120,749,751,744,0,1,2,4,4,4,4,1,120,751,746,744,1,3,2,4,4,4,4,1,120,745,747,748,0,1,2,5,5,5,5,1,120,747,750,748,1,3,2,5,5,5,5,1,120,752,754,753,0,1,2,0,0,0,0,1,120,754,755,753,1,3,2,0,0,0,0,1,120,756,758,757,0,1,2,1,1,1,1,1,120,758,759,757,1,3,2,1,1,1,1,1,120,756,757,753,0,1,2,2,2,2,2,1,120,757,752,753,1,3,2,2,2,2,2,1,120,759,758,754,0,1,2,3,3,3,3,1,120,758,755,754,1,3,2,3,3,3,3,1,120,757,759,752,0,1,2,4,4,4,4,1,120,759,754,752,1,3,2,4,4,4,4,1,120,753,755,756,0,1,2,5,5,5,5,1,120,755,758,756,1,3,2,5,5,5,5,1,120,760,762,761,0,1,2,0,0,0,0,1,120,762,763,761,1,3,2,0,0,0,0,1,120,764,766,765,0,1,2,1,1,1,1,1,120,766,767,765,1,3,2,1,1,1,1,1,120,764,765,761,0,1,2,2,2,2,2,1,120,765,760,761,1,3,2,2,2,2,2,1,120,767,766,762,0,1,2,3,3,3,3,1,120,766,763,762,1,3,2,3,3,3,3,1,120,765,767,760,0,1,2,4,4,4,4,1,120,767,762,760,1,3,2,4,4,4,4,1,120,761,763,764,0,1,2,5,5,5,5,1,120,763,766,764,1,3,2,5,5,5,5,1,120,768,770,769,0,1,2,0,0,0,0,1,120,770,771,769,1,3,2,0,0,0,0,1,120,772,774,773,0,1,2,1,1,1,1,1,120,774,775,773,1,3,2,1,1,1,1,1,120,772,773,769,0,1,2,2,2,2,2,1,120,773,768,769,1,3,2,2,2,2,2,1,120,775,774,770,0,1,2,3,3,3,3,1,120,774,771,770,1,3,2,3,3,3,3,1,120,773,775,768,0,1,2,4,4,4,4,1,120,775,770,768,1,3,2,4,4,4,4,1,120,769,771,772,0,1,2,5,5,5,5,1,120,771,774,772,1,3,2,5,5,5,5,1,120,776,778,777,0,1,2,0,0,0,0,0,120,778,779,777,1,3,2,0,0,0,0,0,120,780,782,781,0,1,2,1,1,1,1,0,120,782,783,781,1,3,2,1,1,1,1,0,120,780,781,777,0,1,2,2,2,2,2,0,120,781,776,777,1,3,2,2,2,2,2,0,120,783,782,778,0,1,2,3,3,3,3,0,120,782,779,778,1,3,2,3,3,3,3,0,120,781,783,776,0,1,2,4,4,4,4,0,120,783,778,776,1,3,2,4,4,4,4,0,120,777,779,780,0,1,2,5,5,5,5,0,120,779,782,780,1,3,2,5,5,5,5,0,120,784,786,785,0,1,2,0,0,0,0,0,120,786,787,785,1,3,2,0,0,0,0,0,120,788,790,789,0,1,2,1,1,1,1,0,120,790,791,789,1,3,2,1,1,1,1,0,120,788,789,785,0,1,2,2,2,2,2,0,120,789,784,785,1,3,2,2,2,2,2,0,120,791,790,786,0,1,2,3,3,3,3,0,120,790,787,786,1,3,2,3,3,3,3,0,120,789,791,784,0,1,2,4,4,4,4,0,120,791,786,784,1,3,2,4,4,4,4,0,120,785,787,788,0,1,2,5,5,5,5,0,120,787,790,788,1,3,2,5,5,5,5,0,120,792,794,793,0,1,2,0,0,0,0,0,120,794,795,793,1,3,2,0,0,0,0,0,120,796,798,797,0,1,2,1,1,1,1,0,120,798,799,797,1,3,2,1,1,1,1,0,120,796,797,793,0,1,2,2,2,2,2,0,120,797,792,793,1,3,2,2,2,2,2,0,120,799,798,794,0,1,2,3,3,3,3,0,120,798,795,794,1,3,2,3,3,3,3,0,120,797,799,792,0,1,2,4,4,4,4,0,120,799,794,792,1,3,2,4,4,4,4,0,120,793,795,796,0,1,2,5,5,5,5,0,120,795,798,796,1,3,2,5,5,5,5,0,120,800,802,801,0,1,2,0,0,0,0,1,120,802,803,801,1,3,2,0,0,0,0,1,120,804,806,805,0,1,2,1,1,1,1,1,120,806,807,805,1,3,2,1,1,1,1,1,120,804,805,801,0,1,2,2,2,2,2,1,120,805,800,801,1,3,2,2,2,2,2,1,120,807,806,802,0,1,2,3,3,3,3,1,120,806,803,802,1,3,2,3,3,3,3,1,120,805,807,800,0,1,2,4,4,4,4,1,120,807,802,800,1,3,2,4,4,4,4,1,120,801,803,804,0,1,2,5,5,5,5,1,120,803,806,804,1,3,2,5,5,5,5,1,120,808,810,809,0,1,2,0,0,0,0,1,120,810,811,809,1,3,2,0,0,0,0,1,120,812,814,813,0,1,2,1,1,1,1,1,120,814,815,813,1,3,2,1,1,1,1,1,120,812,813,809,0,1,2,2,2,2,2,1,120,813,808,809,1,3,2,2,2,2,2,1,120,815,814,810,0,1,2,3,3,3,3,1,120,814,811,810,1,3,2,3,3,3,3,1,120,813,815,808,0,1,2,4,4,4,4,1,120,815,810,808,1,3,2,4,4,4,4,1,120,809,811,812,0,1,2,5,5,5,5,1,120,811,814,812,1,3,2,5,5,5,5,1,120,816,818,817,0,1,2,0,0,0,0,1,120,818,819,817,1,3,2,0,0,0,0,1,120,820,822,821,0,1,2,1,1,1,1,1,120,822,823,821,1,3,2,1,1,1,1,1,120,820,821,817,0,1,2,2,2,2,2,1,120,821,816,817,1,3,2,2,2,2,2,1,120,823,822,818,0,1,2,3,3,3,3,1,120,822,819,818,1,3,2,3,3,3,3,1,120,821,823,816,0,1,2,4,4,4,4,1,120,823,818,816,1,3,2,4,4,4,4,1,120,817,819,820,0,1,2,5,5,5,5,1,120,819,822,820,1,3,2,5,5,5,5,1,120,824,826,825,0,1,2,0,0,0,0,1,120,826,827,825,1,3,2,0,0,0,0,1,120,828,830,829,0,1,2,1,1,1,1,1,120,830,831,829,1,3,2,1,1,1,1,1,120,828,829,825,0,1,2,2,2,2,2,1,120,829,824,825,1,3,2,2,2,2,2,1,120,831,830,826,0,1,2,3,3,3,3,1,120,830,827,826,1,3,2,3,3,3,3,1,120,829,831,824,0,1,2,4,4,4,4,1,120,831,826,824,1,3,2,4,4,4,4,1,120,825,827,828,0,1,2,5,5,5,5,1,120,827,830,828,1,3,2,5,5,5,5,1,120,832,834,833,0,1,2,0,0,0,0,1,120,834,835,833,1,3,2,0,0,0,0,1,120,836,838,837,0,1,2,1,1,1,1,1,120,838,839,837,1,3,2,1,1,1,1,1,120,836,837,833,0,1,2,2,2,2,2,1,120,837,832,833,1,3,2,2,2,2,2,1,120,839,838,834,0,1,2,3,3,3,3,1,120,838,835,834,1,3,2,3,3,3,3,1,120,837,839,832,0,1,2,4,4,4,4,1,120,839,834,832,1,3,2,4,4,4,4,1,120,833,835,836,0,1,2,5,5,5,5,1,120,835,838,836,1,3,2,5,5,5,5,1,120,840,842,841,0,1,2,0,0,0,0,1,120,842,843,841,1,3,2,0,0,0,0,1,120,844,846,845,0,1,2,1,1,1,1,1,120,846,847,845,1,3,2,1,1,1,1,1,120,844,845,841,0,1,2,2,2,2,2,1,120,845,840,841,1,3,2,2,2,2,2,1,120,847,846,842,0,1,2,3,3,3,3,1,120,846,843,842,1,3,2,3,3,3,3,1,120,845,847,840,0,1,2,4,4,4,4,1,120,847,842,840,1,3,2,4,4,4,4,1,120,841,843,844,0,1,2,5,5,5,5,1,120,843,846,844,1,3,2,5,5,5,5,1,120,848,850,849,0,1,2,0,0,0,0,1,120,850,851,849,1,3,2,0,0,0,0,1,120,852,854,853,0,1,2,1,1,1,1,1,120,854,855,853,1,3,2,1,1,1,1,1,120,852,853,849,0,1,2,2,2,2,2,1,120,853,848,849,1,3,2,2,2,2,2,1,120,855,854,850,0,1,2,3,3,3,3,1,120,854,851,850,1,3,2,3,3,3,3,1,120,853,855,848,0,1,2,4,4,4,4,1,120,855,850,848,1,3,2,4,4,4,4,1,120,849,851,852,0,1,2,5,5,5,5,1,120,851,854,852,1,3,2,5,5,5,5,1,120,856,858,857,0,1,2,0,0,0,0,2,120,858,859,857,1,3,2,0,0,0,0,2,120,860,862,861,0,1,2,1,1,1,1,2,120,862,863,861,1,3,2,1,1,1,1,2,120,860,861,857,0,1,2,2,2,2,2,2,120,861,856,857,1,3,2,2,2,2,2,2,120,863,862,858,0,1,2,3,3,3,3,2,120,862,859,858,1,3,2,3,3,3,3,2,120,861,863,856,0,1,2,4,4,4,4,2,120,863,858,856,1,3,2,4,4,4,4,2,120,857,859,860,0,1,2,5,5,5,5,2,120,859,862,860,1,3,2,5,5,5,5,2,120,864,866,865,0,1,2,0,0,0,0,1,120,866,867,865,1,3,2,0,0,0,0,1,120,868,870,869,0,1,2,1,1,1,1,1,120,870,871,869,1,3,2,1,1,1,1,1,120,868,869,865,0,1,2,2,2,2,2,1,120,869,864,865,1,3,2,2,2,2,2,1,120,871,870,866,0,1,2,3,3,3,3,1,120,870,867,866,1,3,2,3,3,3,3,1,120,869,871,864,0,1,2,4,4,4,4,1,120,871,866,864,1,3,2,4,4,4,4,1,120,865,867,868,0,1,2,5,5,5,5,1,120,867,870,868,1,3,2,5,5,5,5,1,120,872,874,873,0,1,2,0,0,0,0,1,120,874,875,873,1,3,2,0,0,0,0,1,120,876,878,877,0,1,2,1,1,1,1,1,120,878,879,877,1,3,2,1,1,1,1,1,120,876,877,873,0,1,2,2,2,2,2,1,120,877,872,873,1,3,2,2,2,2,2,1,120,879,878,874,0,1,2,3,3,3,3,1,120,878,875,874,1,3,2,3,3,3,3,1,120,877,879,872,0,1,2,4,4,4,4,1,120,879,874,872,1,3,2,4,4,4,4,1,120,873,875,876,0,1,2,5,5,5,5,1,120,875,878,876,1,3,2,5,5,5,5,1,120,880,882,881,0,1,2,0,0,0,0,1,120,882,883,881,1,3,2,0,0,0,0,1,120,884,886,885,0,1,2,1,1,1,1,1,120,886,887,885,1,3,2,1,1,1,1,1,120,884,885,881,0,1,2,2,2,2,2,1,120,885,880,881,1,3,2,2,2,2,2,1,120,887,886,882,0,1,2,3,3,3,3,1,120,886,883,882,1,3,2,3,3,3,3,1,120,885,887,880,0,1,2,4,4,4,4,1,120,887,882,880,1,3,2,4,4,4,4,1,120,881,883,884,0,1,2,5,5,5,5,1,120,883,886,884,1,3,2,5,5,5,5,1,120,888,890,889,0,1,2,0,0,0,0,1,120,890,891,889,1,3,2,0,0,0,0,1,120,892,894,893,0,1,2,1,1,1,1,1,120,894,895,893,1,3,2,1,1,1,1,1,120,892,893,889,0,1,2,2,2,2,2,1,120,893,888,889,1,3,2,2,2,2,2,1,120,895,894,890,0,1,2,3,3,3,3,1,120,894,891,890,1,3,2,3,3,3,3,1,120,893,895,888,0,1,2,4,4,4,4,1,120,895,890,888,1,3,2,4,4,4,4,1,120,889,891,892,0,1,2,5,5,5,5,1,120,891,894,892,1,3,2,5,5,5,5,1,120,896,898,897,0,1,2,0,0,0,0,1,120,898,899,897,1,3,2,0,0,0,0,1,120,900,902,901,0,1,2,1,1,1,1,1,120,902,903,901,1,3,2,1,1,1,1,1,120,900,901,897,0,1,2,2,2,2,2,1,120,901,896,897,1,3,2,2,2,2,2,1,120,903,902,898,0,1,2,3,3,3,3,1,120,902,899,898,1,3,2,3,3,3,3,1,120,901,903,896,0,1,2,4,4,4,4,1,120,903,898,896,1,3,2,4,4,4,4,1,120,897,899,900,0,1,2,5,5,5,5,1,120,899,902,900,1,3,2,5,5,5,5,1,120,904,906,905,0,1,2,0,0,0,0,0,120,906,907,905,1,3,2,0,0,0,0,0,120,908,910,909,0,1,2,1,1,1,1,0,120,910,911,909,1,3,2,1,1,1,1,0,120,908,909,905,0,1,2,2,2,2,2,0,120,909,904,905,1,3,2,2,2,2,2,0,120,911,910,906,0,1,2,3,3,3,3,0,120,910,907,906,1,3,2,3,3,3,3,0,120,909,911,904,0,1,2,4,4,4,4,0,120,911,906,904,1,3,2,4,4,4,4,0,120,905,907,908,0,1,2,5,5,5,5,0,120,907,910,908,1,3,2,5,5,5,5,0,120,912,914,913,0,1,2,0,0,0,0,1,120,914,915,913,1,3,2,0,0,0,0,1,120,916,918,917,0,1,2,1,1,1,1,1,120,918,919,917,1,3,2,1,1,1,1,1,120,916,917,913,0,1,2,2,2,2,2,1,120,917,912,913,1,3,2,2,2,2,2,1,120,919,918,914,0,1,2,3,3,3,3,1,120,918,915,914,1,3,2,3,3,3,3,1,120,917,919,912,0,1,2,4,4,4,4,1,120,919,914,912,1,3,2,4,4,4,4,1,120,913,915,916,0,1,2,5,5,5,5,1,120,915,918,916,1,3,2,5,5,5,5,1,120,920,922,921,0,1,2,0,0,0,0,1,120,922,923,921,1,3,2,0,0,0,0,1,120,924,926,925,0,1,2,1,1,1,1,1,120,926,927,925,1,3,2,1,1,1,1,1,120,924,925,921,0,1,2,2,2,2,2,1,120,925,920,921,1,3,2,2,2,2,2,1,120,927,926,922,0,1,2,3,3,3,3,1,120,926,923,922,1,3,2,3,3,3,3,1,120,925,927,920,0,1,2,4,4,4,4,1,120,927,922,920,1,3,2,4,4,4,4,1,120,921,923,924,0,1,2,5,5,5,5,1,120,923,926,924,1,3,2,5,5,5,5,1,120,928,930,929,0,1,2,0,0,0,0,1,120,930,931,929,1,3,2,0,0,0,0,1,120,932,934,933,0,1,2,1,1,1,1,1,120,934,935,933,1,3,2,1,1,1,1,1,120,932,933,929,0,1,2,2,2,2,2,1,120,933,928,929,1,3,2,2,2,2,2,1,120,935,934,930,0,1,2,3,3,3,3,1,120,934,931,930,1,3,2,3,3,3,3,1,120,933,935,928,0,1,2,4,4,4,4,1,120,935,930,928,1,3,2,4,4,4,4,1,120,929,931,932,0,1,2,5,5,5,5,1,120,931,934,932,1,3,2,5,5,5,5,1,120,936,938,937,0,1,2,0,0,0,0,1,120,938,939,937,1,3,2,0,0,0,0,1,120,940,942,941,0,1,2,1,1,1,1,1,120,942,943,941,1,3,2,1,1,1,1,1,120,940,941,937,0,1,2,2,2,2,2,1,120,941,936,937,1,3,2,2,2,2,2,1,120,943,942,938,0,1,2,3,3,3,3,1,120,942,939,938,1,3,2,3,3,3,3,1,120,941,943,936,0,1,2,4,4,4,4,1,120,943,938,936,1,3,2,4,4,4,4,1,120,937,939,940,0,1,2,5,5,5,5,1,120,939,942,940,1,3,2,5,5,5,5,1,120,944,946,945,0,1,2,0,0,0,0,2,120,946,947,945,1,3,2,0,0,0,0,2,120,948,950,949,0,1,2,1,1,1,1,2,120,950,951,949,1,3,2,1,1,1,1,2,120,948,949,945,0,1,2,2,2,2,2,2,120,949,944,945,1,3,2,2,2,2,2,2,120,951,950,946,0,1,2,3,3,3,3,2,120,950,947,946,1,3,2,3,3,3,3,2,120,949,951,944,0,1,2,4,4,4,4,2,120,951,946,944,1,3,2,4,4,4,4,2,120,945,947,948,0,1,2,5,5,5,5,2,120,947,950,948,1,3,2,5,5,5,5,2,120,952,954,953,0,1,2,0,0,0,0,1,120,954,955,953,1,3,2,0,0,0,0,1,120,956,958,957,0,1,2,1,1,1,1,1,120,958,959,957,1,3,2,1,1,1,1,1,120,956,957,953,0,1,2,2,2,2,2,1,120,957,952,953,1,3,2,2,2,2,2,1,120,959,958,954,0,1,2,3,3,3,3,1,120,958,955,954,1,3,2,3,3,3,3,1,120,957,959,952,0,1,2,4,4,4,4,1,120,959,954,952,1,3,2,4,4,4,4,1,120,953,955,956,0,1,2,5,5,5,5,1,120,955,958,956,1,3,2,5,5,5,5,1,120,960,962,961,0,1,2,0,0,0,0,1,120,962,963,961,1,3,2,0,0,0,0,1,120,964,966,965,0,1,2,1,1,1,1,1,120,966,967,965,1,3,2,1,1,1,1,1,120,964,965,961,0,1,2,2,2,2,2,1,120,965,960,961,1,3,2,2,2,2,2,1,120,967,966,962,0,1,2,3,3,3,3,1,120,966,963,962,1,3,2,3,3,3,3,1,120,965,967,960,0,1,2,4,4,4,4,1,120,967,962,960,1,3,2,4,4,4,4,1,120,961,963,964,0,1,2,5,5,5,5,1,120,963,966,964,1,3,2,5,5,5,5,1,120,968,970,969,0,1,2,0,0,0,0,1,120,970,971,969,1,3,2,0,0,0,0,1,120,972,974,973,0,1,2,1,1,1,1,1,120,974,975,973,1,3,2,1,1,1,1,1,120,972,973,969,0,1,2,2,2,2,2,1,120,973,968,969,1,3,2,2,2,2,2,1,120,975,974,970,0,1,2,3,3,3,3,1,120,974,971,970,1,3,2,3,3,3,3,1,120,973,975,968,0,1,2,4,4,4,4,1,120,975,970,968,1,3,2,4,4,4,4,1,120,969,971,972,0,1,2,5,5,5,5,1,120,971,974,972,1,3,2,5,5,5,5,1,120,976,978,977,0,1,2,0,0,0,0,1,120,978,979,977,1,3,2,0,0,0,0,1,120,980,982,981,0,1,2,1,1,1,1,1,120,982,983,981,1,3,2,1,1,1,1,1,120,980,981,977,0,1,2,2,2,2,2,1,120,981,976,977,1,3,2,2,2,2,2,1,120,983,982,978,0,1,2,3,3,3,3,1,120,982,979,978,1,3,2,3,3,3,3,1,120,981,983,976,0,1,2,4,4,4,4,1,120,983,978,976,1,3,2,4,4,4,4,1,120,977,979,980,0,1,2,5,5,5,5,1,120,979,982,980,1,3,2,5,5,5,5,1,120,984,986,985,0,1,2,0,0,0,0,1,120,986,987,985,1,3,2,0,0,0,0,1,120,988,990,989,0,1,2,1,1,1,1,1,120,990,991,989,1,3,2,1,1,1,1,1,120,988,989,985,0,1,2,2,2,2,2,1,120,989,984,985,1,3,2,2,2,2,2,1,120,991,990,986,0,1,2,3,3,3,3,1,120,990,987,986,1,3,2,3,3,3,3,1,120,989,991,984,0,1,2,4,4,4,4,1,120,991,986,984,1,3,2,4,4,4,4,1,120,985,987,988,0,1,2,5,5,5,5,1,120,987,990,988,1,3,2,5,5,5,5,1,120,992,994,993,0,1,2,0,0,0,0,0,120,994,995,993,1,3,2,0,0,0,0,0,120,996,998,997,0,1,2,1,1,1,1,0,120,998,999,997,1,3,2,1,1,1,1,0,120,996,997,993,0,1,2,2,2,2,2,0,120,997,992,993,1,3,2,2,2,2,2,0,120,999,998,994,0,1,2,3,3,3,3,0,120,998,995,994,1,3,2,3,3,3,3,0,120,997,999,992,0,1,2,4,4,4,4,0,120,999,994,992,1,3,2,4,4,4,4,0,120,993,995,996,0,1,2,5,5,5,5,0,120,995,998,996,1,3,2,5,5,5,5,0,120,1000,1002,1001,0,1,2,0,0,0,0,0,120,1002,1003,1001,1,3,2,0,0,0,0,0,120,1004,1006,1005,0,1,2,1,1,1,1,0,120,1006,1007,1005,1,3,2,1,1,1,1,0,120,1004,1005,1001,0,1,2,2,2,2,2,0,120,1005,1000,1001,1,3,2,2,2,2,2,0,120,1007,1006,1002,0,1,2,3,3,3,3,0,120,1006,1003,1002,1,3,2,3,3,3,3,0,120,1005,1007,1000,0,1,2,4,4,4,4,0,120,1007,1002,1000,1,3,2,4,4,4,4,0,120,1001,1003,1004,0,1,2,5,5,5,5,0,120,1003,1006,1004,1,3,2,5,5,5,5,0,120,1008,1010,1009,0,1,2,0,0,0,0,0,120,1010,1011,1009,1,3,2,0,0,0,0,0,120,1012,1014,1013,0,1,2,1,1,1,1,0,120,1014,1015,1013,1,3,2,1,1,1,1,0,120,1012,1013,1009,0,1,2,2,2,2,2,0,120,1013,1008,1009,1,3,2,2,2,2,2,0,120,1015,1014,1010,0,1,2,3,3,3,3,0,120,1014,1011,1010,1,3,2,3,3,3,3,0,120,1013,1015,1008,0,1,2,4,4,4,4,0,120,1015,1010,1008,1,3,2,4,4,4,4,0,120,1009,1011,1012,0,1,2,5,5,5,5,0,120,1011,1014,1012,1,3,2,5,5,5,5,0,120,1016,1018,1017,0,1,2,0,0,0,0,0,120,1018,1019,1017,1,3,2,0,0,0,0,0,120,1020,1022,1021,0,1,2,1,1,1,1,0,120,1022,1023,1021,1,3,2,1,1,1,1,0,120,1020,1021,1017,0,1,2,2,2,2,2,0,120,1021,1016,1017,1,3,2,2,2,2,2,0,120,1023,1022,1018,0,1,2,3,3,3,3,0,120,1022,1019,1018,1,3,2,3,3,3,3,0,120,1021,1023,1016,0,1,2,4,4,4,4,0,120,1023,1018,1016,1,3,2,4,4,4,4,0,120,1017,1019,1020,0,1,2,5,5,5,5,0,120,1019,1022,1020,1,3,2,5,5,5,5,0,120,1024,1026,1025,0,1,2,0,0,0,0,0,120,1026,1027,1025,1,3,2,0,0,0,0,0,120,1028,1030,1029,0,1,2,1,1,1,1,0,120,1030,1031,1029,1,3,2,1,1,1,1,0,120,1028,1029,1025,0,1,2,2,2,2,2,0,120,1029,1024,1025,1,3,2,2,2,2,2,0,120,1031,1030,1026,0,1,2,3,3,3,3,0,120,1030,1027,1026,1,3,2,3,3,3,3,0,120,1029,1031,1024,0,1,2,4,4,4,4,0,120,1031,1026,1024,1,3,2,4,4,4,4,0,120,1025,1027,1028,0,1,2,5,5,5,5,0,120,1027,1030,1028,1,3,2,5,5,5,5,0,120,1032,1034,1033,0,1,2,0,0,0,0,0,120,1034,1035,1033,1,3,2,0,0,0,0,0,120,1036,1038,1037,0,1,2,1,1,1,1,0,120,1038,1039,1037,1,3,2,1,1,1,1,0,120,1036,1037,1033,0,1,2,2,2,2,2,0,120,1037,1032,1033,1,3,2,2,2,2,2,0,120,1039,1038,1034,0,1,2,3,3,3,3,0,120,1038,1035,1034,1,3,2,3,3,3,3,0,120,1037,1039,1032,0,1,2,4,4,4,4,0,120,1039,1034,1032,1,3,2,4,4,4,4,0,120,1033,1035,1036,0,1,2,5,5,5,5,0,120,1035,1038,1036,1,3,2,5,5,5,5,0,120,1040,1042,1041,0,1,2,0,0,0,0,0,120,1042,1043,1041,1,3,2,0,0,0,0,0,120,1044,1046,1045,0,1,2,1,1,1,1,0,120,1046,1047,1045,1,3,2,1,1,1,1,0,120,1044,1045,1041,0,1,2,2,2,2,2,0,120,1045,1040,1041,1,3,2,2,2,2,2,0,120,1047,1046,1042,0,1,2,3,3,3,3,0,120,1046,1043,1042,1,3,2,3,3,3,3,0,120,1045,1047,1040,0,1,2,4,4,4,4,0,120,1047,1042,1040,1,3,2,4,4,4,4,0,120,1041,1043,1044,0,1,2,5,5,5,5,0,120,1043,1046,1044,1,3,2,5,5,5,5,0,120,1048,1050,1049,0,1,2,0,0,0,0,0,120,1050,1051,1049,1,3,2,0,0,0,0,0,120,1052,1054,1053,0,1,2,1,1,1,1,0,120,1054,1055,1053,1,3,2,1,1,1,1,0,120,1052,1053,1049,0,1,2,2,2,2,2,0,120,1053,1048,1049,1,3,2,2,2,2,2,0,120,1055,1054,1050,0,1,2,3,3,3,3,0,120,1054,1051,1050,1,3,2,3,3,3,3,0,120,1053,1055,1048,0,1,2,4,4,4,4,0,120,1055,1050,1048,1,3,2,4,4,4,4,0,120,1049,1051,1052,0,1,2,5,5,5,5,0,120,1051,1054,1052,1,3,2,5,5,5,5,0,120,1056,1058,1057,0,1,2,0,0,0,0,0,120,1058,1059,1057,1,3,2,0,0,0,0,0,120,1060,1062,1061,0,1,2,1,1,1,1,0,120,1062,1063,1061,1,3,2,1,1,1,1,0,120,1060,1061,1057,0,1,2,2,2,2,2,0,120,1061,1056,1057,1,3,2,2,2,2,2,0,120,1063,1062,1058,0,1,2,3,3,3,3,0,120,1062,1059,1058,1,3,2,3,3,3,3,0,120,1061,1063,1056,0,1,2,4,4,4,4,0,120,1063,1058,1056,1,3,2,4,4,4,4,0,120,1057,1059,1060,0,1,2,5,5,5,5,0,120,1059,1062,1060,1,3,2,5,5,5,5,0,120,1064,1066,1065,0,1,2,0,0,0,0,0,120,1066,1067,1065,1,3,2,0,0,0,0,0,120,1068,1070,1069,0,1,2,1,1,1,1,0,120,1070,1071,1069,1,3,2,1,1,1,1,0,120,1068,1069,1065,0,1,2,2,2,2,2,0,120,1069,1064,1065,1,3,2,2,2,2,2,0,120,1071,1070,1066,0,1,2,3,3,3,3,0,120,1070,1067,1066,1,3,2,3,3,3,3,0,120,1069,1071,1064,0,1,2,4,4,4,4,0,120,1071,1066,1064,1,3,2,4,4,4,4,0,120,1065,1067,1068,0,1,2,5,5,5,5,0,120,1067,1070,1068,1,3,2,5,5,5,5,0,120,1072,1074,1073,0,1,2,0,0,0,0,0,120,1074,1075,1073,1,3,2,0,0,0,0,0,120,1076,1078,1077,0,1,2,1,1,1,1,0,120,1078,1079,1077,1,3,2,1,1,1,1,0,120,1076,1077,1073,0,1,2,2,2,2,2,0,120,1077,1072,1073,1,3,2,2,2,2,2,0,120,1079,1078,1074,0,1,2,3,3,3,3,0,120,1078,1075,1074,1,3,2,3,3,3,3,0,120,1077,1079,1072,0,1,2,4,4,4,4,0,120,1079,1074,1072,1,3,2,4,4,4,4,0,120,1073,1075,1076,0,1,2,5,5,5,5,0,120,1075,1078,1076,1,3,2,5,5,5,5,0,120,1080,1082,1081,0,1,2,0,0,0,0,0,120,1082,1083,1081,1,3,2,0,0,0,0,0,120,1084,1086,1085,0,1,2,1,1,1,1,0,120,1086,1087,1085,1,3,2,1,1,1,1,0,120,1084,1085,1081,0,1,2,2,2,2,2,0,120,1085,1080,1081,1,3,2,2,2,2,2,0,120,1087,1086,1082,0,1,2,3,3,3,3,0,120,1086,1083,1082,1,3,2,3,3,3,3,0,120,1085,1087,1080,0,1,2,4,4,4,4,0,120,1087,1082,1080,1,3,2,4,4,4,4,0,120,1081,1083,1084,0,1,2,5,5,5,5,0,120,1083,1086,1084,1,3,2,5,5,5,5,0,120,1088,1090,1089,0,1,2,0,0,0,0,0,120,1090,1091,1089,1,3,2,0,0,0,0,0,120,1092,1094,1093,0,1,2,1,1,1,1,0,120,1094,1095,1093,1,3,2,1,1,1,1,0,120,1092,1093,1089,0,1,2,2,2,2,2,0,120,1093,1088,1089,1,3,2,2,2,2,2,0,120,1095,1094,1090,0,1,2,3,3,3,3,0,120,1094,1091,1090,1,3,2,3,3,3,3,0,120,1093,1095,1088,0,1,2,4,4,4,4,0,120,1095,1090,1088,1,3,2,4,4,4,4,0,120,1089,1091,1092,0,1,2,5,5,5,5,0,120,1091,1094,1092,1,3,2,5,5,5,5,0,120,1096,1098,1097,0,1,2,0,0,0,0,0,120,1098,1099,1097,1,3,2,0,0,0,0,0,120,1100,1102,1101,0,1,2,1,1,1,1,0,120,1102,1103,1101,1,3,2,1,1,1,1,0,120,1100,1101,1097,0,1,2,2,2,2,2,0,120,1101,1096,1097,1,3,2,2,2,2,2,0,120,1103,1102,1098,0,1,2,3,3,3,3,0,120,1102,1099,1098,1,3,2,3,3,3,3,0,120,1101,1103,1096,0,1,2,4,4,4,4,0,120,1103,1098,1096,1,3,2,4,4,4,4,0,120,1097,1099,1100,0,1,2,5,5,5,5,0,120,1099,1102,1100,1,3,2,5,5,5,5,0,120,1104,1106,1105,0,1,2,0,0,0,0,1,120,1106,1107,1105,1,3,2,0,0,0,0,1,120,1108,1110,1109,0,1,2,1,1,1,1,1,120,1110,1111,1109,1,3,2,1,1,1,1,1,120,1108,1109,1105,0,1,2,2,2,2,2,1,120,1109,1104,1105,1,3,2,2,2,2,2,1,120,1111,1110,1106,0,1,2,3,3,3,3,1,120,1110,1107,1106,1,3,2,3,3,3,3,1,120,1109,1111,1104,0,1,2,4,4,4,4,1,120,1111,1106,1104,1,3,2,4,4,4,4,1,120,1105,1107,1108,0,1,2,5,5,5,5,1,120,1107,1110,1108,1,3,2,5,5,5,5,1,120,1112,1114,1113,0,1,2,0,0,0,0,1,120,1114,1115,1113,1,3,2,0,0,0,0,1,120,1116,1118,1117,0,1,2,1,1,1,1,1,120,1118,1119,1117,1,3,2,1,1,1,1,1,120,1116,1117,1113,0,1,2,2,2,2,2,1,120,1117,1112,1113,1,3,2,2,2,2,2,1,120,1119,1118,1114,0,1,2,3,3,3,3,1,120,1118,1115,1114,1,3,2,3,3,3,3,1,120,1117,1119,1112,0,1,2,4,4,4,4,1,120,1119,1114,1112,1,3,2,4,4,4,4,1,120,1113,1115,1116,0,1,2,5,5,5,5,1,120,1115,1118,1116,1,3,2,5,5,5,5,1,120,1120,1122,1121,0,1,2,0,0,0,0,1,120,1122,1123,1121,1,3,2,0,0,0,0,1,120,1124,1126,1125,0,1,2,1,1,1,1,1,120,1126,1127,1125,1,3,2,1,1,1,1,1,120,1124,1125,1121,0,1,2,2,2,2,2,1,120,1125,1120,1121,1,3,2,2,2,2,2,1,120,1127,1126,1122,0,1,2,3,3,3,3,1,120,1126,1123,1122,1,3,2,3,3,3,3,1,120,1125,1127,1120,0,1,2,4,4,4,4,1,120,1127,1122,1120,1,3,2,4,4,4,4,1,120,1121,1123,1124,0,1,2,5,5,5,5,1,120,1123,1126,1124,1,3,2,5,5,5,5,1,120,1128,1130,1129,0,1,2,0,0,0,0,1,120,1130,1131,1129,1,3,2,0,0,0,0,1,120,1132,1134,1133,0,1,2,1,1,1,1,1,120,1134,1135,1133,1,3,2,1,1,1,1,1,120,1132,1133,1129,0,1,2,2,2,2,2,1,120,1133,1128,1129,1,3,2,2,2,2,2,1,120,1135,1134,1130,0,1,2,3,3,3,3,1,120,1134,1131,1130,1,3,2,3,3,3,3,1,120,1133,1135,1128,0,1,2,4,4,4,4,1,120,1135,1130,1128,1,3,2,4,4,4,4,1,120,1129,1131,1132,0,1,2,5,5,5,5,1,120,1131,1134,1132,1,3,2,5,5,5,5,1,120,1136,1138,1137,0,1,2,0,0,0,0,1,120,1138,1139,1137,1,3,2,0,0,0,0,1,120,1140,1142,1141,0,1,2,1,1,1,1,1,120,1142,1143,1141,1,3,2,1,1,1,1,1,120,1140,1141,1137,0,1,2,2,2,2,2,1,120,1141,1136,1137,1,3,2,2,2,2,2,1,120,1143,1142,1138,0,1,2,3,3,3,3,1,120,1142,1139,1138,1,3,2,3,3,3,3,1,120,1141,1143,1136,0,1,2,4,4,4,4,1,120,1143,1138,1136,1,3,2,4,4,4,4,1,120,1137,1139,1140,0,1,2,5,5,5,5,1,120,1139,1142,1140,1,3,2,5,5,5,5,1,120,1144,1146,1145,0,1,2,0,0,0,0,1,120,1146,1147,1145,1,3,2,0,0,0,0,1,120,1148,1150,1149,0,1,2,1,1,1,1,1,120,1150,1151,1149,1,3,2,1,1,1,1,1,120,1148,1149,1145,0,1,2,2,2,2,2,1,120,1149,1144,1145,1,3,2,2,2,2,2,1,120,1151,1150,1146,0,1,2,3,3,3,3,1,120,1150,1147,1146,1,3,2,3,3,3,3,1,120,1149,1151,1144,0,1,2,4,4,4,4,1,120,1151,1146,1144,1,3,2,4,4,4,4,1,120,1145,1147,1148,0,1,2,5,5,5,5,1,120,1147,1150,1148,1,3,2,5,5,5,5,1,120,1152,1154,1153,0,1,2,0,0,0,0,1,120,1154,1155,1153,1,3,2,0,0,0,0,1,120,1156,1158,1157,0,1,2,1,1,1,1,1,120,1158,1159,1157,1,3,2,1,1,1,1,1,120,1156,1157,1153,0,1,2,2,2,2,2,1,120,1157,1152,1153,1,3,2,2,2,2,2,1,120,1159,1158,1154,0,1,2,3,3,3,3,1,120,1158,1155,1154,1,3,2,3,3,3,3,1,120,1157,1159,1152,0,1,2,4,4,4,4,1,120,1159,1154,1152,1,3,2,4,4,4,4,1,120,1153,1155,1156,0,1,2,5,5,5,5,1,120,1155,1158,1156,1,3,2,5,5,5,5,1,120,1160,1162,1161,0,1,2,0,0,0,0,1,120,1162,1163,1161,1,3,2,0,0,0,0,1,120,1164,1166,1165,0,1,2,1,1,1,1,1,120,1166,1167,1165,1,3,2,1,1,1,1,1,120,1164,1165,1161,0,1,2,2,2,2,2,1,120,1165,1160,1161,1,3,2,2,2,2,2,1,120,1167,1166,1162,0,1,2,3,3,3,3,1,120,1166,1163,1162,1,3,2,3,3,3,3,1,120,1165,1167,1160,0,1,2,4,4,4,4,1,120,1167,1162,1160,1,3,2,4,4,4,4,1,120,1161,1163,1164,0,1,2,5,5,5,5,1,120,1163,1166,1164,1,3,2,5,5,5,5,1,120,1168,1170,1169,0,1,2,0,0,0,0,1,120,1170,1171,1169,1,3,2,0,0,0,0,1,120,1172,1174,1173,0,1,2,1,1,1,1,1,120,1174,1175,1173,1,3,2,1,1,1,1,1,120,1172,1173,1169,0,1,2,2,2,2,2,1,120,1173,1168,1169,1,3,2,2,2,2,2,1,120,1175,1174,1170,0,1,2,3,3,3,3,1,120,1174,1171,1170,1,3,2,3,3,3,3,1,120,1173,1175,1168,0,1,2,4,4,4,4,1,120,1175,1170,1168,1,3,2,4,4,4,4,1,120,1169,1171,1172,0,1,2,5,5,5,5,1,120,1171,1174,1172,1,3,2,5,5,5,5,1,120,1176,1178,1177,0,1,2,0,0,0,0,1,120,1178,1179,1177,1,3,2,0,0,0,0,1,120,1180,1182,1181,0,1,2,1,1,1,1,1,120,1182,1183,1181,1,3,2,1,1,1,1,1,120,1180,1181,1177,0,1,2,2,2,2,2,1,120,1181,1176,1177,1,3,2,2,2,2,2,1,120,1183,1182,1178,0,1,2,3,3,3,3,1,120,1182,1179,1178,1,3,2,3,3,3,3,1,120,1181,1183,1176,0,1,2,4,4,4,4,1,120,1183,1178,1176,1,3,2,4,4,4,4,1,120,1177,1179,1180,0,1,2,5,5,5,5,1,120,1179,1182,1180,1,3,2,5,5,5,5,1,120,1184,1186,1185,0,1,2,0,0,0,0,1,120,1186,1187,1185,1,3,2,0,0,0,0,1,120,1188,1190,1189,0,1,2,1,1,1,1,1,120,1190,1191,1189,1,3,2,1,1,1,1,1,120,1188,1189,1185,0,1,2,2,2,2,2,1,120,1189,1184,1185,1,3,2,2,2,2,2,1,120,1191,1190,1186,0,1,2,3,3,3,3,1,120,1190,1187,1186,1,3,2,3,3,3,3,1,120,1189,1191,1184,0,1,2,4,4,4,4,1,120,1191,1186,1184,1,3,2,4,4,4,4,1,120,1185,1187,1188,0,1,2,5,5,5,5,1,120,1187,1190,1188,1,3,2,5,5,5,5,1,120,1192,1194,1193,0,1,2,0,0,0,0,1,120,1194,1195,1193,1,3,2,0,0,0,0,1,120,1196,1198,1197,0,1,2,1,1,1,1,1,120,1198,1199,1197,1,3,2,1,1,1,1,1,120,1196,1197,1193,0,1,2,2,2,2,2,1,120,1197,1192,1193,1,3,2,2,2,2,2,1,120,1199,1198,1194,0,1,2,3,3,3,3,1,120,1198,1195,1194,1,3,2,3,3,3,3,1,120,1197,1199,1192,0,1,2,4,4,4,4,1,120,1199,1194,1192,1,3,2,4,4,4,4,1,120,1193,1195,1196,0,1,2,5,5,5,5,1,120,1195,1198,1196,1,3,2,5,5,5,5,1,120,1200,1202,1201,0,1,2,0,0,0,0,1,120,1202,1203,1201,1,3,2,0,0,0,0,1,120,1204,1206,1205,0,1,2,1,1,1,1,1,120,1206,1207,1205,1,3,2,1,1,1,1,1,120,1204,1205,1201,0,1,2,2,2,2,2,1,120,1205,1200,1201,1,3,2,2,2,2,2,1,120,1207,1206,1202,0,1,2,3,3,3,3,1,120,1206,1203,1202,1,3,2,3,3,3,3,1,120,1205,1207,1200,0,1,2,4,4,4,4,1,120,1207,1202,1200,1,3,2,4,4,4,4,1,120,1201,1203,1204,0,1,2,5,5,5,5,1,120,1203,1206,1204,1,3,2,5,5,5,5,1,120,1208,1210,1209,0,1,2,0,0,0,0,1,120,1210,1211,1209,1,3,2,0,0,0,0,1,120,1212,1214,1213,0,1,2,1,1,1,1,1,120,1214,1215,1213,1,3,2,1,1,1,1,1,120,1212,1213,1209,0,1,2,2,2,2,2,1,120,1213,1208,1209,1,3,2,2,2,2,2,1,120,1215,1214,1210,0,1,2,3,3,3,3,1,120,1214,1211,1210,1,3,2,3,3,3,3,1,120,1213,1215,1208,0,1,2,4,4,4,4,1,120,1215,1210,1208,1,3,2,4,4,4,4,1,120,1209,1211,1212,0,1,2,5,5,5,5,1,120,1211,1214,1212,1,3,2,5,5,5,5,1,120,1216,1218,1217,0,1,2,0,0,0,0,1,120,1218,1219,1217,1,3,2,0,0,0,0,1,120,1220,1222,1221,0,1,2,1,1,1,1,1,120,1222,1223,1221,1,3,2,1,1,1,1,1,120,1220,1221,1217,0,1,2,2,2,2,2,1,120,1221,1216,1217,1,3,2,2,2,2,2,1,120,1223,1222,1218,0,1,2,3,3,3,3,1,120,1222,1219,1218,1,3,2,3,3,3,3,1,120,1221,1223,1216,0,1,2,4,4,4,4,1,120,1223,1218,1216,1,3,2,4,4,4,4,1,120,1217,1219,1220,0,1,2,5,5,5,5,1,120,1219,1222,1220,1,3,2,5,5,5,5,1,120,1224,1226,1225,0,1,2,0,0,0,0,1,120,1226,1227,1225,1,3,2,0,0,0,0,1,120,1228,1230,1229,0,1,2,1,1,1,1,1,120,1230,1231,1229,1,3,2,1,1,1,1,1,120,1228,1229,1225,0,1,2,2,2,2,2,1,120,1229,1224,1225,1,3,2,2,2,2,2,1,120,1231,1230,1226,0,1,2,3,3,3,3,1,120,1230,1227,1226,1,3,2,3,3,3,3,1,120,1229,1231,1224,0,1,2,4,4,4,4,1,120,1231,1226,1224,1,3,2,4,4,4,4,1,120,1225,1227,1228,0,1,2,5,5,5,5,1,120,1227,1230,1228,1,3,2,5,5,5,5,1,120,1232,1234,1233,0,1,2,0,0,0,0,1,120,1234,1235,1233,1,3,2,0,0,0,0,1,120,1236,1238,1237,0,1,2,1,1,1,1,1,120,1238,1239,1237,1,3,2,1,1,1,1,1,120,1236,1237,1233,0,1,2,2,2,2,2,1,120,1237,1232,1233,1,3,2,2,2,2,2,1,120,1239,1238,1234,0,1,2,3,3,3,3,1,120,1238,1235,1234,1,3,2,3,3,3,3,1,120,1237,1239,1232,0,1,2,4,4,4,4,1,120,1239,1234,1232,1,3,2,4,4,4,4,1,120,1233,1235,1236,0,1,2,5,5,5,5,1,120,1235,1238,1236,1,3,2,5,5,5,5,1,120,1240,1242,1241,0,1,2,0,0,0,0,1,120,1242,1243,1241,1,3,2,0,0,0,0,1,120,1244,1246,1245,0,1,2,1,1,1,1,1,120,1246,1247,1245,1,3,2,1,1,1,1,1,120,1244,1245,1241,0,1,2,2,2,2,2,1,120,1245,1240,1241,1,3,2,2,2,2,2,1,120,1247,1246,1242,0,1,2,3,3,3,3,1,120,1246,1243,1242,1,3,2,3,3,3,3,1,120,1245,1247,1240,0,1,2,4,4,4,4,1,120,1247,1242,1240,1,3,2,4,4,4,4,1,120,1241,1243,1244,0,1,2,5,5,5,5,1,120,1243,1246,1244,1,3,2,5,5,5,5,1,120,1248,1250,1249,0,1,2,0,0,0,0,1,120,1250,1251,1249,1,3,2,0,0,0,0,1,120,1252,1254,1253,0,1,2,1,1,1,1,1,120,1254,1255,1253,1,3,2,1,1,1,1,1,120,1252,1253,1249,0,1,2,2,2,2,2,1,120,1253,1248,1249,1,3,2,2,2,2,2,1,120,1255,1254,1250,0,1,2,3,3,3,3,1,120,1254,1251,1250,1,3,2,3,3,3,3,1,120,1253,1255,1248,0,1,2,4,4,4,4,1,120,1255,1250,1248,1,3,2,4,4,4,4,1,120,1249,1251,1252,0,1,2,5,5,5,5,1,120,1251,1254,1252,1,3,2,5,5,5,5,1,120,1256,1258,1257,0,1,2,0,0,0,0,1,120,1258,1259,1257,1,3,2,0,0,0,0,1,120,1260,1262,1261,0,1,2,1,1,1,1,1,120,1262,1263,1261,1,3,2,1,1,1,1,1,120,1260,1261,1257,0,1,2,2,2,2,2,1,120,1261,1256,1257,1,3,2,2,2,2,2,1,120,1263,1262,1258,0,1,2,3,3,3,3,1,120,1262,1259,1258,1,3,2,3,3,3,3,1,120,1261,1263,1256,0,1,2,4,4,4,4,1,120,1263,1258,1256,1,3,2,4,4,4,4,1,120,1257,1259,1260,0,1,2,5,5,5,5,1,120,1259,1262,1260,1,3,2,5,5,5,5,1,120,1264,1266,1265,0,1,2,0,0,0,0,1,120,1266,1267,1265,1,3,2,0,0,0,0,1,120,1268,1270,1269,0,1,2,1,1,1,1,1,120,1270,1271,1269,1,3,2,1,1,1,1,1,120,1268,1269,1265,0,1,2,2,2,2,2,1,120,1269,1264,1265,1,3,2,2,2,2,2,1,120,1271,1270,1266,0,1,2,3,3,3,3,1,120,1270,1267,1266,1,3,2,3,3,3,3,1,120,1269,1271,1264,0,1,2,4,4,4,4,1,120,1271,1266,1264,1,3,2,4,4,4,4,1,120,1265,1267,1268,0,1,2,5,5,5,5,1,120,1267,1270,1268,1,3,2,5,5,5,5,1,120,1272,1274,1273,0,1,2,0,0,0,0,1,120,1274,1275,1273,1,3,2,0,0,0,0,1,120,1276,1278,1277,0,1,2,1,1,1,1,1,120,1278,1279,1277,1,3,2,1,1,1,1,1,120,1276,1277,1273,0,1,2,2,2,2,2,1,120,1277,1272,1273,1,3,2,2,2,2,2,1,120,1279,1278,1274,0,1,2,3,3,3,3,1,120,1278,1275,1274,1,3,2,3,3,3,3,1,120,1277,1279,1272,0,1,2,4,4,4,4,1,120,1279,1274,1272,1,3,2,4,4,4,4,1,120,1273,1275,1276,0,1,2,5,5,5,5,1,120,1275,1278,1276,1,3,2,5,5,5,5,1,120,1280,1282,1281,0,1,2,0,0,0,0,1,120,1282,1283,1281,1,3,2,0,0,0,0,1,120,1284,1286,1285,0,1,2,1,1,1,1,1,120,1286,1287,1285,1,3,2,1,1,1,1,1,120,1284,1285,1281,0,1,2,2,2,2,2,1,120,1285,1280,1281,1,3,2,2,2,2,2,1,120,1287,1286,1282,0,1,2,3,3,3,3,1,120,1286,1283,1282,1,3,2,3,3,3,3,1,120,1285,1287,1280,0,1,2,4,4,4,4,1,120,1287,1282,1280,1,3,2,4,4,4,4,1,120,1281,1283,1284,0,1,2,5,5,5,5,1,120,1283,1286,1284,1,3,2,5,5,5,5,1,120,1288,1290,1289,0,1,2,0,0,0,0,1,120,1290,1291,1289,1,3,2,0,0,0,0,1,120,1292,1294,1293,0,1,2,1,1,1,1,1,120,1294,1295,1293,1,3,2,1,1,1,1,1,120,1292,1293,1289,0,1,2,2,2,2,2,1,120,1293,1288,1289,1,3,2,2,2,2,2,1,120,1295,1294,1290,0,1,2,3,3,3,3,1,120,1294,1291,1290,1,3,2,3,3,3,3,1,120,1293,1295,1288,0,1,2,4,4,4,4,1,120,1295,1290,1288,1,3,2,4,4,4,4,1,120,1289,1291,1292,0,1,2,5,5,5,5,1,120,1291,1294,1292,1,3,2,5,5,5,5,1,120,1296,1298,1297,0,1,2,0,0,0,0,1,120,1298,1299,1297,1,3,2,0,0,0,0,1,120,1300,1302,1301,0,1,2,1,1,1,1,1,120,1302,1303,1301,1,3,2,1,1,1,1,1,120,1300,1301,1297,0,1,2,2,2,2,2,1,120,1301,1296,1297,1,3,2,2,2,2,2,1,120,1303,1302,1298,0,1,2,3,3,3,3,1,120,1302,1299,1298,1,3,2,3,3,3,3,1,120,1301,1303,1296,0,1,2,4,4,4,4,1,120,1303,1298,1296,1,3,2,4,4,4,4,1,120,1297,1299,1300,0,1,2,5,5,5,5,1,120,1299,1302,1300,1,3,2,5,5,5,5,1,120,1304,1306,1305,0,1,2,0,0,0,0,0,120,1306,1307,1305,1,3,2,0,0,0,0,0,120,1308,1310,1309,0,1,2,1,1,1,1,0,120,1310,1311,1309,1,3,2,1,1,1,1,0,120,1308,1309,1305,0,1,2,2,2,2,2,0,120,1309,1304,1305,1,3,2,2,2,2,2,0,120,1311,1310,1306,0,1,2,3,3,3,3,0,120,1310,1307,1306,1,3,2,3,3,3,3,0,120,1309,1311,1304,0,1,2,4,4,4,4,0,120,1311,1306,1304,1,3,2,4,4,4,4,0,120,1305,1307,1308,0,1,2,5,5,5,5,0,120,1307,1310,1308,1,3,2,5,5,5,5,0,120,1312,1314,1313,0,1,2,0,0,0,0,2,120,1314,1315,1313,1,3,2,0,0,0,0,2,120,1316,1318,1317,0,1,2,1,1,1,1,2,120,1318,1319,1317,1,3,2,1,1,1,1,2,120,1316,1317,1313,0,1,2,2,2,2,2,2,120,1317,1312,1313,1,3,2,2,2,2,2,2,120,1319,1318,1314,0,1,2,3,3,3,3,2,120,1318,1315,1314,1,3,2,3,3,3,3,2,120,1317,1319,1312,0,1,2,4,4,4,4,2,120,1319,1314,1312,1,3,2,4,4,4,4,2,120,1313,1315,1316,0,1,2,5,5,5,5,2,120,1315,1318,1316,1,3,2,5,5,5,5,2,120,1320,1322,1321,0,1,2,0,0,0,0,2,120,1322,1323,1321,1,3,2,0,0,0,0,2,120,1324,1326,1325,0,1,2,1,1,1,1,2,120,1326,1327,1325,1,3,2,1,1,1,1,2,120,1324,1325,1321,0,1,2,2,2,2,2,2,120,1325,1320,1321,1,3,2,2,2,2,2,2,120,1327,1326,1322,0,1,2,3,3,3,3,2,120,1326,1323,1322,1,3,2,3,3,3,3,2,120,1325,1327,1320,0,1,2,4,4,4,4,2,120,1327,1322,1320,1,3,2,4,4,4,4,2,120,1321,1323,1324,0,1,2,5,5,5,5,2,120,1323,1326,1324,1,3,2,5,5,5,5,2,120,1328,1330,1329,0,1,2,0,0,0,0,2,120,1330,1331,1329,1,3,2,0,0,0,0,2,120,1332,1334,1333,0,1,2,1,1,1,1,2,120,1334,1335,1333,1,3,2,1,1,1,1,2,120,1332,1333,1329,0,1,2,2,2,2,2,2,120,1333,1328,1329,1,3,2,2,2,2,2,2,120,1335,1334,1330,0,1,2,3,3,3,3,2,120,1334,1331,1330,1,3,2,3,3,3,3,2,120,1333,1335,1328,0,1,2,4,4,4,4,2,120,1335,1330,1328,1,3,2,4,4,4,4,2,120,1329,1331,1332,0,1,2,5,5,5,5,2,120,1331,1334,1332,1,3,2,5,5,5,5,2,120,1336,1338,1337,0,1,2,0,0,0,0,2,120,1338,1339,1337,1,3,2,0,0,0,0,2,120,1340,1342,1341,0,1,2,1,1,1,1,2,120,1342,1343,1341,1,3,2,1,1,1,1,2,120,1340,1341,1337,0,1,2,2,2,2,2,2,120,1341,1336,1337,1,3,2,2,2,2,2,2,120,1343,1342,1338,0,1,2,3,3,3,3,2,120,1342,1339,1338,1,3,2,3,3,3,3,2,120,1341,1343,1336,0,1,2,4,4,4,4,2,120,1343,1338,1336,1,3,2,4,4,4,4,2,120,1337,1339,1340,0,1,2,5,5,5,5,2,120,1339,1342,1340,1,3,2,5,5,5,5,2,120,1344,1346,1345,0,1,2,0,0,0,0,0,120,1346,1347,1345,1,3,2,0,0,0,0,0,120,1348,1350,1349,0,1,2,1,1,1,1,0,120,1350,1351,1349,1,3,2,1,1,1,1,0,120,1348,1349,1345,0,1,2,2,2,2,2,0,120,1349,1344,1345,1,3,2,2,2,2,2,0,120,1351,1350,1346,0,1,2,3,3,3,3,0,120,1350,1347,1346,1,3,2,3,3,3,3,0,120,1349,1351,1344,0,1,2,4,4,4,4,0,120,1351,1346,1344,1,3,2,4,4,4,4,0,120,1345,1347,1348,0,1,2,5,5,5,5,0,120,1347,1350,1348,1,3,2,5,5,5,5,0,120,1352,1354,1353,0,1,2,0,0,0,0,0,120,1354,1355,1353,1,3,2,0,0,0,0,0,120,1356,1358,1357,0,1,2,1,1,1,1,0,120,1358,1359,1357,1,3,2,1,1,1,1,0,120,1356,1357,1353,0,1,2,2,2,2,2,0,120,1357,1352,1353,1,3,2,2,2,2,2,0,120,1359,1358,1354,0,1,2,3,3,3,3,0,120,1358,1355,1354,1,3,2,3,3,3,3,0,120,1357,1359,1352,0,1,2,4,4,4,4,0,120,1359,1354,1352,1,3,2,4,4,4,4,0,120,1353,1355,1356,0,1,2,5,5,5,5,0,120,1355,1358,1356,1,3,2,5,5,5,5,0,120,1360,1362,1361,0,1,2,0,0,0,0,0,120,1362,1363,1361,1,3,2,0,0,0,0,0,120,1364,1366,1365,0,1,2,1,1,1,1,0,120,1366,1367,1365,1,3,2,1,1,1,1,0,120,1364,1365,1361,0,1,2,2,2,2,2,0,120,1365,1360,1361,1,3,2,2,2,2,2,0,120,1367,1366,1362,0,1,2,3,3,3,3,0,120,1366,1363,1362,1,3,2,3,3,3,3,0,120,1365,1367,1360,0,1,2,4,4,4,4,0,120,1367,1362,1360,1,3,2,4,4,4,4,0,120,1361,1363,1364,0,1,2,5,5,5,5,0,120,1363,1366,1364,1,3,2,5,5,5,5,0,120,1368,1370,1369,0,1,2,0,0,0,0,0,120,1370,1371,1369,1,3,2,0,0,0,0,0,120,1372,1374,1373,0,1,2,1,1,1,1,0,120,1374,1375,1373,1,3,2,1,1,1,1,0,120,1372,1373,1369,0,1,2,2,2,2,2,0,120,1373,1368,1369,1,3,2,2,2,2,2,0,120,1375,1374,1370,0,1,2,3,3,3,3,0,120,1374,1371,1370,1,3,2,3,3,3,3,0,120,1373,1375,1368,0,1,2,4,4,4,4,0,120,1375,1370,1368,1,3,2,4,4,4,4,0,120,1369,1371,1372,0,1,2,5,5,5,5,0,120,1371,1374,1372,1,3,2,5,5,5,5,0,120,1376,1378,1377,0,1,2,0,0,0,0,1,120,1378,1379,1377,1,3,2,0,0,0,0,1,120,1380,1382,1381,0,1,2,1,1,1,1,1,120,1382,1383,1381,1,3,2,1,1,1,1,1,120,1380,1381,1377,0,1,2,2,2,2,2,1,120,1381,1376,1377,1,3,2,2,2,2,2,1,120,1383,1382,1378,0,1,2,3,3,3,3,1,120,1382,1379,1378,1,3,2,3,3,3,3,1,120,1381,1383,1376,0,1,2,4,4,4,4,1,120,1383,1378,1376,1,3,2,4,4,4,4,1,120,1377,1379,1380,0,1,2,5,5,5,5,1,120,1379,1382,1380,1,3,2,5,5,5,5,1,120,1384,1386,1385,0,1,2,0,0,0,0,1,120,1386,1387,1385,1,3,2,0,0,0,0,1,120,1388,1390,1389,0,1,2,1,1,1,1,1,120,1390,1391,1389,1,3,2,1,1,1,1,1,120,1388,1389,1385,0,1,2,2,2,2,2,1,120,1389,1384,1385,1,3,2,2,2,2,2,1,120,1391,1390,1386,0,1,2,3,3,3,3,1,120,1390,1387,1386,1,3,2,3,3,3,3,1,120,1389,1391,1384,0,1,2,4,4,4,4,1,120,1391,1386,1384,1,3,2,4,4,4,4,1,120,1385,1387,1388,0,1,2,5,5,5,5,1,120,1387,1390,1388,1,3,2,5,5,5,5,1,120,1392,1394,1393,0,1,2,0,0,0,0,1,120,1394,1395,1393,1,3,2,0,0,0,0,1,120,1396,1398,1397,0,1,2,1,1,1,1,1,120,1398,1399,1397,1,3,2,1,1,1,1,1,120,1396,1397,1393,0,1,2,2,2,2,2,1,120,1397,1392,1393,1,3,2,2,2,2,2,1,120,1399,1398,1394,0,1,2,3,3,3,3,1,120,1398,1395,1394,1,3,2,3,3,3,3,1,120,1397,1399,1392,0,1,2,4,4,4,4,1,120,1399,1394,1392,1,3,2,4,4,4,4,1,120,1393,1395,1396,0,1,2,5,5,5,5,1,120,1395,1398,1396,1,3,2,5,5,5,5,1,120,1400,1402,1401,0,1,2,0,0,0,0,1,120,1402,1403,1401,1,3,2,0,0,0,0,1,120,1404,1406,1405,0,1,2,1,1,1,1,1,120,1406,1407,1405,1,3,2,1,1,1,1,1,120,1404,1405,1401,0,1,2,2,2,2,2,1,120,1405,1400,1401,1,3,2,2,2,2,2,1,120,1407,1406,1402,0,1,2,3,3,3,3,1,120,1406,1403,1402,1,3,2,3,3,3,3,1,120,1405,1407,1400,0,1,2,4,4,4,4,1,120,1407,1402,1400,1,3,2,4,4,4,4,1,120,1401,1403,1404,0,1,2,5,5,5,5,1,120,1403,1406,1404,1,3,2,5,5,5,5,1,120,1408,1410,1409,0,1,2,0,0,0,0,1,120,1410,1411,1409,1,3,2,0,0,0,0,1,120,1412,1414,1413,0,1,2,1,1,1,1,1,120,1414,1415,1413,1,3,2,1,1,1,1,1,120,1412,1413,1409,0,1,2,2,2,2,2,1,120,1413,1408,1409,1,3,2,2,2,2,2,1,120,1415,1414,1410,0,1,2,3,3,3,3,1,120,1414,1411,1410,1,3,2,3,3,3,3,1,120,1413,1415,1408,0,1,2,4,4,4,4,1,120,1415,1410,1408,1,3,2,4,4,4,4,1,120,1409,1411,1412,0,1,2,5,5,5,5,1,120,1411,1414,1412,1,3,2,5,5,5,5,1,120,1416,1418,1417,0,1,2,0,0,0,0,1,120,1418,1419,1417,1,3,2,0,0,0,0,1,120,1420,1422,1421,0,1,2,1,1,1,1,1,120,1422,1423,1421,1,3,2,1,1,1,1,1,120,1420,1421,1417,0,1,2,2,2,2,2,1,120,1421,1416,1417,1,3,2,2,2,2,2,1,120,1423,1422,1418,0,1,2,3,3,3,3,1,120,1422,1419,1418,1,3,2,3,3,3,3,1,120,1421,1423,1416,0,1,2,4,4,4,4,1,120,1423,1418,1416,1,3,2,4,4,4,4,1,120,1417,1419,1420,0,1,2,5,5,5,5,1,120,1419,1422,1420,1,3,2,5,5,5,5,1,120,1424,1426,1425,0,1,2,0,0,0,0,1,120,1426,1427,1425,1,3,2,0,0,0,0,1,120,1428,1430,1429,0,1,2,1,1,1,1,1,120,1430,1431,1429,1,3,2,1,1,1,1,1,120,1428,1429,1425,0,1,2,2,2,2,2,1,120,1429,1424,1425,1,3,2,2,2,2,2,1,120,1431,1430,1426,0,1,2,3,3,3,3,1,120,1430,1427,1426,1,3,2,3,3,3,3,1,120,1429,1431,1424,0,1,2,4,4,4,4,1,120,1431,1426,1424,1,3,2,4,4,4,4,1,120,1425,1427,1428,0,1,2,5,5,5,5,1,120,1427,1430,1428,1,3,2,5,5,5,5,1,120,1432,1434,1433,0,1,2,0,0,0,0,1,120,1434,1435,1433,1,3,2,0,0,0,0,1,120,1436,1438,1437,0,1,2,1,1,1,1,1,120,1438,1439,1437,1,3,2,1,1,1,1,1,120,1436,1437,1433,0,1,2,2,2,2,2,1,120,1437,1432,1433,1,3,2,2,2,2,2,1,120,1439,1438,1434,0,1,2,3,3,3,3,1,120,1438,1435,1434,1,3,2,3,3,3,3,1,120,1437,1439,1432,0,1,2,4,4,4,4,1,120,1439,1434,1432,1,3,2,4,4,4,4,1,120,1433,1435,1436,0,1,2,5,5,5,5,1,120,1435,1438,1436,1,3,2,5,5,5,5,1,120,1440,1442,1441,0,1,2,0,0,0,0,1,120,1442,1443,1441,1,3,2,0,0,0,0,1,120,1444,1446,1445,0,1,2,1,1,1,1,1,120,1446,1447,1445,1,3,2,1,1,1,1,1,120,1444,1445,1441,0,1,2,2,2,2,2,1,120,1445,1440,1441,1,3,2,2,2,2,2,1,120,1447,1446,1442,0,1,2,3,3,3,3,1,120,1446,1443,1442,1,3,2,3,3,3,3,1,120,1445,1447,1440,0,1,2,4,4,4,4,1,120,1447,1442,1440,1,3,2,4,4,4,4,1,120,1441,1443,1444,0,1,2,5,5,5,5,1,120,1443,1446,1444,1,3,2,5,5,5,5,1,120,1448,1450,1449,0,1,2,0,0,0,0,1,120,1450,1451,1449,1,3,2,0,0,0,0,1,120,1452,1454,1453,0,1,2,1,1,1,1,1,120,1454,1455,1453,1,3,2,1,1,1,1,1,120,1452,1453,1449,0,1,2,2,2,2,2,1,120,1453,1448,1449,1,3,2,2,2,2,2,1,120,1455,1454,1450,0,1,2,3,3,3,3,1,120,1454,1451,1450,1,3,2,3,3,3,3,1,120,1453,1455,1448,0,1,2,4,4,4,4,1,120,1455,1450,1448,1,3,2,4,4,4,4,1,120,1449,1451,1452,0,1,2,5,5,5,5,1,120,1451,1454,1452,1,3,2,5,5,5,5,1,120,1456,1458,1457,0,1,2,0,0,0,0,1,120,1458,1459,1457,1,3,2,0,0,0,0,1,120,1460,1462,1461,0,1,2,1,1,1,1,1,120,1462,1463,1461,1,3,2,1,1,1,1,1,120,1460,1461,1457,0,1,2,2,2,2,2,1,120,1461,1456,1457,1,3,2,2,2,2,2,1,120,1463,1462,1458,0,1,2,3,3,3,3,1,120,1462,1459,1458,1,3,2,3,3,3,3,1,120,1461,1463,1456,0,1,2,4,4,4,4,1,120,1463,1458,1456,1,3,2,4,4,4,4,1,120,1457,1459,1460,0,1,2,5,5,5,5,1,120,1459,1462,1460,1,3,2,5,5,5,5,1,120,1464,1466,1465,0,1,2,0,0,0,0,1,120,1466,1467,1465,1,3,2,0,0,0,0,1,120,1468,1470,1469,0,1,2,1,1,1,1,1,120,1470,1471,1469,1,3,2,1,1,1,1,1,120,1468,1469,1465,0,1,2,2,2,2,2,1,120,1469,1464,1465,1,3,2,2,2,2,2,1,120,1471,1470,1466,0,1,2,3,3,3,3,1,120,1470,1467,1466,1,3,2,3,3,3,3,1,120,1469,1471,1464,0,1,2,4,4,4,4,1,120,1471,1466,1464,1,3,2,4,4,4,4,1,120,1465,1467,1468,0,1,2,5,5,5,5,1,120,1467,1470,1468,1,3,2,5,5,5,5,1,120,1472,1474,1473,0,1,2,0,0,0,0,1,120,1474,1475,1473,1,3,2,0,0,0,0,1,120,1476,1478,1477,0,1,2,1,1,1,1,1,120,1478,1479,1477,1,3,2,1,1,1,1,1,120,1476,1477,1473,0,1,2,2,2,2,2,1,120,1477,1472,1473,1,3,2,2,2,2,2,1,120,1479,1478,1474,0,1,2,3,3,3,3,1,120,1478,1475,1474,1,3,2,3,3,3,3,1,120,1477,1479,1472,0,1,2,4,4,4,4,1,120,1479,1474,1472,1,3,2,4,4,4,4,1,120,1473,1475,1476,0,1,2,5,5,5,5,1,120,1475,1478,1476,1,3,2,5,5,5,5,1,120,1480,1482,1481,0,1,2,0,0,0,0,1,120,1482,1483,1481,1,3,2,0,0,0,0,1,120,1484,1486,1485,0,1,2,1,1,1,1,1,120,1486,1487,1485,1,3,2,1,1,1,1,1,120,1484,1485,1481,0,1,2,2,2,2,2,1,120,1485,1480,1481,1,3,2,2,2,2,2,1,120,1487,1486,1482,0,1,2,3,3,3,3,1,120,1486,1483,1482,1,3,2,3,3,3,3,1,120,1485,1487,1480,0,1,2,4,4,4,4,1,120,1487,1482,1480,1,3,2,4,4,4,4,1,120,1481,1483,1484,0,1,2,5,5,5,5,1,120,1483,1486,1484,1,3,2,5,5,5,5,1,120,1488,1490,1489,0,1,2,0,0,0,0,1,120,1490,1491,1489,1,3,2,0,0,0,0,1,120,1492,1494,1493,0,1,2,1,1,1,1,1,120,1494,1495,1493,1,3,2,1,1,1,1,1,120,1492,1493,1489,0,1,2,2,2,2,2,1,120,1493,1488,1489,1,3,2,2,2,2,2,1,120,1495,1494,1490,0,1,2,3,3,3,3,1,120,1494,1491,1490,1,3,2,3,3,3,3,1,120,1493,1495,1488,0,1,2,4,4,4,4,1,120,1495,1490,1488,1,3,2,4,4,4,4,1,120,1489,1491,1492,0,1,2,5,5,5,5,1,120,1491,1494,1492,1,3,2,5,5,5,5,1,120,1496,1498,1497,0,1,2,0,0,0,0,1,120,1498,1499,1497,1,3,2,0,0,0,0,1,120,1500,1502,1501,0,1,2,1,1,1,1,1,120,1502,1503,1501,1,3,2,1,1,1,1,1,120,1500,1501,1497,0,1,2,2,2,2,2,1,120,1501,1496,1497,1,3,2,2,2,2,2,1,120,1503,1502,1498,0,1,2,3,3,3,3,1,120,1502,1499,1498,1,3,2,3,3,3,3,1,120,1501,1503,1496,0,1,2,4,4,4,4,1,120,1503,1498,1496,1,3,2,4,4,4,4,1,120,1497,1499,1500,0,1,2,5,5,5,5,1,120,1499,1502,1500,1,3,2,5,5,5,5,1,120,1504,1506,1505,0,1,2,0,0,0,0,1,120,1506,1507,1505,1,3,2,0,0,0,0,1,120,1508,1510,1509,0,1,2,1,1,1,1,1,120,1510,1511,1509,1,3,2,1,1,1,1,1,120,1508,1509,1505,0,1,2,2,2,2,2,1,120,1509,1504,1505,1,3,2,2,2,2,2,1,120,1511,1510,1506,0,1,2,3,3,3,3,1,120,1510,1507,1506,1,3,2,3,3,3,3,1,120,1509,1511,1504,0,1,2,4,4,4,4,1,120,1511,1506,1504,1,3,2,4,4,4,4,1,120,1505,1507,1508,0,1,2,5,5,5,5,1,120,1507,1510,1508,1,3,2,5,5,5,5,1,120,1512,1514,1513,0,1,2,0,0,0,0,1,120,1514,1515,1513,1,3,2,0,0,0,0,1,120,1516,1518,1517,0,1,2,1,1,1,1,1,120,1518,1519,1517,1,3,2,1,1,1,1,1,120,1516,1517,1513,0,1,2,2,2,2,2,1,120,1517,1512,1513,1,3,2,2,2,2,2,1,120,1519,1518,1514,0,1,2,3,3,3,3,1,120,1518,1515,1514,1,3,2,3,3,3,3,1,120,1517,1519,1512,0,1,2,4,4,4,4,1,120,1519,1514,1512,1,3,2,4,4,4,4,1,120,1513,1515,1516,0,1,2,5,5,5,5,1,120,1515,1518,1516,1,3,2,5,5,5,5,1,120,1520,1522,1521,0,1,2,0,0,0,0,1,120,1522,1523,1521,1,3,2,0,0,0,0,1,120,1524,1526,1525,0,1,2,1,1,1,1,1,120,1526,1527,1525,1,3,2,1,1,1,1,1,120,1524,1525,1521,0,1,2,2,2,2,2,1,120,1525,1520,1521,1,3,2,2,2,2,2,1,120,1527,1526,1522,0,1,2,3,3,3,3,1,120,1526,1523,1522,1,3,2,3,3,3,3,1,120,1525,1527,1520,0,1,2,4,4,4,4,1,120,1527,1522,1520,1,3,2,4,4,4,4,1,120,1521,1523,1524,0,1,2,5,5,5,5,1,120,1523,1526,1524,1,3,2,5,5,5,5,1,120,1528,1530,1529,0,1,2,0,0,0,0,1,120,1530,1531,1529,1,3,2,0,0,0,0,1,120,1532,1534,1533,0,1,2,1,1,1,1,1,120,1534,1535,1533,1,3,2,1,1,1,1,1,120,1532,1533,1529,0,1,2,2,2,2,2,1,120,1533,1528,1529,1,3,2,2,2,2,2,1,120,1535,1534,1530,0,1,2,3,3,3,3,1,120,1534,1531,1530,1,3,2,3,3,3,3,1,120,1533,1535,1528,0,1,2,4,4,4,4,1,120,1535,1530,1528,1,3,2,4,4,4,4,1,120,1529,1531,1532,0,1,2,5,5,5,5,1,120,1531,1534,1532,1,3,2,5,5,5,5,1,120,1536,1538,1537,0,1,2,0,0,0,0,1,120,1538,1539,1537,1,3,2,0,0,0,0,1,120,1540,1542,1541,0,1,2,1,1,1,1,1,120,1542,1543,1541,1,3,2,1,1,1,1,1,120,1540,1541,1537,0,1,2,2,2,2,2,1,120,1541,1536,1537,1,3,2,2,2,2,2,1,120,1543,1542,1538,0,1,2,3,3,3,3,1,120,1542,1539,1538,1,3,2,3,3,3,3,1,120,1541,1543,1536,0,1,2,4,4,4,4,1,120,1543,1538,1536,1,3,2,4,4,4,4,1,120,1537,1539,1540,0,1,2,5,5,5,5,1,120,1539,1542,1540,1,3,2,5,5,5,5,1,120,1544,1546,1545,0,1,2,0,0,0,0,1,120,1546,1547,1545,1,3,2,0,0,0,0,1,120,1548,1550,1549,0,1,2,1,1,1,1,1,120,1550,1551,1549,1,3,2,1,1,1,1,1,120,1548,1549,1545,0,1,2,2,2,2,2,1,120,1549,1544,1545,1,3,2,2,2,2,2,1,120,1551,1550,1546,0,1,2,3,3,3,3,1,120,1550,1547,1546,1,3,2,3,3,3,3,1,120,1549,1551,1544,0,1,2,4,4,4,4,1,120,1551,1546,1544,1,3,2,4,4,4,4,1,120,1545,1547,1548,0,1,2,5,5,5,5,1,120,1547,1550,1548,1,3,2,5,5,5,5,1,120,1552,1554,1553,0,1,2,0,0,0,0,1,120,1554,1555,1553,1,3,2,0,0,0,0,1,120,1556,1558,1557,0,1,2,1,1,1,1,1,120,1558,1559,1557,1,3,2,1,1,1,1,1,120,1556,1557,1553,0,1,2,2,2,2,2,1,120,1557,1552,1553,1,3,2,2,2,2,2,1,120,1559,1558,1554,0,1,2,3,3,3,3,1,120,1558,1555,1554,1,3,2,3,3,3,3,1,120,1557,1559,1552,0,1,2,4,4,4,4,1,120,1559,1554,1552,1,3,2,4,4,4,4,1,120,1553,1555,1556,0,1,2,5,5,5,5,1,120,1555,1558,1556,1,3,2,5,5,5,5,1,120,1560,1562,1561,0,1,2,0,0,0,0,1,120,1562,1563,1561,1,3,2,0,0,0,0,1,120,1564,1566,1565,0,1,2,1,1,1,1,1,120,1566,1567,1565,1,3,2,1,1,1,1,1,120,1564,1565,1561,0,1,2,2,2,2,2,1,120,1565,1560,1561,1,3,2,2,2,2,2,1,120,1567,1566,1562,0,1,2,3,3,3,3,1,120,1566,1563,1562,1,3,2,3,3,3,3,1,120,1565,1567,1560,0,1,2,4,4,4,4,1,120,1567,1562,1560,1,3,2,4,4,4,4,1,120,1561,1563,1564,0,1,2,5,5,5,5,1,120,1563,1566,1564,1,3,2,5,5,5,5,1,120,1568,1570,1569,0,1,2,0,0,0,0,1,120,1570,1571,1569,1,3,2,0,0,0,0,1,120,1572,1574,1573,0,1,2,1,1,1,1,1,120,1574,1575,1573,1,3,2,1,1,1,1,1,120,1572,1573,1569,0,1,2,2,2,2,2,1,120,1573,1568,1569,1,3,2,2,2,2,2,1,120,1575,1574,1570,0,1,2,3,3,3,3,1,120,1574,1571,1570,1,3,2,3,3,3,3,1,120,1573,1575,1568,0,1,2,4,4,4,4,1,120,1575,1570,1568,1,3,2,4,4,4,4,1,120,1569,1571,1572,0,1,2,5,5,5,5,1,120,1571,1574,1572,1,3,2,5,5,5,5,1,120,1576,1578,1577,0,1,2,0,0,0,0,1,120,1578,1579,1577,1,3,2,0,0,0,0,1,120,1580,1582,1581,0,1,2,1,1,1,1,1,120,1582,1583,1581,1,3,2,1,1,1,1,1,120,1580,1581,1577,0,1,2,2,2,2,2,1,120,1581,1576,1577,1,3,2,2,2,2,2,1,120,1583,1582,1578,0,1,2,3,3,3,3,1,120,1582,1579,1578,1,3,2,3,3,3,3,1,120,1581,1583,1576,0,1,2,4,4,4,4,1,120,1583,1578,1576,1,3,2,4,4,4,4,1,120,1577,1579,1580,0,1,2,5,5,5,5,1,120,1579,1582,1580,1,3,2,5,5,5,5,1,120,1584,1586,1585,0,1,2,0,0,0,0,0,120,1586,1587,1585,1,3,2,0,0,0,0,0,120,1588,1590,1589,0,1,2,1,1,1,1,0,120,1590,1591,1589,1,3,2,1,1,1,1,0,120,1588,1589,1585,0,1,2,2,2,2,2,0,120,1589,1584,1585,1,3,2,2,2,2,2,0,120,1591,1590,1586,0,1,2,3,3,3,3,0,120,1590,1587,1586,1,3,2,3,3,3,3,0,120,1589,1591,1584,0,1,2,4,4,4,4,0,120,1591,1586,1584,1,3,2,4,4,4,4,0,120,1585,1587,1588,0,1,2,5,5,5,5,0,120,1587,1590,1588,1,3,2,5,5,5,5,0,120,1592,1594,1593,0,1,2,0,0,0,0,0,120,1594,1595,1593,1,3,2,0,0,0,0,0,120,1596,1598,1597,0,1,2,1,1,1,1,0,120,1598,1599,1597,1,3,2,1,1,1,1,0,120,1596,1597,1593,0,1,2,2,2,2,2,0,120,1597,1592,1593,1,3,2,2,2,2,2,0,120,1599,1598,1594,0,1,2,3,3,3,3,0,120,1598,1595,1594,1,3,2,3,3,3,3,0,120,1597,1599,1592,0,1,2,4,4,4,4,0,120,1599,1594,1592,1,3,2,4,4,4,4,0,120,1593,1595,1596,0,1,2,5,5,5,5,0,120,1595,1598,1596,1,3,2,5,5,5,5,0,120,1600,1602,1601,0,1,2,0,0,0,0,0,120,1602,1603,1601,1,3,2,0,0,0,0,0,120,1604,1606,1605,0,1,2,1,1,1,1,0,120,1606,1607,1605,1,3,2,1,1,1,1,0,120,1604,1605,1601,0,1,2,2,2,2,2,0,120,1605,1600,1601,1,3,2,2,2,2,2,0,120,1607,1606,1602,0,1,2,3,3,3,3,0,120,1606,1603,1602,1,3,2,3,3,3,3,0,120,1605,1607,1600,0,1,2,4,4,4,4,0,120,1607,1602,1600,1,3,2,4,4,4,4,0,120,1601,1603,1604,0,1,2,5,5,5,5,0,120,1603,1606,1604,1,3,2,5,5,5,5,0,120,1608,1610,1609,0,1,2,0,0,0,0,0,120,1610,1611,1609,1,3,2,0,0,0,0,0,120,1612,1614,1613,0,1,2,1,1,1,1,0,120,1614,1615,1613,1,3,2,1,1,1,1,0,120,1612,1613,1609,0,1,2,2,2,2,2,0,120,1613,1608,1609,1,3,2,2,2,2,2,0,120,1615,1614,1610,0,1,2,3,3,3,3,0,120,1614,1611,1610,1,3,2,3,3,3,3,0,120,1613,1615,1608,0,1,2,4,4,4,4,0,120,1615,1610,1608,1,3,2,4,4,4,4,0,120,1609,1611,1612,0,1,2,5,5,5,5,0,120,1611,1614,1612,1,3,2,5,5,5,5,0,120,1616,1618,1617,0,1,2,0,0,0,0,0,120,1618,1619,1617,1,3,2,0,0,0,0,0,120,1620,1622,1621,0,1,2,1,1,1,1,0,120,1622,1623,1621,1,3,2,1,1,1,1,0,120,1620,1621,1617,0,1,2,2,2,2,2,0,120,1621,1616,1617,1,3,2,2,2,2,2,0,120,1623,1622,1618,0,1,2,3,3,3,3,0,120,1622,1619,1618,1,3,2,3,3,3,3,0,120,1621,1623,1616,0,1,2,4,4,4,4,0,120,1623,1618,1616,1,3,2,4,4,4,4,0,120,1617,1619,1620,0,1,2,5,5,5,5,0,120,1619,1622,1620,1,3,2,5,5,5,5,0,120,1624,1626,1625,0,1,2,0,0,0,0,0,120,1626,1627,1625,1,3,2,0,0,0,0,0,120,1628,1630,1629,0,1,2,1,1,1,1,0,120,1630,1631,1629,1,3,2,1,1,1,1,0,120,1628,1629,1625,0,1,2,2,2,2,2,0,120,1629,1624,1625,1,3,2,2,2,2,2,0,120,1631,1630,1626,0,1,2,3,3,3,3,0,120,1630,1627,1626,1,3,2,3,3,3,3,0,120,1629,1631,1624,0,1,2,4,4,4,4,0,120,1631,1626,1624,1,3,2,4,4,4,4,0,120,1625,1627,1628,0,1,2,5,5,5,5,0,120,1627,1630,1628,1,3,2,5,5,5,5,0,120,1632,1634,1633,0,1,2,0,0,0,0,0,120,1634,1635,1633,1,3,2,0,0,0,0,0,120,1636,1638,1637,0,1,2,1,1,1,1,0,120,1638,1639,1637,1,3,2,1,1,1,1,0,120,1636,1637,1633,0,1,2,2,2,2,2,0,120,1637,1632,1633,1,3,2,2,2,2,2,0,120,1639,1638,1634,0,1,2,3,3,3,3,0,120,1638,1635,1634,1,3,2,3,3,3,3,0,120,1637,1639,1632,0,1,2,4,4,4,4,0,120,1639,1634,1632,1,3,2,4,4,4,4,0,120,1633,1635,1636,0,1,2,5,5,5,5,0,120,1635,1638,1636,1,3,2,5,5,5,5,0,120,1640,1642,1641,0,1,2,0,0,0,0,0,120,1642,1643,1641,1,3,2,0,0,0,0,0,120,1644,1646,1645,0,1,2,1,1,1,1,0,120,1646,1647,1645,1,3,2,1,1,1,1,0,120,1644,1645,1641,0,1,2,2,2,2,2,0,120,1645,1640,1641,1,3,2,2,2,2,2,0,120,1647,1646,1642,0,1,2,3,3,3,3,0,120,1646,1643,1642,1,3,2,3,3,3,3,0,120,1645,1647,1640,0,1,2,4,4,4,4,0,120,1647,1642,1640,1,3,2,4,4,4,4,0,120,1641,1643,1644,0,1,2,5,5,5,5,0,120,1643,1646,1644,1,3,2,5,5,5,5,0,120,1648,1650,1649,0,1,2,0,0,0,0,0,120,1650,1651,1649,1,3,2,0,0,0,0,0,120,1652,1654,1653,0,1,2,1,1,1,1,0,120,1654,1655,1653,1,3,2,1,1,1,1,0,120,1652,1653,1649,0,1,2,2,2,2,2,0,120,1653,1648,1649,1,3,2,2,2,2,2,0,120,1655,1654,1650,0,1,2,3,3,3,3,0,120,1654,1651,1650,1,3,2,3,3,3,3,0,120,1653,1655,1648,0,1,2,4,4,4,4,0,120,1655,1650,1648,1,3,2,4,4,4,4,0,120,1649,1651,1652,0,1,2,5,5,5,5,0,120,1651,1654,1652,1,3,2,5,5,5,5,0,120,1656,1658,1657,0,1,2,0,0,0,0,0,120,1658,1659,1657,1,3,2,0,0,0,0,0,120,1660,1662,1661,0,1,2,1,1,1,1,0,120,1662,1663,1661,1,3,2,1,1,1,1,0,120,1660,1661,1657,0,1,2,2,2,2,2,0,120,1661,1656,1657,1,3,2,2,2,2,2,0,120,1663,1662,1658,0,1,2,3,3,3,3,0,120,1662,1659,1658,1,3,2,3,3,3,3,0,120,1661,1663,1656,0,1,2,4,4,4,4,0,120,1663,1658,1656,1,3,2,4,4,4,4,0,120,1657,1659,1660,0,1,2,5,5,5,5,0,120,1659,1662,1660,1,3,2,5,5,5,5,0,120,1664,1666,1665,0,1,2,0,0,0,0,0,120,1666,1667,1665,1,3,2,0,0,0,0,0,120,1668,1670,1669,0,1,2,1,1,1,1,0,120,1670,1671,1669,1,3,2,1,1,1,1,0,120,1668,1669,1665,0,1,2,2,2,2,2,0,120,1669,1664,1665,1,3,2,2,2,2,2,0,120,1671,1670,1666,0,1,2,3,3,3,3,0,120,1670,1667,1666,1,3,2,3,3,3,3,0,120,1669,1671,1664,0,1,2,4,4,4,4,0,120,1671,1666,1664,1,3,2,4,4,4,4,0,120,1665,1667,1668,0,1,2,5,5,5,5,0,120,1667,1670,1668,1,3,2,5,5,5,5,0,120,1672,1674,1673,0,1,2,0,0,0,0,0,120,1674,1675,1673,1,3,2,0,0,0,0,0,120,1676,1678,1677,0,1,2,1,1,1,1,0,120,1678,1679,1677,1,3,2,1,1,1,1,0,120,1676,1677,1673,0,1,2,2,2,2,2,0,120,1677,1672,1673,1,3,2,2,2,2,2,0,120,1679,1678,1674,0,1,2,3,3,3,3,0,120,1678,1675,1674,1,3,2,3,3,3,3,0,120,1677,1679,1672,0,1,2,4,4,4,4,0,120,1679,1674,1672,1,3,2,4,4,4,4,0,120,1673,1675,1676,0,1,2,5,5,5,5,0,120,1675,1678,1676,1,3,2,5,5,5,5,0,120,1680,1682,1681,0,1,2,0,0,0,0,0,120,1682,1683,1681,1,3,2,0,0,0,0,0,120,1684,1686,1685,0,1,2,1,1,1,1,0,120,1686,1687,1685,1,3,2,1,1,1,1,0,120,1684,1685,1681,0,1,2,2,2,2,2,0,120,1685,1680,1681,1,3,2,2,2,2,2,0,120,1687,1686,1682,0,1,2,3,3,3,3,0,120,1686,1683,1682,1,3,2,3,3,3,3,0,120,1685,1687,1680,0,1,2,4,4,4,4,0,120,1687,1682,1680,1,3,2,4,4,4,4,0,120,1681,1683,1684,0,1,2,5,5,5,5,0,120,1683,1686,1684,1,3,2,5,5,5,5,0,120,1688,1690,1689,0,1,2,0,0,0,0,1,120,1690,1691,1689,1,3,2,0,0,0,0,1,120,1692,1694,1693,0,1,2,1,1,1,1,1,120,1694,1695,1693,1,3,2,1,1,1,1,1,120,1692,1693,1689,0,1,2,2,2,2,2,1,120,1693,1688,1689,1,3,2,2,2,2,2,1,120,1695,1694,1690,0,1,2,3,3,3,3,1,120,1694,1691,1690,1,3,2,3,3,3,3,1,120,1693,1695,1688,0,1,2,4,4,4,4,1,120,1695,1690,1688,1,3,2,4,4,4,4,1,120,1689,1691,1692,0,1,2,5,5,5,5,1,120,1691,1694,1692,1,3,2,5,5,5,5,1,120,1696,1698,1697,0,1,2,0,0,0,0,1,120,1698,1699,1697,1,3,2,0,0,0,0,1,120,1700,1702,1701,0,1,2,1,1,1,1,1,120,1702,1703,1701,1,3,2,1,1,1,1,1,120,1700,1701,1697,0,1,2,2,2,2,2,1,120,1701,1696,1697,1,3,2,2,2,2,2,1,120,1703,1702,1698,0,1,2,3,3,3,3,1,120,1702,1699,1698,1,3,2,3,3,3,3,1,120,1701,1703,1696,0,1,2,4,4,4,4,1,120,1703,1698,1696,1,3,2,4,4,4,4,1,120,1697,1699,1700,0,1,2,5,5,5,5,1,120,1699,1702,1700,1,3,2,5,5,5,5,1,120,1704,1706,1705,0,1,2,0,0,0,0,1,120,1706,1707,1705,1,3,2,0,0,0,0,1,120,1708,1710,1709,0,1,2,1,1,1,1,1,120,1710,1711,1709,1,3,2,1,1,1,1,1,120,1708,1709,1705,0,1,2,2,2,2,2,1,120,1709,1704,1705,1,3,2,2,2,2,2,1,120,1711,1710,1706,0,1,2,3,3,3,3,1,120,1710,1707,1706,1,3,2,3,3,3,3,1,120,1709,1711,1704,0,1,2,4,4,4,4,1,120,1711,1706,1704,1,3,2,4,4,4,4,1,120,1705,1707,1708,0,1,2,5,5,5,5,1,120,1707,1710,1708,1,3,2,5,5,5,5,1,120,1712,1714,1713,0,1,2,0,0,0,0,1,120,1714,1715,1713,1,3,2,0,0,0,0,1,120,1716,1718,1717,0,1,2,1,1,1,1,1,120,1718,1719,1717,1,3,2,1,1,1,1,1,120,1716,1717,1713,0,1,2,2,2,2,2,1,120,1717,1712,1713,1,3,2,2,2,2,2,1,120,1719,1718,1714,0,1,2,3,3,3,3,1,120,1718,1715,1714,1,3,2,3,3,3,3,1,120,1717,1719,1712,0,1,2,4,4,4,4,1,120,1719,1714,1712,1,3,2,4,4,4,4,1,120,1713,1715,1716,0,1,2,5,5,5,5,1,120,1715,1718,1716,1,3,2,5,5,5,5,1,120,1720,1722,1721,0,1,2,0,0,0,0,1,120,1722,1723,1721,1,3,2,0,0,0,0,1,120,1724,1726,1725,0,1,2,1,1,1,1,1,120,1726,1727,1725,1,3,2,1,1,1,1,1,120,1724,1725,1721,0,1,2,2,2,2,2,1,120,1725,1720,1721,1,3,2,2,2,2,2,1,120,1727,1726,1722,0,1,2,3,3,3,3,1,120,1726,1723,1722,1,3,2,3,3,3,3,1,120,1725,1727,1720,0,1,2,4,4,4,4,1,120,1727,1722,1720,1,3,2,4,4,4,4,1,120,1721,1723,1724,0,1,2,5,5,5,5,1,120,1723,1726,1724,1,3,2,5,5,5,5,1,120,1728,1730,1729,0,1,2,0,0,0,0,1,120,1730,1731,1729,1,3,2,0,0,0,0,1,120,1732,1734,1733,0,1,2,1,1,1,1,1,120,1734,1735,1733,1,3,2,1,1,1,1,1,120,1732,1733,1729,0,1,2,2,2,2,2,1,120,1733,1728,1729,1,3,2,2,2,2,2,1,120,1735,1734,1730,0,1,2,3,3,3,3,1,120,1734,1731,1730,1,3,2,3,3,3,3,1,120,1733,1735,1728,0,1,2,4,4,4,4,1,120,1735,1730,1728,1,3,2,4,4,4,4,1,120,1729,1731,1732,0,1,2,5,5,5,5,1,120,1731,1734,1732,1,3,2,5,5,5,5,1,120,1736,1738,1737,0,1,2,0,0,0,0,1,120,1738,1739,1737,1,3,2,0,0,0,0,1,120,1740,1742,1741,0,1,2,1,1,1,1,1,120,1742,1743,1741,1,3,2,1,1,1,1,1,120,1740,1741,1737,0,1,2,2,2,2,2,1,120,1741,1736,1737,1,3,2,2,2,2,2,1,120,1743,1742,1738,0,1,2,3,3,3,3,1,120,1742,1739,1738,1,3,2,3,3,3,3,1,120,1741,1743,1736,0,1,2,4,4,4,4,1,120,1743,1738,1736,1,3,2,4,4,4,4,1,120,1737,1739,1740,0,1,2,5,5,5,5,1,120,1739,1742,1740,1,3,2,5,5,5,5,1,120,1744,1746,1745,0,1,2,0,0,0,0,1,120,1746,1747,1745,1,3,2,0,0,0,0,1,120,1748,1750,1749,0,1,2,1,1,1,1,1,120,1750,1751,1749,1,3,2,1,1,1,1,1,120,1748,1749,1745,0,1,2,2,2,2,2,1,120,1749,1744,1745,1,3,2,2,2,2,2,1,120,1751,1750,1746,0,1,2,3,3,3,3,1,120,1750,1747,1746,1,3,2,3,3,3,3,1,120,1749,1751,1744,0,1,2,4,4,4,4,1,120,1751,1746,1744,1,3,2,4,4,4,4,1,120,1745,1747,1748,0,1,2,5,5,5,5,1,120,1747,1750,1748,1,3,2,5,5,5,5,1,120,1752,1754,1753,0,1,2,0,0,0,0,1,120,1754,1755,1753,1,3,2,0,0,0,0,1,120,1756,1758,1757,0,1,2,1,1,1,1,1,120,1758,1759,1757,1,3,2,1,1,1,1,1,120,1756,1757,1753,0,1,2,2,2,2,2,1,120,1757,1752,1753,1,3,2,2,2,2,2,1,120,1759,1758,1754,0,1,2,3,3,3,3,1,120,1758,1755,1754,1,3,2,3,3,3,3,1,120,1757,1759,1752,0,1,2,4,4,4,4,1,120,1759,1754,1752,1,3,2,4,4,4,4,1,120,1753,1755,1756,0,1,2,5,5,5,5,1,120,1755,1758,1756,1,3,2,5,5,5,5,1,120,1760,1762,1761,0,1,2,0,0,0,0,1,120,1762,1763,1761,1,3,2,0,0,0,0,1,120,1764,1766,1765,0,1,2,1,1,1,1,1,120,1766,1767,1765,1,3,2,1,1,1,1,1,120,1764,1765,1761,0,1,2,2,2,2,2,1,120,1765,1760,1761,1,3,2,2,2,2,2,1,120,1767,1766,1762,0,1,2,3,3,3,3,1,120,1766,1763,1762,1,3,2,3,3,3,3,1,120,1765,1767,1760,0,1,2,4,4,4,4,1,120,1767,1762,1760,1,3,2,4,4,4,4,1,120,1761,1763,1764,0,1,2,5,5,5,5,1,120,1763,1766,1764,1,3,2,5,5,5,5,1,120,1768,1770,1769,0,1,2,0,0,0,0,1,120,1770,1771,1769,1,3,2,0,0,0,0,1,120,1772,1774,1773,0,1,2,1,1,1,1,1,120,1774,1775,1773,1,3,2,1,1,1,1,1,120,1772,1773,1769,0,1,2,2,2,2,2,1,120,1773,1768,1769,1,3,2,2,2,2,2,1,120,1775,1774,1770,0,1,2,3,3,3,3,1,120,1774,1771,1770,1,3,2,3,3,3,3,1,120,1773,1775,1768,0,1,2,4,4,4,4,1,120,1775,1770,1768,1,3,2,4,4,4,4,1,120,1769,1771,1772,0,1,2,5,5,5,5,1,120,1771,1774,1772,1,3,2,5,5,5,5,1,120,1776,1778,1777,0,1,2,0,0,0,0,1,120,1778,1779,1777,1,3,2,0,0,0,0,1,120,1780,1782,1781,0,1,2,1,1,1,1,1,120,1782,1783,1781,1,3,2,1,1,1,1,1,120,1780,1781,1777,0,1,2,2,2,2,2,1,120,1781,1776,1777,1,3,2,2,2,2,2,1,120,1783,1782,1778,0,1,2,3,3,3,3,1,120,1782,1779,1778,1,3,2,3,3,3,3,1,120,1781,1783,1776,0,1,2,4,4,4,4,1,120,1783,1778,1776,1,3,2,4,4,4,4,1,120,1777,1779,1780,0,1,2,5,5,5,5,1,120,1779,1782,1780,1,3,2,5,5,5,5,1,120,1784,1786,1785,0,1,2,0,0,0,0,1,120,1786,1787,1785,1,3,2,0,0,0,0,1,120,1788,1790,1789,0,1,2,1,1,1,1,1,120,1790,1791,1789,1,3,2,1,1,1,1,1,120,1788,1789,1785,0,1,2,2,2,2,2,1,120,1789,1784,1785,1,3,2,2,2,2,2,1,120,1791,1790,1786,0,1,2,3,3,3,3,1,120,1790,1787,1786,1,3,2,3,3,3,3,1,120,1789,1791,1784,0,1,2,4,4,4,4,1,120,1791,1786,1784,1,3,2,4,4,4,4,1,120,1785,1787,1788,0,1,2,5,5,5,5,1,120,1787,1790,1788,1,3,2,5,5,5,5,1,120,1792,1794,1793,0,1,2,0,0,0,0,1,120,1794,1795,1793,1,3,2,0,0,0,0,1,120,1796,1798,1797,0,1,2,1,1,1,1,1,120,1798,1799,1797,1,3,2,1,1,1,1,1,120,1796,1797,1793,0,1,2,2,2,2,2,1,120,1797,1792,1793,1,3,2,2,2,2,2,1,120,1799,1798,1794,0,1,2,3,3,3,3,1,120,1798,1795,1794,1,3,2,3,3,3,3,1,120,1797,1799,1792,0,1,2,4,4,4,4,1,120,1799,1794,1792,1,3,2,4,4,4,4,1,120,1793,1795,1796,0,1,2,5,5,5,5,1,120,1795,1798,1796,1,3,2,5,5,5,5,1,120,1800,1802,1801,0,1,2,0,0,0,0,1,120,1802,1803,1801,1,3,2,0,0,0,0,1,120,1804,1806,1805,0,1,2,1,1,1,1,1,120,1806,1807,1805,1,3,2,1,1,1,1,1,120,1804,1805,1801,0,1,2,2,2,2,2,1,120,1805,1800,1801,1,3,2,2,2,2,2,1,120,1807,1806,1802,0,1,2,3,3,3,3,1,120,1806,1803,1802,1,3,2,3,3,3,3,1,120,1805,1807,1800,0,1,2,4,4,4,4,1,120,1807,1802,1800,1,3,2,4,4,4,4,1,120,1801,1803,1804,0,1,2,5,5,5,5,1,120,1803,1806,1804,1,3,2,5,5,5,5,1,120,1808,1810,1809,0,1,2,0,0,0,0,0,120,1810,1811,1809,1,3,2,0,0,0,0,0,120,1812,1814,1813,0,1,2,1,1,1,1,0,120,1814,1815,1813,1,3,2,1,1,1,1,0,120,1812,1813,1809,0,1,2,2,2,2,2,0,120,1813,1808,1809,1,3,2,2,2,2,2,0,120,1815,1814,1810,0,1,2,3,3,3,3,0,120,1814,1811,1810,1,3,2,3,3,3,3,0,120,1813,1815,1808,0,1,2,4,4,4,4,0,120,1815,1810,1808,1,3,2,4,4,4,4,0,120,1809,1811,1812,0,1,2,5,5,5,5,0,120,1811,1814,1812,1,3,2,5,5,5,5,0,120,1816,1818,1817,0,1,2,0,0,0,0,2,120,1818,1819,1817,1,3,2,0,0,0,0,2,120,1820,1822,1821,0,1,2,1,1,1,1,2,120,1822,1823,1821,1,3,2,1,1,1,1,2,120,1820,1821,1817,0,1,2,2,2,2,2,2,120,1821,1816,1817,1,3,2,2,2,2,2,2,120,1823,1822,1818,0,1,2,3,3,3,3,2,120,1822,1819,1818,1,3,2,3,3,3,3,2,120,1821,1823,1816,0,1,2,4,4,4,4,2,120,1823,1818,1816,1,3,2,4,4,4,4,2,120,1817,1819,1820,0,1,2,5,5,5,5,2,120,1819,1822,1820,1,3,2,5,5,5,5,2,120,1824,1826,1825,0,1,2,0,0,0,0,2,120,1826,1827,1825,1,3,2,0,0,0,0,2,120,1828,1830,1829,0,1,2,1,1,1,1,2,120,1830,1831,1829,1,3,2,1,1,1,1,2,120,1828,1829,1825,0,1,2,2,2,2,2,2,120,1829,1824,1825,1,3,2,2,2,2,2,2,120,1831,1830,1826,0,1,2,3,3,3,3,2,120,1830,1827,1826,1,3,2,3,3,3,3,2,120,1829,1831,1824,0,1,2,4,4,4,4,2,120,1831,1826,1824,1,3,2,4,4,4,4,2,120,1825,1827,1828,0,1,2,5,5,5,5,2,120,1827,1830,1828,1,3,2,5,5,5,5,2,120,1832,1834,1833,0,1,2,0,0,0,0,2,120,1834,1835,1833,1,3,2,0,0,0,0,2,120,1836,1838,1837,0,1,2,1,1,1,1,2,120,1838,1839,1837,1,3,2,1,1,1,1,2,120,1836,1837,1833,0,1,2,2,2,2,2,2,120,1837,1832,1833,1,3,2,2,2,2,2,2,120,1839,1838,1834,0,1,2,3,3,3,3,2,120,1838,1835,1834,1,3,2,3,3,3,3,2,120,1837,1839,1832,0,1,2,4,4,4,4,2,120,1839,1834,1832,1,3,2,4,4,4,4,2,120,1833,1835,1836,0,1,2,5,5,5,5,2,120,1835,1838,1836,1,3,2,5,5,5,5,2,120,1840,1842,1841,0,1,2,0,0,0,0,2,120,1842,1843,1841,1,3,2,0,0,0,0,2,120,1844,1846,1845,0,1,2,1,1,1,1,2,120,1846,1847,1845,1,3,2,1,1,1,1,2,120,1844,1845,1841,0,1,2,2,2,2,2,2,120,1845,1840,1841,1,3,2,2,2,2,2,2,120,1847,1846,1842,0,1,2,3,3,3,3,2,120,1846,1843,1842,1,3,2,3,3,3,3,2,120,1845,1847,1840,0,1,2,4,4,4,4,2,120,1847,1842,1840,1,3,2,4,4,4,4,2,120,1841,1843,1844,0,1,2,5,5,5,5,2,120,1843,1846,1844,1,3,2,5,5,5,5,2,120,1848,1850,1849,0,1,2,0,0,0,0,1,120,1850,1851,1849,1,3,2,0,0,0,0,1,120,1852,1854,1853,0,1,2,1,1,1,1,1,120,1854,1855,1853,1,3,2,1,1,1,1,1,120,1852,1853,1849,0,1,2,2,2,2,2,1,120,1853,1848,1849,1,3,2,2,2,2,2,1,120,1855,1854,1850,0,1,2,3,3,3,3,1,120,1854,1851,1850,1,3,2,3,3,3,3,1,120,1853,1855,1848,0,1,2,4,4,4,4,1,120,1855,1850,1848,1,3,2,4,4,4,4,1,120,1849,1851,1852,0,1,2,5,5,5,5,1,120,1851,1854,1852,1,3,2,5,5,5,5,1,120,1856,1858,1857,0,1,2,0,0,0,0,1,120,1858,1859,1857,1,3,2,0,0,0,0,1,120,1860,1862,1861,0,1,2,1,1,1,1,1,120,1862,1863,1861,1,3,2,1,1,1,1,1,120,1860,1861,1857,0,1,2,2,2,2,2,1,120,1861,1856,1857,1,3,2,2,2,2,2,1,120,1863,1862,1858,0,1,2,3,3,3,3,1,120,1862,1859,1858,1,3,2,3,3,3,3,1,120,1861,1863,1856,0,1,2,4,4,4,4,1,120,1863,1858,1856,1,3,2,4,4,4,4,1,120,1857,1859,1860,0,1,2,5,5,5,5,1,120,1859,1862,1860,1,3,2,5,5,5,5,1,120,1864,1866,1865,0,1,2,0,0,0,0,1,120,1866,1867,1865,1,3,2,0,0,0,0,1,120,1868,1870,1869,0,1,2,1,1,1,1,1,120,1870,1871,1869,1,3,2,1,1,1,1,1,120,1868,1869,1865,0,1,2,2,2,2,2,1,120,1869,1864,1865,1,3,2,2,2,2,2,1,120,1871,1870,1866,0,1,2,3,3,3,3,1,120,1870,1867,1866,1,3,2,3,3,3,3,1,120,1869,1871,1864,0,1,2,4,4,4,4,1,120,1871,1866,1864,1,3,2,4,4,4,4,1,120,1865,1867,1868,0,1,2,5,5,5,5,1,120,1867,1870,1868,1,3,2,5,5,5,5,1,120,1872,1874,1873,0,1,2,0,0,0,0,1,120,1874,1875,1873,1,3,2,0,0,0,0,1,120,1876,1878,1877,0,1,2,1,1,1,1,1,120,1878,1879,1877,1,3,2,1,1,1,1,1,120,1876,1877,1873,0,1,2,2,2,2,2,1,120,1877,1872,1873,1,3,2,2,2,2,2,1,120,1879,1878,1874,0,1,2,3,3,3,3,1,120,1878,1875,1874,1,3,2,3,3,3,3,1,120,1877,1879,1872,0,1,2,4,4,4,4,1,120,1879,1874,1872,1,3,2,4,4,4,4,1,120,1873,1875,1876,0,1,2,5,5,5,5,1,120,1875,1878,1876,1,3,2,5,5,5,5,1,120,1880,1882,1881,0,1,2,0,0,0,0,1,120,1882,1883,1881,1,3,2,0,0,0,0,1,120,1884,1886,1885,0,1,2,1,1,1,1,1,120,1886,1887,1885,1,3,2,1,1,1,1,1,120,1884,1885,1881,0,1,2,2,2,2,2,1,120,1885,1880,1881,1,3,2,2,2,2,2,1,120,1887,1886,1882,0,1,2,3,3,3,3,1,120,1886,1883,1882,1,3,2,3,3,3,3,1,120,1885,1887,1880,0,1,2,4,4,4,4,1,120,1887,1882,1880,1,3,2,4,4,4,4,1,120,1881,1883,1884,0,1,2,5,5,5,5,1,120,1883,1886,1884,1,3,2,5,5,5,5,1,120,1888,1890,1889,0,1,2,0,0,0,0,1,120,1890,1891,1889,1,3,2,0,0,0,0,1,120,1892,1894,1893,0,1,2,1,1,1,1,1,120,1894,1895,1893,1,3,2,1,1,1,1,1,120,1892,1893,1889,0,1,2,2,2,2,2,1,120,1893,1888,1889,1,3,2,2,2,2,2,1,120,1895,1894,1890,0,1,2,3,3,3,3,1,120,1894,1891,1890,1,3,2,3,3,3,3,1,120,1893,1895,1888,0,1,2,4,4,4,4,1,120,1895,1890,1888,1,3,2,4,4,4,4,1,120,1889,1891,1892,0,1,2,5,5,5,5,1,120,1891,1894,1892,1,3,2,5,5,5,5,1,120,1896,1898,1897,0,1,2,0,0,0,0,1,120,1898,1899,1897,1,3,2,0,0,0,0,1,120,1900,1902,1901,0,1,2,1,1,1,1,1,120,1902,1903,1901,1,3,2,1,1,1,1,1,120,1900,1901,1897,0,1,2,2,2,2,2,1,120,1901,1896,1897,1,3,2,2,2,2,2,1,120,1903,1902,1898,0,1,2,3,3,3,3,1,120,1902,1899,1898,1,3,2,3,3,3,3,1,120,1901,1903,1896,0,1,2,4,4,4,4,1,120,1903,1898,1896,1,3,2,4,4,4,4,1,120,1897,1899,1900,0,1,2,5,5,5,5,1,120,1899,1902,1900,1,3,2,5,5,5,5,1,120,1904,1906,1905,0,1,2,0,0,0,0,1,120,1906,1907,1905,1,3,2,0,0,0,0,1,120,1908,1910,1909,0,1,2,1,1,1,1,1,120,1910,1911,1909,1,3,2,1,1,1,1,1,120,1908,1909,1905,0,1,2,2,2,2,2,1,120,1909,1904,1905,1,3,2,2,2,2,2,1,120,1911,1910,1906,0,1,2,3,3,3,3,1,120,1910,1907,1906,1,3,2,3,3,3,3,1,120,1909,1911,1904,0,1,2,4,4,4,4,1,120,1911,1906,1904,1,3,2,4,4,4,4,1,120,1905,1907,1908,0,1,2,5,5,5,5,1,120,1907,1910,1908,1,3,2,5,5,5,5,1,120,1912,1914,1913,0,1,2,0,0,0,0,1,120,1914,1915,1913,1,3,2,0,0,0,0,1,120,1916,1918,1917,0,1,2,1,1,1,1,1,120,1918,1919,1917,1,3,2,1,1,1,1,1,120,1916,1917,1913,0,1,2,2,2,2,2,1,120,1917,1912,1913,1,3,2,2,2,2,2,1,120,1919,1918,1914,0,1,2,3,3,3,3,1,120,1918,1915,1914,1,3,2,3,3,3,3,1,120,1917,1919,1912,0,1,2,4,4,4,4,1,120,1919,1914,1912,1,3,2,4,4,4,4,1,120,1913,1915,1916,0,1,2,5,5,5,5,1,120,1915,1918,1916,1,3,2,5,5,5,5,1,120,1920,1922,1921,0,1,2,0,0,0,0,1,120,1922,1923,1921,1,3,2,0,0,0,0,1,120,1924,1926,1925,0,1,2,1,1,1,1,1,120,1926,1927,1925,1,3,2,1,1,1,1,1,120,1924,1925,1921,0,1,2,2,2,2,2,1,120,1925,1920,1921,1,3,2,2,2,2,2,1,120,1927,1926,1922,0,1,2,3,3,3,3,1,120,1926,1923,1922,1,3,2,3,3,3,3,1,120,1925,1927,1920,0,1,2,4,4,4,4,1,120,1927,1922,1920,1,3,2,4,4,4,4,1,120,1921,1923,1924,0,1,2,5,5,5,5,1,120,1923,1926,1924,1,3,2,5,5,5,5,1,120,1928,1930,1929,0,1,2,0,0,0,0,1,120,1930,1931,1929,1,3,2,0,0,0,0,1,120,1932,1934,1933,0,1,2,1,1,1,1,1,120,1934,1935,1933,1,3,2,1,1,1,1,1,120,1932,1933,1929,0,1,2,2,2,2,2,1,120,1933,1928,1929,1,3,2,2,2,2,2,1,120,1935,1934,1930,0,1,2,3,3,3,3,1,120,1934,1931,1930,1,3,2,3,3,3,3,1,120,1933,1935,1928,0,1,2,4,4,4,4,1,120,1935,1930,1928,1,3,2,4,4,4,4,1,120,1929,1931,1932,0,1,2,5,5,5,5,1,120,1931,1934,1932,1,3,2,5,5,5,5,1,120,1936,1938,1937,0,1,2,0,0,0,0,1,120,1938,1939,1937,1,3,2,0,0,0,0,1,120,1940,1942,1941,0,1,2,1,1,1,1,1,120,1942,1943,1941,1,3,2,1,1,1,1,1,120,1940,1941,1937,0,1,2,2,2,2,2,1,120,1941,1936,1937,1,3,2,2,2,2,2,1,120,1943,1942,1938,0,1,2,3,3,3,3,1,120,1942,1939,1938,1,3,2,3,3,3,3,1,120,1941,1943,1936,0,1,2,4,4,4,4,1,120,1943,1938,1936,1,3,2,4,4,4,4,1,120,1937,1939,1940,0,1,2,5,5,5,5,1,120,1939,1942,1940,1,3,2,5,5,5,5,1,120,1944,1946,1945,0,1,2,0,0,0,0,0,120,1946,1947,1945,1,3,2,0,0,0,0,0,120,1948,1950,1949,0,1,2,1,1,1,1,0,120,1950,1951,1949,1,3,2,1,1,1,1,0,120,1948,1949,1945,0,1,2,2,2,2,2,0,120,1949,1944,1945,1,3,2,2,2,2,2,0,120,1951,1950,1946,0,1,2,3,3,3,3,0,120,1950,1947,1946,1,3,2,3,3,3,3,0,120,1949,1951,1944,0,1,2,4,4,4,4,0,120,1951,1946,1944,1,3,2,4,4,4,4,0,120,1945,1947,1948,0,1,2,5,5,5,5,0,120,1947,1950,1948,1,3,2,5,5,5,5,0,120,1952,1954,1953,0,1,2,0,0,0,0,0,120,1954,1955,1953,1,3,2,0,0,0,0,0,120,1956,1958,1957,0,1,2,1,1,1,1,0,120,1958,1959,1957,1,3,2,1,1,1,1,0,120,1956,1957,1953,0,1,2,2,2,2,2,0,120,1957,1952,1953,1,3,2,2,2,2,2,0,120,1959,1958,1954,0,1,2,3,3,3,3,0,120,1958,1955,1954,1,3,2,3,3,3,3,0,120,1957,1959,1952,0,1,2,4,4,4,4,0,120,1959,1954,1952,1,3,2,4,4,4,4,0,120,1953,1955,1956,0,1,2,5,5,5,5,0,120,1955,1958,1956,1,3,2,5,5,5,5,0,120,1960,1962,1961,0,1,2,0,0,0,0,0,120,1962,1963,1961,1,3,2,0,0,0,0,0,120,1964,1966,1965,0,1,2,1,1,1,1,0,120,1966,1967,1965,1,3,2,1,1,1,1,0,120,1964,1965,1961,0,1,2,2,2,2,2,0,120,1965,1960,1961,1,3,2,2,2,2,2,0,120,1967,1966,1962,0,1,2,3,3,3,3,0,120,1966,1963,1962,1,3,2,3,3,3,3,0,120,1965,1967,1960,0,1,2,4,4,4,4,0,120,1967,1962,1960,1,3,2,4,4,4,4,0,120,1961,1963,1964,0,1,2,5,5,5,5,0,120,1963,1966,1964,1,3,2,5,5,5,5,0,120,1968,1970,1969,0,1,2,0,0,0,0,0,120,1970,1971,1969,1,3,2,0,0,0,0,0,120,1972,1974,1973,0,1,2,1,1,1,1,0,120,1974,1975,1973,1,3,2,1,1,1,1,0,120,1972,1973,1969,0,1,2,2,2,2,2,0,120,1973,1968,1969,1,3,2,2,2,2,2,0,120,1975,1974,1970,0,1,2,3,3,3,3,0,120,1974,1971,1970,1,3,2,3,3,3,3,0,120,1973,1975,1968,0,1,2,4,4,4,4,0,120,1975,1970,1968,1,3,2,4,4,4,4,0,120,1969,1971,1972,0,1,2,5,5,5,5,0,120,1971,1974,1972,1,3,2,5,5,5,5,0,120,1976,1978,1977,0,1,2,0,0,0,0,0,120,1978,1979,1977,1,3,2,0,0,0,0,0,120,1980,1982,1981,0,1,2,1,1,1,1,0,120,1982,1983,1981,1,3,2,1,1,1,1,0,120,1980,1981,1977,0,1,2,2,2,2,2,0,120,1981,1976,1977,1,3,2,2,2,2,2,0,120,1983,1982,1978,0,1,2,3,3,3,3,0,120,1982,1979,1978,1,3,2,3,3,3,3,0,120,1981,1983,1976,0,1,2,4,4,4,4,0,120,1983,1978,1976,1,3,2,4,4,4,4,0,120,1977,1979,1980,0,1,2,5,5,5,5,0,120,1979,1982,1980,1,3,2,5,5,5,5,0,120,1984,1986,1985,0,1,2,0,0,0,0,0,120,1986,1987,1985,1,3,2,0,0,0,0,0,120,1988,1990,1989,0,1,2,1,1,1,1,0,120,1990,1991,1989,1,3,2,1,1,1,1,0,120,1988,1989,1985,0,1,2,2,2,2,2,0,120,1989,1984,1985,1,3,2,2,2,2,2,0,120,1991,1990,1986,0,1,2,3,3,3,3,0,120,1990,1987,1986,1,3,2,3,3,3,3,0,120,1989,1991,1984,0,1,2,4,4,4,4,0,120,1991,1986,1984,1,3,2,4,4,4,4,0,120,1985,1987,1988,0,1,2,5,5,5,5,0,120,1987,1990,1988,1,3,2,5,5,5,5,0,120,1992,1994,1993,0,1,2,0,0,0,0,0,120,1994,1995,1993,1,3,2,0,0,0,0,0,120,1996,1998,1997,0,1,2,1,1,1,1,0,120,1998,1999,1997,1,3,2,1,1,1,1,0,120,1996,1997,1993,0,1,2,2,2,2,2,0,120,1997,1992,1993,1,3,2,2,2,2,2,0,120,1999,1998,1994,0,1,2,3,3,3,3,0,120,1998,1995,1994,1,3,2,3,3,3,3,0,120,1997,1999,1992,0,1,2,4,4,4,4,0,120,1999,1994,1992,1,3,2,4,4,4,4,0,120,1993,1995,1996,0,1,2,5,5,5,5,0,120,1995,1998,1996,1,3,2,5,5,5,5,0,120,2000,2002,2001,0,1,2,0,0,0,0,0,120,2002,2003,2001,1,3,2,0,0,0,0,0,120,2004,2006,2005,0,1,2,1,1,1,1,0,120,2006,2007,2005,1,3,2,1,1,1,1,0,120,2004,2005,2001,0,1,2,2,2,2,2,0,120,2005,2000,2001,1,3,2,2,2,2,2,0,120,2007,2006,2002,0,1,2,3,3,3,3,0,120,2006,2003,2002,1,3,2,3,3,3,3,0,120,2005,2007,2000,0,1,2,4,4,4,4,0,120,2007,2002,2000,1,3,2,4,4,4,4,0,120,2001,2003,2004,0,1,2,5,5,5,5,0,120,2003,2006,2004,1,3,2,5,5,5,5,0,120,2008,2010,2009,0,1,2,0,0,0,0,1,120,2010,2011,2009,1,3,2,0,0,0,0,1,120,2012,2014,2013,0,1,2,1,1,1,1,1,120,2014,2015,2013,1,3,2,1,1,1,1,1,120,2012,2013,2009,0,1,2,2,2,2,2,1,120,2013,2008,2009,1,3,2,2,2,2,2,1,120,2015,2014,2010,0,1,2,3,3,3,3,1,120,2014,2011,2010,1,3,2,3,3,3,3,1,120,2013,2015,2008,0,1,2,4,4,4,4,1,120,2015,2010,2008,1,3,2,4,4,4,4,1,120,2009,2011,2012,0,1,2,5,5,5,5,1,120,2011,2014,2012,1,3,2,5,5,5,5,1,120,2016,2018,2017,0,1,2,0,0,0,0,1,120,2018,2019,2017,1,3,2,0,0,0,0,1,120,2020,2022,2021,0,1,2,1,1,1,1,1,120,2022,2023,2021,1,3,2,1,1,1,1,1,120,2020,2021,2017,0,1,2,2,2,2,2,1,120,2021,2016,2017,1,3,2,2,2,2,2,1,120,2023,2022,2018,0,1,2,3,3,3,3,1,120,2022,2019,2018,1,3,2,3,3,3,3,1,120,2021,2023,2016,0,1,2,4,4,4,4,1,120,2023,2018,2016,1,3,2,4,4,4,4,1,120,2017,2019,2020,0,1,2,5,5,5,5,1,120,2019,2022,2020,1,3,2,5,5,5,5,1,120,2024,2026,2025,0,1,2,0,0,0,0,1,120,2026,2027,2025,1,3,2,0,0,0,0,1,120,2028,2030,2029,0,1,2,1,1,1,1,1,120,2030,2031,2029,1,3,2,1,1,1,1,1,120,2028,2029,2025,0,1,2,2,2,2,2,1,120,2029,2024,2025,1,3,2,2,2,2,2,1,120,2031,2030,2026,0,1,2,3,3,3,3,1,120,2030,2027,2026,1,3,2,3,3,3,3,1,120,2029,2031,2024,0,1,2,4,4,4,4,1,120,2031,2026,2024,1,3,2,4,4,4,4,1,120,2025,2027,2028,0,1,2,5,5,5,5,1,120,2027,2030,2028,1,3,2,5,5,5,5,1,120,2032,2034,2033,0,1,2,0,0,0,0,1,120,2034,2035,2033,1,3,2,0,0,0,0,1,120,2036,2038,2037,0,1,2,1,1,1,1,1,120,2038,2039,2037,1,3,2,1,1,1,1,1,120,2036,2037,2033,0,1,2,2,2,2,2,1,120,2037,2032,2033,1,3,2,2,2,2,2,1,120,2039,2038,2034,0,1,2,3,3,3,3,1,120,2038,2035,2034,1,3,2,3,3,3,3,1,120,2037,2039,2032,0,1,2,4,4,4,4,1,120,2039,2034,2032,1,3,2,4,4,4,4,1,120,2033,2035,2036,0,1,2,5,5,5,5,1,120,2035,2038,2036,1,3,2,5,5,5,5,1,120,2040,2042,2041,0,1,2,0,0,0,0,1,120,2042,2043,2041,1,3,2,0,0,0,0,1,120,2044,2046,2045,0,1,2,1,1,1,1,1,120,2046,2047,2045,1,3,2,1,1,1,1,1,120,2044,2045,2041,0,1,2,2,2,2,2,1,120,2045,2040,2041,1,3,2,2,2,2,2,1,120,2047,2046,2042,0,1,2,3,3,3,3,1,120,2046,2043,2042,1,3,2,3,3,3,3,1,120,2045,2047,2040,0,1,2,4,4,4,4,1,120,2047,2042,2040,1,3,2,4,4,4,4,1,120,2041,2043,2044,0,1,2,5,5,5,5,1,120,2043,2046,2044,1,3,2,5,5,5,5,1,120,2048,2050,2049,0,1,2,0,0,0,0,1,120,2050,2051,2049,1,3,2,0,0,0,0,1,120,2052,2054,2053,0,1,2,1,1,1,1,1,120,2054,2055,2053,1,3,2,1,1,1,1,1,120,2052,2053,2049,0,1,2,2,2,2,2,1,120,2053,2048,2049,1,3,2,2,2,2,2,1,120,2055,2054,2050,0,1,2,3,3,3,3,1,120,2054,2051,2050,1,3,2,3,3,3,3,1,120,2053,2055,2048,0,1,2,4,4,4,4,1,120,2055,2050,2048,1,3,2,4,4,4,4,1,120,2049,2051,2052,0,1,2,5,5,5,5,1,120,2051,2054,2052,1,3,2,5,5,5,5,1,120,2056,2058,2057,0,1,2,0,0,0,0,1,120,2058,2059,2057,1,3,2,0,0,0,0,1,120,2060,2062,2061,0,1,2,1,1,1,1,1,120,2062,2063,2061,1,3,2,1,1,1,1,1,120,2060,2061,2057,0,1,2,2,2,2,2,1,120,2061,2056,2057,1,3,2,2,2,2,2,1,120,2063,2062,2058,0,1,2,3,3,3,3,1,120,2062,2059,2058,1,3,2,3,3,3,3,1,120,2061,2063,2056,0,1,2,4,4,4,4,1,120,2063,2058,2056,1,3,2,4,4,4,4,1,120,2057,2059,2060,0,1,2,5,5,5,5,1,120,2059,2062,2060,1,3,2,5,5,5,5,1,120,2064,2066,2065,0,1,2,0,0,0,0,1,120,2066,2067,2065,1,3,2,0,0,0,0,1,120,2068,2070,2069,0,1,2,1,1,1,1,1,120,2070,2071,2069,1,3,2,1,1,1,1,1,120,2068,2069,2065,0,1,2,2,2,2,2,1,120,2069,2064,2065,1,3,2,2,2,2,2,1,120,2071,2070,2066,0,1,2,3,3,3,3,1,120,2070,2067,2066,1,3,2,3,3,3,3,1,120,2069,2071,2064,0,1,2,4,4,4,4,1,120,2071,2066,2064,1,3,2,4,4,4,4,1,120,2065,2067,2068,0,1,2,5,5,5,5,1,120,2067,2070,2068,1,3,2,5,5,5,5,1,120,2072,2074,2073,0,1,2,0,0,0,0,1,120,2074,2075,2073,1,3,2,0,0,0,0,1,120,2076,2078,2077,0,1,2,1,1,1,1,1,120,2078,2079,2077,1,3,2,1,1,1,1,1,120,2076,2077,2073,0,1,2,2,2,2,2,1,120,2077,2072,2073,1,3,2,2,2,2,2,1,120,2079,2078,2074,0,1,2,3,3,3,3,1,120,2078,2075,2074,1,3,2,3,3,3,3,1,120,2077,2079,2072,0,1,2,4,4,4,4,1,120,2079,2074,2072,1,3,2,4,4,4,4,1,120,2073,2075,2076,0,1,2,5,5,5,5,1,120,2075,2078,2076,1,3,2,5,5,5,5,1,120,2080,2082,2081,0,1,2,0,0,0,0,1,120,2082,2083,2081,1,3,2,0,0,0,0,1,120,2084,2086,2085,0,1,2,1,1,1,1,1,120,2086,2087,2085,1,3,2,1,1,1,1,1,120,2084,2085,2081,0,1,2,2,2,2,2,1,120,2085,2080,2081,1,3,2,2,2,2,2,1,120,2087,2086,2082,0,1,2,3,3,3,3,1,120,2086,2083,2082,1,3,2,3,3,3,3,1,120,2085,2087,2080,0,1,2,4,4,4,4,1,120,2087,2082,2080,1,3,2,4,4,4,4,1,120,2081,2083,2084,0,1,2,5,5,5,5,1,120,2083,2086,2084,1,3,2,5,5,5,5,1,120,2088,2090,2089,0,1,2,0,0,0,0,1,120,2090,2091,2089,1,3,2,0,0,0,0,1,120,2092,2094,2093,0,1,2,1,1,1,1,1,120,2094,2095,2093,1,3,2,1,1,1,1,1,120,2092,2093,2089,0,1,2,2,2,2,2,1,120,2093,2088,2089,1,3,2,2,2,2,2,1,120,2095,2094,2090,0,1,2,3,3,3,3,1,120,2094,2091,2090,1,3,2,3,3,3,3,1,120,2093,2095,2088,0,1,2,4,4,4,4,1,120,2095,2090,2088,1,3,2,4,4,4,4,1,120,2089,2091,2092,0,1,2,5,5,5,5,1,120,2091,2094,2092,1,3,2,5,5,5,5,1,120,2096,2098,2097,0,1,2,0,0,0,0,1,120,2098,2099,2097,1,3,2,0,0,0,0,1,120,2100,2102,2101,0,1,2,1,1,1,1,1,120,2102,2103,2101,1,3,2,1,1,1,1,1,120,2100,2101,2097,0,1,2,2,2,2,2,1,120,2101,2096,2097,1,3,2,2,2,2,2,1,120,2103,2102,2098,0,1,2,3,3,3,3,1,120,2102,2099,2098,1,3,2,3,3,3,3,1,120,2101,2103,2096,0,1,2,4,4,4,4,1,120,2103,2098,2096,1,3,2,4,4,4,4,1,120,2097,2099,2100,0,1,2,5,5,5,5,1,120,2099,2102,2100,1,3,2,5,5,5,5,1,120,2104,2106,2105,0,1,2,0,0,0,0,1,120,2106,2107,2105,1,3,2,0,0,0,0,1,120,2108,2110,2109,0,1,2,1,1,1,1,1,120,2110,2111,2109,1,3,2,1,1,1,1,1,120,2108,2109,2105,0,1,2,2,2,2,2,1,120,2109,2104,2105,1,3,2,2,2,2,2,1,120,2111,2110,2106,0,1,2,3,3,3,3,1,120,2110,2107,2106,1,3,2,3,3,3,3,1,120,2109,2111,2104,0,1,2,4,4,4,4,1,120,2111,2106,2104,1,3,2,4,4,4,4,1,120,2105,2107,2108,0,1,2,5,5,5,5,1,120,2107,2110,2108,1,3,2,5,5,5,5,1,120,2112,2114,2113,0,1,2,0,0,0,0,1,120,2114,2115,2113,1,3,2,0,0,0,0,1,120,2116,2118,2117,0,1,2,1,1,1,1,1,120,2118,2119,2117,1,3,2,1,1,1,1,1,120,2116,2117,2113,0,1,2,2,2,2,2,1,120,2117,2112,2113,1,3,2,2,2,2,2,1,120,2119,2118,2114,0,1,2,3,3,3,3,1,120,2118,2115,2114,1,3,2,3,3,3,3,1,120,2117,2119,2112,0,1,2,4,4,4,4,1,120,2119,2114,2112,1,3,2,4,4,4,4,1,120,2113,2115,2116,0,1,2,5,5,5,5,1,120,2115,2118,2116,1,3,2,5,5,5,5,1,120,2120,2122,2121,0,1,2,0,0,0,0,1,120,2122,2123,2121,1,3,2,0,0,0,0,1,120,2124,2126,2125,0,1,2,1,1,1,1,1,120,2126,2127,2125,1,3,2,1,1,1,1,1,120,2124,2125,2121,0,1,2,2,2,2,2,1,120,2125,2120,2121,1,3,2,2,2,2,2,1,120,2127,2126,2122,0,1,2,3,3,3,3,1,120,2126,2123,2122,1,3,2,3,3,3,3,1,120,2125,2127,2120,0,1,2,4,4,4,4,1,120,2127,2122,2120,1,3,2,4,4,4,4,1,120,2121,2123,2124,0,1,2,5,5,5,5,1,120,2123,2126,2124,1,3,2,5,5,5,5,1,120,2128,2130,2129,0,1,2,0,0,0,0,1,120,2130,2131,2129,1,3,2,0,0,0,0,1,120,2132,2134,2133,0,1,2,1,1,1,1,1,120,2134,2135,2133,1,3,2,1,1,1,1,1,120,2132,2133,2129,0,1,2,2,2,2,2,1,120,2133,2128,2129,1,3,2,2,2,2,2,1,120,2135,2134,2130,0,1,2,3,3,3,3,1,120,2134,2131,2130,1,3,2,3,3,3,3,1,120,2133,2135,2128,0,1,2,4,4,4,4,1,120,2135,2130,2128,1,3,2,4,4,4,4,1,120,2129,2131,2132,0,1,2,5,5,5,5,1,120,2131,2134,2132,1,3,2,5,5,5,5,1,120,2136,2138,2137,0,1,2,0,0,0,0,1,120,2138,2139,2137,1,3,2,0,0,0,0,1,120,2140,2142,2141,0,1,2,1,1,1,1,1,120,2142,2143,2141,1,3,2,1,1,1,1,1,120,2140,2141,2137,0,1,2,2,2,2,2,1,120,2141,2136,2137,1,3,2,2,2,2,2,1,120,2143,2142,2138,0,1,2,3,3,3,3,1,120,2142,2139,2138,1,3,2,3,3,3,3,1,120,2141,2143,2136,0,1,2,4,4,4,4,1,120,2143,2138,2136,1,3,2,4,4,4,4,1,120,2137,2139,2140,0,1,2,5,5,5,5,1,120,2139,2142,2140,1,3,2,5,5,5,5,1,120,2144,2146,2145,0,1,2,0,0,0,0,1,120,2146,2147,2145,1,3,2,0,0,0,0,1,120,2148,2150,2149,0,1,2,1,1,1,1,1,120,2150,2151,2149,1,3,2,1,1,1,1,1,120,2148,2149,2145,0,1,2,2,2,2,2,1,120,2149,2144,2145,1,3,2,2,2,2,2,1,120,2151,2150,2146,0,1,2,3,3,3,3,1,120,2150,2147,2146,1,3,2,3,3,3,3,1,120,2149,2151,2144,0,1,2,4,4,4,4,1,120,2151,2146,2144,1,3,2,4,4,4,4,1,120,2145,2147,2148,0,1,2,5,5,5,5,1,120,2147,2150,2148,1,3,2,5,5,5,5,1,120,2152,2154,2153,0,1,2,0,0,0,0,1,120,2154,2155,2153,1,3,2,0,0,0,0,1,120,2156,2158,2157,0,1,2,1,1,1,1,1,120,2158,2159,2157,1,3,2,1,1,1,1,1,120,2156,2157,2153,0,1,2,2,2,2,2,1,120,2157,2152,2153,1,3,2,2,2,2,2,1,120,2159,2158,2154,0,1,2,3,3,3,3,1,120,2158,2155,2154,1,3,2,3,3,3,3,1,120,2157,2159,2152,0,1,2,4,4,4,4,1,120,2159,2154,2152,1,3,2,4,4,4,4,1,120,2153,2155,2156,0,1,2,5,5,5,5,1,120,2155,2158,2156,1,3,2,5,5,5,5,1,120,2160,2162,2161,0,1,2,0,0,0,0,0,120,2162,2163,2161,1,3,2,0,0,0,0,0,120,2164,2166,2165,0,1,2,1,1,1,1,0,120,2166,2167,2165,1,3,2,1,1,1,1,0,120,2164,2165,2161,0,1,2,2,2,2,2,0,120,2165,2160,2161,1,3,2,2,2,2,2,0,120,2167,2166,2162,0,1,2,3,3,3,3,0,120,2166,2163,2162,1,3,2,3,3,3,3,0,120,2165,2167,2160,0,1,2,4,4,4,4,0,120,2167,2162,2160,1,3,2,4,4,4,4,0,120,2161,2163,2164,0,1,2,5,5,5,5,0,120,2163,2166,2164,1,3,2,5,5,5,5,0,120,2168,2170,2169,0,1,2,0,0,0,0,0,120,2170,2171,2169,1,3,2,0,0,0,0,0,120,2172,2174,2173,0,1,2,1,1,1,1,0,120,2174,2175,2173,1,3,2,1,1,1,1,0,120,2172,2173,2169,0,1,2,2,2,2,2,0,120,2173,2168,2169,1,3,2,2,2,2,2,0,120,2175,2174,2170,0,1,2,3,3,3,3,0,120,2174,2171,2170,1,3,2,3,3,3,3,0,120,2173,2175,2168,0,1,2,4,4,4,4,0,120,2175,2170,2168,1,3,2,4,4,4,4,0,120,2169,2171,2172,0,1,2,5,5,5,5,0,120,2171,2174,2172,1,3,2,5,5,5,5,0,120,2176,2178,2177,0,1,2,0,0,0,0,0,120,2178,2179,2177,1,3,2,0,0,0,0,0,120,2180,2182,2181,0,1,2,1,1,1,1,0,120,2182,2183,2181,1,3,2,1,1,1,1,0,120,2180,2181,2177,0,1,2,2,2,2,2,0,120,2181,2176,2177,1,3,2,2,2,2,2,0,120,2183,2182,2178,0,1,2,3,3,3,3,0,120,2182,2179,2178,1,3,2,3,3,3,3,0,120,2181,2183,2176,0,1,2,4,4,4,4,0,120,2183,2178,2176,1,3,2,4,4,4,4,0,120,2177,2179,2180,0,1,2,5,5,5,5,0,120,2179,2182,2180,1,3,2,5,5,5,5,0,120,2184,2186,2185,0,1,2,0,0,0,0,0,120,2186,2187,2185,1,3,2,0,0,0,0,0,120,2188,2190,2189,0,1,2,1,1,1,1,0,120,2190,2191,2189,1,3,2,1,1,1,1,0,120,2188,2189,2185,0,1,2,2,2,2,2,0,120,2189,2184,2185,1,3,2,2,2,2,2,0,120,2191,2190,2186,0,1,2,3,3,3,3,0,120,2190,2187,2186,1,3,2,3,3,3,3,0,120,2189,2191,2184,0,1,2,4,4,4,4,0,120,2191,2186,2184,1,3,2,4,4,4,4,0,120,2185,2187,2188,0,1,2,5,5,5,5,0,120,2187,2190,2188,1,3,2,5,5,5,5,0,120,2192,2194,2193,0,1,2,0,0,0,0,0,120,2194,2195,2193,1,3,2,0,0,0,0,0,120,2196,2198,2197,0,1,2,1,1,1,1,0,120,2198,2199,2197,1,3,2,1,1,1,1,0,120,2196,2197,2193,0,1,2,2,2,2,2,0,120,2197,2192,2193,1,3,2,2,2,2,2,0,120,2199,2198,2194,0,1,2,3,3,3,3,0,120,2198,2195,2194,1,3,2,3,3,3,3,0,120,2197,2199,2192,0,1,2,4,4,4,4,0,120,2199,2194,2192,1,3,2,4,4,4,4,0,120,2193,2195,2196,0,1,2,5,5,5,5,0,120,2195,2198,2196,1,3,2,5,5,5,5,0,120,2200,2202,2201,0,1,2,0,0,0,0,0,120,2202,2203,2201,1,3,2,0,0,0,0,0,120,2204,2206,2205,0,1,2,1,1,1,1,0,120,2206,2207,2205,1,3,2,1,1,1,1,0,120,2204,2205,2201,0,1,2,2,2,2,2,0,120,2205,2200,2201,1,3,2,2,2,2,2,0,120,2207,2206,2202,0,1,2,3,3,3,3,0,120,2206,2203,2202,1,3,2,3,3,3,3,0,120,2205,2207,2200,0,1,2,4,4,4,4,0,120,2207,2202,2200,1,3,2,4,4,4,4,0,120,2201,2203,2204,0,1,2,5,5,5,5,0,120,2203,2206,2204,1,3,2,5,5,5,5,0,120,2208,2210,2209,0,1,2,0,0,0,0,0,120,2210,2211,2209,1,3,2,0,0,0,0,0,120,2212,2214,2213,0,1,2,1,1,1,1,0,120,2214,2215,2213,1,3,2,1,1,1,1,0,120,2212,2213,2209,0,1,2,2,2,2,2,0,120,2213,2208,2209,1,3,2,2,2,2,2,0,120,2215,2214,2210,0,1,2,3,3,3,3,0,120,2214,2211,2210,1,3,2,3,3,3,3,0,120,2213,2215,2208,0,1,2,4,4,4,4,0,120,2215,2210,2208,1,3,2,4,4,4,4,0,120,2209,2211,2212,0,1,2,5,5,5,5,0,120,2211,2214,2212,1,3,2,5,5,5,5,0,120,2216,2218,2217,0,1,2,0,0,0,0,0,120,2218,2219,2217,1,3,2,0,0,0,0,0,120,2220,2222,2221,0,1,2,1,1,1,1,0,120,2222,2223,2221,1,3,2,1,1,1,1,0,120,2220,2221,2217,0,1,2,2,2,2,2,0,120,2221,2216,2217,1,3,2,2,2,2,2,0,120,2223,2222,2218,0,1,2,3,3,3,3,0,120,2222,2219,2218,1,3,2,3,3,3,3,0,120,2221,2223,2216,0,1,2,4,4,4,4,0,120,2223,2218,2216,1,3,2,4,4,4,4,0,120,2217,2219,2220,0,1,2,5,5,5,5,0,120,2219,2222,2220,1,3,2,5,5,5,5,0,120,2224,2226,2225,0,1,2,0,0,0,0,0,120,2226,2227,2225,1,3,2,0,0,0,0,0,120,2228,2230,2229,0,1,2,1,1,1,1,0,120,2230,2231,2229,1,3,2,1,1,1,1,0,120,2228,2229,2225,0,1,2,2,2,2,2,0,120,2229,2224,2225,1,3,2,2,2,2,2,0,120,2231,2230,2226,0,1,2,3,3,3,3,0,120,2230,2227,2226,1,3,2,3,3,3,3,0,120,2229,2231,2224,0,1,2,4,4,4,4,0,120,2231,2226,2224,1,3,2,4,4,4,4,0,120,2225,2227,2228,0,1,2,5,5,5,5,0,120,2227,2230,2228,1,3,2,5,5,5,5,0,120,2232,2234,2233,0,1,2,0,0,0,0,0,120,2234,2235,2233,1,3,2,0,0,0,0,0,120,2236,2238,2237,0,1,2,1,1,1,1,0,120,2238,2239,2237,1,3,2,1,1,1,1,0,120,2236,2237,2233,0,1,2,2,2,2,2,0,120,2237,2232,2233,1,3,2,2,2,2,2,0,120,2239,2238,2234,0,1,2,3,3,3,3,0,120,2238,2235,2234,1,3,2,3,3,3,3,0,120,2237,2239,2232,0,1,2,4,4,4,4,0,120,2239,2234,2232,1,3,2,4,4,4,4,0,120,2233,2235,2236,0,1,2,5,5,5,5,0,120,2235,2238,2236,1,3,2,5,5,5,5,0,120,2240,2242,2241,0,1,2,0,0,0,0,0,120,2242,2243,2241,1,3,2,0,0,0,0,0,120,2244,2246,2245,0,1,2,1,1,1,1,0,120,2246,2247,2245,1,3,2,1,1,1,1,0,120,2244,2245,2241,0,1,2,2,2,2,2,0,120,2245,2240,2241,1,3,2,2,2,2,2,0,120,2247,2246,2242,0,1,2,3,3,3,3,0,120,2246,2243,2242,1,3,2,3,3,3,3,0,120,2245,2247,2240,0,1,2,4,4,4,4,0,120,2247,2242,2240,1,3,2,4,4,4,4,0,120,2241,2243,2244,0,1,2,5,5,5,5,0,120,2243,2246,2244,1,3,2,5,5,5,5,0,120,2248,2250,2249,0,1,2,0,0,0,0,0,120,2250,2251,2249,1,3,2,0,0,0,0,0,120,2252,2254,2253,0,1,2,1,1,1,1,0,120,2254,2255,2253,1,3,2,1,1,1,1,0,120,2252,2253,2249,0,1,2,2,2,2,2,0,120,2253,2248,2249,1,3,2,2,2,2,2,0,120,2255,2254,2250,0,1,2,3,3,3,3,0,120,2254,2251,2250,1,3,2,3,3,3,3,0,120,2253,2255,2248,0,1,2,4,4,4,4,0,120,2255,2250,2248,1,3,2,4,4,4,4,0,120,2249,2251,2252,0,1,2,5,5,5,5,0,120,2251,2254,2252,1,3,2,5,5,5,5,0,120,2256,2258,2257,0,1,2,0,0,0,0,0,120,2258,2259,2257,1,3,2,0,0,0,0,0,120,2260,2262,2261,0,1,2,1,1,1,1,0,120,2262,2263,2261,1,3,2,1,1,1,1,0,120,2260,2261,2257,0,1,2,2,2,2,2,0,120,2261,2256,2257,1,3,2,2,2,2,2,0,120,2263,2262,2258,0,1,2,3,3,3,3,0,120,2262,2259,2258,1,3,2,3,3,3,3,0,120,2261,2263,2256,0,1,2,4,4,4,4,0,120,2263,2258,2256,1,3,2,4,4,4,4,0,120,2257,2259,2260,0,1,2,5,5,5,5,0,120,2259,2262,2260,1,3,2,5,5,5,5,0,120,2264,2266,2265,0,1,2,0,0,0,0,0,120,2266,2267,2265,1,3,2,0,0,0,0,0,120,2268,2270,2269,0,1,2,1,1,1,1,0,120,2270,2271,2269,1,3,2,1,1,1,1,0,120,2268,2269,2265,0,1,2,2,2,2,2,0,120,2269,2264,2265,1,3,2,2,2,2,2,0,120,2271,2270,2266,0,1,2,3,3,3,3,0,120,2270,2267,2266,1,3,2,3,3,3,3,0,120,2269,2271,2264,0,1,2,4,4,4,4,0,120,2271,2266,2264,1,3,2,4,4,4,4,0,120,2265,2267,2268,0,1,2,5,5,5,5,0,120,2267,2270,2268,1,3,2,5,5,5,5,0,120,2272,2274,2273,0,1,2,0,0,0,0,1,120,2274,2275,2273,1,3,2,0,0,0,0,1,120,2276,2278,2277,0,1,2,1,1,1,1,1,120,2278,2279,2277,1,3,2,1,1,1,1,1,120,2276,2277,2273,0,1,2,2,2,2,2,1,120,2277,2272,2273,1,3,2,2,2,2,2,1,120,2279,2278,2274,0,1,2,3,3,3,3,1,120,2278,2275,2274,1,3,2,3,3,3,3,1,120,2277,2279,2272,0,1,2,4,4,4,4,1,120,2279,2274,2272,1,3,2,4,4,4,4,1,120,2273,2275,2276,0,1,2,5,5,5,5,1,120,2275,2278,2276,1,3,2,5,5,5,5,1,120,2280,2282,2281,0,1,2,0,0,0,0,1,120,2282,2283,2281,1,3,2,0,0,0,0,1,120,2284,2286,2285,0,1,2,1,1,1,1,1,120,2286,2287,2285,1,3,2,1,1,1,1,1,120,2284,2285,2281,0,1,2,2,2,2,2,1,120,2285,2280,2281,1,3,2,2,2,2,2,1,120,2287,2286,2282,0,1,2,3,3,3,3,1,120,2286,2283,2282,1,3,2,3,3,3,3,1,120,2285,2287,2280,0,1,2,4,4,4,4,1,120,2287,2282,2280,1,3,2,4,4,4,4,1,120,2281,2283,2284,0,1,2,5,5,5,5,1,120,2283,2286,2284,1,3,2,5,5,5,5,1,120,2288,2290,2289,0,1,2,0,0,0,0,1,120,2290,2291,2289,1,3,2,0,0,0,0,1,120,2292,2294,2293,0,1,2,1,1,1,1,1,120,2294,2295,2293,1,3,2,1,1,1,1,1,120,2292,2293,2289,0,1,2,2,2,2,2,1,120,2293,2288,2289,1,3,2,2,2,2,2,1,120,2295,2294,2290,0,1,2,3,3,3,3,1,120,2294,2291,2290,1,3,2,3,3,3,3,1,120,2293,2295,2288,0,1,2,4,4,4,4,1,120,2295,2290,2288,1,3,2,4,4,4,4,1,120,2289,2291,2292,0,1,2,5,5,5,5,1,120,2291,2294,2292,1,3,2,5,5,5,5,1,120,2296,2298,2297,0,1,2,0,0,0,0,1,120,2298,2299,2297,1,3,2,0,0,0,0,1,120,2300,2302,2301,0,1,2,1,1,1,1,1,120,2302,2303,2301,1,3,2,1,1,1,1,1,120,2300,2301,2297,0,1,2,2,2,2,2,1,120,2301,2296,2297,1,3,2,2,2,2,2,1,120,2303,2302,2298,0,1,2,3,3,3,3,1,120,2302,2299,2298,1,3,2,3,3,3,3,1,120,2301,2303,2296,0,1,2,4,4,4,4,1,120,2303,2298,2296,1,3,2,4,4,4,4,1,120,2297,2299,2300,0,1,2,5,5,5,5,1,120,2299,2302,2300,1,3,2,5,5,5,5,1,120,2304,2306,2305,0,1,2,0,0,0,0,1,120,2306,2307,2305,1,3,2,0,0,0,0,1,120,2308,2310,2309,0,1,2,1,1,1,1,1,120,2310,2311,2309,1,3,2,1,1,1,1,1,120,2308,2309,2305,0,1,2,2,2,2,2,1,120,2309,2304,2305,1,3,2,2,2,2,2,1,120,2311,2310,2306,0,1,2,3,3,3,3,1,120,2310,2307,2306,1,3,2,3,3,3,3,1,120,2309,2311,2304,0,1,2,4,4,4,4,1,120,2311,2306,2304,1,3,2,4,4,4,4,1,120,2305,2307,2308,0,1,2,5,5,5,5,1,120,2307,2310,2308,1,3,2,5,5,5,5,1,120,2312,2314,2313,0,1,2,0,0,0,0,1,120,2314,2315,2313,1,3,2,0,0,0,0,1,120,2316,2318,2317,0,1,2,1,1,1,1,1,120,2318,2319,2317,1,3,2,1,1,1,1,1,120,2316,2317,2313,0,1,2,2,2,2,2,1,120,2317,2312,2313,1,3,2,2,2,2,2,1,120,2319,2318,2314,0,1,2,3,3,3,3,1,120,2318,2315,2314,1,3,2,3,3,3,3,1,120,2317,2319,2312,0,1,2,4,4,4,4,1,120,2319,2314,2312,1,3,2,4,4,4,4,1,120,2313,2315,2316,0,1,2,5,5,5,5,1,120,2315,2318,2316,1,3,2,5,5,5,5,1,120,2320,2322,2321,0,1,2,0,0,0,0,1,120,2322,2323,2321,1,3,2,0,0,0,0,1,120,2324,2326,2325,0,1,2,1,1,1,1,1,120,2326,2327,2325,1,3,2,1,1,1,1,1,120,2324,2325,2321,0,1,2,2,2,2,2,1,120,2325,2320,2321,1,3,2,2,2,2,2,1,120,2327,2326,2322,0,1,2,3,3,3,3,1,120,2326,2323,2322,1,3,2,3,3,3,3,1,120,2325,2327,2320,0,1,2,4,4,4,4,1,120,2327,2322,2320,1,3,2,4,4,4,4,1,120,2321,2323,2324,0,1,2,5,5,5,5,1,120,2323,2326,2324,1,3,2,5,5,5,5,1,120,2328,2330,2329,0,1,2,0,0,0,0,1,120,2330,2331,2329,1,3,2,0,0,0,0,1,120,2332,2334,2333,0,1,2,1,1,1,1,1,120,2334,2335,2333,1,3,2,1,1,1,1,1,120,2332,2333,2329,0,1,2,2,2,2,2,1,120,2333,2328,2329,1,3,2,2,2,2,2,1,120,2335,2334,2330,0,1,2,3,3,3,3,1,120,2334,2331,2330,1,3,2,3,3,3,3,1,120,2333,2335,2328,0,1,2,4,4,4,4,1,120,2335,2330,2328,1,3,2,4,4,4,4,1,120,2329,2331,2332,0,1,2,5,5,5,5,1,120,2331,2334,2332,1,3,2,5,5,5,5,1,120,2336,2338,2337,0,1,2,0,0,0,0,1,120,2338,2339,2337,1,3,2,0,0,0,0,1,120,2340,2342,2341,0,1,2,1,1,1,1,1,120,2342,2343,2341,1,3,2,1,1,1,1,1,120,2340,2341,2337,0,1,2,2,2,2,2,1,120,2341,2336,2337,1,3,2,2,2,2,2,1,120,2343,2342,2338,0,1,2,3,3,3,3,1,120,2342,2339,2338,1,3,2,3,3,3,3,1,120,2341,2343,2336,0,1,2,4,4,4,4,1,120,2343,2338,2336,1,3,2,4,4,4,4,1,120,2337,2339,2340,0,1,2,5,5,5,5,1,120,2339,2342,2340,1,3,2,5,5,5,5,1,120,2344,2346,2345,0,1,2,0,0,0,0,1,120,2346,2347,2345,1,3,2,0,0,0,0,1,120,2348,2350,2349,0,1,2,1,1,1,1,1,120,2350,2351,2349,1,3,2,1,1,1,1,1,120,2348,2349,2345,0,1,2,2,2,2,2,1,120,2349,2344,2345,1,3,2,2,2,2,2,1,120,2351,2350,2346,0,1,2,3,3,3,3,1,120,2350,2347,2346,1,3,2,3,3,3,3,1,120,2349,2351,2344,0,1,2,4,4,4,4,1,120,2351,2346,2344,1,3,2,4,4,4,4,1,120,2345,2347,2348,0,1,2,5,5,5,5,1,120,2347,2350,2348,1,3,2,5,5,5,5,1,120,2352,2354,2353,0,1,2,0,0,0,0,1,120,2354,2355,2353,1,3,2,0,0,0,0,1,120,2356,2358,2357,0,1,2,1,1,1,1,1,120,2358,2359,2357,1,3,2,1,1,1,1,1,120,2356,2357,2353,0,1,2,2,2,2,2,1,120,2357,2352,2353,1,3,2,2,2,2,2,1,120,2359,2358,2354,0,1,2,3,3,3,3,1,120,2358,2355,2354,1,3,2,3,3,3,3,1,120,2357,2359,2352,0,1,2,4,4,4,4,1,120,2359,2354,2352,1,3,2,4,4,4,4,1,120,2353,2355,2356,0,1,2,5,5,5,5,1,120,2355,2358,2356,1,3,2,5,5,5,5,1,120,2360,2362,2361,0,1,2,0,0,0,0,1,120,2362,2363,2361,1,3,2,0,0,0,0,1,120,2364,2366,2365,0,1,2,1,1,1,1,1,120,2366,2367,2365,1,3,2,1,1,1,1,1,120,2364,2365,2361,0,1,2,2,2,2,2,1,120,2365,2360,2361,1,3,2,2,2,2,2,1,120,2367,2366,2362,0,1,2,3,3,3,3,1,120,2366,2363,2362,1,3,2,3,3,3,3,1,120,2365,2367,2360,0,1,2,4,4,4,4,1,120,2367,2362,2360,1,3,2,4,4,4,4,1,120,2361,2363,2364,0,1,2,5,5,5,5,1,120,2363,2366,2364,1,3,2,5,5,5,5,1,120,2368,2370,2369,0,1,2,0,0,0,0,1,120,2370,2371,2369,1,3,2,0,0,0,0,1,120,2372,2374,2373,0,1,2,1,1,1,1,1,120,2374,2375,2373,1,3,2,1,1,1,1,1,120,2372,2373,2369,0,1,2,2,2,2,2,1,120,2373,2368,2369,1,3,2,2,2,2,2,1,120,2375,2374,2370,0,1,2,3,3,3,3,1,120,2374,2371,2370,1,3,2,3,3,3,3,1,120,2373,2375,2368,0,1,2,4,4,4,4,1,120,2375,2370,2368,1,3,2,4,4,4,4,1,120,2369,2371,2372,0,1,2,5,5,5,5,1,120,2371,2374,2372,1,3,2,5,5,5,5,1,120,2376,2378,2377,0,1,2,0,0,0,0,1,120,2378,2379,2377,1,3,2,0,0,0,0,1,120,2380,2382,2381,0,1,2,1,1,1,1,1,120,2382,2383,2381,1,3,2,1,1,1,1,1,120,2380,2381,2377,0,1,2,2,2,2,2,1,120,2381,2376,2377,1,3,2,2,2,2,2,1,120,2383,2382,2378,0,1,2,3,3,3,3,1,120,2382,2379,2378,1,3,2,3,3,3,3,1,120,2381,2383,2376,0,1,2,4,4,4,4,1,120,2383,2378,2376,1,3,2,4,4,4,4,1,120,2377,2379,2380,0,1,2,5,5,5,5,1,120,2379,2382,2380,1,3,2,5,5,5,5,1,120,2384,2386,2385,0,1,2,0,0,0,0,1,120,2386,2387,2385,1,3,2,0,0,0,0,1,120,2388,2390,2389,0,1,2,1,1,1,1,1,120,2390,2391,2389,1,3,2,1,1,1,1,1,120,2388,2389,2385,0,1,2,2,2,2,2,1,120,2389,2384,2385,1,3,2,2,2,2,2,1,120,2391,2390,2386,0,1,2,3,3,3,3,1,120,2390,2387,2386,1,3,2,3,3,3,3,1,120,2389,2391,2384,0,1,2,4,4,4,4,1,120,2391,2386,2384,1,3,2,4,4,4,4,1,120,2385,2387,2388,0,1,2,5,5,5,5,1,120,2387,2390,2388,1,3,2,5,5,5,5,1,120,2392,2394,2393,0,1,2,0,0,0,0,1,120,2394,2395,2393,1,3,2,0,0,0,0,1,120,2396,2398,2397,0,1,2,1,1,1,1,1,120,2398,2399,2397,1,3,2,1,1,1,1,1,120,2396,2397,2393,0,1,2,2,2,2,2,1,120,2397,2392,2393,1,3,2,2,2,2,2,1,120,2399,2398,2394,0,1,2,3,3,3,3,1,120,2398,2395,2394,1,3,2,3,3,3,3,1,120,2397,2399,2392,0,1,2,4,4,4,4,1,120,2399,2394,2392,1,3,2,4,4,4,4,1,120,2393,2395,2396,0,1,2,5,5,5,5,1,120,2395,2398,2396,1,3,2,5,5,5,5,1,120,2400,2402,2401,0,1,2,0,0,0,0,1,120,2402,2403,2401,1,3,2,0,0,0,0,1,120,2404,2406,2405,0,1,2,1,1,1,1,1,120,2406,2407,2405,1,3,2,1,1,1,1,1,120,2404,2405,2401,0,1,2,2,2,2,2,1,120,2405,2400,2401,1,3,2,2,2,2,2,1,120,2407,2406,2402,0,1,2,3,3,3,3,1,120,2406,2403,2402,1,3,2,3,3,3,3,1,120,2405,2407,2400,0,1,2,4,4,4,4,1,120,2407,2402,2400,1,3,2,4,4,4,4,1,120,2401,2403,2404,0,1,2,5,5,5,5,1,120,2403,2406,2404,1,3,2,5,5,5,5,1,120,2408,2410,2409,0,1,2,0,0,0,0,1,120,2410,2411,2409,1,3,2,0,0,0,0,1,120,2412,2414,2413,0,1,2,1,1,1,1,1,120,2414,2415,2413,1,3,2,1,1,1,1,1,120,2412,2413,2409,0,1,2,2,2,2,2,1,120,2413,2408,2409,1,3,2,2,2,2,2,1,120,2415,2414,2410,0,1,2,3,3,3,3,1,120,2414,2411,2410,1,3,2,3,3,3,3,1,120,2413,2415,2408,0,1,2,4,4,4,4,1,120,2415,2410,2408,1,3,2,4,4,4,4,1,120,2409,2411,2412,0,1,2,5,5,5,5,1,120,2411,2414,2412,1,3,2,5,5,5,5,1,120,2416,2418,2417,0,1,2,0,0,0,0,1,120,2418,2419,2417,1,3,2,0,0,0,0,1,120,2420,2422,2421,0,1,2,1,1,1,1,1,120,2422,2423,2421,1,3,2,1,1,1,1,1,120,2420,2421,2417,0,1,2,2,2,2,2,1,120,2421,2416,2417,1,3,2,2,2,2,2,1,120,2423,2422,2418,0,1,2,3,3,3,3,1,120,2422,2419,2418,1,3,2,3,3,3,3,1,120,2421,2423,2416,0,1,2,4,4,4,4,1,120,2423,2418,2416,1,3,2,4,4,4,4,1,120,2417,2419,2420,0,1,2,5,5,5,5,1,120,2419,2422,2420,1,3,2,5,5,5,5,1,120,2424,2426,2425,0,1,2,0,0,0,0,1,120,2426,2427,2425,1,3,2,0,0,0,0,1,120,2428,2430,2429,0,1,2,1,1,1,1,1,120,2430,2431,2429,1,3,2,1,1,1,1,1,120,2428,2429,2425,0,1,2,2,2,2,2,1,120,2429,2424,2425,1,3,2,2,2,2,2,1,120,2431,2430,2426,0,1,2,3,3,3,3,1,120,2430,2427,2426,1,3,2,3,3,3,3,1,120,2429,2431,2424,0,1,2,4,4,4,4,1,120,2431,2426,2424,1,3,2,4,4,4,4,1,120,2425,2427,2428,0,1,2,5,5,5,5,1,120,2427,2430,2428,1,3,2,5,5,5,5,1,120,2432,2434,2433,0,1,2,0,0,0,0,1,120,2434,2435,2433,1,3,2,0,0,0,0,1,120,2436,2438,2437,0,1,2,1,1,1,1,1,120,2438,2439,2437,1,3,2,1,1,1,1,1,120,2436,2437,2433,0,1,2,2,2,2,2,1,120,2437,2432,2433,1,3,2,2,2,2,2,1,120,2439,2438,2434,0,1,2,3,3,3,3,1,120,2438,2435,2434,1,3,2,3,3,3,3,1,120,2437,2439,2432,0,1,2,4,4,4,4,1,120,2439,2434,2432,1,3,2,4,4,4,4,1,120,2433,2435,2436,0,1,2,5,5,5,5,1,120,2435,2438,2436,1,3,2,5,5,5,5,1,120,2440,2442,2441,0,1,2,0,0,0,0,1,120,2442,2443,2441,1,3,2,0,0,0,0,1,120,2444,2446,2445,0,1,2,1,1,1,1,1,120,2446,2447,2445,1,3,2,1,1,1,1,1,120,2444,2445,2441,0,1,2,2,2,2,2,1,120,2445,2440,2441,1,3,2,2,2,2,2,1,120,2447,2446,2442,0,1,2,3,3,3,3,1,120,2446,2443,2442,1,3,2,3,3,3,3,1,120,2445,2447,2440,0,1,2,4,4,4,4,1,120,2447,2442,2440,1,3,2,4,4,4,4,1,120,2441,2443,2444,0,1,2,5,5,5,5,1,120,2443,2446,2444,1,3,2,5,5,5,5,1,120,2448,2450,2449,0,1,2,0,0,0,0,1,120,2450,2451,2449,1,3,2,0,0,0,0,1,120,2452,2454,2453,0,1,2,1,1,1,1,1,120,2454,2455,2453,1,3,2,1,1,1,1,1,120,2452,2453,2449,0,1,2,2,2,2,2,1,120,2453,2448,2449,1,3,2,2,2,2,2,1,120,2455,2454,2450,0,1,2,3,3,3,3,1,120,2454,2451,2450,1,3,2,3,3,3,3,1,120,2453,2455,2448,0,1,2,4,4,4,4,1,120,2455,2450,2448,1,3,2,4,4,4,4,1,120,2449,2451,2452,0,1,2,5,5,5,5,1,120,2451,2454,2452,1,3,2,5,5,5,5,1,120,2456,2458,2457,0,1,2,0,0,0,0,1,120,2458,2459,2457,1,3,2,0,0,0,0,1,120,2460,2462,2461,0,1,2,1,1,1,1,1,120,2462,2463,2461,1,3,2,1,1,1,1,1,120,2460,2461,2457,0,1,2,2,2,2,2,1,120,2461,2456,2457,1,3,2,2,2,2,2,1,120,2463,2462,2458,0,1,2,3,3,3,3,1,120,2462,2459,2458,1,3,2,3,3,3,3,1,120,2461,2463,2456,0,1,2,4,4,4,4,1,120,2463,2458,2456,1,3,2,4,4,4,4,1,120,2457,2459,2460,0,1,2,5,5,5,5,1,120,2459,2462,2460,1,3,2,5,5,5,5,1,120,2464,2466,2465,0,1,2,0,0,0,0,0,120,2466,2467,2465,1,3,2,0,0,0,0,0,120,2468,2470,2469,0,1,2,1,1,1,1,0,120,2470,2471,2469,1,3,2,1,1,1,1,0,120,2468,2469,2465,0,1,2,2,2,2,2,0,120,2469,2464,2465,1,3,2,2,2,2,2,0,120,2471,2470,2466,0,1,2,3,3,3,3,0,120,2470,2467,2466,1,3,2,3,3,3,3,0,120,2469,2471,2464,0,1,2,4,4,4,4,0,120,2471,2466,2464,1,3,2,4,4,4,4,0,120,2465,2467,2468,0,1,2,5,5,5,5,0,120,2467,2470,2468,1,3,2,5,5,5,5,0,120,2472,2474,2473,0,1,2,0,0,0,0,0,120,2474,2475,2473,1,3,2,0,0,0,0,0,120,2476,2478,2477,0,1,2,1,1,1,1,0,120,2478,2479,2477,1,3,2,1,1,1,1,0,120,2476,2477,2473,0,1,2,2,2,2,2,0,120,2477,2472,2473,1,3,2,2,2,2,2,0,120,2479,2478,2474,0,1,2,3,3,3,3,0,120,2478,2475,2474,1,3,2,3,3,3,3,0,120,2477,2479,2472,0,1,2,4,4,4,4,0,120,2479,2474,2472,1,3,2,4,4,4,4,0,120,2473,2475,2476,0,1,2,5,5,5,5,0,120,2475,2478,2476,1,3,2,5,5,5,5,0,120,2480,2482,2481,0,1,2,0,0,0,0,0,120,2482,2483,2481,1,3,2,0,0,0,0,0,120,2484,2486,2485,0,1,2,1,1,1,1,0,120,2486,2487,2485,1,3,2,1,1,1,1,0,120,2484,2485,2481,0,1,2,2,2,2,2,0,120,2485,2480,2481,1,3,2,2,2,2,2,0,120,2487,2486,2482,0,1,2,3,3,3,3,0,120,2486,2483,2482,1,3,2,3,3,3,3,0,120,2485,2487,2480,0,1,2,4,4,4,4,0,120,2487,2482,2480,1,3,2,4,4,4,4,0,120,2481,2483,2484,0,1,2,5,5,5,5,0,120,2483,2486,2484,1,3,2,5,5,5,5,0,120,2488,2490,2489,0,1,2,0,0,0,0,0,120,2490,2491,2489,1,3,2,0,0,0,0,0,120,2492,2494,2493,0,1,2,1,1,1,1,0,120,2494,2495,2493,1,3,2,1,1,1,1,0,120,2492,2493,2489,0,1,2,2,2,2,2,0,120,2493,2488,2489,1,3,2,2,2,2,2,0,120,2495,2494,2490,0,1,2,3,3,3,3,0,120,2494,2491,2490,1,3,2,3,3,3,3,0,120,2493,2495,2488,0,1,2,4,4,4,4,0,120,2495,2490,2488,1,3,2,4,4,4,4,0,120,2489,2491,2492,0,1,2,5,5,5,5,0,120,2491,2494,2492,1,3,2,5,5,5,5,0,120,2496,2498,2497,0,1,2,0,0,0,0,2,120,2498,2499,2497,1,3,2,0,0,0,0,2,120,2500,2502,2501,0,1,2,1,1,1,1,2,120,2502,2503,2501,1,3,2,1,1,1,1,2,120,2500,2501,2497,0,1,2,2,2,2,2,2,120,2501,2496,2497,1,3,2,2,2,2,2,2,120,2503,2502,2498,0,1,2,3,3,3,3,2,120,2502,2499,2498,1,3,2,3,3,3,3,2,120,2501,2503,2496,0,1,2,4,4,4,4,2,120,2503,2498,2496,1,3,2,4,4,4,4,2,120,2497,2499,2500,0,1,2,5,5,5,5,2,120,2499,2502,2500,1,3,2,5,5,5,5,2,120,2504,2506,2505,0,1,2,0,0,0,0,2,120,2506,2507,2505,1,3,2,0,0,0,0,2,120,2508,2510,2509,0,1,2,1,1,1,1,2,120,2510,2511,2509,1,3,2,1,1,1,1,2,120,2508,2509,2505,0,1,2,2,2,2,2,2,120,2509,2504,2505,1,3,2,2,2,2,2,2,120,2511,2510,2506,0,1,2,3,3,3,3,2,120,2510,2507,2506,1,3,2,3,3,3,3,2,120,2509,2511,2504,0,1,2,4,4,4,4,2,120,2511,2506,2504,1,3,2,4,4,4,4,2,120,2505,2507,2508,0,1,2,5,5,5,5,2,120,2507,2510,2508,1,3,2,5,5,5,5,2,120,2512,2514,2513,0,1,2,0,0,0,0,2,120,2514,2515,2513,1,3,2,0,0,0,0,2,120,2516,2518,2517,0,1,2,1,1,1,1,2,120,2518,2519,2517,1,3,2,1,1,1,1,2,120,2516,2517,2513,0,1,2,2,2,2,2,2,120,2517,2512,2513,1,3,2,2,2,2,2,2,120,2519,2518,2514,0,1,2,3,3,3,3,2,120,2518,2515,2514,1,3,2,3,3,3,3,2,120,2517,2519,2512,0,1,2,4,4,4,4,2,120,2519,2514,2512,1,3,2,4,4,4,4,2,120,2513,2515,2516,0,1,2,5,5,5,5,2,120,2515,2518,2516,1,3,2,5,5,5,5,2,120,2520,2522,2521,0,1,2,0,0,0,0,2,120,2522,2523,2521,1,3,2,0,0,0,0,2,120,2524,2526,2525,0,1,2,1,1,1,1,2,120,2526,2527,2525,1,3,2,1,1,1,1,2,120,2524,2525,2521,0,1,2,2,2,2,2,2,120,2525,2520,2521,1,3,2,2,2,2,2,2,120,2527,2526,2522,0,1,2,3,3,3,3,2,120,2526,2523,2522,1,3,2,3,3,3,3,2,120,2525,2527,2520,0,1,2,4,4,4,4,2,120,2527,2522,2520,1,3,2,4,4,4,4,2,120,2521,2523,2524,0,1,2,5,5,5,5,2,120,2523,2526,2524,1,3,2,5,5,5,5,2,120,2528,2530,2529,0,1,2,0,0,0,0,0,120,2530,2531,2529,1,3,2,0,0,0,0,0,120,2532,2534,2533,0,1,2,1,1,1,1,0,120,2534,2535,2533,1,3,2,1,1,1,1,0,120,2532,2533,2529,0,1,2,2,2,2,2,0,120,2533,2528,2529,1,3,2,2,2,2,2,0,120,2535,2534,2530,0,1,2,3,3,3,3,0,120,2534,2531,2530,1,3,2,3,3,3,3,0,120,2533,2535,2528,0,1,2,4,4,4,4,0,120,2535,2530,2528,1,3,2,4,4,4,4,0,120,2529,2531,2532,0,1,2,5,5,5,5,0,120,2531,2534,2532,1,3,2,5,5,5,5,0,120,2536,2538,2537,0,1,2,0,0,0,0,0,120,2538,2539,2537,1,3,2,0,0,0,0,0,120,2540,2542,2541,0,1,2,1,1,1,1,0,120,2542,2543,2541,1,3,2,1,1,1,1,0,120,2540,2541,2537,0,1,2,2,2,2,2,0,120,2541,2536,2537,1,3,2,2,2,2,2,0,120,2543,2542,2538,0,1,2,3,3,3,3,0,120,2542,2539,2538,1,3,2,3,3,3,3,0,120,2541,2543,2536,0,1,2,4,4,4,4,0,120,2543,2538,2536,1,3,2,4,4,4,4,0,120,2537,2539,2540,0,1,2,5,5,5,5,0,120,2539,2542,2540,1,3,2,5,5,5,5,0,120,2544,2546,2545,0,1,2,0,0,0,0,1,120,2546,2547,2545,1,3,2,0,0,0,0,1,120,2548,2550,2549,0,1,2,1,1,1,1,1,120,2550,2551,2549,1,3,2,1,1,1,1,1,120,2548,2549,2545,0,1,2,2,2,2,2,1,120,2549,2544,2545,1,3,2,2,2,2,2,1,120,2551,2550,2546,0,1,2,3,3,3,3,1,120,2550,2547,2546,1,3,2,3,3,3,3,1,120,2549,2551,2544,0,1,2,4,4,4,4,1,120,2551,2546,2544,1,3,2,4,4,4,4,1,120,2545,2547,2548,0,1,2,5,5,5,5,1,120,2547,2550,2548,1,3,2,5,5,5,5,1,120,2552,2554,2553,0,1,2,0,0,0,0,1,120,2554,2555,2553,1,3,2,0,0,0,0,1,120,2556,2558,2557,0,1,2,1,1,1,1,1,120,2558,2559,2557,1,3,2,1,1,1,1,1,120,2556,2557,2553,0,1,2,2,2,2,2,1,120,2557,2552,2553,1,3,2,2,2,2,2,1,120,2559,2558,2554,0,1,2,3,3,3,3,1,120,2558,2555,2554,1,3,2,3,3,3,3,1,120,2557,2559,2552,0,1,2,4,4,4,4,1,120,2559,2554,2552,1,3,2,4,4,4,4,1,120,2553,2555,2556,0,1,2,5,5,5,5,1,120,2555,2558,2556,1,3,2,5,5,5,5,1,120,2560,2562,2561,0,1,2,0,0,0,0,1,120,2562,2563,2561,1,3,2,0,0,0,0,1,120,2564,2566,2565,0,1,2,1,1,1,1,1,120,2566,2567,2565,1,3,2,1,1,1,1,1,120,2564,2565,2561,0,1,2,2,2,2,2,1,120,2565,2560,2561,1,3,2,2,2,2,2,1,120,2567,2566,2562,0,1,2,3,3,3,3,1,120,2566,2563,2562,1,3,2,3,3,3,3,1,120,2565,2567,2560,0,1,2,4,4,4,4,1,120,2567,2562,2560,1,3,2,4,4,4,4,1,120,2561,2563,2564,0,1,2,5,5,5,5,1,120,2563,2566,2564,1,3,2,5,5,5,5,1,120,2568,2570,2569,0,1,2,0,0,0,0,1,120,2570,2571,2569,1,3,2,0,0,0,0,1,120,2572,2574,2573,0,1,2,1,1,1,1,1,120,2574,2575,2573,1,3,2,1,1,1,1,1,120,2572,2573,2569,0,1,2,2,2,2,2,1,120,2573,2568,2569,1,3,2,2,2,2,2,1,120,2575,2574,2570,0,1,2,3,3,3,3,1,120,2574,2571,2570,1,3,2,3,3,3,3,1,120,2573,2575,2568,0,1,2,4,4,4,4,1,120,2575,2570,2568,1,3,2,4,4,4,4,1,120,2569,2571,2572,0,1,2,5,5,5,5,1,120,2571,2574,2572,1,3,2,5,5,5,5,1,120,2576,2578,2577,0,1,2,0,0,0,0,1,120,2578,2579,2577,1,3,2,0,0,0,0,1,120,2580,2582,2581,0,1,2,1,1,1,1,1,120,2582,2583,2581,1,3,2,1,1,1,1,1,120,2580,2581,2577,0,1,2,2,2,2,2,1,120,2581,2576,2577,1,3,2,2,2,2,2,1,120,2583,2582,2578,0,1,2,3,3,3,3,1,120,2582,2579,2578,1,3,2,3,3,3,3,1,120,2581,2583,2576,0,1,2,4,4,4,4,1,120,2583,2578,2576,1,3,2,4,4,4,4,1,120,2577,2579,2580,0,1,2,5,5,5,5,1,120,2579,2582,2580,1,3,2,5,5,5,5,1,120,2584,2586,2585,0,1,2,0,0,0,0,1,120,2586,2587,2585,1,3,2,0,0,0,0,1,120,2588,2590,2589,0,1,2,1,1,1,1,1,120,2590,2591,2589,1,3,2,1,1,1,1,1,120,2588,2589,2585,0,1,2,2,2,2,2,1,120,2589,2584,2585,1,3,2,2,2,2,2,1,120,2591,2590,2586,0,1,2,3,3,3,3,1,120,2590,2587,2586,1,3,2,3,3,3,3,1,120,2589,2591,2584,0,1,2,4,4,4,4,1,120,2591,2586,2584,1,3,2,4,4,4,4,1,120,2585,2587,2588,0,1,2,5,5,5,5,1,120,2587,2590,2588,1,3,2,5,5,5,5,1,120,2592,2594,2593,0,1,2,0,0,0,0,1,120,2594,2595,2593,1,3,2,0,0,0,0,1,120,2596,2598,2597,0,1,2,1,1,1,1,1,120,2598,2599,2597,1,3,2,1,1,1,1,1,120,2596,2597,2593,0,1,2,2,2,2,2,1,120,2597,2592,2593,1,3,2,2,2,2,2,1,120,2599,2598,2594,0,1,2,3,3,3,3,1,120,2598,2595,2594,1,3,2,3,3,3,3,1,120,2597,2599,2592,0,1,2,4,4,4,4,1,120,2599,2594,2592,1,3,2,4,4,4,4,1,120,2593,2595,2596,0,1,2,5,5,5,5,1,120,2595,2598,2596,1,3,2,5,5,5,5,1,120,2600,2602,2601,0,1,2,0,0,0,0,1,120,2602,2603,2601,1,3,2,0,0,0,0,1,120,2604,2606,2605,0,1,2,1,1,1,1,1,120,2606,2607,2605,1,3,2,1,1,1,1,1,120,2604,2605,2601,0,1,2,2,2,2,2,1,120,2605,2600,2601,1,3,2,2,2,2,2,1,120,2607,2606,2602,0,1,2,3,3,3,3,1,120,2606,2603,2602,1,3,2,3,3,3,3,1,120,2605,2607,2600,0,1,2,4,4,4,4,1,120,2607,2602,2600,1,3,2,4,4,4,4,1,120,2601,2603,2604,0,1,2,5,5,5,5,1,120,2603,2606,2604,1,3,2,5,5,5,5,1,120,2608,2610,2609,0,1,2,0,0,0,0,1,120,2610,2611,2609,1,3,2,0,0,0,0,1,120,2612,2614,2613,0,1,2,1,1,1,1,1,120,2614,2615,2613,1,3,2,1,1,1,1,1,120,2612,2613,2609,0,1,2,2,2,2,2,1,120,2613,2608,2609,1,3,2,2,2,2,2,1,120,2615,2614,2610,0,1,2,3,3,3,3,1,120,2614,2611,2610,1,3,2,3,3,3,3,1,120,2613,2615,2608,0,1,2,4,4,4,4,1,120,2615,2610,2608,1,3,2,4,4,4,4,1,120,2609,2611,2612,0,1,2,5,5,5,5,1,120,2611,2614,2612,1,3,2,5,5,5,5,1,120,2616,2618,2617,0,1,2,0,0,0,0,1,120,2618,2619,2617,1,3,2,0,0,0,0,1,120,2620,2622,2621,0,1,2,1,1,1,1,1,120,2622,2623,2621,1,3,2,1,1,1,1,1,120,2620,2621,2617,0,1,2,2,2,2,2,1,120,2621,2616,2617,1,3,2,2,2,2,2,1,120,2623,2622,2618,0,1,2,3,3,3,3,1,120,2622,2619,2618,1,3,2,3,3,3,3,1,120,2621,2623,2616,0,1,2,4,4,4,4,1,120,2623,2618,2616,1,3,2,4,4,4,4,1,120,2617,2619,2620,0,1,2,5,5,5,5,1,120,2619,2622,2620,1,3,2,5,5,5,5,1,120,2624,2626,2625,0,1,2,0,0,0,0,1,120,2626,2627,2625,1,3,2,0,0,0,0,1,120,2628,2630,2629,0,1,2,1,1,1,1,1,120,2630,2631,2629,1,3,2,1,1,1,1,1,120,2628,2629,2625,0,1,2,2,2,2,2,1,120,2629,2624,2625,1,3,2,2,2,2,2,1,120,2631,2630,2626,0,1,2,3,3,3,3,1,120,2630,2627,2626,1,3,2,3,3,3,3,1,120,2629,2631,2624,0,1,2,4,4,4,4,1,120,2631,2626,2624,1,3,2,4,4,4,4,1,120,2625,2627,2628,0,1,2,5,5,5,5,1,120,2627,2630,2628,1,3,2,5,5,5,5,1,120,2632,2634,2633,0,1,2,0,0,0,0,1,120,2634,2635,2633,1,3,2,0,0,0,0,1,120,2636,2638,2637,0,1,2,1,1,1,1,1,120,2638,2639,2637,1,3,2,1,1,1,1,1,120,2636,2637,2633,0,1,2,2,2,2,2,1,120,2637,2632,2633,1,3,2,2,2,2,2,1,120,2639,2638,2634,0,1,2,3,3,3,3,1,120,2638,2635,2634,1,3,2,3,3,3,3,1,120,2637,2639,2632,0,1,2,4,4,4,4,1,120,2639,2634,2632,1,3,2,4,4,4,4,1,120,2633,2635,2636,0,1,2,5,5,5,5,1,120,2635,2638,2636,1,3,2,5,5,5,5,1,120,2640,2642,2641,0,1,2,0,0,0,0,1,120,2642,2643,2641,1,3,2,0,0,0,0,1,120,2644,2646,2645,0,1,2,1,1,1,1,1,120,2646,2647,2645,1,3,2,1,1,1,1,1,120,2644,2645,2641,0,1,2,2,2,2,2,1,120,2645,2640,2641,1,3,2,2,2,2,2,1,120,2647,2646,2642,0,1,2,3,3,3,3,1,120,2646,2643,2642,1,3,2,3,3,3,3,1,120,2645,2647,2640,0,1,2,4,4,4,4,1,120,2647,2642,2640,1,3,2,4,4,4,4,1,120,2641,2643,2644,0,1,2,5,5,5,5,1,120,2643,2646,2644,1,3,2,5,5,5,5,1,120,2648,2650,2649,0,1,2,0,0,0,0,1,120,2650,2651,2649,1,3,2,0,0,0,0,1,120,2652,2654,2653,0,1,2,1,1,1,1,1,120,2654,2655,2653,1,3,2,1,1,1,1,1,120,2652,2653,2649,0,1,2,2,2,2,2,1,120,2653,2648,2649,1,3,2,2,2,2,2,1,120,2655,2654,2650,0,1,2,3,3,3,3,1,120,2654,2651,2650,1,3,2,3,3,3,3,1,120,2653,2655,2648,0,1,2,4,4,4,4,1,120,2655,2650,2648,1,3,2,4,4,4,4,1,120,2649,2651,2652,0,1,2,5,5,5,5,1,120,2651,2654,2652,1,3,2,5,5,5,5,1,120,2656,2658,2657,0,1,2,0,0,0,0,1,120,2658,2659,2657,1,3,2,0,0,0,0,1,120,2660,2662,2661,0,1,2,1,1,1,1,1,120,2662,2663,2661,1,3,2,1,1,1,1,1,120,2660,2661,2657,0,1,2,2,2,2,2,1,120,2661,2656,2657,1,3,2,2,2,2,2,1,120,2663,2662,2658,0,1,2,3,3,3,3,1,120,2662,2659,2658,1,3,2,3,3,3,3,1,120,2661,2663,2656,0,1,2,4,4,4,4,1,120,2663,2658,2656,1,3,2,4,4,4,4,1,120,2657,2659,2660,0,1,2,5,5,5,5,1,120,2659,2662,2660,1,3,2,5,5,5,5,1,120,2664,2666,2665,0,1,2,0,0,0,0,1,120,2666,2667,2665,1,3,2,0,0,0,0,1,120,2668,2670,2669,0,1,2,1,1,1,1,1,120,2670,2671,2669,1,3,2,1,1,1,1,1,120,2668,2669,2665,0,1,2,2,2,2,2,1,120,2669,2664,2665,1,3,2,2,2,2,2,1,120,2671,2670,2666,0,1,2,3,3,3,3,1,120,2670,2667,2666,1,3,2,3,3,3,3,1,120,2669,2671,2664,0,1,2,4,4,4,4,1,120,2671,2666,2664,1,3,2,4,4,4,4,1,120,2665,2667,2668,0,1,2,5,5,5,5,1,120,2667,2670,2668,1,3,2,5,5,5,5,1,120,2672,2674,2673,0,1,2,0,0,0,0,1,120,2674,2675,2673,1,3,2,0,0,0,0,1,120,2676,2678,2677,0,1,2,1,1,1,1,1,120,2678,2679,2677,1,3,2,1,1,1,1,1,120,2676,2677,2673,0,1,2,2,2,2,2,1,120,2677,2672,2673,1,3,2,2,2,2,2,1,120,2679,2678,2674,0,1,2,3,3,3,3,1,120,2678,2675,2674,1,3,2,3,3,3,3,1,120,2677,2679,2672,0,1,2,4,4,4,4,1,120,2679,2674,2672,1,3,2,4,4,4,4,1,120,2673,2675,2676,0,1,2,5,5,5,5,1,120,2675,2678,2676,1,3,2,5,5,5,5,1,120,2680,2682,2681,0,1,2,0,0,0,0,1,120,2682,2683,2681,1,3,2,0,0,0,0,1,120,2684,2686,2685,0,1,2,1,1,1,1,1,120,2686,2687,2685,1,3,2,1,1,1,1,1,120,2684,2685,2681,0,1,2,2,2,2,2,1,120,2685,2680,2681,1,3,2,2,2,2,2,1,120,2687,2686,2682,0,1,2,3,3,3,3,1,120,2686,2683,2682,1,3,2,3,3,3,3,1,120,2685,2687,2680,0,1,2,4,4,4,4,1,120,2687,2682,2680,1,3,2,4,4,4,4,1,120,2681,2683,2684,0,1,2,5,5,5,5,1,120,2683,2686,2684,1,3,2,5,5,5,5,1,120,2688,2690,2689,0,1,2,0,0,0,0,1,120,2690,2691,2689,1,3,2,0,0,0,0,1,120,2692,2694,2693,0,1,2,1,1,1,1,1,120,2694,2695,2693,1,3,2,1,1,1,1,1,120,2692,2693,2689,0,1,2,2,2,2,2,1,120,2693,2688,2689,1,3,2,2,2,2,2,1,120,2695,2694,2690,0,1,2,3,3,3,3,1,120,2694,2691,2690,1,3,2,3,3,3,3,1,120,2693,2695,2688,0,1,2,4,4,4,4,1,120,2695,2690,2688,1,3,2,4,4,4,4,1,120,2689,2691,2692,0,1,2,5,5,5,5,1,120,2691,2694,2692,1,3,2,5,5,5,5,1,120,2696,2698,2697,0,1,2,0,0,0,0,1,120,2698,2699,2697,1,3,2,0,0,0,0,1,120,2700,2702,2701,0,1,2,1,1,1,1,1,120,2702,2703,2701,1,3,2,1,1,1,1,1,120,2700,2701,2697,0,1,2,2,2,2,2,1,120,2701,2696,2697,1,3,2,2,2,2,2,1,120,2703,2702,2698,0,1,2,3,3,3,3,1,120,2702,2699,2698,1,3,2,3,3,3,3,1,120,2701,2703,2696,0,1,2,4,4,4,4,1,120,2703,2698,2696,1,3,2,4,4,4,4,1,120,2697,2699,2700,0,1,2,5,5,5,5,1,120,2699,2702,2700,1,3,2,5,5,5,5,1,120,2704,2706,2705,0,1,2,0,0,0,0,1,120,2706,2707,2705,1,3,2,0,0,0,0,1,120,2708,2710,2709,0,1,2,1,1,1,1,1,120,2710,2711,2709,1,3,2,1,1,1,1,1,120,2708,2709,2705,0,1,2,2,2,2,2,1,120,2709,2704,2705,1,3,2,2,2,2,2,1,120,2711,2710,2706,0,1,2,3,3,3,3,1,120,2710,2707,2706,1,3,2,3,3,3,3,1,120,2709,2711,2704,0,1,2,4,4,4,4,1,120,2711,2706,2704,1,3,2,4,4,4,4,1,120,2705,2707,2708,0,1,2,5,5,5,5,1,120,2707,2710,2708,1,3,2,5,5,5,5,1,120,2712,2714,2713,0,1,2,0,0,0,0,1,120,2714,2715,2713,1,3,2,0,0,0,0,1,120,2716,2718,2717,0,1,2,1,1,1,1,1,120,2718,2719,2717,1,3,2,1,1,1,1,1,120,2716,2717,2713,0,1,2,2,2,2,2,1,120,2717,2712,2713,1,3,2,2,2,2,2,1,120,2719,2718,2714,0,1,2,3,3,3,3,1,120,2718,2715,2714,1,3,2,3,3,3,3,1,120,2717,2719,2712,0,1,2,4,4,4,4,1,120,2719,2714,2712,1,3,2,4,4,4,4,1,120,2713,2715,2716,0,1,2,5,5,5,5,1,120,2715,2718,2716,1,3,2,5,5,5,5,1,120,2720,2722,2721,0,1,2,0,0,0,0,1,120,2722,2723,2721,1,3,2,0,0,0,0,1,120,2724,2726,2725,0,1,2,1,1,1,1,1,120,2726,2727,2725,1,3,2,1,1,1,1,1,120,2724,2725,2721,0,1,2,2,2,2,2,1,120,2725,2720,2721,1,3,2,2,2,2,2,1,120,2727,2726,2722,0,1,2,3,3,3,3,1,120,2726,2723,2722,1,3,2,3,3,3,3,1,120,2725,2727,2720,0,1,2,4,4,4,4,1,120,2727,2722,2720,1,3,2,4,4,4,4,1,120,2721,2723,2724,0,1,2,5,5,5,5,1,120,2723,2726,2724,1,3,2,5,5,5,5,1,120,2728,2730,2729,0,1,2,0,0,0,0,0,120,2730,2731,2729,1,3,2,0,0,0,0,0,120,2732,2734,2733,0,1,2,1,1,1,1,0,120,2734,2735,2733,1,3,2,1,1,1,1,0,120,2732,2733,2729,0,1,2,2,2,2,2,0,120,2733,2728,2729,1,3,2,2,2,2,2,0,120,2735,2734,2730,0,1,2,3,3,3,3,0,120,2734,2731,2730,1,3,2,3,3,3,3,0,120,2733,2735,2728,0,1,2,4,4,4,4,0,120,2735,2730,2728,1,3,2,4,4,4,4,0,120,2729,2731,2732,0,1,2,5,5,5,5,0,120,2731,2734,2732,1,3,2,5,5,5,5,0,120,2736,2738,2737,0,1,2,0,0,0,0,0,120,2738,2739,2737,1,3,2,0,0,0,0,0,120,2740,2742,2741,0,1,2,1,1,1,1,0,120,2742,2743,2741,1,3,2,1,1,1,1,0,120,2740,2741,2737,0,1,2,2,2,2,2,0,120,2741,2736,2737,1,3,2,2,2,2,2,0,120,2743,2742,2738,0,1,2,3,3,3,3,0,120,2742,2739,2738,1,3,2,3,3,3,3,0,120,2741,2743,2736,0,1,2,4,4,4,4,0,120,2743,2738,2736,1,3,2,4,4,4,4,0,120,2737,2739,2740,0,1,2,5,5,5,5,0,120,2739,2742,2740,1,3,2,5,5,5,5,0,120,2744,2746,2745,0,1,2,0,0,0,0,0,120,2746,2747,2745,1,3,2,0,0,0,0,0,120,2748,2750,2749,0,1,2,1,1,1,1,0,120,2750,2751,2749,1,3,2,1,1,1,1,0,120,2748,2749,2745,0,1,2,2,2,2,2,0,120,2749,2744,2745,1,3,2,2,2,2,2,0,120,2751,2750,2746,0,1,2,3,3,3,3,0,120,2750,2747,2746,1,3,2,3,3,3,3,0,120,2749,2751,2744,0,1,2,4,4,4,4,0,120,2751,2746,2744,1,3,2,4,4,4,4,0,120,2745,2747,2748,0,1,2,5,5,5,5,0,120,2747,2750,2748,1,3,2,5,5,5,5,0,120,2752,2754,2753,0,1,2,0,0,0,0,0,120,2754,2755,2753,1,3,2,0,0,0,0,0,120,2756,2758,2757,0,1,2,1,1,1,1,0,120,2758,2759,2757,1,3,2,1,1,1,1,0,120,2756,2757,2753,0,1,2,2,2,2,2,0,120,2757,2752,2753,1,3,2,2,2,2,2,0,120,2759,2758,2754,0,1,2,3,3,3,3,0,120,2758,2755,2754,1,3,2,3,3,3,3,0,120,2757,2759,2752,0,1,2,4,4,4,4,0,120,2759,2754,2752,1,3,2,4,4,4,4,0,120,2753,2755,2756,0,1,2,5,5,5,5,0,120,2755,2758,2756,1,3,2,5,5,5,5,0,120,2760,2762,2761,0,1,2,0,0,0,0,0,120,2762,2763,2761,1,3,2,0,0,0,0,0,120,2764,2766,2765,0,1,2,1,1,1,1,0,120,2766,2767,2765,1,3,2,1,1,1,1,0,120,2764,2765,2761,0,1,2,2,2,2,2,0,120,2765,2760,2761,1,3,2,2,2,2,2,0,120,2767,2766,2762,0,1,2,3,3,3,3,0,120,2766,2763,2762,1,3,2,3,3,3,3,0,120,2765,2767,2760,0,1,2,4,4,4,4,0,120,2767,2762,2760,1,3,2,4,4,4,4,0,120,2761,2763,2764,0,1,2,5,5,5,5,0,120,2763,2766,2764,1,3,2,5,5,5,5,0,120,2768,2770,2769,0,1,2,0,0,0,0,0,120,2770,2771,2769,1,3,2,0,0,0,0,0,120,2772,2774,2773,0,1,2,1,1,1,1,0,120,2774,2775,2773,1,3,2,1,1,1,1,0,120,2772,2773,2769,0,1,2,2,2,2,2,0,120,2773,2768,2769,1,3,2,2,2,2,2,0,120,2775,2774,2770,0,1,2,3,3,3,3,0,120,2774,2771,2770,1,3,2,3,3,3,3,0,120,2773,2775,2768,0,1,2,4,4,4,4,0,120,2775,2770,2768,1,3,2,4,4,4,4,0,120,2769,2771,2772,0,1,2,5,5,5,5,0,120,2771,2774,2772,1,3,2,5,5,5,5,0,120,2776,2778,2777,0,1,2,0,0,0,0,0,120,2778,2779,2777,1,3,2,0,0,0,0,0,120,2780,2782,2781,0,1,2,1,1,1,1,0,120,2782,2783,2781,1,3,2,1,1,1,1,0,120,2780,2781,2777,0,1,2,2,2,2,2,0,120,2781,2776,2777,1,3,2,2,2,2,2,0,120,2783,2782,2778,0,1,2,3,3,3,3,0,120,2782,2779,2778,1,3,2,3,3,3,3,0,120,2781,2783,2776,0,1,2,4,4,4,4,0,120,2783,2778,2776,1,3,2,4,4,4,4,0,120,2777,2779,2780,0,1,2,5,5,5,5,0,120,2779,2782,2780,1,3,2,5,5,5,5,0,120,2784,2786,2785,0,1,2,0,0,0,0,0,120,2786,2787,2785,1,3,2,0,0,0,0,0,120,2788,2790,2789,0,1,2,1,1,1,1,0,120,2790,2791,2789,1,3,2,1,1,1,1,0,120,2788,2789,2785,0,1,2,2,2,2,2,0,120,2789,2784,2785,1,3,2,2,2,2,2,0,120,2791,2790,2786,0,1,2,3,3,3,3,0,120,2790,2787,2786,1,3,2,3,3,3,3,0,120,2789,2791,2784,0,1,2,4,4,4,4,0,120,2791,2786,2784,1,3,2,4,4,4,4,0,120,2785,2787,2788,0,1,2,5,5,5,5,0,120,2787,2790,2788,1,3,2,5,5,5,5,0,120,2792,2794,2793,0,1,2,0,0,0,0,0,120,2794,2795,2793,1,3,2,0,0,0,0,0,120,2796,2798,2797,0,1,2,1,1,1,1,0,120,2798,2799,2797,1,3,2,1,1,1,1,0,120,2796,2797,2793,0,1,2,2,2,2,2,0,120,2797,2792,2793,1,3,2,2,2,2,2,0,120,2799,2798,2794,0,1,2,3,3,3,3,0,120,2798,2795,2794,1,3,2,3,3,3,3,0,120,2797,2799,2792,0,1,2,4,4,4,4,0,120,2799,2794,2792,1,3,2,4,4,4,4,0,120,2793,2795,2796,0,1,2,5,5,5,5,0,120,2795,2798,2796,1,3,2,5,5,5,5,0,120,2800,2802,2801,0,1,2,0,0,0,0,0,120,2802,2803,2801,1,3,2,0,0,0,0,0,120,2804,2806,2805,0,1,2,1,1,1,1,0,120,2806,2807,2805,1,3,2,1,1,1,1,0,120,2804,2805,2801,0,1,2,2,2,2,2,0,120,2805,2800,2801,1,3,2,2,2,2,2,0,120,2807,2806,2802,0,1,2,3,3,3,3,0,120,2806,2803,2802,1,3,2,3,3,3,3,0,120,2805,2807,2800,0,1,2,4,4,4,4,0,120,2807,2802,2800,1,3,2,4,4,4,4,0,120,2801,2803,2804,0,1,2,5,5,5,5,0,120,2803,2806,2804,1,3,2,5,5,5,5,0,120,2808,2810,2809,0,1,2,0,0,0,0,0,120,2810,2811,2809,1,3,2,0,0,0,0,0,120,2812,2814,2813,0,1,2,1,1,1,1,0,120,2814,2815,2813,1,3,2,1,1,1,1,0,120,2812,2813,2809,0,1,2,2,2,2,2,0,120,2813,2808,2809,1,3,2,2,2,2,2,0,120,2815,2814,2810,0,1,2,3,3,3,3,0,120,2814,2811,2810,1,3,2,3,3,3,3,0,120,2813,2815,2808,0,1,2,4,4,4,4,0,120,2815,2810,2808,1,3,2,4,4,4,4,0,120,2809,2811,2812,0,1,2,5,5,5,5,0,120,2811,2814,2812,1,3,2,5,5,5,5,0,120,2816,2818,2817,0,1,2,0,0,0,0,3,120,2818,2819,2817,1,3,2,0,0,0,0,3,120,2820,2822,2821,0,1,2,1,1,1,1,3,120,2822,2823,2821,1,3,2,1,1,1,1,3,120,2820,2821,2817,0,1,2,2,2,2,2,3,120,2821,2816,2817,1,3,2,2,2,2,2,3,120,2823,2822,2818,0,1,2,3,3,3,3,3,120,2822,2819,2818,1,3,2,3,3,3,3,3,120,2821,2823,2816,0,1,2,4,4,4,4,3,120,2823,2818,2816,1,3,2,4,4,4,4,3,120,2817,2819,2820,0,1,2,5,5,5,5,3,120,2819,2822,2820,1,3,2,5,5,5,5,3,120,2824,2826,2825,0,1,2,0,0,0,0,3,120,2826,2827,2825,1,3,2,0,0,0,0,3,120,2828,2830,2829,0,1,2,1,1,1,1,3,120,2830,2831,2829,1,3,2,1,1,1,1,3,120,2828,2829,2825,0,1,2,2,2,2,2,3,120,2829,2824,2825,1,3,2,2,2,2,2,3,120,2831,2830,2826,0,1,2,3,3,3,3,3,120,2830,2827,2826,1,3,2,3,3,3,3,3,120,2829,2831,2824,0,1,2,4,4,4,4,3,120,2831,2826,2824,1,3,2,4,4,4,4,3,120,2825,2827,2828,0,1,2,5,5,5,5,3,120,2827,2830,2828,1,3,2,5,5,5,5,3,120,2832,2834,2833,0,1,2,0,0,0,0,3,120,2834,2835,2833,1,3,2,0,0,0,0,3,120,2836,2838,2837,0,1,2,1,1,1,1,3,120,2838,2839,2837,1,3,2,1,1,1,1,3,120,2836,2837,2833,0,1,2,2,2,2,2,3,120,2837,2832,2833,1,3,2,2,2,2,2,3,120,2839,2838,2834,0,1,2,3,3,3,3,3,120,2838,2835,2834,1,3,2,3,3,3,3,3,120,2837,2839,2832,0,1,2,4,4,4,4,3,120,2839,2834,2832,1,3,2,4,4,4,4,3,120,2833,2835,2836,0,1,2,5,5,5,5,3,120,2835,2838,2836,1,3,2,5,5,5,5,3,120,2840,2842,2841,0,1,2,0,0,0,0,3,120,2842,2843,2841,1,3,2,0,0,0,0,3,120,2844,2846,2845,0,1,2,1,1,1,1,3,120,2846,2847,2845,1,3,2,1,1,1,1,3,120,2844,2845,2841,0,1,2,2,2,2,2,3,120,2845,2840,2841,1,3,2,2,2,2,2,3,120,2847,2846,2842,0,1,2,3,3,3,3,3,120,2846,2843,2842,1,3,2,3,3,3,3,3,120,2845,2847,2840,0,1,2,4,4,4,4,3,120,2847,2842,2840,1,3,2,4,4,4,4,3,120,2841,2843,2844,0,1,2,5,5,5,5,3,120,2843,2846,2844,1,3,2,5,5,5,5,3,120,2848,2850,2849,0,1,2,0,0,0,0,3,120,2850,2851,2849,1,3,2,0,0,0,0,3,120,2852,2854,2853,0,1,2,1,1,1,1,3,120,2854,2855,2853,1,3,2,1,1,1,1,3,120,2852,2853,2849,0,1,2,2,2,2,2,3,120,2853,2848,2849,1,3,2,2,2,2,2,3,120,2855,2854,2850,0,1,2,3,3,3,3,3,120,2854,2851,2850,1,3,2,3,3,3,3,3,120,2853,2855,2848,0,1,2,4,4,4,4,3,120,2855,2850,2848,1,3,2,4,4,4,4,3,120,2849,2851,2852,0,1,2,5,5,5,5,3,120,2851,2854,2852,1,3,2,5,5,5,5,3,120,2856,2858,2857,0,1,2,0,0,0,0,3,120,2858,2859,2857,1,3,2,0,0,0,0,3,120,2860,2862,2861,0,1,2,1,1,1,1,3,120,2862,2863,2861,1,3,2,1,1,1,1,3,120,2860,2861,2857,0,1,2,2,2,2,2,3,120,2861,2856,2857,1,3,2,2,2,2,2,3,120,2863,2862,2858,0,1,2,3,3,3,3,3,120,2862,2859,2858,1,3,2,3,3,3,3,3,120,2861,2863,2856,0,1,2,4,4,4,4,3,120,2863,2858,2856,1,3,2,4,4,4,4,3,120,2857,2859,2860,0,1,2,5,5,5,5,3,120,2859,2862,2860,1,3,2,5,5,5,5,3,120,2864,2866,2865,0,1,2,0,0,0,0,3,120,2866,2867,2865,1,3,2,0,0,0,0,3,120,2868,2870,2869,0,1,2,1,1,1,1,3,120,2870,2871,2869,1,3,2,1,1,1,1,3,120,2868,2869,2865,0,1,2,2,2,2,2,3,120,2869,2864,2865,1,3,2,2,2,2,2,3,120,2871,2870,2866,0,1,2,3,3,3,3,3,120,2870,2867,2866,1,3,2,3,3,3,3,3,120,2869,2871,2864,0,1,2,4,4,4,4,3,120,2871,2866,2864,1,3,2,4,4,4,4,3,120,2865,2867,2868,0,1,2,5,5,5,5,3,120,2867,2870,2868,1,3,2,5,5,5,5,3,120,2872,2874,2873,0,1,2,0,0,0,0,3,120,2874,2875,2873,1,3,2,0,0,0,0,3,120,2876,2878,2877,0,1,2,1,1,1,1,3,120,2878,2879,2877,1,3,2,1,1,1,1,3,120,2876,2877,2873,0,1,2,2,2,2,2,3,120,2877,2872,2873,1,3,2,2,2,2,2,3,120,2879,2878,2874,0,1,2,3,3,3,3,3,120,2878,2875,2874,1,3,2,3,3,3,3,3,120,2877,2879,2872,0,1,2,4,4,4,4,3,120,2879,2874,2872,1,3,2,4,4,4,4,3,120,2873,2875,2876,0,1,2,5,5,5,5,3,120,2875,2878,2876,1,3,2,5,5,5,5,3,120,2880,2882,2881,0,1,2,0,0,0,0,3,120,2882,2883,2881,1,3,2,0,0,0,0,3,120,2884,2886,2885,0,1,2,1,1,1,1,3,120,2886,2887,2885,1,3,2,1,1,1,1,3,120,2884,2885,2881,0,1,2,2,2,2,2,3,120,2885,2880,2881,1,3,2,2,2,2,2,3,120,2887,2886,2882,0,1,2,3,3,3,3,3,120,2886,2883,2882,1,3,2,3,3,3,3,3,120,2885,2887,2880,0,1,2,4,4,4,4,3,120,2887,2882,2880,1,3,2,4,4,4,4,3,120,2881,2883,2884,0,1,2,5,5,5,5,3,120,2883,2886,2884,1,3,2,5,5,5,5,3,120,2888,2890,2889,0,1,2,0,0,0,0,3,120,2890,2891,2889,1,3,2,0,0,0,0,3,120,2892,2894,2893,0,1,2,1,1,1,1,3,120,2894,2895,2893,1,3,2,1,1,1,1,3,120,2892,2893,2889,0,1,2,2,2,2,2,3,120,2893,2888,2889,1,3,2,2,2,2,2,3,120,2895,2894,2890,0,1,2,3,3,3,3,3,120,2894,2891,2890,1,3,2,3,3,3,3,3,120,2893,2895,2888,0,1,2,4,4,4,4,3,120,2895,2890,2888,1,3,2,4,4,4,4,3,120,2889,2891,2892,0,1,2,5,5,5,5,3,120,2891,2894,2892,1,3,2,5,5,5,5,3,120,2896,2898,2897,0,1,2,0,0,0,0,3,120,2898,2899,2897,1,3,2,0,0,0,0,3,120,2900,2902,2901,0,1,2,1,1,1,1,3,120,2902,2903,2901,1,3,2,1,1,1,1,3,120,2900,2901,2897,0,1,2,2,2,2,2,3,120,2901,2896,2897,1,3,2,2,2,2,2,3,120,2903,2902,2898,0,1,2,3,3,3,3,3,120,2902,2899,2898,1,3,2,3,3,3,3,3,120,2901,2903,2896,0,1,2,4,4,4,4,3,120,2903,2898,2896,1,3,2,4,4,4,4,3,120,2897,2899,2900,0,1,2,5,5,5,5,3,120,2899,2902,2900,1,3,2,5,5,5,5,3,120,2904,2906,2905,0,1,2,0,0,0,0,3,120,2906,2907,2905,1,3,2,0,0,0,0,3,120,2908,2910,2909,0,1,2,1,1,1,1,3,120,2910,2911,2909,1,3,2,1,1,1,1,3,120,2908,2909,2905,0,1,2,2,2,2,2,3,120,2909,2904,2905,1,3,2,2,2,2,2,3,120,2911,2910,2906,0,1,2,3,3,3,3,3,120,2910,2907,2906,1,3,2,3,3,3,3,3,120,2909,2911,2904,0,1,2,4,4,4,4,3,120,2911,2906,2904,1,3,2,4,4,4,4,3,120,2905,2907,2908,0,1,2,5,5,5,5,3,120,2907,2910,2908,1,3,2,5,5,5,5,3,120,2912,2914,2913,0,1,2,0,0,0,0,3,120,2914,2915,2913,1,3,2,0,0,0,0,3,120,2916,2918,2917,0,1,2,1,1,1,1,3,120,2918,2919,2917,1,3,2,1,1,1,1,3,120,2916,2917,2913,0,1,2,2,2,2,2,3,120,2917,2912,2913,1,3,2,2,2,2,2,3,120,2919,2918,2914,0,1,2,3,3,3,3,3,120,2918,2915,2914,1,3,2,3,3,3,3,3,120,2917,2919,2912,0,1,2,4,4,4,4,3,120,2919,2914,2912,1,3,2,4,4,4,4,3,120,2913,2915,2916,0,1,2,5,5,5,5,3,120,2915,2918,2916,1,3,2,5,5,5,5,3,120,2920,2922,2921,0,1,2,0,0,0,0,3,120,2922,2923,2921,1,3,2,0,0,0,0,3,120,2924,2926,2925,0,1,2,1,1,1,1,3,120,2926,2927,2925,1,3,2,1,1,1,1,3,120,2924,2925,2921,0,1,2,2,2,2,2,3,120,2925,2920,2921,1,3,2,2,2,2,2,3,120,2927,2926,2922,0,1,2,3,3,3,3,3,120,2926,2923,2922,1,3,2,3,3,3,3,3,120,2925,2927,2920,0,1,2,4,4,4,4,3,120,2927,2922,2920,1,3,2,4,4,4,4,3,120,2921,2923,2924,0,1,2,5,5,5,5,3,120,2923,2926,2924,1,3,2,5,5,5,5,3,120,2928,2930,2929,0,1,2,0,0,0,0,3,120,2930,2931,2929,1,3,2,0,0,0,0,3,120,2932,2934,2933,0,1,2,1,1,1,1,3,120,2934,2935,2933,1,3,2,1,1,1,1,3,120,2932,2933,2929,0,1,2,2,2,2,2,3,120,2933,2928,2929,1,3,2,2,2,2,2,3,120,2935,2934,2930,0,1,2,3,3,3,3,3,120,2934,2931,2930,1,3,2,3,3,3,3,3,120,2933,2935,2928,0,1,2,4,4,4,4,3,120,2935,2930,2928,1,3,2,4,4,4,4,3,120,2929,2931,2932,0,1,2,5,5,5,5,3,120,2931,2934,2932,1,3,2,5,5,5,5,3,120,2936,2938,2937,0,1,2,0,0,0,0,3,120,2938,2939,2937,1,3,2,0,0,0,0,3,120,2940,2942,2941,0,1,2,1,1,1,1,3,120,2942,2943,2941,1,3,2,1,1,1,1,3,120,2940,2941,2937,0,1,2,2,2,2,2,3,120,2941,2936,2937,1,3,2,2,2,2,2,3,120,2943,2942,2938,0,1,2,3,3,3,3,3,120,2942,2939,2938,1,3,2,3,3,3,3,3,120,2941,2943,2936,0,1,2,4,4,4,4,3,120,2943,2938,2936,1,3,2,4,4,4,4,3,120,2937,2939,2940,0,1,2,5,5,5,5,3,120,2939,2942,2940,1,3,2,5,5,5,5,3,120,2944,2946,2945,0,1,2,0,0,0,0,3,120,2946,2947,2945,1,3,2,0,0,0,0,3,120,2948,2950,2949,0,1,2,1,1,1,1,3,120,2950,2951,2949,1,3,2,1,1,1,1,3,120,2948,2949,2945,0,1,2,2,2,2,2,3,120,2949,2944,2945,1,3,2,2,2,2,2,3,120,2951,2950,2946,0,1,2,3,3,3,3,3,120,2950,2947,2946,1,3,2,3,3,3,3,3,120,2949,2951,2944,0,1,2,4,4,4,4,3,120,2951,2946,2944,1,3,2,4,4,4,4,3,120,2945,2947,2948,0,1,2,5,5,5,5,3,120,2947,2950,2948,1,3,2,5,5,5,5,3,120,2952,2954,2953,0,1,2,0,0,0,0,3,120,2954,2955,2953,1,3,2,0,0,0,0,3,120,2956,2958,2957,0,1,2,1,1,1,1,3,120,2958,2959,2957,1,3,2,1,1,1,1,3,120,2956,2957,2953,0,1,2,2,2,2,2,3,120,2957,2952,2953,1,3,2,2,2,2,2,3,120,2959,2958,2954,0,1,2,3,3,3,3,3,120,2958,2955,2954,1,3,2,3,3,3,3,3,120,2957,2959,2952,0,1,2,4,4,4,4,3,120,2959,2954,2952,1,3,2,4,4,4,4,3,120,2953,2955,2956,0,1,2,5,5,5,5,3,120,2955,2958,2956,1,3,2,5,5,5,5,3,120,2960,2962,2961,0,1,2,0,0,0,0,3,120,2962,2963,2961,1,3,2,0,0,0,0,3,120,2964,2966,2965,0,1,2,1,1,1,1,3,120,2966,2967,2965,1,3,2,1,1,1,1,3,120,2964,2965,2961,0,1,2,2,2,2,2,3,120,2965,2960,2961,1,3,2,2,2,2,2,3,120,2967,2966,2962,0,1,2,3,3,3,3,3,120,2966,2963,2962,1,3,2,3,3,3,3,3,120,2965,2967,2960,0,1,2,4,4,4,4,3,120,2967,2962,2960,1,3,2,4,4,4,4,3,120,2961,2963,2964,0,1,2,5,5,5,5,3,120,2963,2966,2964,1,3,2,5,5,5,5,3,120,2968,2970,2969,0,1,2,0,0,0,0,3,120,2970,2971,2969,1,3,2,0,0,0,0,3,120,2972,2974,2973,0,1,2,1,1,1,1,3,120,2974,2975,2973,1,3,2,1,1,1,1,3,120,2972,2973,2969,0,1,2,2,2,2,2,3,120,2973,2968,2969,1,3,2,2,2,2,2,3,120,2975,2974,2970,0,1,2,3,3,3,3,3,120,2974,2971,2970,1,3,2,3,3,3,3,3,120,2973,2975,2968,0,1,2,4,4,4,4,3,120,2975,2970,2968,1,3,2,4,4,4,4,3,120,2969,2971,2972,0,1,2,5,5,5,5,3,120,2971,2974,2972,1,3,2,5,5,5,5,3,120,2976,2978,2977,0,1,2,0,0,0,0,3,120,2978,2979,2977,1,3,2,0,0,0,0,3,120,2980,2982,2981,0,1,2,1,1,1,1,3,120,2982,2983,2981,1,3,2,1,1,1,1,3,120,2980,2981,2977,0,1,2,2,2,2,2,3,120,2981,2976,2977,1,3,2,2,2,2,2,3,120,2983,2982,2978,0,1,2,3,3,3,3,3,120,2982,2979,2978,1,3,2,3,3,3,3,3,120,2981,2983,2976,0,1,2,4,4,4,4,3,120,2983,2978,2976,1,3,2,4,4,4,4,3,120,2977,2979,2980,0,1,2,5,5,5,5,3,120,2979,2982,2980,1,3,2,5,5,5,5,3,120,2984,2986,2985,0,1,2,0,0,0,0,3,120,2986,2987,2985,1,3,2,0,0,0,0,3,120,2988,2990,2989,0,1,2,1,1,1,1,3,120,2990,2991,2989,1,3,2,1,1,1,1,3,120,2988,2989,2985,0,1,2,2,2,2,2,3,120,2989,2984,2985,1,3,2,2,2,2,2,3,120,2991,2990,2986,0,1,2,3,3,3,3,3,120,2990,2987,2986,1,3,2,3,3,3,3,3,120,2989,2991,2984,0,1,2,4,4,4,4,3,120,2991,2986,2984,1,3,2,4,4,4,4,3,120,2985,2987,2988,0,1,2,5,5,5,5,3,120,2987,2990,2988,1,3,2,5,5,5,5,3,120,2992,2994,2993,0,1,2,0,0,0,0,3,120,2994,2995,2993,1,3,2,0,0,0,0,3,120,2996,2998,2997,0,1,2,1,1,1,1,3,120,2998,2999,2997,1,3,2,1,1,1,1,3,120,2996,2997,2993,0,1,2,2,2,2,2,3,120,2997,2992,2993,1,3,2,2,2,2,2,3,120,2999,2998,2994,0,1,2,3,3,3,3,3,120,2998,2995,2994,1,3,2,3,3,3,3,3,120,2997,2999,2992,0,1,2,4,4,4,4,3,120,2999,2994,2992,1,3,2,4,4,4,4,3,120,2993,2995,2996,0,1,2,5,5,5,5,3,120,2995,2998,2996,1,3,2,5,5,5,5,3,120,3000,3002,3001,0,1,2,0,0,0,0,3,120,3002,3003,3001,1,3,2,0,0,0,0,3,120,3004,3006,3005,0,1,2,1,1,1,1,3,120,3006,3007,3005,1,3,2,1,1,1,1,3,120,3004,3005,3001,0,1,2,2,2,2,2,3,120,3005,3000,3001,1,3,2,2,2,2,2,3,120,3007,3006,3002,0,1,2,3,3,3,3,3,120,3006,3003,3002,1,3,2,3,3,3,3,3,120,3005,3007,3000,0,1,2,4,4,4,4,3,120,3007,3002,3000,1,3,2,4,4,4,4,3,120,3001,3003,3004,0,1,2,5,5,5,5,3,120,3003,3006,3004,1,3,2,5,5,5,5,3,120,3008,3010,3009,0,1,2,0,0,0,0,3,120,3010,3011,3009,1,3,2,0,0,0,0,3,120,3012,3014,3013,0,1,2,1,1,1,1,3,120,3014,3015,3013,1,3,2,1,1,1,1,3,120,3012,3013,3009,0,1,2,2,2,2,2,3,120,3013,3008,3009,1,3,2,2,2,2,2,3,120,3015,3014,3010,0,1,2,3,3,3,3,3,120,3014,3011,3010,1,3,2,3,3,3,3,3,120,3013,3015,3008,0,1,2,4,4,4,4,3,120,3015,3010,3008,1,3,2,4,4,4,4,3,120,3009,3011,3012,0,1,2,5,5,5,5,3,120,3011,3014,3012,1,3,2,5,5,5,5,3,120,3016,3018,3017,0,1,2,0,0,0,0,3,120,3018,3019,3017,1,3,2,0,0,0,0,3,120,3020,3022,3021,0,1,2,1,1,1,1,3,120,3022,3023,3021,1,3,2,1,1,1,1,3,120,3020,3021,3017,0,1,2,2,2,2,2,3,120,3021,3016,3017,1,3,2,2,2,2,2,3,120,3023,3022,3018,0,1,2,3,3,3,3,3,120,3022,3019,3018,1,3,2,3,3,3,3,3,120,3021,3023,3016,0,1,2,4,4,4,4,3,120,3023,3018,3016,1,3,2,4,4,4,4,3,120,3017,3019,3020,0,1,2,5,5,5,5,3,120,3019,3022,3020,1,3,2,5,5,5,5,3,120,3024,3026,3025,0,1,2,0,0,0,0,3,120,3026,3027,3025,1,3,2,0,0,0,0,3,120,3028,3030,3029,0,1,2,1,1,1,1,3,120,3030,3031,3029,1,3,2,1,1,1,1,3,120,3028,3029,3025,0,1,2,2,2,2,2,3,120,3029,3024,3025,1,3,2,2,2,2,2,3,120,3031,3030,3026,0,1,2,3,3,3,3,3,120,3030,3027,3026,1,3,2,3,3,3,3,3,120,3029,3031,3024,0,1,2,4,4,4,4,3,120,3031,3026,3024,1,3,2,4,4,4,4,3,120,3025,3027,3028,0,1,2,5,5,5,5,3,120,3027,3030,3028,1,3,2,5,5,5,5,3,120,3032,3034,3033,0,1,2,0,0,0,0,3,120,3034,3035,3033,1,3,2,0,0,0,0,3,120,3036,3038,3037,0,1,2,1,1,1,1,3,120,3038,3039,3037,1,3,2,1,1,1,1,3,120,3036,3037,3033,0,1,2,2,2,2,2,3,120,3037,3032,3033,1,3,2,2,2,2,2,3,120,3039,3038,3034,0,1,2,3,3,3,3,3,120,3038,3035,3034,1,3,2,3,3,3,3,3,120,3037,3039,3032,0,1,2,4,4,4,4,3,120,3039,3034,3032,1,3,2,4,4,4,4,3,120,3033,3035,3036,0,1,2,5,5,5,5,3,120,3035,3038,3036,1,3,2,5,5,5,5,3,120,3040,3042,3041,0,1,2,0,0,0,0,3,120,3042,3043,3041,1,3,2,0,0,0,0,3,120,3044,3046,3045,0,1,2,1,1,1,1,3,120,3046,3047,3045,1,3,2,1,1,1,1,3,120,3044,3045,3041,0,1,2,2,2,2,2,3,120,3045,3040,3041,1,3,2,2,2,2,2,3,120,3047,3046,3042,0,1,2,3,3,3,3,3,120,3046,3043,3042,1,3,2,3,3,3,3,3,120,3045,3047,3040,0,1,2,4,4,4,4,3,120,3047,3042,3040,1,3,2,4,4,4,4,3,120,3041,3043,3044,0,1,2,5,5,5,5,3,120,3043,3046,3044,1,3,2,5,5,5,5,3,120,3048,3050,3049,0,1,2,0,0,0,0,3,120,3050,3051,3049,1,3,2,0,0,0,0,3,120,3052,3054,3053,0,1,2,1,1,1,1,3,120,3054,3055,3053,1,3,2,1,1,1,1,3,120,3052,3053,3049,0,1,2,2,2,2,2,3,120,3053,3048,3049,1,3,2,2,2,2,2,3,120,3055,3054,3050,0,1,2,3,3,3,3,3,120,3054,3051,3050,1,3,2,3,3,3,3,3,120,3053,3055,3048,0,1,2,4,4,4,4,3,120,3055,3050,3048,1,3,2,4,4,4,4,3,120,3049,3051,3052,0,1,2,5,5,5,5,3,120,3051,3054,3052,1,3,2,5,5,5,5,3,120,3056,3058,3057,0,1,2,0,0,0,0,3,120,3058,3059,3057,1,3,2,0,0,0,0,3,120,3060,3062,3061,0,1,2,1,1,1,1,3,120,3062,3063,3061,1,3,2,1,1,1,1,3,120,3060,3061,3057,0,1,2,2,2,2,2,3,120,3061,3056,3057,1,3,2,2,2,2,2,3,120,3063,3062,3058,0,1,2,3,3,3,3,3,120,3062,3059,3058,1,3,2,3,3,3,3,3,120,3061,3063,3056,0,1,2,4,4,4,4,3,120,3063,3058,3056,1,3,2,4,4,4,4,3,120,3057,3059,3060,0,1,2,5,5,5,5,3,120,3059,3062,3060,1,3,2,5,5,5,5,3,120,3064,3066,3065,0,1,2,0,0,0,0,3,120,3066,3067,3065,1,3,2,0,0,0,0,3,120,3068,3070,3069,0,1,2,1,1,1,1,3,120,3070,3071,3069,1,3,2,1,1,1,1,3,120,3068,3069,3065,0,1,2,2,2,2,2,3,120,3069,3064,3065,1,3,2,2,2,2,2,3,120,3071,3070,3066,0,1,2,3,3,3,3,3,120,3070,3067,3066,1,3,2,3,3,3,3,3,120,3069,3071,3064,0,1,2,4,4,4,4,3,120,3071,3066,3064,1,3,2,4,4,4,4,3,120,3065,3067,3068,0,1,2,5,5,5,5,3,120,3067,3070,3068,1,3,2,5,5,5,5,3,120,3072,3074,3073,0,1,2,0,0,0,0,3,120,3074,3075,3073,1,3,2,0,0,0,0,3,120,3076,3078,3077,0,1,2,1,1,1,1,3,120,3078,3079,3077,1,3,2,1,1,1,1,3,120,3076,3077,3073,0,1,2,2,2,2,2,3,120,3077,3072,3073,1,3,2,2,2,2,2,3,120,3079,3078,3074,0,1,2,3,3,3,3,3,120,3078,3075,3074,1,3,2,3,3,3,3,3,120,3077,3079,3072,0,1,2,4,4,4,4,3,120,3079,3074,3072,1,3,2,4,4,4,4,3,120,3073,3075,3076,0,1,2,5,5,5,5,3,120,3075,3078,3076,1,3,2,5,5,5,5,3,120,3080,3082,3081,0,1,2,0,0,0,0,3,120,3082,3083,3081,1,3,2,0,0,0,0,3,120,3084,3086,3085,0,1,2,1,1,1,1,3,120,3086,3087,3085,1,3,2,1,1,1,1,3,120,3084,3085,3081,0,1,2,2,2,2,2,3,120,3085,3080,3081,1,3,2,2,2,2,2,3,120,3087,3086,3082,0,1,2,3,3,3,3,3,120,3086,3083,3082,1,3,2,3,3,3,3,3,120,3085,3087,3080,0,1,2,4,4,4,4,3,120,3087,3082,3080,1,3,2,4,4,4,4,3,120,3081,3083,3084,0,1,2,5,5,5,5,3,120,3083,3086,3084,1,3,2,5,5,5,5,3,120,3088,3090,3089,0,1,2,0,0,0,0,3,120,3090,3091,3089,1,3,2,0,0,0,0,3,120,3092,3094,3093,0,1,2,1,1,1,1,3,120,3094,3095,3093,1,3,2,1,1,1,1,3,120,3092,3093,3089,0,1,2,2,2,2,2,3,120,3093,3088,3089,1,3,2,2,2,2,2,3,120,3095,3094,3090,0,1,2,3,3,3,3,3,120,3094,3091,3090,1,3,2,3,3,3,3,3,120,3093,3095,3088,0,1,2,4,4,4,4,3,120,3095,3090,3088,1,3,2,4,4,4,4,3,120,3089,3091,3092,0,1,2,5,5,5,5,3,120,3091,3094,3092,1,3,2,5,5,5,5,3,120,3096,3098,3097,0,1,2,0,0,0,0,3,120,3098,3099,3097,1,3,2,0,0,0,0,3,120,3100,3102,3101,0,1,2,1,1,1,1,3,120,3102,3103,3101,1,3,2,1,1,1,1,3,120,3100,3101,3097,0,1,2,2,2,2,2,3,120,3101,3096,3097,1,3,2,2,2,2,2,3,120,3103,3102,3098,0,1,2,3,3,3,3,3,120,3102,3099,3098,1,3,2,3,3,3,3,3,120,3101,3103,3096,0,1,2,4,4,4,4,3,120,3103,3098,3096,1,3,2,4,4,4,4,3,120,3097,3099,3100,0,1,2,5,5,5,5,3,120,3099,3102,3100,1,3,2,5,5,5,5,3,120,3104,3106,3105,0,1,2,0,0,0,0,3,120,3106,3107,3105,1,3,2,0,0,0,0,3,120,3108,3110,3109,0,1,2,1,1,1,1,3,120,3110,3111,3109,1,3,2,1,1,1,1,3,120,3108,3109,3105,0,1,2,2,2,2,2,3,120,3109,3104,3105,1,3,2,2,2,2,2,3,120,3111,3110,3106,0,1,2,3,3,3,3,3,120,3110,3107,3106,1,3,2,3,3,3,3,3,120,3109,3111,3104,0,1,2,4,4,4,4,3,120,3111,3106,3104,1,3,2,4,4,4,4,3,120,3105,3107,3108,0,1,2,5,5,5,5,3,120,3107,3110,3108,1,3,2,5,5,5,5,3,120,3112,3114,3113,0,1,2,0,0,0,0,3,120,3114,3115,3113,1,3,2,0,0,0,0,3,120,3116,3118,3117,0,1,2,1,1,1,1,3,120,3118,3119,3117,1,3,2,1,1,1,1,3,120,3116,3117,3113,0,1,2,2,2,2,2,3,120,3117,3112,3113,1,3,2,2,2,2,2,3,120,3119,3118,3114,0,1,2,3,3,3,3,3,120,3118,3115,3114,1,3,2,3,3,3,3,3,120,3117,3119,3112,0,1,2,4,4,4,4,3,120,3119,3114,3112,1,3,2,4,4,4,4,3,120,3113,3115,3116,0,1,2,5,5,5,5,3,120,3115,3118,3116,1,3,2,5,5,5,5,3,120,3120,3122,3121,0,1,2,0,0,0,0,3,120,3122,3123,3121,1,3,2,0,0,0,0,3,120,3124,3126,3125,0,1,2,1,1,1,1,3,120,3126,3127,3125,1,3,2,1,1,1,1,3,120,3124,3125,3121,0,1,2,2,2,2,2,3,120,3125,3120,3121,1,3,2,2,2,2,2,3,120,3127,3126,3122,0,1,2,3,3,3,3,3,120,3126,3123,3122,1,3,2,3,3,3,3,3,120,3125,3127,3120,0,1,2,4,4,4,4,3,120,3127,3122,3120,1,3,2,4,4,4,4,3,120,3121,3123,3124,0,1,2,5,5,5,5,3,120,3123,3126,3124,1,3,2,5,5,5,5,3,120,3128,3130,3129,0,1,2,0,0,0,0,3,120,3130,3131,3129,1,3,2,0,0,0,0,3,120,3132,3134,3133,0,1,2,1,1,1,1,3,120,3134,3135,3133,1,3,2,1,1,1,1,3,120,3132,3133,3129,0,1,2,2,2,2,2,3,120,3133,3128,3129,1,3,2,2,2,2,2,3,120,3135,3134,3130,0,1,2,3,3,3,3,3,120,3134,3131,3130,1,3,2,3,3,3,3,3,120,3133,3135,3128,0,1,2,4,4,4,4,3,120,3135,3130,3128,1,3,2,4,4,4,4,3,120,3129,3131,3132,0,1,2,5,5,5,5,3,120,3131,3134,3132,1,3,2,5,5,5,5,3,120,3136,3138,3137,0,1,2,0,0,0,0,3,120,3138,3139,3137,1,3,2,0,0,0,0,3,120,3140,3142,3141,0,1,2,1,1,1,1,3,120,3142,3143,3141,1,3,2,1,1,1,1,3,120,3140,3141,3137,0,1,2,2,2,2,2,3,120,3141,3136,3137,1,3,2,2,2,2,2,3,120,3143,3142,3138,0,1,2,3,3,3,3,3,120,3142,3139,3138,1,3,2,3,3,3,3,3,120,3141,3143,3136,0,1,2,4,4,4,4,3,120,3143,3138,3136,1,3,2,4,4,4,4,3,120,3137,3139,3140,0,1,2,5,5,5,5,3,120,3139,3142,3140,1,3,2,5,5,5,5,3,120,3144,3146,3145,0,1,2,0,0,0,0,3,120,3146,3147,3145,1,3,2,0,0,0,0,3,120,3148,3150,3149,0,1,2,1,1,1,1,3,120,3150,3151,3149,1,3,2,1,1,1,1,3,120,3148,3149,3145,0,1,2,2,2,2,2,3,120,3149,3144,3145,1,3,2,2,2,2,2,3,120,3151,3150,3146,0,1,2,3,3,3,3,3,120,3150,3147,3146,1,3,2,3,3,3,3,3,120,3149,3151,3144,0,1,2,4,4,4,4,3,120,3151,3146,3144,1,3,2,4,4,4,4,3,120,3145,3147,3148,0,1,2,5,5,5,5,3,120,3147,3150,3148,1,3,2,5,5,5,5,3,120,3152,3154,3153,0,1,2,0,0,0,0,3,120,3154,3155,3153,1,3,2,0,0,0,0,3,120,3156,3158,3157,0,1,2,1,1,1,1,3,120,3158,3159,3157,1,3,2,1,1,1,1,3,120,3156,3157,3153,0,1,2,2,2,2,2,3,120,3157,3152,3153,1,3,2,2,2,2,2,3,120,3159,3158,3154,0,1,2,3,3,3,3,3,120,3158,3155,3154,1,3,2,3,3,3,3,3,120,3157,3159,3152,0,1,2,4,4,4,4,3,120,3159,3154,3152,1,3,2,4,4,4,4,3,120,3153,3155,3156,0,1,2,5,5,5,5,3,120,3155,3158,3156,1,3,2,5,5,5,5,3,120,3160,3162,3161,0,1,2,0,0,0,0,3,120,3162,3163,3161,1,3,2,0,0,0,0,3,120,3164,3166,3165,0,1,2,1,1,1,1,3,120,3166,3167,3165,1,3,2,1,1,1,1,3,120,3164,3165,3161,0,1,2,2,2,2,2,3,120,3165,3160,3161,1,3,2,2,2,2,2,3,120,3167,3166,3162,0,1,2,3,3,3,3,3,120,3166,3163,3162,1,3,2,3,3,3,3,3,120,3165,3167,3160,0,1,2,4,4,4,4,3,120,3167,3162,3160,1,3,2,4,4,4,4,3,120,3161,3163,3164,0,1,2,5,5,5,5,3,120,3163,3166,3164,1,3,2,5,5,5,5,3,120,3168,3170,3169,0,1,2,0,0,0,0,0,120,3170,3171,3169,1,3,2,0,0,0,0,0,120,3172,3174,3173,0,1,2,1,1,1,1,0,120,3174,3175,3173,1,3,2,1,1,1,1,0,120,3172,3173,3169,0,1,2,2,2,2,2,0,120,3173,3168,3169,1,3,2,2,2,2,2,0,120,3175,3174,3170,0,1,2,3,3,3,3,0,120,3174,3171,3170,1,3,2,3,3,3,3,0,120,3173,3175,3168,0,1,2,4,4,4,4,0,120,3175,3170,3168,1,3,2,4,4,4,4,0,120,3169,3171,3172,0,1,2,5,5,5,5,0,120,3171,3174,3172,1,3,2,5,5,5,5,0,120,3176,3178,3177,0,1,2,0,0,0,0,1,120,3178,3179,3177,1,3,2,0,0,0,0,1,120,3180,3182,3181,0,1,2,1,1,1,1,1,120,3182,3183,3181,1,3,2,1,1,1,1,1,120,3180,3181,3177,0,1,2,2,2,2,2,1,120,3181,3176,3177,1,3,2,2,2,2,2,1,120,3183,3182,3178,0,1,2,3,3,3,3,1,120,3182,3179,3178,1,3,2,3,3,3,3,1,120,3181,3183,3176,0,1,2,4,4,4,4,1,120,3183,3178,3176,1,3,2,4,4,4,4,1,120,3177,3179,3180,0,1,2,5,5,5,5,1,120,3179,3182,3180,1,3,2,5,5,5,5,1,120,3184,3186,3185,0,1,2,0,0,0,0,0,120,3186,3187,3185,1,3,2,0,0,0,0,0,120,3188,3190,3189,0,1,2,1,1,1,1,0,120,3190,3191,3189,1,3,2,1,1,1,1,0,120,3188,3189,3185,0,1,2,2,2,2,2,0,120,3189,3184,3185,1,3,2,2,2,2,2,0,120,3191,3190,3186,0,1,2,3,3,3,3,0,120,3190,3187,3186,1,3,2,3,3,3,3,0,120,3189,3191,3184,0,1,2,4,4,4,4,0,120,3191,3186,3184,1,3,2,4,4,4,4,0,120,3185,3187,3188,0,1,2,5,5,5,5,0,120,3187,3190,3188,1,3,2,5,5,5,5,0,120,3192,3194,3193,0,1,2,0,0,0,0,1,120,3194,3195,3193,1,3,2,0,0,0,0,1,120,3196,3198,3197,0,1,2,1,1,1,1,1,120,3198,3199,3197,1,3,2,1,1,1,1,1,120,3196,3197,3193,0,1,2,2,2,2,2,1,120,3197,3192,3193,1,3,2,2,2,2,2,1,120,3199,3198,3194,0,1,2,3,3,3,3,1,120,3198,3195,3194,1,3,2,3,3,3,3,1,120,3197,3199,3192,0,1,2,4,4,4,4,1,120,3199,3194,3192,1,3,2,4,4,4,4,1,120,3193,3195,3196,0,1,2,5,5,5,5,1,120,3195,3198,3196,1,3,2,5,5,5,5,1,120,3200,3202,3201,0,1,2,0,0,0,0,0,120,3202,3203,3201,1,3,2,0,0,0,0,0,120,3204,3206,3205,0,1,2,1,1,1,1,0,120,3206,3207,3205,1,3,2,1,1,1,1,0,120,3204,3205,3201,0,1,2,2,2,2,2,0,120,3205,3200,3201,1,3,2,2,2,2,2,0,120,3207,3206,3202,0,1,2,3,3,3,3,0,120,3206,3203,3202,1,3,2,3,3,3,3,0,120,3205,3207,3200,0,1,2,4,4,4,4,0,120,3207,3202,3200,1,3,2,4,4,4,4,0,120,3201,3203,3204,0,1,2,5,5,5,5,0,120,3203,3206,3204,1,3,2,5,5,5,5,0,120,3208,3210,3209,0,1,2,0,0,0,0,0,120,3210,3211,3209,1,3,2,0,0,0,0,0,120,3212,3214,3213,0,1,2,1,1,1,1,0,120,3214,3215,3213,1,3,2,1,1,1,1,0,120,3212,3213,3209,0,1,2,2,2,2,2,0,120,3213,3208,3209,1,3,2,2,2,2,2,0,120,3215,3214,3210,0,1,2,3,3,3,3,0,120,3214,3211,3210,1,3,2,3,3,3,3,0,120,3213,3215,3208,0,1,2,4,4,4,4,0,120,3215,3210,3208,1,3,2,4,4,4,4,0,120,3209,3211,3212,0,1,2,5,5,5,5,0,120,3211,3214,3212,1,3,2,5,5,5,5,0,120,3216,3218,3217,0,1,2,0,0,0,0,0,120,3218,3219,3217,1,3,2,0,0,0,0,0,120,3220,3222,3221,0,1,2,1,1,1,1,0,120,3222,3223,3221,1,3,2,1,1,1,1,0,120,3220,3221,3217,0,1,2,2,2,2,2,0,120,3221,3216,3217,1,3,2,2,2,2,2,0,120,3223,3222,3218,0,1,2,3,3,3,3,0,120,3222,3219,3218,1,3,2,3,3,3,3,0,120,3221,3223,3216,0,1,2,4,4,4,4,0,120,3223,3218,3216,1,3,2,4,4,4,4,0,120,3217,3219,3220,0,1,2,5,5,5,5,0,120,3219,3222,3220,1,3,2,5,5,5,5,0,120,3224,3226,3225,0,1,2,0,0,0,0,1,120,3226,3227,3225,1,3,2,0,0,0,0,1,120,3228,3230,3229,0,1,2,1,1,1,1,1,120,3230,3231,3229,1,3,2,1,1,1,1,1,120,3228,3229,3225,0,1,2,2,2,2,2,1,120,3229,3224,3225,1,3,2,2,2,2,2,1,120,3231,3230,3226,0,1,2,3,3,3,3,1,120,3230,3227,3226,1,3,2,3,3,3,3,1,120,3229,3231,3224,0,1,2,4,4,4,4,1,120,3231,3226,3224,1,3,2,4,4,4,4,1,120,3225,3227,3228,0,1,2,5,5,5,5,1,120,3227,3230,3228,1,3,2,5,5,5,5,1,120,3232,3234,3233,0,1,2,0,0,0,0,1,120,3234,3235,3233,1,3,2,0,0,0,0,1,120,3236,3238,3237,0,1,2,1,1,1,1,1,120,3238,3239,3237,1,3,2,1,1,1,1,1,120,3236,3237,3233,0,1,2,2,2,2,2,1,120,3237,3232,3233,1,3,2,2,2,2,2,1,120,3239,3238,3234,0,1,2,3,3,3,3,1,120,3238,3235,3234,1,3,2,3,3,3,3,1,120,3237,3239,3232,0,1,2,4,4,4,4,1,120,3239,3234,3232,1,3,2,4,4,4,4,1,120,3233,3235,3236,0,1,2,5,5,5,5,1,120,3235,3238,3236,1,3,2,5,5,5,5,1,120,3240,3242,3241,0,1,2,0,0,0,0,0,120,3242,3243,3241,1,3,2,0,0,0,0,0,120,3244,3246,3245,0,1,2,1,1,1,1,0,120,3246,3247,3245,1,3,2,1,1,1,1,0,120,3244,3245,3241,0,1,2,2,2,2,2,0,120,3245,3240,3241,1,3,2,2,2,2,2,0,120,3247,3246,3242,0,1,2,3,3,3,3,0,120,3246,3243,3242,1,3,2,3,3,3,3,0,120,3245,3247,3240,0,1,2,4,4,4,4,0,120,3247,3242,3240,1,3,2,4,4,4,4,0,120,3241,3243,3244,0,1,2,5,5,5,5,0,120,3243,3246,3244,1,3,2,5,5,5,5,0,120,3248,3250,3249,0,1,2,0,0,0,0,3,120,3250,3251,3249,1,3,2,0,0,0,0,3,120,3252,3254,3253,0,1,2,1,1,1,1,3,120,3254,3255,3253,1,3,2,1,1,1,1,3,120,3252,3253,3249,0,1,2,2,2,2,2,3,120,3253,3248,3249,1,3,2,2,2,2,2,3,120,3255,3254,3250,0,1,2,3,3,3,3,3,120,3254,3251,3250,1,3,2,3,3,3,3,3,120,3253,3255,3248,0,1,2,4,4,4,4,3,120,3255,3250,3248,1,3,2,4,4,4,4,3,120,3249,3251,3252,0,1,2,5,5,5,5,3,120,3251,3254,3252,1,3,2,5,5,5,5,3,120,3256,3258,3257,0,1,2,0,0,0,0,3,120,3258,3259,3257,1,3,2,0,0,0,0,3,120,3260,3262,3261,0,1,2,1,1,1,1,3,120,3262,3263,3261,1,3,2,1,1,1,1,3,120,3260,3261,3257,0,1,2,2,2,2,2,3,120,3261,3256,3257,1,3,2,2,2,2,2,3,120,3263,3262,3258,0,1,2,3,3,3,3,3,120,3262,3259,3258,1,3,2,3,3,3,3,3,120,3261,3263,3256,0,1,2,4,4,4,4,3,120,3263,3258,3256,1,3,2,4,4,4,4,3,120,3257,3259,3260,0,1,2,5,5,5,5,3,120,3259,3262,3260,1,3,2,5,5,5,5,3,120,3264,3266,3265,0,1,2,0,0,0,0,3,120,3266,3267,3265,1,3,2,0,0,0,0,3,120,3268,3270,3269,0,1,2,1,1,1,1,3,120,3270,3271,3269,1,3,2,1,1,1,1,3,120,3268,3269,3265,0,1,2,2,2,2,2,3,120,3269,3264,3265,1,3,2,2,2,2,2,3,120,3271,3270,3266,0,1,2,3,3,3,3,3,120,3270,3267,3266,1,3,2,3,3,3,3,3,120,3269,3271,3264,0,1,2,4,4,4,4,3,120,3271,3266,3264,1,3,2,4,4,4,4,3,120,3265,3267,3268,0,1,2,5,5,5,5,3,120,3267,3270,3268,1,3,2,5,5,5,5,3,120,3272,3274,3273,0,1,2,0,0,0,0,3,120,3274,3275,3273,1,3,2,0,0,0,0,3,120,3276,3278,3277,0,1,2,1,1,1,1,3,120,3278,3279,3277,1,3,2,1,1,1,1,3,120,3276,3277,3273,0,1,2,2,2,2,2,3,120,3277,3272,3273,1,3,2,2,2,2,2,3,120,3279,3278,3274,0,1,2,3,3,3,3,3,120,3278,3275,3274,1,3,2,3,3,3,3,3,120,3277,3279,3272,0,1,2,4,4,4,4,3,120,3279,3274,3272,1,3,2,4,4,4,4,3,120,3273,3275,3276,0,1,2,5,5,5,5,3,120,3275,3278,3276,1,3,2,5,5,5,5,3,120,3280,3282,3281,0,1,2,0,0,0,0,3,120,3282,3283,3281,1,3,2,0,0,0,0,3,120,3284,3286,3285,0,1,2,1,1,1,1,3,120,3286,3287,3285,1,3,2,1,1,1,1,3,120,3284,3285,3281,0,1,2,2,2,2,2,3,120,3285,3280,3281,1,3,2,2,2,2,2,3,120,3287,3286,3282,0,1,2,3,3,3,3,3,120,3286,3283,3282,1,3,2,3,3,3,3,3,120,3285,3287,3280,0,1,2,4,4,4,4,3,120,3287,3282,3280,1,3,2,4,4,4,4,3,120,3281,3283,3284,0,1,2,5,5,5,5,3,120,3283,3286,3284,1,3,2,5,5,5,5,3,120,3288,3290,3289,0,1,2,0,0,0,0,3,120,3290,3291,3289,1,3,2,0,0,0,0,3,120,3292,3294,3293,0,1,2,1,1,1,1,3,120,3294,3295,3293,1,3,2,1,1,1,1,3,120,3292,3293,3289,0,1,2,2,2,2,2,3,120,3293,3288,3289,1,3,2,2,2,2,2,3,120,3295,3294,3290,0,1,2,3,3,3,3,3,120,3294,3291,3290,1,3,2,3,3,3,3,3,120,3293,3295,3288,0,1,2,4,4,4,4,3,120,3295,3290,3288,1,3,2,4,4,4,4,3,120,3289,3291,3292,0,1,2,5,5,5,5,3,120,3291,3294,3292,1,3,2,5,5,5,5,3,120,3296,3298,3297,0,1,2,0,0,0,0,3,120,3298,3299,3297,1,3,2,0,0,0,0,3,120,3300,3302,3301,0,1,2,1,1,1,1,3,120,3302,3303,3301,1,3,2,1,1,1,1,3,120,3300,3301,3297,0,1,2,2,2,2,2,3,120,3301,3296,3297,1,3,2,2,2,2,2,3,120,3303,3302,3298,0,1,2,3,3,3,3,3,120,3302,3299,3298,1,3,2,3,3,3,3,3,120,3301,3303,3296,0,1,2,4,4,4,4,3,120,3303,3298,3296,1,3,2,4,4,4,4,3,120,3297,3299,3300,0,1,2,5,5,5,5,3,120,3299,3302,3300,1,3,2,5,5,5,5,3,120,3304,3306,3305,0,1,2,0,0,0,0,3,120,3306,3307,3305,1,3,2,0,0,0,0,3,120,3308,3310,3309,0,1,2,1,1,1,1,3,120,3310,3311,3309,1,3,2,1,1,1,1,3,120,3308,3309,3305,0,1,2,2,2,2,2,3,120,3309,3304,3305,1,3,2,2,2,2,2,3,120,3311,3310,3306,0,1,2,3,3,3,3,3,120,3310,3307,3306,1,3,2,3,3,3,3,3,120,3309,3311,3304,0,1,2,4,4,4,4,3,120,3311,3306,3304,1,3,2,4,4,4,4,3,120,3305,3307,3308,0,1,2,5,5,5,5,3,120,3307,3310,3308,1,3,2,5,5,5,5,3,120,3312,3314,3313,0,1,2,0,0,0,0,3,120,3314,3315,3313,1,3,2,0,0,0,0,3,120,3316,3318,3317,0,1,2,1,1,1,1,3,120,3318,3319,3317,1,3,2,1,1,1,1,3,120,3316,3317,3313,0,1,2,2,2,2,2,3,120,3317,3312,3313,1,3,2,2,2,2,2,3,120,3319,3318,3314,0,1,2,3,3,3,3,3,120,3318,3315,3314,1,3,2,3,3,3,3,3,120,3317,3319,3312,0,1,2,4,4,4,4,3,120,3319,3314,3312,1,3,2,4,4,4,4,3,120,3313,3315,3316,0,1,2,5,5,5,5,3,120,3315,3318,3316,1,3,2,5,5,5,5,3,120,3320,3322,3321,0,1,2,0,0,0,0,3,120,3322,3323,3321,1,3,2,0,0,0,0,3,120,3324,3326,3325,0,1,2,1,1,1,1,3,120,3326,3327,3325,1,3,2,1,1,1,1,3,120,3324,3325,3321,0,1,2,2,2,2,2,3,120,3325,3320,3321,1,3,2,2,2,2,2,3,120,3327,3326,3322,0,1,2,3,3,3,3,3,120,3326,3323,3322,1,3,2,3,3,3,3,3,120,3325,3327,3320,0,1,2,4,4,4,4,3,120,3327,3322,3320,1,3,2,4,4,4,4,3,120,3321,3323,3324,0,1,2,5,5,5,5,3,120,3323,3326,3324,1,3,2,5,5,5,5,3,120,3328,3330,3329,0,1,2,0,0,0,0,3,120,3330,3331,3329,1,3,2,0,0,0,0,3,120,3332,3334,3333,0,1,2,1,1,1,1,3,120,3334,3335,3333,1,3,2,1,1,1,1,3,120,3332,3333,3329,0,1,2,2,2,2,2,3,120,3333,3328,3329,1,3,2,2,2,2,2,3,120,3335,3334,3330,0,1,2,3,3,3,3,3,120,3334,3331,3330,1,3,2,3,3,3,3,3,120,3333,3335,3328,0,1,2,4,4,4,4,3,120,3335,3330,3328,1,3,2,4,4,4,4,3,120,3329,3331,3332,0,1,2,5,5,5,5,3,120,3331,3334,3332,1,3,2,5,5,5,5,3,120,3336,3338,3337,0,1,2,0,0,0,0,3,120,3338,3339,3337,1,3,2,0,0,0,0,3,120,3340,3342,3341,0,1,2,1,1,1,1,3,120,3342,3343,3341,1,3,2,1,1,1,1,3,120,3340,3341,3337,0,1,2,2,2,2,2,3,120,3341,3336,3337,1,3,2,2,2,2,2,3,120,3343,3342,3338,0,1,2,3,3,3,3,3,120,3342,3339,3338,1,3,2,3,3,3,3,3,120,3341,3343,3336,0,1,2,4,4,4,4,3,120,3343,3338,3336,1,3,2,4,4,4,4,3,120,3337,3339,3340,0,1,2,5,5,5,5,3,120,3339,3342,3340,1,3,2,5,5,5,5,3,120,3344,3346,3345,0,1,2,0,0,0,0,0,120,3346,3347,3345,1,3,2,0,0,0,0,0,120,3348,3350,3349,0,1,2,1,1,1,1,0,120,3350,3351,3349,1,3,2,1,1,1,1,0,120,3348,3349,3345,0,1,2,2,2,2,2,0,120,3349,3344,3345,1,3,2,2,2,2,2,0,120,3351,3350,3346,0,1,2,3,3,3,3,0,120,3350,3347,3346,1,3,2,3,3,3,3,0,120,3349,3351,3344,0,1,2,4,4,4,4,0,120,3351,3346,3344,1,3,2,4,4,4,4,0,120,3345,3347,3348,0,1,2,5,5,5,5,0,120,3347,3350,3348,1,3,2,5,5,5,5,0,120,3352,3354,3353,0,1,2,0,0,0,0,0,120,3354,3355,3353,1,3,2,0,0,0,0,0,120,3356,3358,3357,0,1,2,1,1,1,1,0,120,3358,3359,3357,1,3,2,1,1,1,1,0,120,3356,3357,3353,0,1,2,2,2,2,2,0,120,3357,3352,3353,1,3,2,2,2,2,2,0,120,3359,3358,3354,0,1,2,3,3,3,3,0,120,3358,3355,3354,1,3,2,3,3,3,3,0,120,3357,3359,3352,0,1,2,4,4,4,4,0,120,3359,3354,3352,1,3,2,4,4,4,4,0,120,3353,3355,3356,0,1,2,5,5,5,5,0,120,3355,3358,3356,1,3,2,5,5,5,5,0,120,3360,3362,3361,0,1,2,0,0,0,0,0,120,3362,3363,3361,1,3,2,0,0,0,0,0,120,3364,3366,3365,0,1,2,1,1,1,1,0,120,3366,3367,3365,1,3,2,1,1,1,1,0,120,3364,3365,3361,0,1,2,2,2,2,2,0,120,3365,3360,3361,1,3,2,2,2,2,2,0,120,3367,3366,3362,0,1,2,3,3,3,3,0,120,3366,3363,3362,1,3,2,3,3,3,3,0,120,3365,3367,3360,0,1,2,4,4,4,4,0,120,3367,3362,3360,1,3,2,4,4,4,4,0,120,3361,3363,3364,0,1,2,5,5,5,5,0,120,3363,3366,3364,1,3,2,5,5,5,5,0,120,3368,3370,3369,0,1,2,0,0,0,0,0,120,3370,3371,3369,1,3,2,0,0,0,0,0,120,3372,3374,3373,0,1,2,1,1,1,1,0,120,3374,3375,3373,1,3,2,1,1,1,1,0,120,3372,3373,3369,0,1,2,2,2,2,2,0,120,3373,3368,3369,1,3,2,2,2,2,2,0,120,3375,3374,3370,0,1,2,3,3,3,3,0,120,3374,3371,3370,1,3,2,3,3,3,3,0,120,3373,3375,3368,0,1,2,4,4,4,4,0,120,3375,3370,3368,1,3,2,4,4,4,4,0,120,3369,3371,3372,0,1,2,5,5,5,5,0,120,3371,3374,3372,1,3,2,5,5,5,5,0,120,3376,3378,3377,0,1,2,0,0,0,0,0,120,3378,3379,3377,1,3,2,0,0,0,0,0,120,3380,3382,3381,0,1,2,1,1,1,1,0,120,3382,3383,3381,1,3,2,1,1,1,1,0,120,3380,3381,3377,0,1,2,2,2,2,2,0,120,3381,3376,3377,1,3,2,2,2,2,2,0,120,3383,3382,3378,0,1,2,3,3,3,3,0,120,3382,3379,3378,1,3,2,3,3,3,3,0,120,3381,3383,3376,0,1,2,4,4,4,4,0,120,3383,3378,3376,1,3,2,4,4,4,4,0,120,3377,3379,3380,0,1,2,5,5,5,5,0,120,3379,3382,3380,1,3,2,5,5,5,5,0,120,3384,3386,3385,0,1,2,0,0,0,0,0,120,3386,3387,3385,1,3,2,0,0,0,0,0,120,3388,3390,3389,0,1,2,1,1,1,1,0,120,3390,3391,3389,1,3,2,1,1,1,1,0,120,3388,3389,3385,0,1,2,2,2,2,2,0,120,3389,3384,3385,1,3,2,2,2,2,2,0,120,3391,3390,3386,0,1,2,3,3,3,3,0,120,3390,3387,3386,1,3,2,3,3,3,3,0,120,3389,3391,3384,0,1,2,4,4,4,4,0,120,3391,3386,3384,1,3,2,4,4,4,4,0,120,3385,3387,3388,0,1,2,5,5,5,5,0,120,3387,3390,3388,1,3,2,5,5,5,5,0,120,3392,3394,3393,0,1,2,0,0,0,0,0,120,3394,3395,3393,1,3,2,0,0,0,0,0,120,3396,3398,3397,0,1,2,1,1,1,1,0,120,3398,3399,3397,1,3,2,1,1,1,1,0,120,3396,3397,3393,0,1,2,2,2,2,2,0,120,3397,3392,3393,1,3,2,2,2,2,2,0,120,3399,3398,3394,0,1,2,3,3,3,3,0,120,3398,3395,3394,1,3,2,3,3,3,3,0,120,3397,3399,3392,0,1,2,4,4,4,4,0,120,3399,3394,3392,1,3,2,4,4,4,4,0,120,3393,3395,3396,0,1,2,5,5,5,5,0,120,3395,3398,3396,1,3,2,5,5,5,5,0,120,3400,3402,3401,0,1,2,0,0,0,0,0,120,3402,3403,3401,1,3,2,0,0,0,0,0,120,3404,3406,3405,0,1,2,1,1,1,1,0,120,3406,3407,3405,1,3,2,1,1,1,1,0,120,3404,3405,3401,0,1,2,2,2,2,2,0,120,3405,3400,3401,1,3,2,2,2,2,2,0,120,3407,3406,3402,0,1,2,3,3,3,3,0,120,3406,3403,3402,1,3,2,3,3,3,3,0,120,3405,3407,3400,0,1,2,4,4,4,4,0,120,3407,3402,3400,1,3,2,4,4,4,4,0,120,3401,3403,3404,0,1,2,5,5,5,5,0,120,3403,3406,3404,1,3,2,5,5,5,5,0,120,3408,3410,3409,0,1,2,0,0,0,0,0,120,3410,3411,3409,1,3,2,0,0,0,0,0,120,3412,3414,3413,0,1,2,1,1,1,1,0,120,3414,3415,3413,1,3,2,1,1,1,1,0,120,3412,3413,3409,0,1,2,2,2,2,2,0,120,3413,3408,3409,1,3,2,2,2,2,2,0,120,3415,3414,3410,0,1,2,3,3,3,3,0,120,3414,3411,3410,1,3,2,3,3,3,3,0,120,3413,3415,3408,0,1,2,4,4,4,4,0,120,3415,3410,3408,1,3,2,4,4,4,4,0,120,3409,3411,3412,0,1,2,5,5,5,5,0,120,3411,3414,3412,1,3,2,5,5,5,5,0,120,3416,3418,3417,0,1,2,0,0,0,0,0,120,3418,3419,3417,1,3,2,0,0,0,0,0,120,3420,3422,3421,0,1,2,1,1,1,1,0,120,3422,3423,3421,1,3,2,1,1,1,1,0,120,3420,3421,3417,0,1,2,2,2,2,2,0,120,3421,3416,3417,1,3,2,2,2,2,2,0,120,3423,3422,3418,0,1,2,3,3,3,3,0,120,3422,3419,3418,1,3,2,3,3,3,3,0,120,3421,3423,3416,0,1,2,4,4,4,4,0,120,3423,3418,3416,1,3,2,4,4,4,4,0,120,3417,3419,3420,0,1,2,5,5,5,5,0,120,3419,3422,3420,1,3,2,5,5,5,5,0,120,3424,3426,3425,0,1,2,0,0,0,0,0,120,3426,3427,3425,1,3,2,0,0,0,0,0,120,3428,3430,3429,0,1,2,1,1,1,1,0,120,3430,3431,3429,1,3,2,1,1,1,1,0,120,3428,3429,3425,0,1,2,2,2,2,2,0,120,3429,3424,3425,1,3,2,2,2,2,2,0,120,3431,3430,3426,0,1,2,3,3,3,3,0,120,3430,3427,3426,1,3,2,3,3,3,3,0,120,3429,3431,3424,0,1,2,4,4,4,4,0,120,3431,3426,3424,1,3,2,4,4,4,4,0,120,3425,3427,3428,0,1,2,5,5,5,5,0,120,3427,3430,3428,1,3,2,5,5,5,5,0,120,3432,3434,3433,0,1,2,0,0,0,0,0,120,3434,3435,3433,1,3,2,0,0,0,0,0,120,3436,3438,3437,0,1,2,1,1,1,1,0,120,3438,3439,3437,1,3,2,1,1,1,1,0,120,3436,3437,3433,0,1,2,2,2,2,2,0,120,3437,3432,3433,1,3,2,2,2,2,2,0,120,3439,3438,3434,0,1,2,3,3,3,3,0,120,3438,3435,3434,1,3,2,3,3,3,3,0,120,3437,3439,3432,0,1,2,4,4,4,4,0,120,3439,3434,3432,1,3,2,4,4,4,4,0,120,3433,3435,3436,0,1,2,5,5,5,5,0,120,3435,3438,3436,1,3,2,5,5,5,5,0,120,3440,3442,3441,0,1,2,0,0,0,0,0,120,3442,3443,3441,1,3,2,0,0,0,0,0,120,3444,3446,3445,0,1,2,1,1,1,1,0,120,3446,3447,3445,1,3,2,1,1,1,1,0,120,3444,3445,3441,0,1,2,2,2,2,2,0,120,3445,3440,3441,1,3,2,2,2,2,2,0,120,3447,3446,3442,0,1,2,3,3,3,3,0,120,3446,3443,3442,1,3,2,3,3,3,3,0,120,3445,3447,3440,0,1,2,4,4,4,4,0,120,3447,3442,3440,1,3,2,4,4,4,4,0,120,3441,3443,3444,0,1,2,5,5,5,5,0,120,3443,3446,3444,1,3,2,5,5,5,5,0,120,3448,3450,3449,0,1,2,0,0,0,0,0,120,3450,3451,3449,1,3,2,0,0,0,0,0,120,3452,3454,3453,0,1,2,1,1,1,1,0,120,3454,3455,3453,1,3,2,1,1,1,1,0,120,3452,3453,3449,0,1,2,2,2,2,2,0,120,3453,3448,3449,1,3,2,2,2,2,2,0,120,3455,3454,3450,0,1,2,3,3,3,3,0,120,3454,3451,3450,1,3,2,3,3,3,3,0,120,3453,3455,3448,0,1,2,4,4,4,4,0,120,3455,3450,3448,1,3,2,4,4,4,4,0,120,3449,3451,3452,0,1,2,5,5,5,5,0,120,3451,3454,3452,1,3,2,5,5,5,5,0,120,3456,3458,3457,0,1,2,0,0,0,0,0,120,3458,3459,3457,1,3,2,0,0,0,0,0,120,3460,3462,3461,0,1,2,1,1,1,1,0,120,3462,3463,3461,1,3,2,1,1,1,1,0,120,3460,3461,3457,0,1,2,2,2,2,2,0,120,3461,3456,3457,1,3,2,2,2,2,2,0,120,3463,3462,3458,0,1,2,3,3,3,3,0,120,3462,3459,3458,1,3,2,3,3,3,3,0,120,3461,3463,3456,0,1,2,4,4,4,4,0,120,3463,3458,3456,1,3,2,4,4,4,4,0,120,3457,3459,3460,0,1,2,5,5,5,5,0,120,3459,3462,3460,1,3,2,5,5,5,5,0,120,3464,3466,3465,0,1,2,0,0,0,0,0,120,3466,3467,3465,1,3,2,0,0,0,0,0,120,3468,3470,3469,0,1,2,1,1,1,1,0,120,3470,3471,3469,1,3,2,1,1,1,1,0,120,3468,3469,3465,0,1,2,2,2,2,2,0,120,3469,3464,3465,1,3,2,2,2,2,2,0,120,3471,3470,3466,0,1,2,3,3,3,3,0,120,3470,3467,3466,1,3,2,3,3,3,3,0,120,3469,3471,3464,0,1,2,4,4,4,4,0,120,3471,3466,3464,1,3,2,4,4,4,4,0,120,3465,3467,3468,0,1,2,5,5,5,5,0,120,3467,3470,3468,1,3,2,5,5,5,5,0,120,3472,3474,3473,0,1,2,0,0,0,0,0,120,3474,3475,3473,1,3,2,0,0,0,0,0,120,3476,3478,3477,0,1,2,1,1,1,1,0,120,3478,3479,3477,1,3,2,1,1,1,1,0,120,3476,3477,3473,0,1,2,2,2,2,2,0,120,3477,3472,3473,1,3,2,2,2,2,2,0,120,3479,3478,3474,0,1,2,3,3,3,3,0,120,3478,3475,3474,1,3,2,3,3,3,3,0,120,3477,3479,3472,0,1,2,4,4,4,4,0,120,3479,3474,3472,1,3,2,4,4,4,4,0,120,3473,3475,3476,0,1,2,5,5,5,5,0,120,3475,3478,3476,1,3,2,5,5,5,5,0,120,3480,3482,3481,0,1,2,0,0,0,0,0,120,3482,3483,3481,1,3,2,0,0,0,0,0,120,3484,3486,3485,0,1,2,1,1,1,1,0,120,3486,3487,3485,1,3,2,1,1,1,1,0,120,3484,3485,3481,0,1,2,2,2,2,2,0,120,3485,3480,3481,1,3,2,2,2,2,2,0,120,3487,3486,3482,0,1,2,3,3,3,3,0,120,3486,3483,3482,1,3,2,3,3,3,3,0,120,3485,3487,3480,0,1,2,4,4,4,4,0,120,3487,3482,3480,1,3,2,4,4,4,4,0,120,3481,3483,3484,0,1,2,5,5,5,5,0,120,3483,3486,3484,1,3,2,5,5,5,5,0,120,3488,3490,3489,0,1,2,0,0,0,0,0,120,3490,3491,3489,1,3,2,0,0,0,0,0,120,3492,3494,3493,0,1,2,1,1,1,1,0,120,3494,3495,3493,1,3,2,1,1,1,1,0,120,3492,3493,3489,0,1,2,2,2,2,2,0,120,3493,3488,3489,1,3,2,2,2,2,2,0,120,3495,3494,3490,0,1,2,3,3,3,3,0,120,3494,3491,3490,1,3,2,3,3,3,3,0,120,3493,3495,3488,0,1,2,4,4,4,4,0,120,3495,3490,3488,1,3,2,4,4,4,4,0,120,3489,3491,3492,0,1,2,5,5,5,5,0,120,3491,3494,3492,1,3,2,5,5,5,5,0,120,3496,3498,3497,0,1,2,0,0,0,0,0,120,3498,3499,3497,1,3,2,0,0,0,0,0,120,3500,3502,3501,0,1,2,1,1,1,1,0,120,3502,3503,3501,1,3,2,1,1,1,1,0,120,3500,3501,3497,0,1,2,2,2,2,2,0,120,3501,3496,3497,1,3,2,2,2,2,2,0,120,3503,3502,3498,0,1,2,3,3,3,3,0,120,3502,3499,3498,1,3,2,3,3,3,3,0,120,3501,3503,3496,0,1,2,4,4,4,4,0,120,3503,3498,3496,1,3,2,4,4,4,4,0,120,3497,3499,3500,0,1,2,5,5,5,5,0,120,3499,3502,3500,1,3,2,5,5,5,5,0,120,3504,3506,3505,0,1,2,0,0,0,0,0,120,3506,3507,3505,1,3,2,0,0,0,0,0,120,3508,3510,3509,0,1,2,1,1,1,1,0,120,3510,3511,3509,1,3,2,1,1,1,1,0,120,3508,3509,3505,0,1,2,2,2,2,2,0,120,3509,3504,3505,1,3,2,2,2,2,2,0,120,3511,3510,3506,0,1,2,3,3,3,3,0,120,3510,3507,3506,1,3,2,3,3,3,3,0,120,3509,3511,3504,0,1,2,4,4,4,4,0,120,3511,3506,3504,1,3,2,4,4,4,4,0,120,3505,3507,3508,0,1,2,5,5,5,5,0,120,3507,3510,3508,1,3,2,5,5,5,5,0,120,3512,3514,3513,0,1,2,0,0,0,0,0,120,3514,3515,3513,1,3,2,0,0,0,0,0,120,3516,3518,3517,0,1,2,1,1,1,1,0,120,3518,3519,3517,1,3,2,1,1,1,1,0,120,3516,3517,3513,0,1,2,2,2,2,2,0,120,3517,3512,3513,1,3,2,2,2,2,2,0,120,3519,3518,3514,0,1,2,3,3,3,3,0,120,3518,3515,3514,1,3,2,3,3,3,3,0,120,3517,3519,3512,0,1,2,4,4,4,4,0,120,3519,3514,3512,1,3,2,4,4,4,4,0,120,3513,3515,3516,0,1,2,5,5,5,5,0,120,3515,3518,3516,1,3,2,5,5,5,5,0,120,3520,3522,3521,0,1,2,0,0,0,0,0,120,3522,3523,3521,1,3,2,0,0,0,0,0,120,3524,3526,3525,0,1,2,1,1,1,1,0,120,3526,3527,3525,1,3,2,1,1,1,1,0,120,3524,3525,3521,0,1,2,2,2,2,2,0,120,3525,3520,3521,1,3,2,2,2,2,2,0,120,3527,3526,3522,0,1,2,3,3,3,3,0,120,3526,3523,3522,1,3,2,3,3,3,3,0,120,3525,3527,3520,0,1,2,4,4,4,4,0,120,3527,3522,3520,1,3,2,4,4,4,4,0,120,3521,3523,3524,0,1,2,5,5,5,5,0,120,3523,3526,3524,1,3,2,5,5,5,5,0,120,3528,3530,3529,0,1,2,0,0,0,0,0,120,3530,3531,3529,1,3,2,0,0,0,0,0,120,3532,3534,3533,0,1,2,1,1,1,1,0,120,3534,3535,3533,1,3,2,1,1,1,1,0,120,3532,3533,3529,0,1,2,2,2,2,2,0,120,3533,3528,3529,1,3,2,2,2,2,2,0,120,3535,3534,3530,0,1,2,3,3,3,3,0,120,3534,3531,3530,1,3,2,3,3,3,3,0,120,3533,3535,3528,0,1,2,4,4,4,4,0,120,3535,3530,3528,1,3,2,4,4,4,4,0,120,3529,3531,3532,0,1,2,5,5,5,5,0,120,3531,3534,3532,1,3,2,5,5,5,5,0,120,3536,3538,3537,0,1,2,0,0,0,0,0,120,3538,3539,3537,1,3,2,0,0,0,0,0,120,3540,3542,3541,0,1,2,1,1,1,1,0,120,3542,3543,3541,1,3,2,1,1,1,1,0,120,3540,3541,3537,0,1,2,2,2,2,2,0,120,3541,3536,3537,1,3,2,2,2,2,2,0,120,3543,3542,3538,0,1,2,3,3,3,3,0,120,3542,3539,3538,1,3,2,3,3,3,3,0,120,3541,3543,3536,0,1,2,4,4,4,4,0,120,3543,3538,3536,1,3,2,4,4,4,4,0,120,3537,3539,3540,0,1,2,5,5,5,5,0,120,3539,3542,3540,1,3,2,5,5,5,5,0,120,3544,3546,3545,0,1,2,0,0,0,0,0,120,3546,3547,3545,1,3,2,0,0,0,0,0,120,3548,3550,3549,0,1,2,1,1,1,1,0,120,3550,3551,3549,1,3,2,1,1,1,1,0,120,3548,3549,3545,0,1,2,2,2,2,2,0,120,3549,3544,3545,1,3,2,2,2,2,2,0,120,3551,3550,3546,0,1,2,3,3,3,3,0,120,3550,3547,3546,1,3,2,3,3,3,3,0,120,3549,3551,3544,0,1,2,4,4,4,4,0,120,3551,3546,3544,1,3,2,4,4,4,4,0,120,3545,3547,3548,0,1,2,5,5,5,5,0,120,3547,3550,3548,1,3,2,5,5,5,5,0,120,3552,3554,3553,0,1,2,0,0,0,0,0,120,3554,3555,3553,1,3,2,0,0,0,0,0,120,3556,3558,3557,0,1,2,1,1,1,1,0,120,3558,3559,3557,1,3,2,1,1,1,1,0,120,3556,3557,3553,0,1,2,2,2,2,2,0,120,3557,3552,3553,1,3,2,2,2,2,2,0,120,3559,3558,3554,0,1,2,3,3,3,3,0,120,3558,3555,3554,1,3,2,3,3,3,3,0,120,3557,3559,3552,0,1,2,4,4,4,4,0,120,3559,3554,3552,1,3,2,4,4,4,4,0,120,3553,3555,3556,0,1,2,5,5,5,5,0,120,3555,3558,3556,1,3,2,5,5,5,5,0,120,3560,3562,3561,0,1,2,0,0,0,0,0,120,3562,3563,3561,1,3,2,0,0,0,0,0,120,3564,3566,3565,0,1,2,1,1,1,1,0,120,3566,3567,3565,1,3,2,1,1,1,1,0,120,3564,3565,3561,0,1,2,2,2,2,2,0,120,3565,3560,3561,1,3,2,2,2,2,2,0,120,3567,3566,3562,0,1,2,3,3,3,3,0,120,3566,3563,3562,1,3,2,3,3,3,3,0,120,3565,3567,3560,0,1,2,4,4,4,4,0,120,3567,3562,3560,1,3,2,4,4,4,4,0,120,3561,3563,3564,0,1,2,5,5,5,5,0,120,3563,3566,3564,1,3,2,5,5,5,5,0,120,3568,3570,3569,0,1,2,0,0,0,0,0,120,3570,3571,3569,1,3,2,0,0,0,0,0,120,3572,3574,3573,0,1,2,1,1,1,1,0,120,3574,3575,3573,1,3,2,1,1,1,1,0,120,3572,3573,3569,0,1,2,2,2,2,2,0,120,3573,3568,3569,1,3,2,2,2,2,2,0,120,3575,3574,3570,0,1,2,3,3,3,3,0,120,3574,3571,3570,1,3,2,3,3,3,3,0,120,3573,3575,3568,0,1,2,4,4,4,4,0,120,3575,3570,3568,1,3,2,4,4,4,4,0,120,3569,3571,3572,0,1,2,5,5,5,5,0,120,3571,3574,3572,1,3,2,5,5,5,5,0,120,3576,3578,3577,0,1,2,0,0,0,0,0,120,3578,3579,3577,1,3,2,0,0,0,0,0,120,3580,3582,3581,0,1,2,1,1,1,1,0,120,3582,3583,3581,1,3,2,1,1,1,1,0,120,3580,3581,3577,0,1,2,2,2,2,2,0,120,3581,3576,3577,1,3,2,2,2,2,2,0,120,3583,3582,3578,0,1,2,3,3,3,3,0,120,3582,3579,3578,1,3,2,3,3,3,3,0,120,3581,3583,3576,0,1,2,4,4,4,4,0,120,3583,3578,3576,1,3,2,4,4,4,4,0,120,3577,3579,3580,0,1,2,5,5,5,5,0,120,3579,3582,3580,1,3,2,5,5,5,5,0,120,3584,3586,3585,0,1,2,0,0,0,0,3,120,3586,3587,3585,1,3,2,0,0,0,0,3,120,3588,3590,3589,0,1,2,1,1,1,1,3,120,3590,3591,3589,1,3,2,1,1,1,1,3,120,3588,3589,3585,0,1,2,2,2,2,2,3,120,3589,3584,3585,1,3,2,2,2,2,2,3,120,3591,3590,3586,0,1,2,3,3,3,3,3,120,3590,3587,3586,1,3,2,3,3,3,3,3,120,3589,3591,3584,0,1,2,4,4,4,4,3,120,3591,3586,3584,1,3,2,4,4,4,4,3,120,3585,3587,3588,0,1,2,5,5,5,5,3,120,3587,3590,3588,1,3,2,5,5,5,5,3,120,3592,3594,3593,0,1,2,0,0,0,0,3,120,3594,3595,3593,1,3,2,0,0,0,0,3,120,3596,3598,3597,0,1,2,1,1,1,1,3,120,3598,3599,3597,1,3,2,1,1,1,1,3,120,3596,3597,3593,0,1,2,2,2,2,2,3,120,3597,3592,3593,1,3,2,2,2,2,2,3,120,3599,3598,3594,0,1,2,3,3,3,3,3,120,3598,3595,3594,1,3,2,3,3,3,3,3,120,3597,3599,3592,0,1,2,4,4,4,4,3,120,3599,3594,3592,1,3,2,4,4,4,4,3,120,3593,3595,3596,0,1,2,5,5,5,5,3,120,3595,3598,3596,1,3,2,5,5,5,5,3,120,3600,3602,3601,0,1,2,0,0,0,0,3,120,3602,3603,3601,1,3,2,0,0,0,0,3,120,3604,3606,3605,0,1,2,1,1,1,1,3,120,3606,3607,3605,1,3,2,1,1,1,1,3,120,3604,3605,3601,0,1,2,2,2,2,2,3,120,3605,3600,3601,1,3,2,2,2,2,2,3,120,3607,3606,3602,0,1,2,3,3,3,3,3,120,3606,3603,3602,1,3,2,3,3,3,3,3,120,3605,3607,3600,0,1,2,4,4,4,4,3,120,3607,3602,3600,1,3,2,4,4,4,4,3,120,3601,3603,3604,0,1,2,5,5,5,5,3,120,3603,3606,3604,1,3,2,5,5,5,5,3,120,3608,3610,3609,0,1,2,0,0,0,0,3,120,3610,3611,3609,1,3,2,0,0,0,0,3,120,3612,3614,3613,0,1,2,1,1,1,1,3,120,3614,3615,3613,1,3,2,1,1,1,1,3,120,3612,3613,3609,0,1,2,2,2,2,2,3,120,3613,3608,3609,1,3,2,2,2,2,2,3,120,3615,3614,3610,0,1,2,3,3,3,3,3,120,3614,3611,3610,1,3,2,3,3,3,3,3,120,3613,3615,3608,0,1,2,4,4,4,4,3,120,3615,3610,3608,1,3,2,4,4,4,4,3,120,3609,3611,3612,0,1,2,5,5,5,5,3,120,3611,3614,3612,1,3,2,5,5,5,5,3,120,3616,3618,3617,0,1,2,0,0,0,0,3,120,3618,3619,3617,1,3,2,0,0,0,0,3,120,3620,3622,3621,0,1,2,1,1,1,1,3,120,3622,3623,3621,1,3,2,1,1,1,1,3,120,3620,3621,3617,0,1,2,2,2,2,2,3,120,3621,3616,3617,1,3,2,2,2,2,2,3,120,3623,3622,3618,0,1,2,3,3,3,3,3,120,3622,3619,3618,1,3,2,3,3,3,3,3,120,3621,3623,3616,0,1,2,4,4,4,4,3,120,3623,3618,3616,1,3,2,4,4,4,4,3,120,3617,3619,3620,0,1,2,5,5,5,5,3,120,3619,3622,3620,1,3,2,5,5,5,5,3,120,3624,3626,3625,0,1,2,0,0,0,0,3,120,3626,3627,3625,1,3,2,0,0,0,0,3,120,3628,3630,3629,0,1,2,1,1,1,1,3,120,3630,3631,3629,1,3,2,1,1,1,1,3,120,3628,3629,3625,0,1,2,2,2,2,2,3,120,3629,3624,3625,1,3,2,2,2,2,2,3,120,3631,3630,3626,0,1,2,3,3,3,3,3,120,3630,3627,3626,1,3,2,3,3,3,3,3,120,3629,3631,3624,0,1,2,4,4,4,4,3,120,3631,3626,3624,1,3,2,4,4,4,4,3,120,3625,3627,3628,0,1,2,5,5,5,5,3,120,3627,3630,3628,1,3,2,5,5,5,5,3,120,3632,3634,3633,0,1,2,0,0,0,0,3,120,3634,3635,3633,1,3,2,0,0,0,0,3,120,3636,3638,3637,0,1,2,1,1,1,1,3,120,3638,3639,3637,1,3,2,1,1,1,1,3,120,3636,3637,3633,0,1,2,2,2,2,2,3,120,3637,3632,3633,1,3,2,2,2,2,2,3,120,3639,3638,3634,0,1,2,3,3,3,3,3,120,3638,3635,3634,1,3,2,3,3,3,3,3,120,3637,3639,3632,0,1,2,4,4,4,4,3,120,3639,3634,3632,1,3,2,4,4,4,4,3,120,3633,3635,3636,0,1,2,5,5,5,5,3,120,3635,3638,3636,1,3,2,5,5,5,5,3,120,3640,3642,3641,0,1,2,0,0,0,0,3,120,3642,3643,3641,1,3,2,0,0,0,0,3,120,3644,3646,3645,0,1,2,1,1,1,1,3,120,3646,3647,3645,1,3,2,1,1,1,1,3,120,3644,3645,3641,0,1,2,2,2,2,2,3,120,3645,3640,3641,1,3,2,2,2,2,2,3,120,3647,3646,3642,0,1,2,3,3,3,3,3,120,3646,3643,3642,1,3,2,3,3,3,3,3,120,3645,3647,3640,0,1,2,4,4,4,4,3,120,3647,3642,3640,1,3,2,4,4,4,4,3,120,3641,3643,3644,0,1,2,5,5,5,5,3,120,3643,3646,3644,1,3,2,5,5,5,5,3,120,3648,3650,3649,0,1,2,0,0,0,0,3,120,3650,3651,3649,1,3,2,0,0,0,0,3,120,3652,3654,3653,0,1,2,1,1,1,1,3,120,3654,3655,3653,1,3,2,1,1,1,1,3,120,3652,3653,3649,0,1,2,2,2,2,2,3,120,3653,3648,3649,1,3,2,2,2,2,2,3,120,3655,3654,3650,0,1,2,3,3,3,3,3,120,3654,3651,3650,1,3,2,3,3,3,3,3,120,3653,3655,3648,0,1,2,4,4,4,4,3,120,3655,3650,3648,1,3,2,4,4,4,4,3,120,3649,3651,3652,0,1,2,5,5,5,5,3,120,3651,3654,3652,1,3,2,5,5,5,5,3,120,3656,3658,3657,0,1,2,0,0,0,0,3,120,3658,3659,3657,1,3,2,0,0,0,0,3,120,3660,3662,3661,0,1,2,1,1,1,1,3,120,3662,3663,3661,1,3,2,1,1,1,1,3,120,3660,3661,3657,0,1,2,2,2,2,2,3,120,3661,3656,3657,1,3,2,2,2,2,2,3,120,3663,3662,3658,0,1,2,3,3,3,3,3,120,3662,3659,3658,1,3,2,3,3,3,3,3,120,3661,3663,3656,0,1,2,4,4,4,4,3,120,3663,3658,3656,1,3,2,4,4,4,4,3,120,3657,3659,3660,0,1,2,5,5,5,5,3,120,3659,3662,3660,1,3,2,5,5,5,5,3,120,3664,3666,3665,0,1,2,0,0,0,0,3,120,3666,3667,3665,1,3,2,0,0,0,0,3,120,3668,3670,3669,0,1,2,1,1,1,1,3,120,3670,3671,3669,1,3,2,1,1,1,1,3,120,3668,3669,3665,0,1,2,2,2,2,2,3,120,3669,3664,3665,1,3,2,2,2,2,2,3,120,3671,3670,3666,0,1,2,3,3,3,3,3,120,3670,3667,3666,1,3,2,3,3,3,3,3,120,3669,3671,3664,0,1,2,4,4,4,4,3,120,3671,3666,3664,1,3,2,4,4,4,4,3,120,3665,3667,3668,0,1,2,5,5,5,5,3,120,3667,3670,3668,1,3,2,5,5,5,5,3,120,3672,3674,3673,0,1,2,0,0,0,0,3,120,3674,3675,3673,1,3,2,0,0,0,0,3,120,3676,3678,3677,0,1,2,1,1,1,1,3,120,3678,3679,3677,1,3,2,1,1,1,1,3,120,3676,3677,3673,0,1,2,2,2,2,2,3,120,3677,3672,3673,1,3,2,2,2,2,2,3,120,3679,3678,3674,0,1,2,3,3,3,3,3,120,3678,3675,3674,1,3,2,3,3,3,3,3,120,3677,3679,3672,0,1,2,4,4,4,4,3,120,3679,3674,3672,1,3,2,4,4,4,4,3,120,3673,3675,3676,0,1,2,5,5,5,5,3,120,3675,3678,3676,1,3,2,5,5,5,5,3,120,3680,3682,3681,0,1,2,0,0,0,0,3,120,3682,3683,3681,1,3,2,0,0,0,0,3,120,3684,3686,3685,0,1,2,1,1,1,1,3,120,3686,3687,3685,1,3,2,1,1,1,1,3,120,3684,3685,3681,0,1,2,2,2,2,2,3,120,3685,3680,3681,1,3,2,2,2,2,2,3,120,3687,3686,3682,0,1,2,3,3,3,3,3,120,3686,3683,3682,1,3,2,3,3,3,3,3,120,3685,3687,3680,0,1,2,4,4,4,4,3,120,3687,3682,3680,1,3,2,4,4,4,4,3,120,3681,3683,3684,0,1,2,5,5,5,5,3,120,3683,3686,3684,1,3,2,5,5,5,5,3,120,3688,3690,3689,0,1,2,0,0,0,0,3,120,3690,3691,3689,1,3,2,0,0,0,0,3,120,3692,3694,3693,0,1,2,1,1,1,1,3,120,3694,3695,3693,1,3,2,1,1,1,1,3,120,3692,3693,3689,0,1,2,2,2,2,2,3,120,3693,3688,3689,1,3,2,2,2,2,2,3,120,3695,3694,3690,0,1,2,3,3,3,3,3,120,3694,3691,3690,1,3,2,3,3,3,3,3,120,3693,3695,3688,0,1,2,4,4,4,4,3,120,3695,3690,3688,1,3,2,4,4,4,4,3,120,3689,3691,3692,0,1,2,5,5,5,5,3,120,3691,3694,3692,1,3,2,5,5,5,5,3,120,3696,3698,3697,0,1,2,0,0,0,0,3,120,3698,3699,3697,1,3,2,0,0,0,0,3,120,3700,3702,3701,0,1,2,1,1,1,1,3,120,3702,3703,3701,1,3,2,1,1,1,1,3,120,3700,3701,3697,0,1,2,2,2,2,2,3,120,3701,3696,3697,1,3,2,2,2,2,2,3,120,3703,3702,3698,0,1,2,3,3,3,3,3,120,3702,3699,3698,1,3,2,3,3,3,3,3,120,3701,3703,3696,0,1,2,4,4,4,4,3,120,3703,3698,3696,1,3,2,4,4,4,4,3,120,3697,3699,3700,0,1,2,5,5,5,5,3,120,3699,3702,3700,1,3,2,5,5,5,5,3,120,3704,3706,3705,0,1,2,0,0,0,0,3,120,3706,3707,3705,1,3,2,0,0,0,0,3,120,3708,3710,3709,0,1,2,1,1,1,1,3,120,3710,3711,3709,1,3,2,1,1,1,1,3,120,3708,3709,3705,0,1,2,2,2,2,2,3,120,3709,3704,3705,1,3,2,2,2,2,2,3,120,3711,3710,3706,0,1,2,3,3,3,3,3,120,3710,3707,3706,1,3,2,3,3,3,3,3,120,3709,3711,3704,0,1,2,4,4,4,4,3,120,3711,3706,3704,1,3,2,4,4,4,4,3,120,3705,3707,3708,0,1,2,5,5,5,5,3,120,3707,3710,3708,1,3,2,5,5,5,5,3,120,3712,3714,3713,0,1,2,0,0,0,0,3,120,3714,3715,3713,1,3,2,0,0,0,0,3,120,3716,3718,3717,0,1,2,1,1,1,1,3,120,3718,3719,3717,1,3,2,1,1,1,1,3,120,3716,3717,3713,0,1,2,2,2,2,2,3,120,3717,3712,3713,1,3,2,2,2,2,2,3,120,3719,3718,3714,0,1,2,3,3,3,3,3,120,3718,3715,3714,1,3,2,3,3,3,3,3,120,3717,3719,3712,0,1,2,4,4,4,4,3,120,3719,3714,3712,1,3,2,4,4,4,4,3,120,3713,3715,3716,0,1,2,5,5,5,5,3,120,3715,3718,3716,1,3,2,5,5,5,5,3,120,3720,3722,3721,0,1,2,0,0,0,0,3,120,3722,3723,3721,1,3,2,0,0,0,0,3,120,3724,3726,3725,0,1,2,1,1,1,1,3,120,3726,3727,3725,1,3,2,1,1,1,1,3,120,3724,3725,3721,0,1,2,2,2,2,2,3,120,3725,3720,3721,1,3,2,2,2,2,2,3,120,3727,3726,3722,0,1,2,3,3,3,3,3,120,3726,3723,3722,1,3,2,3,3,3,3,3,120,3725,3727,3720,0,1,2,4,4,4,4,3,120,3727,3722,3720,1,3,2,4,4,4,4,3,120,3721,3723,3724,0,1,2,5,5,5,5,3,120,3723,3726,3724,1,3,2,5,5,5,5,3,120,3728,3730,3729,0,1,2,0,0,0,0,3,120,3730,3731,3729,1,3,2,0,0,0,0,3,120,3732,3734,3733,0,1,2,1,1,1,1,3,120,3734,3735,3733,1,3,2,1,1,1,1,3,120,3732,3733,3729,0,1,2,2,2,2,2,3,120,3733,3728,3729,1,3,2,2,2,2,2,3,120,3735,3734,3730,0,1,2,3,3,3,3,3,120,3734,3731,3730,1,3,2,3,3,3,3,3,120,3733,3735,3728,0,1,2,4,4,4,4,3,120,3735,3730,3728,1,3,2,4,4,4,4,3,120,3729,3731,3732,0,1,2,5,5,5,5,3,120,3731,3734,3732,1,3,2,5,5,5,5,3,120,3736,3738,3737,0,1,2,0,0,0,0,3,120,3738,3739,3737,1,3,2,0,0,0,0,3,120,3740,3742,3741,0,1,2,1,1,1,1,3,120,3742,3743,3741,1,3,2,1,1,1,1,3,120,3740,3741,3737,0,1,2,2,2,2,2,3,120,3741,3736,3737,1,3,2,2,2,2,2,3,120,3743,3742,3738,0,1,2,3,3,3,3,3,120,3742,3739,3738,1,3,2,3,3,3,3,3,120,3741,3743,3736,0,1,2,4,4,4,4,3,120,3743,3738,3736,1,3,2,4,4,4,4,3,120,3737,3739,3740,0,1,2,5,5,5,5,3,120,3739,3742,3740,1,3,2,5,5,5,5,3,120,3744,3746,3745,0,1,2,0,0,0,0,3,120,3746,3747,3745,1,3,2,0,0,0,0,3,120,3748,3750,3749,0,1,2,1,1,1,1,3,120,3750,3751,3749,1,3,2,1,1,1,1,3,120,3748,3749,3745,0,1,2,2,2,2,2,3,120,3749,3744,3745,1,3,2,2,2,2,2,3,120,3751,3750,3746,0,1,2,3,3,3,3,3,120,3750,3747,3746,1,3,2,3,3,3,3,3,120,3749,3751,3744,0,1,2,4,4,4,4,3,120,3751,3746,3744,1,3,2,4,4,4,4,3,120,3745,3747,3748,0,1,2,5,5,5,5,3,120,3747,3750,3748,1,3,2,5,5,5,5,3,120,3752,3754,3753,0,1,2,0,0,0,0,3,120,3754,3755,3753,1,3,2,0,0,0,0,3,120,3756,3758,3757,0,1,2,1,1,1,1,3,120,3758,3759,3757,1,3,2,1,1,1,1,3,120,3756,3757,3753,0,1,2,2,2,2,2,3,120,3757,3752,3753,1,3,2,2,2,2,2,3,120,3759,3758,3754,0,1,2,3,3,3,3,3,120,3758,3755,3754,1,3,2,3,3,3,3,3,120,3757,3759,3752,0,1,2,4,4,4,4,3,120,3759,3754,3752,1,3,2,4,4,4,4,3,120,3753,3755,3756,0,1,2,5,5,5,5,3,120,3755,3758,3756,1,3,2,5,5,5,5,3,120,3760,3762,3761,0,1,2,0,0,0,0,3,120,3762,3763,3761,1,3,2,0,0,0,0,3,120,3764,3766,3765,0,1,2,1,1,1,1,3,120,3766,3767,3765,1,3,2,1,1,1,1,3,120,3764,3765,3761,0,1,2,2,2,2,2,3,120,3765,3760,3761,1,3,2,2,2,2,2,3,120,3767,3766,3762,0,1,2,3,3,3,3,3,120,3766,3763,3762,1,3,2,3,3,3,3,3,120,3765,3767,3760,0,1,2,4,4,4,4,3,120,3767,3762,3760,1,3,2,4,4,4,4,3,120,3761,3763,3764,0,1,2,5,5,5,5,3,120,3763,3766,3764,1,3,2,5,5,5,5,3,120,3768,3770,3769,0,1,2,0,0,0,0,3,120,3770,3771,3769,1,3,2,0,0,0,0,3,120,3772,3774,3773,0,1,2,1,1,1,1,3,120,3774,3775,3773,1,3,2,1,1,1,1,3,120,3772,3773,3769,0,1,2,2,2,2,2,3,120,3773,3768,3769,1,3,2,2,2,2,2,3,120,3775,3774,3770,0,1,2,3,3,3,3,3,120,3774,3771,3770,1,3,2,3,3,3,3,3,120,3773,3775,3768,0,1,2,4,4,4,4,3,120,3775,3770,3768,1,3,2,4,4,4,4,3,120,3769,3771,3772,0,1,2,5,5,5,5,3,120,3771,3774,3772,1,3,2,5,5,5,5,3,120,3776,3778,3777,0,1,2,0,0,0,0,3,120,3778,3779,3777,1,3,2,0,0,0,0,3,120,3780,3782,3781,0,1,2,1,1,1,1,3,120,3782,3783,3781,1,3,2,1,1,1,1,3,120,3780,3781,3777,0,1,2,2,2,2,2,3,120,3781,3776,3777,1,3,2,2,2,2,2,3,120,3783,3782,3778,0,1,2,3,3,3,3,3,120,3782,3779,3778,1,3,2,3,3,3,3,3,120,3781,3783,3776,0,1,2,4,4,4,4,3,120,3783,3778,3776,1,3,2,4,4,4,4,3,120,3777,3779,3780,0,1,2,5,5,5,5,3,120,3779,3782,3780,1,3,2,5,5,5,5,3,120,3784,3786,3785,0,1,2,0,0,0,0,3,120,3786,3787,3785,1,3,2,0,0,0,0,3,120,3788,3790,3789,0,1,2,1,1,1,1,3,120,3790,3791,3789,1,3,2,1,1,1,1,3,120,3788,3789,3785,0,1,2,2,2,2,2,3,120,3789,3784,3785,1,3,2,2,2,2,2,3,120,3791,3790,3786,0,1,2,3,3,3,3,3,120,3790,3787,3786,1,3,2,3,3,3,3,3,120,3789,3791,3784,0,1,2,4,4,4,4,3,120,3791,3786,3784,1,3,2,4,4,4,4,3,120,3785,3787,3788,0,1,2,5,5,5,5,3,120,3787,3790,3788,1,3,2,5,5,5,5,3,120,3792,3794,3793,0,1,2,0,0,0,0,3,120,3794,3795,3793,1,3,2,0,0,0,0,3,120,3796,3798,3797,0,1,2,1,1,1,1,3,120,3798,3799,3797,1,3,2,1,1,1,1,3,120,3796,3797,3793,0,1,2,2,2,2,2,3,120,3797,3792,3793,1,3,2,2,2,2,2,3,120,3799,3798,3794,0,1,2,3,3,3,3,3,120,3798,3795,3794,1,3,2,3,3,3,3,3,120,3797,3799,3792,0,1,2,4,4,4,4,3,120,3799,3794,3792,1,3,2,4,4,4,4,3,120,3793,3795,3796,0,1,2,5,5,5,5,3,120,3795,3798,3796,1,3,2,5,5,5,5,3,120,3800,3802,3801,0,1,2,0,0,0,0,3,120,3802,3803,3801,1,3,2,0,0,0,0,3,120,3804,3806,3805,0,1,2,1,1,1,1,3,120,3806,3807,3805,1,3,2,1,1,1,1,3,120,3804,3805,3801,0,1,2,2,2,2,2,3,120,3805,3800,3801,1,3,2,2,2,2,2,3,120,3807,3806,3802,0,1,2,3,3,3,3,3,120,3806,3803,3802,1,3,2,3,3,3,3,3,120,3805,3807,3800,0,1,2,4,4,4,4,3,120,3807,3802,3800,1,3,2,4,4,4,4,3,120,3801,3803,3804,0,1,2,5,5,5,5,3,120,3803,3806,3804,1,3,2,5,5,5,5,3,120,3808,3810,3809,0,1,2,0,0,0,0,3,120,3810,3811,3809,1,3,2,0,0,0,0,3,120,3812,3814,3813,0,1,2,1,1,1,1,3,120,3814,3815,3813,1,3,2,1,1,1,1,3,120,3812,3813,3809,0,1,2,2,2,2,2,3,120,3813,3808,3809,1,3,2,2,2,2,2,3,120,3815,3814,3810,0,1,2,3,3,3,3,3,120,3814,3811,3810,1,3,2,3,3,3,3,3,120,3813,3815,3808,0,1,2,4,4,4,4,3,120,3815,3810,3808,1,3,2,4,4,4,4,3,120,3809,3811,3812,0,1,2,5,5,5,5,3,120,3811,3814,3812,1,3,2,5,5,5,5,3,120,3816,3818,3817,0,1,2,0,0,0,0,3,120,3818,3819,3817,1,3,2,0,0,0,0,3,120,3820,3822,3821,0,1,2,1,1,1,1,3,120,3822,3823,3821,1,3,2,1,1,1,1,3,120,3820,3821,3817,0,1,2,2,2,2,2,3,120,3821,3816,3817,1,3,2,2,2,2,2,3,120,3823,3822,3818,0,1,2,3,3,3,3,3,120,3822,3819,3818,1,3,2,3,3,3,3,3,120,3821,3823,3816,0,1,2,4,4,4,4,3,120,3823,3818,3816,1,3,2,4,4,4,4,3,120,3817,3819,3820,0,1,2,5,5,5,5,3,120,3819,3822,3820,1,3,2,5,5,5,5,3,120,3824,3826,3825,0,1,2,0,0,0,0,3,120,3826,3827,3825,1,3,2,0,0,0,0,3,120,3828,3830,3829,0,1,2,1,1,1,1,3,120,3830,3831,3829,1,3,2,1,1,1,1,3,120,3828,3829,3825,0,1,2,2,2,2,2,3,120,3829,3824,3825,1,3,2,2,2,2,2,3,120,3831,3830,3826,0,1,2,3,3,3,3,3,120,3830,3827,3826,1,3,2,3,3,3,3,3,120,3829,3831,3824,0,1,2,4,4,4,4,3,120,3831,3826,3824,1,3,2,4,4,4,4,3,120,3825,3827,3828,0,1,2,5,5,5,5,3,120,3827,3830,3828,1,3,2,5,5,5,5,3,120,3832,3834,3833,0,1,2,0,0,0,0,3,120,3834,3835,3833,1,3,2,0,0,0,0,3,120,3836,3838,3837,0,1,2,1,1,1,1,3,120,3838,3839,3837,1,3,2,1,1,1,1,3,120,3836,3837,3833,0,1,2,2,2,2,2,3,120,3837,3832,3833,1,3,2,2,2,2,2,3,120,3839,3838,3834,0,1,2,3,3,3,3,3,120,3838,3835,3834,1,3,2,3,3,3,3,3,120,3837,3839,3832,0,1,2,4,4,4,4,3,120,3839,3834,3832,1,3,2,4,4,4,4,3,120,3833,3835,3836,0,1,2,5,5,5,5,3,120,3835,3838,3836,1,3,2,5,5,5,5,3,120,3840,3842,3841,0,1,2,0,0,0,0,3,120,3842,3843,3841,1,3,2,0,0,0,0,3,120,3844,3846,3845,0,1,2,1,1,1,1,3,120,3846,3847,3845,1,3,2,1,1,1,1,3,120,3844,3845,3841,0,1,2,2,2,2,2,3,120,3845,3840,3841,1,3,2,2,2,2,2,3,120,3847,3846,3842,0,1,2,3,3,3,3,3,120,3846,3843,3842,1,3,2,3,3,3,3,3,120,3845,3847,3840,0,1,2,4,4,4,4,3,120,3847,3842,3840,1,3,2,4,4,4,4,3,120,3841,3843,3844,0,1,2,5,5,5,5,3,120,3843,3846,3844,1,3,2,5,5,5,5,3,120,3848,3850,3849,0,1,2,0,0,0,0,3,120,3850,3851,3849,1,3,2,0,0,0,0,3,120,3852,3854,3853,0,1,2,1,1,1,1,3,120,3854,3855,3853,1,3,2,1,1,1,1,3,120,3852,3853,3849,0,1,2,2,2,2,2,3,120,3853,3848,3849,1,3,2,2,2,2,2,3,120,3855,3854,3850,0,1,2,3,3,3,3,3,120,3854,3851,3850,1,3,2,3,3,3,3,3,120,3853,3855,3848,0,1,2,4,4,4,4,3,120,3855,3850,3848,1,3,2,4,4,4,4,3,120,3849,3851,3852,0,1,2,5,5,5,5,3,120,3851,3854,3852,1,3,2,5,5,5,5,3,120,3856,3858,3857,0,1,2,0,0,0,0,3,120,3858,3859,3857,1,3,2,0,0,0,0,3,120,3860,3862,3861,0,1,2,1,1,1,1,3,120,3862,3863,3861,1,3,2,1,1,1,1,3,120,3860,3861,3857,0,1,2,2,2,2,2,3,120,3861,3856,3857,1,3,2,2,2,2,2,3,120,3863,3862,3858,0,1,2,3,3,3,3,3,120,3862,3859,3858,1,3,2,3,3,3,3,3,120,3861,3863,3856,0,1,2,4,4,4,4,3,120,3863,3858,3856,1,3,2,4,4,4,4,3,120,3857,3859,3860,0,1,2,5,5,5,5,3,120,3859,3862,3860,1,3,2,5,5,5,5,3,120,3864,3866,3865,0,1,2,0,0,0,0,3,120,3866,3867,3865,1,3,2,0,0,0,0,3,120,3868,3870,3869,0,1,2,1,1,1,1,3,120,3870,3871,3869,1,3,2,1,1,1,1,3,120,3868,3869,3865,0,1,2,2,2,2,2,3,120,3869,3864,3865,1,3,2,2,2,2,2,3,120,3871,3870,3866,0,1,2,3,3,3,3,3,120,3870,3867,3866,1,3,2,3,3,3,3,3,120,3869,3871,3864,0,1,2,4,4,4,4,3,120,3871,3866,3864,1,3,2,4,4,4,4,3,120,3865,3867,3868,0,1,2,5,5,5,5,3,120,3867,3870,3868,1,3,2,5,5,5,5,3,120,3872,3874,3873,0,1,2,0,0,0,0,3,120,3874,3875,3873,1,3,2,0,0,0,0,3,120,3876,3878,3877,0,1,2,1,1,1,1,3,120,3878,3879,3877,1,3,2,1,1,1,1,3,120,3876,3877,3873,0,1,2,2,2,2,2,3,120,3877,3872,3873,1,3,2,2,2,2,2,3,120,3879,3878,3874,0,1,2,3,3,3,3,3,120,3878,3875,3874,1,3,2,3,3,3,3,3,120,3877,3879,3872,0,1,2,4,4,4,4,3,120,3879,3874,3872,1,3,2,4,4,4,4,3,120,3873,3875,3876,0,1,2,5,5,5,5,3,120,3875,3878,3876,1,3,2,5,5,5,5,3,120,3880,3882,3881,0,1,2,0,0,0,0,3,120,3882,3883,3881,1,3,2,0,0,0,0,3,120,3884,3886,3885,0,1,2,1,1,1,1,3,120,3886,3887,3885,1,3,2,1,1,1,1,3,120,3884,3885,3881,0,1,2,2,2,2,2,3,120,3885,3880,3881,1,3,2,2,2,2,2,3,120,3887,3886,3882,0,1,2,3,3,3,3,3,120,3886,3883,3882,1,3,2,3,3,3,3,3,120,3885,3887,3880,0,1,2,4,4,4,4,3,120,3887,3882,3880,1,3,2,4,4,4,4,3,120,3881,3883,3884,0,1,2,5,5,5,5,3,120,3883,3886,3884,1,3,2,5,5,5,5,3,120,3888,3890,3889,0,1,2,0,0,0,0,3,120,3890,3891,3889,1,3,2,0,0,0,0,3,120,3892,3894,3893,0,1,2,1,1,1,1,3,120,3894,3895,3893,1,3,2,1,1,1,1,3,120,3892,3893,3889,0,1,2,2,2,2,2,3,120,3893,3888,3889,1,3,2,2,2,2,2,3,120,3895,3894,3890,0,1,2,3,3,3,3,3,120,3894,3891,3890,1,3,2,3,3,3,3,3,120,3893,3895,3888,0,1,2,4,4,4,4,3,120,3895,3890,3888,1,3,2,4,4,4,4,3,120,3889,3891,3892,0,1,2,5,5,5,5,3,120,3891,3894,3892,1,3,2,5,5,5,5,3,120,3896,3898,3897,0,1,2,0,0,0,0,3,120,3898,3899,3897,1,3,2,0,0,0,0,3,120,3900,3902,3901,0,1,2,1,1,1,1,3,120,3902,3903,3901,1,3,2,1,1,1,1,3,120,3900,3901,3897,0,1,2,2,2,2,2,3,120,3901,3896,3897,1,3,2,2,2,2,2,3,120,3903,3902,3898,0,1,2,3,3,3,3,3,120,3902,3899,3898,1,3,2,3,3,3,3,3,120,3901,3903,3896,0,1,2,4,4,4,4,3,120,3903,3898,3896,1,3,2,4,4,4,4,3,120,3897,3899,3900,0,1,2,5,5,5,5,3,120,3899,3902,3900,1,3,2,5,5,5,5,3,120,3904,3906,3905,0,1,2,0,0,0,0,3,120,3906,3907,3905,1,3,2,0,0,0,0,3,120,3908,3910,3909,0,1,2,1,1,1,1,3,120,3910,3911,3909,1,3,2,1,1,1,1,3,120,3908,3909,3905,0,1,2,2,2,2,2,3,120,3909,3904,3905,1,3,2,2,2,2,2,3,120,3911,3910,3906,0,1,2,3,3,3,3,3,120,3910,3907,3906,1,3,2,3,3,3,3,3,120,3909,3911,3904,0,1,2,4,4,4,4,3,120,3911,3906,3904,1,3,2,4,4,4,4,3,120,3905,3907,3908,0,1,2,5,5,5,5,3,120,3907,3910,3908,1,3,2,5,5,5,5,3,120,3912,3914,3913,0,1,2,0,0,0,0,3,120,3914,3915,3913,1,3,2,0,0,0,0,3,120,3916,3918,3917,0,1,2,1,1,1,1,3,120,3918,3919,3917,1,3,2,1,1,1,1,3,120,3916,3917,3913,0,1,2,2,2,2,2,3,120,3917,3912,3913,1,3,2,2,2,2,2,3,120,3919,3918,3914,0,1,2,3,3,3,3,3,120,3918,3915,3914,1,3,2,3,3,3,3,3,120,3917,3919,3912,0,1,2,4,4,4,4,3,120,3919,3914,3912,1,3,2,4,4,4,4,3,120,3913,3915,3916,0,1,2,5,5,5,5,3,120,3915,3918,3916,1,3,2,5,5,5,5,3,120,3920,3922,3921,0,1,2,0,0,0,0,3,120,3922,3923,3921,1,3,2,0,0,0,0,3,120,3924,3926,3925,0,1,2,1,1,1,1,3,120,3926,3927,3925,1,3,2,1,1,1,1,3,120,3924,3925,3921,0,1,2,2,2,2,2,3,120,3925,3920,3921,1,3,2,2,2,2,2,3,120,3927,3926,3922,0,1,2,3,3,3,3,3,120,3926,3923,3922,1,3,2,3,3,3,3,3,120,3925,3927,3920,0,1,2,4,4,4,4,3,120,3927,3922,3920,1,3,2,4,4,4,4,3,120,3921,3923,3924,0,1,2,5,5,5,5,3,120,3923,3926,3924,1,3,2,5,5,5,5,3,120,3928,3930,3929,0,1,2,0,0,0,0,3,120,3930,3931,3929,1,3,2,0,0,0,0,3,120,3932,3934,3933,0,1,2,1,1,1,1,3,120,3934,3935,3933,1,3,2,1,1,1,1,3,120,3932,3933,3929,0,1,2,2,2,2,2,3,120,3933,3928,3929,1,3,2,2,2,2,2,3,120,3935,3934,3930,0,1,2,3,3,3,3,3,120,3934,3931,3930,1,3,2,3,3,3,3,3,120,3933,3935,3928,0,1,2,4,4,4,4,3,120,3935,3930,3928,1,3,2,4,4,4,4,3,120,3929,3931,3932,0,1,2,5,5,5,5,3,120,3931,3934,3932,1,3,2,5,5,5,5,3,120,3936,3938,3937,0,1,2,0,0,0,0,3,120,3938,3939,3937,1,3,2,0,0,0,0,3,120,3940,3942,3941,0,1,2,1,1,1,1,3,120,3942,3943,3941,1,3,2,1,1,1,1,3,120,3940,3941,3937,0,1,2,2,2,2,2,3,120,3941,3936,3937,1,3,2,2,2,2,2,3,120,3943,3942,3938,0,1,2,3,3,3,3,3,120,3942,3939,3938,1,3,2,3,3,3,3,3,120,3941,3943,3936,0,1,2,4,4,4,4,3,120,3943,3938,3936,1,3,2,4,4,4,4,3,120,3937,3939,3940,0,1,2,5,5,5,5,3,120,3939,3942,3940,1,3,2,5,5,5,5,3,120,3944,3946,3945,0,1,2,0,0,0,0,3,120,3946,3947,3945,1,3,2,0,0,0,0,3,120,3948,3950,3949,0,1,2,1,1,1,1,3,120,3950,3951,3949,1,3,2,1,1,1,1,3,120,3948,3949,3945,0,1,2,2,2,2,2,3,120,3949,3944,3945,1,3,2,2,2,2,2,3,120,3951,3950,3946,0,1,2,3,3,3,3,3,120,3950,3947,3946,1,3,2,3,3,3,3,3,120,3949,3951,3944,0,1,2,4,4,4,4,3,120,3951,3946,3944,1,3,2,4,4,4,4,3,120,3945,3947,3948,0,1,2,5,5,5,5,3,120,3947,3950,3948,1,3,2,5,5,5,5,3,120,3952,3954,3953,0,1,2,0,0,0,0,3,120,3954,3955,3953,1,3,2,0,0,0,0,3,120,3956,3958,3957,0,1,2,1,1,1,1,3,120,3958,3959,3957,1,3,2,1,1,1,1,3,120,3956,3957,3953,0,1,2,2,2,2,2,3,120,3957,3952,3953,1,3,2,2,2,2,2,3,120,3959,3958,3954,0,1,2,3,3,3,3,3,120,3958,3955,3954,1,3,2,3,3,3,3,3,120,3957,3959,3952,0,1,2,4,4,4,4,3,120,3959,3954,3952,1,3,2,4,4,4,4,3,120,3953,3955,3956,0,1,2,5,5,5,5,3,120,3955,3958,3956,1,3,2,5,5,5,5,3,120,3960,3962,3961,0,1,2,0,0,0,0,3,120,3962,3963,3961,1,3,2,0,0,0,0,3,120,3964,3966,3965,0,1,2,1,1,1,1,3,120,3966,3967,3965,1,3,2,1,1,1,1,3,120,3964,3965,3961,0,1,2,2,2,2,2,3,120,3965,3960,3961,1,3,2,2,2,2,2,3,120,3967,3966,3962,0,1,2,3,3,3,3,3,120,3966,3963,3962,1,3,2,3,3,3,3,3,120,3965,3967,3960,0,1,2,4,4,4,4,3,120,3967,3962,3960,1,3,2,4,4,4,4,3,120,3961,3963,3964,0,1,2,5,5,5,5,3,120,3963,3966,3964,1,3,2,5,5,5,5,3,120,3968,3970,3969,0,1,2,0,0,0,0,3,120,3970,3971,3969,1,3,2,0,0,0,0,3,120,3972,3974,3973,0,1,2,1,1,1,1,3,120,3974,3975,3973,1,3,2,1,1,1,1,3,120,3972,3973,3969,0,1,2,2,2,2,2,3,120,3973,3968,3969,1,3,2,2,2,2,2,3,120,3975,3974,3970,0,1,2,3,3,3,3,3,120,3974,3971,3970,1,3,2,3,3,3,3,3,120,3973,3975,3968,0,1,2,4,4,4,4,3,120,3975,3970,3968,1,3,2,4,4,4,4,3,120,3969,3971,3972,0,1,2,5,5,5,5,3,120,3971,3974,3972,1,3,2,5,5,5,5,3,120,3976,3978,3977,0,1,2,0,0,0,0,3,120,3978,3979,3977,1,3,2,0,0,0,0,3,120,3980,3982,3981,0,1,2,1,1,1,1,3,120,3982,3983,3981,1,3,2,1,1,1,1,3,120,3980,3981,3977,0,1,2,2,2,2,2,3,120,3981,3976,3977,1,3,2,2,2,2,2,3,120,3983,3982,3978,0,1,2,3,3,3,3,3,120,3982,3979,3978,1,3,2,3,3,3,3,3,120,3981,3983,3976,0,1,2,4,4,4,4,3,120,3983,3978,3976,1,3,2,4,4,4,4,3,120,3977,3979,3980,0,1,2,5,5,5,5,3,120,3979,3982,3980,1,3,2,5,5,5,5,3,120,3984,3986,3985,0,1,2,0,0,0,0,3,120,3986,3987,3985,1,3,2,0,0,0,0,3,120,3988,3990,3989,0,1,2,1,1,1,1,3,120,3990,3991,3989,1,3,2,1,1,1,1,3,120,3988,3989,3985,0,1,2,2,2,2,2,3,120,3989,3984,3985,1,3,2,2,2,2,2,3,120,3991,3990,3986,0,1,2,3,3,3,3,3,120,3990,3987,3986,1,3,2,3,3,3,3,3,120,3989,3991,3984,0,1,2,4,4,4,4,3,120,3991,3986,3984,1,3,2,4,4,4,4,3,120,3985,3987,3988,0,1,2,5,5,5,5,3,120,3987,3990,3988,1,3,2,5,5,5,5,3,120,3992,3994,3993,0,1,2,0,0,0,0,3,120,3994,3995,3993,1,3,2,0,0,0,0,3,120,3996,3998,3997,0,1,2,1,1,1,1,3,120,3998,3999,3997,1,3,2,1,1,1,1,3,120,3996,3997,3993,0,1,2,2,2,2,2,3,120,3997,3992,3993,1,3,2,2,2,2,2,3,120,3999,3998,3994,0,1,2,3,3,3,3,3,120,3998,3995,3994,1,3,2,3,3,3,3,3,120,3997,3999,3992,0,1,2,4,4,4,4,3,120,3999,3994,3992,1,3,2,4,4,4,4,3,120,3993,3995,3996,0,1,2,5,5,5,5,3,120,3995,3998,3996,1,3,2,5,5,5,5,3,120,4000,4002,4001,0,1,2,0,0,0,0,3,120,4002,4003,4001,1,3,2,0,0,0,0,3,120,4004,4006,4005,0,1,2,1,1,1,1,3,120,4006,4007,4005,1,3,2,1,1,1,1,3,120,4004,4005,4001,0,1,2,2,2,2,2,3,120,4005,4000,4001,1,3,2,2,2,2,2,3,120,4007,4006,4002,0,1,2,3,3,3,3,3,120,4006,4003,4002,1,3,2,3,3,3,3,3,120,4005,4007,4000,0,1,2,4,4,4,4,3,120,4007,4002,4000,1,3,2,4,4,4,4,3,120,4001,4003,4004,0,1,2,5,5,5,5,3,120,4003,4006,4004,1,3,2,5,5,5,5,3,120,4008,4010,4009,0,1,2,0,0,0,0,3,120,4010,4011,4009,1,3,2,0,0,0,0,3,120,4012,4014,4013,0,1,2,1,1,1,1,3,120,4014,4015,4013,1,3,2,1,1,1,1,3,120,4012,4013,4009,0,1,2,2,2,2,2,3,120,4013,4008,4009,1,3,2,2,2,2,2,3,120,4015,4014,4010,0,1,2,3,3,3,3,3,120,4014,4011,4010,1,3,2,3,3,3,3,3,120,4013,4015,4008,0,1,2,4,4,4,4,3,120,4015,4010,4008,1,3,2,4,4,4,4,3,120,4009,4011,4012,0,1,2,5,5,5,5,3,120,4011,4014,4012,1,3,2,5,5,5,5,3,120,4016,4018,4017,0,1,2,0,0,0,0,3,120,4018,4019,4017,1,3,2,0,0,0,0,3,120,4020,4022,4021,0,1,2,1,1,1,1,3,120,4022,4023,4021,1,3,2,1,1,1,1,3,120,4020,4021,4017,0,1,2,2,2,2,2,3,120,4021,4016,4017,1,3,2,2,2,2,2,3,120,4023,4022,4018,0,1,2,3,3,3,3,3,120,4022,4019,4018,1,3,2,3,3,3,3,3,120,4021,4023,4016,0,1,2,4,4,4,4,3,120,4023,4018,4016,1,3,2,4,4,4,4,3,120,4017,4019,4020,0,1,2,5,5,5,5,3,120,4019,4022,4020,1,3,2,5,5,5,5,3,120,4024,4026,4025,0,1,2,0,0,0,0,3,120,4026,4027,4025,1,3,2,0,0,0,0,3,120,4028,4030,4029,0,1,2,1,1,1,1,3,120,4030,4031,4029,1,3,2,1,1,1,1,3,120,4028,4029,4025,0,1,2,2,2,2,2,3,120,4029,4024,4025,1,3,2,2,2,2,2,3,120,4031,4030,4026,0,1,2,3,3,3,3,3,120,4030,4027,4026,1,3,2,3,3,3,3,3,120,4029,4031,4024,0,1,2,4,4,4,4,3,120,4031,4026,4024,1,3,2,4,4,4,4,3,120,4025,4027,4028,0,1,2,5,5,5,5,3,120,4027,4030,4028,1,3,2,5,5,5,5,3,120,4032,4034,4033,0,1,2,0,0,0,0,3,120,4034,4035,4033,1,3,2,0,0,0,0,3,120,4036,4038,4037,0,1,2,1,1,1,1,3,120,4038,4039,4037,1,3,2,1,1,1,1,3,120,4036,4037,4033,0,1,2,2,2,2,2,3,120,4037,4032,4033,1,3,2,2,2,2,2,3,120,4039,4038,4034,0,1,2,3,3,3,3,3,120,4038,4035,4034,1,3,2,3,3,3,3,3,120,4037,4039,4032,0,1,2,4,4,4,4,3,120,4039,4034,4032,1,3,2,4,4,4,4,3,120,4033,4035,4036,0,1,2,5,5,5,5,3,120,4035,4038,4036,1,3,2,5,5,5,5,3,120,4040,4042,4041,0,1,2,0,0,0,0,3,120,4042,4043,4041,1,3,2,0,0,0,0,3,120,4044,4046,4045,0,1,2,1,1,1,1,3,120,4046,4047,4045,1,3,2,1,1,1,1,3,120,4044,4045,4041,0,1,2,2,2,2,2,3,120,4045,4040,4041,1,3,2,2,2,2,2,3,120,4047,4046,4042,0,1,2,3,3,3,3,3,120,4046,4043,4042,1,3,2,3,3,3,3,3,120,4045,4047,4040,0,1,2,4,4,4,4,3,120,4047,4042,4040,1,3,2,4,4,4,4,3,120,4041,4043,4044,0,1,2,5,5,5,5,3,120,4043,4046,4044,1,3,2,5,5,5,5,3,120,4048,4050,4049,0,1,2,0,0,0,0,3,120,4050,4051,4049,1,3,2,0,0,0,0,3,120,4052,4054,4053,0,1,2,1,1,1,1,3,120,4054,4055,4053,1,3,2,1,1,1,1,3,120,4052,4053,4049,0,1,2,2,2,2,2,3,120,4053,4048,4049,1,3,2,2,2,2,2,3,120,4055,4054,4050,0,1,2,3,3,3,3,3,120,4054,4051,4050,1,3,2,3,3,3,3,3,120,4053,4055,4048,0,1,2,4,4,4,4,3,120,4055,4050,4048,1,3,2,4,4,4,4,3,120,4049,4051,4052,0,1,2,5,5,5,5,3,120,4051,4054,4052,1,3,2,5,5,5,5,3,120,4056,4058,4057,0,1,2,0,0,0,0,3,120,4058,4059,4057,1,3,2,0,0,0,0,3,120,4060,4062,4061,0,1,2,1,1,1,1,3,120,4062,4063,4061,1,3,2,1,1,1,1,3,120,4060,4061,4057,0,1,2,2,2,2,2,3,120,4061,4056,4057,1,3,2,2,2,2,2,3,120,4063,4062,4058,0,1,2,3,3,3,3,3,120,4062,4059,4058,1,3,2,3,3,3,3,3,120,4061,4063,4056,0,1,2,4,4,4,4,3,120,4063,4058,4056,1,3,2,4,4,4,4,3,120,4057,4059,4060,0,1,2,5,5,5,5,3,120,4059,4062,4060,1,3,2,5,5,5,5,3,120,4064,4066,4065,0,1,2,0,0,0,0,3,120,4066,4067,4065,1,3,2,0,0,0,0,3,120,4068,4070,4069,0,1,2,1,1,1,1,3,120,4070,4071,4069,1,3,2,1,1,1,1,3,120,4068,4069,4065,0,1,2,2,2,2,2,3,120,4069,4064,4065,1,3,2,2,2,2,2,3,120,4071,4070,4066,0,1,2,3,3,3,3,3,120,4070,4067,4066,1,3,2,3,3,3,3,3,120,4069,4071,4064,0,1,2,4,4,4,4,3,120,4071,4066,4064,1,3,2,4,4,4,4,3,120,4065,4067,4068,0,1,2,5,5,5,5,3,120,4067,4070,4068,1,3,2,5,5,5,5,3,120,4072,4074,4073,0,1,2,0,0,0,0,3,120,4074,4075,4073,1,3,2,0,0,0,0,3,120,4076,4078,4077,0,1,2,1,1,1,1,3,120,4078,4079,4077,1,3,2,1,1,1,1,3,120,4076,4077,4073,0,1,2,2,2,2,2,3,120,4077,4072,4073,1,3,2,2,2,2,2,3,120,4079,4078,4074,0,1,2,3,3,3,3,3,120,4078,4075,4074,1,3,2,3,3,3,3,3,120,4077,4079,4072,0,1,2,4,4,4,4,3,120,4079,4074,4072,1,3,2,4,4,4,4,3,120,4073,4075,4076,0,1,2,5,5,5,5,3,120,4075,4078,4076,1,3,2,5,5,5,5,3,120,4080,4082,4081,0,1,2,0,0,0,0,3,120,4082,4083,4081,1,3,2,0,0,0,0,3,120,4084,4086,4085,0,1,2,1,1,1,1,3,120,4086,4087,4085,1,3,2,1,1,1,1,3,120,4084,4085,4081,0,1,2,2,2,2,2,3,120,4085,4080,4081,1,3,2,2,2,2,2,3,120,4087,4086,4082,0,1,2,3,3,3,3,3,120,4086,4083,4082,1,3,2,3,3,3,3,3,120,4085,4087,4080,0,1,2,4,4,4,4,3,120,4087,4082,4080,1,3,2,4,4,4,4,3,120,4081,4083,4084,0,1,2,5,5,5,5,3,120,4083,4086,4084,1,3,2,5,5,5,5,3,120,4088,4090,4089,0,1,2,0,0,0,0,3,120,4090,4091,4089,1,3,2,0,0,0,0,3,120,4092,4094,4093,0,1,2,1,1,1,1,3,120,4094,4095,4093,1,3,2,1,1,1,1,3,120,4092,4093,4089,0,1,2,2,2,2,2,3,120,4093,4088,4089,1,3,2,2,2,2,2,3,120,4095,4094,4090,0,1,2,3,3,3,3,3,120,4094,4091,4090,1,3,2,3,3,3,3,3,120,4093,4095,4088,0,1,2,4,4,4,4,3,120,4095,4090,4088,1,3,2,4,4,4,4,3,120,4089,4091,4092,0,1,2,5,5,5,5,3,120,4091,4094,4092,1,3,2,5,5,5,5,3,120,4096,4098,4097,0,1,2,0,0,0,0,3,120,4098,4099,4097,1,3,2,0,0,0,0,3,120,4100,4102,4101,0,1,2,1,1,1,1,3,120,4102,4103,4101,1,3,2,1,1,1,1,3,120,4100,4101,4097,0,1,2,2,2,2,2,3,120,4101,4096,4097,1,3,2,2,2,2,2,3,120,4103,4102,4098,0,1,2,3,3,3,3,3,120,4102,4099,4098,1,3,2,3,3,3,3,3,120,4101,4103,4096,0,1,2,4,4,4,4,3,120,4103,4098,4096,1,3,2,4,4,4,4,3,120,4097,4099,4100,0,1,2,5,5,5,5,3,120,4099,4102,4100,1,3,2,5,5,5,5,3,120,4104,4106,4105,0,1,2,0,0,0,0,3,120,4106,4107,4105,1,3,2,0,0,0,0,3,120,4108,4110,4109,0,1,2,1,1,1,1,3,120,4110,4111,4109,1,3,2,1,1,1,1,3,120,4108,4109,4105,0,1,2,2,2,2,2,3,120,4109,4104,4105,1,3,2,2,2,2,2,3,120,4111,4110,4106,0,1,2,3,3,3,3,3,120,4110,4107,4106,1,3,2,3,3,3,3,3,120,4109,4111,4104,0,1,2,4,4,4,4,3,120,4111,4106,4104,1,3,2,4,4,4,4,3,120,4105,4107,4108,0,1,2,5,5,5,5,3,120,4107,4110,4108,1,3,2,5,5,5,5,3,120,4112,4114,4113,0,1,2,0,0,0,0,3,120,4114,4115,4113,1,3,2,0,0,0,0,3,120,4116,4118,4117,0,1,2,1,1,1,1,3,120,4118,4119,4117,1,3,2,1,1,1,1,3,120,4116,4117,4113,0,1,2,2,2,2,2,3,120,4117,4112,4113,1,3,2,2,2,2,2,3,120,4119,4118,4114,0,1,2,3,3,3,3,3,120,4118,4115,4114,1,3,2,3,3,3,3,3,120,4117,4119,4112,0,1,2,4,4,4,4,3,120,4119,4114,4112,1,3,2,4,4,4,4,3,120,4113,4115,4116,0,1,2,5,5,5,5,3,120,4115,4118,4116,1,3,2,5,5,5,5,3,120,4120,4122,4121,0,1,2,0,0,0,0,3,120,4122,4123,4121,1,3,2,0,0,0,0,3,120,4124,4126,4125,0,1,2,1,1,1,1,3,120,4126,4127,4125,1,3,2,1,1,1,1,3,120,4124,4125,4121,0,1,2,2,2,2,2,3,120,4125,4120,4121,1,3,2,2,2,2,2,3,120,4127,4126,4122,0,1,2,3,3,3,3,3,120,4126,4123,4122,1,3,2,3,3,3,3,3,120,4125,4127,4120,0,1,2,4,4,4,4,3,120,4127,4122,4120,1,3,2,4,4,4,4,3,120,4121,4123,4124,0,1,2,5,5,5,5,3,120,4123,4126,4124,1,3,2,5,5,5,5,3,120,4128,4130,4129,0,1,2,0,0,0,0,3,120,4130,4131,4129,1,3,2,0,0,0,0,3,120,4132,4134,4133,0,1,2,1,1,1,1,3,120,4134,4135,4133,1,3,2,1,1,1,1,3,120,4132,4133,4129,0,1,2,2,2,2,2,3,120,4133,4128,4129,1,3,2,2,2,2,2,3,120,4135,4134,4130,0,1,2,3,3,3,3,3,120,4134,4131,4130,1,3,2,3,3,3,3,3,120,4133,4135,4128,0,1,2,4,4,4,4,3,120,4135,4130,4128,1,3,2,4,4,4,4,3,120,4129,4131,4132,0,1,2,5,5,5,5,3,120,4131,4134,4132,1,3,2,5,5,5,5,3,120,4136,4138,4137,0,1,2,0,0,0,0,3,120,4138,4139,4137,1,3,2,0,0,0,0,3,120,4140,4142,4141,0,1,2,1,1,1,1,3,120,4142,4143,4141,1,3,2,1,1,1,1,3,120,4140,4141,4137,0,1,2,2,2,2,2,3,120,4141,4136,4137,1,3,2,2,2,2,2,3,120,4143,4142,4138,0,1,2,3,3,3,3,3,120,4142,4139,4138,1,3,2,3,3,3,3,3,120,4141,4143,4136,0,1,2,4,4,4,4,3,120,4143,4138,4136,1,3,2,4,4,4,4,3,120,4137,4139,4140,0,1,2,5,5,5,5,3,120,4139,4142,4140,1,3,2,5,5,5,5,3,120,4144,4146,4145,0,1,2,0,0,0,0,3,120,4146,4147,4145,1,3,2,0,0,0,0,3,120,4148,4150,4149,0,1,2,1,1,1,1,3,120,4150,4151,4149,1,3,2,1,1,1,1,3,120,4148,4149,4145,0,1,2,2,2,2,2,3,120,4149,4144,4145,1,3,2,2,2,2,2,3,120,4151,4150,4146,0,1,2,3,3,3,3,3,120,4150,4147,4146,1,3,2,3,3,3,3,3,120,4149,4151,4144,0,1,2,4,4,4,4,3,120,4151,4146,4144,1,3,2,4,4,4,4,3,120,4145,4147,4148,0,1,2,5,5,5,5,3,120,4147,4150,4148,1,3,2,5,5,5,5,3,120,4152,4154,4153,0,1,2,0,0,0,0,3,120,4154,4155,4153,1,3,2,0,0,0,0,3,120,4156,4158,4157,0,1,2,1,1,1,1,3,120,4158,4159,4157,1,3,2,1,1,1,1,3,120,4156,4157,4153,0,1,2,2,2,2,2,3,120,4157,4152,4153,1,3,2,2,2,2,2,3,120,4159,4158,4154,0,1,2,3,3,3,3,3,120,4158,4155,4154,1,3,2,3,3,3,3,3,120,4157,4159,4152,0,1,2,4,4,4,4,3,120,4159,4154,4152,1,3,2,4,4,4,4,3,120,4153,4155,4156,0,1,2,5,5,5,5,3,120,4155,4158,4156,1,3,2,5,5,5,5,3,120,4160,4162,4161,0,1,2,0,0,0,0,3,120,4162,4163,4161,1,3,2,0,0,0,0,3,120,4164,4166,4165,0,1,2,1,1,1,1,3,120,4166,4167,4165,1,3,2,1,1,1,1,3,120,4164,4165,4161,0,1,2,2,2,2,2,3,120,4165,4160,4161,1,3,2,2,2,2,2,3,120,4167,4166,4162,0,1,2,3,3,3,3,3,120,4166,4163,4162,1,3,2,3,3,3,3,3,120,4165,4167,4160,0,1,2,4,4,4,4,3,120,4167,4162,4160,1,3,2,4,4,4,4,3,120,4161,4163,4164,0,1,2,5,5,5,5,3,120,4163,4166,4164,1,3,2,5,5,5,5,3,120,4168,4170,4169,0,1,2,0,0,0,0,3,120,4170,4171,4169,1,3,2,0,0,0,0,3,120,4172,4174,4173,0,1,2,1,1,1,1,3,120,4174,4175,4173,1,3,2,1,1,1,1,3,120,4172,4173,4169,0,1,2,2,2,2,2,3,120,4173,4168,4169,1,3,2,2,2,2,2,3,120,4175,4174,4170,0,1,2,3,3,3,3,3,120,4174,4171,4170,1,3,2,3,3,3,3,3,120,4173,4175,4168,0,1,2,4,4,4,4,3,120,4175,4170,4168,1,3,2,4,4,4,4,3,120,4169,4171,4172,0,1,2,5,5,5,5,3,120,4171,4174,4172,1,3,2,5,5,5,5,3,120,4176,4178,4177,0,1,2,0,0,0,0,3,120,4178,4179,4177,1,3,2,0,0,0,0,3,120,4180,4182,4181,0,1,2,1,1,1,1,3,120,4182,4183,4181,1,3,2,1,1,1,1,3,120,4180,4181,4177,0,1,2,2,2,2,2,3,120,4181,4176,4177,1,3,2,2,2,2,2,3,120,4183,4182,4178,0,1,2,3,3,3,3,3,120,4182,4179,4178,1,3,2,3,3,3,3,3,120,4181,4183,4176,0,1,2,4,4,4,4,3,120,4183,4178,4176,1,3,2,4,4,4,4,3,120,4177,4179,4180,0,1,2,5,5,5,5,3,120,4179,4182,4180,1,3,2,5,5,5,5,3,120,4184,4186,4185,0,1,2,0,0,0,0,3,120,4186,4187,4185,1,3,2,0,0,0,0,3,120,4188,4190,4189,0,1,2,1,1,1,1,3,120,4190,4191,4189,1,3,2,1,1,1,1,3,120,4188,4189,4185,0,1,2,2,2,2,2,3,120,4189,4184,4185,1,3,2,2,2,2,2,3,120,4191,4190,4186,0,1,2,3,3,3,3,3,120,4190,4187,4186,1,3,2,3,3,3,3,3,120,4189,4191,4184,0,1,2,4,4,4,4,3,120,4191,4186,4184,1,3,2,4,4,4,4,3,120,4185,4187,4188,0,1,2,5,5,5,5,3,120,4187,4190,4188,1,3,2,5,5,5,5,3,120,4192,4194,4193,0,1,2,0,0,0,0,3,120,4194,4195,4193,1,3,2,0,0,0,0,3,120,4196,4198,4197,0,1,2,1,1,1,1,3,120,4198,4199,4197,1,3,2,1,1,1,1,3,120,4196,4197,4193,0,1,2,2,2,2,2,3,120,4197,4192,4193,1,3,2,2,2,2,2,3,120,4199,4198,4194,0,1,2,3,3,3,3,3,120,4198,4195,4194,1,3,2,3,3,3,3,3,120,4197,4199,4192,0,1,2,4,4,4,4,3,120,4199,4194,4192,1,3,2,4,4,4,4,3,120,4193,4195,4196,0,1,2,5,5,5,5,3,120,4195,4198,4196,1,3,2,5,5,5,5,3,120,4200,4202,4201,0,1,2,0,0,0,0,3,120,4202,4203,4201,1,3,2,0,0,0,0,3,120,4204,4206,4205,0,1,2,1,1,1,1,3,120,4206,4207,4205,1,3,2,1,1,1,1,3,120,4204,4205,4201,0,1,2,2,2,2,2,3,120,4205,4200,4201,1,3,2,2,2,2,2,3,120,4207,4206,4202,0,1,2,3,3,3,3,3,120,4206,4203,4202,1,3,2,3,3,3,3,3,120,4205,4207,4200,0,1,2,4,4,4,4,3,120,4207,4202,4200,1,3,2,4,4,4,4,3,120,4201,4203,4204,0,1,2,5,5,5,5,3,120,4203,4206,4204,1,3,2,5,5,5,5,3,120,4208,4210,4209,0,1,2,0,0,0,0,3,120,4210,4211,4209,1,3,2,0,0,0,0,3,120,4212,4214,4213,0,1,2,1,1,1,1,3,120,4214,4215,4213,1,3,2,1,1,1,1,3,120,4212,4213,4209,0,1,2,2,2,2,2,3,120,4213,4208,4209,1,3,2,2,2,2,2,3,120,4215,4214,4210,0,1,2,3,3,3,3,3,120,4214,4211,4210,1,3,2,3,3,3,3,3,120,4213,4215,4208,0,1,2,4,4,4,4,3,120,4215,4210,4208,1,3,2,4,4,4,4,3,120,4209,4211,4212,0,1,2,5,5,5,5,3,120,4211,4214,4212,1,3,2,5,5,5,5,3,120,4216,4218,4217,0,1,2,0,0,0,0,3,120,4218,4219,4217,1,3,2,0,0,0,0,3,120,4220,4222,4221,0,1,2,1,1,1,1,3,120,4222,4223,4221,1,3,2,1,1,1,1,3,120,4220,4221,4217,0,1,2,2,2,2,2,3,120,4221,4216,4217,1,3,2,2,2,2,2,3,120,4223,4222,4218,0,1,2,3,3,3,3,3,120,4222,4219,4218,1,3,2,3,3,3,3,3,120,4221,4223,4216,0,1,2,4,4,4,4,3,120,4223,4218,4216,1,3,2,4,4,4,4,3,120,4217,4219,4220,0,1,2,5,5,5,5,3,120,4219,4222,4220,1,3,2,5,5,5,5,3,120,4224,4226,4225,0,1,2,0,0,0,0,3,120,4226,4227,4225,1,3,2,0,0,0,0,3,120,4228,4230,4229,0,1,2,1,1,1,1,3,120,4230,4231,4229,1,3,2,1,1,1,1,3,120,4228,4229,4225,0,1,2,2,2,2,2,3,120,4229,4224,4225,1,3,2,2,2,2,2,3,120,4231,4230,4226,0,1,2,3,3,3,3,3,120,4230,4227,4226,1,3,2,3,3,3,3,3,120,4229,4231,4224,0,1,2,4,4,4,4,3,120,4231,4226,4224,1,3,2,4,4,4,4,3,120,4225,4227,4228,0,1,2,5,5,5,5,3,120,4227,4230,4228,1,3,2,5,5,5,5,3,120,4232,4234,4233,0,1,2,0,0,0,0,3,120,4234,4235,4233,1,3,2,0,0,0,0,3,120,4236,4238,4237,0,1,2,1,1,1,1,3,120,4238,4239,4237,1,3,2,1,1,1,1,3,120,4236,4237,4233,0,1,2,2,2,2,2,3,120,4237,4232,4233,1,3,2,2,2,2,2,3,120,4239,4238,4234,0,1,2,3,3,3,3,3,120,4238,4235,4234,1,3,2,3,3,3,3,3,120,4237,4239,4232,0,1,2,4,4,4,4,3,120,4239,4234,4232,1,3,2,4,4,4,4,3,120,4233,4235,4236,0,1,2,5,5,5,5,3,120,4235,4238,4236,1,3,2,5,5,5,5,3,120,4240,4242,4241,0,1,2,0,0,0,0,3,120,4242,4243,4241,1,3,2,0,0,0,0,3,120,4244,4246,4245,0,1,2,1,1,1,1,3,120,4246,4247,4245,1,3,2,1,1,1,1,3,120,4244,4245,4241,0,1,2,2,2,2,2,3,120,4245,4240,4241,1,3,2,2,2,2,2,3,120,4247,4246,4242,0,1,2,3,3,3,3,3,120,4246,4243,4242,1,3,2,3,3,3,3,3,120,4245,4247,4240,0,1,2,4,4,4,4,3,120,4247,4242,4240,1,3,2,4,4,4,4,3,120,4241,4243,4244,0,1,2,5,5,5,5,3,120,4243,4246,4244,1,3,2,5,5,5,5,3,120,4248,4250,4249,0,1,2,0,0,0,0,3,120,4250,4251,4249,1,3,2,0,0,0,0,3,120,4252,4254,4253,0,1,2,1,1,1,1,3,120,4254,4255,4253,1,3,2,1,1,1,1,3,120,4252,4253,4249,0,1,2,2,2,2,2,3,120,4253,4248,4249,1,3,2,2,2,2,2,3,120,4255,4254,4250,0,1,2,3,3,3,3,3,120,4254,4251,4250,1,3,2,3,3,3,3,3,120,4253,4255,4248,0,1,2,4,4,4,4,3,120,4255,4250,4248,1,3,2,4,4,4,4,3,120,4249,4251,4252,0,1,2,5,5,5,5,3,120,4251,4254,4252,1,3,2,5,5,5,5,3,120,4256,4258,4257,0,1,2,0,0,0,0,3,120,4258,4259,4257,1,3,2,0,0,0,0,3,120,4260,4262,4261,0,1,2,1,1,1,1,3,120,4262,4263,4261,1,3,2,1,1,1,1,3,120,4260,4261,4257,0,1,2,2,2,2,2,3,120,4261,4256,4257,1,3,2,2,2,2,2,3,120,4263,4262,4258,0,1,2,3,3,3,3,3,120,4262,4259,4258,1,3,2,3,3,3,3,3,120,4261,4263,4256,0,1,2,4,4,4,4,3,120,4263,4258,4256,1,3,2,4,4,4,4,3,120,4257,4259,4260,0,1,2,5,5,5,5,3,120,4259,4262,4260,1,3,2,5,5,5,5,3,120,4264,4266,4265,0,1,2,0,0,0,0,3,120,4266,4267,4265,1,3,2,0,0,0,0,3,120,4268,4270,4269,0,1,2,1,1,1,1,3,120,4270,4271,4269,1,3,2,1,1,1,1,3,120,4268,4269,4265,0,1,2,2,2,2,2,3,120,4269,4264,4265,1,3,2,2,2,2,2,3,120,4271,4270,4266,0,1,2,3,3,3,3,3,120,4270,4267,4266,1,3,2,3,3,3,3,3,120,4269,4271,4264,0,1,2,4,4,4,4,3,120,4271,4266,4264,1,3,2,4,4,4,4,3,120,4265,4267,4268,0,1,2,5,5,5,5,3,120,4267,4270,4268,1,3,2,5,5,5,5,3,120,4272,4274,4273,0,1,2,0,0,0,0,3,120,4274,4275,4273,1,3,2,0,0,0,0,3,120,4276,4278,4277,0,1,2,1,1,1,1,3,120,4278,4279,4277,1,3,2,1,1,1,1,3,120,4276,4277,4273,0,1,2,2,2,2,2,3,120,4277,4272,4273,1,3,2,2,2,2,2,3,120,4279,4278,4274,0,1,2,3,3,3,3,3,120,4278,4275,4274,1,3,2,3,3,3,3,3,120,4277,4279,4272,0,1,2,4,4,4,4,3,120,4279,4274,4272,1,3,2,4,4,4,4,3,120,4273,4275,4276,0,1,2,5,5,5,5,3,120,4275,4278,4276,1,3,2,5,5,5,5,3,120,4280,4282,4281,0,1,2,0,0,0,0,3,120,4282,4283,4281,1,3,2,0,0,0,0,3,120,4284,4286,4285,0,1,2,1,1,1,1,3,120,4286,4287,4285,1,3,2,1,1,1,1,3,120,4284,4285,4281,0,1,2,2,2,2,2,3,120,4285,4280,4281,1,3,2,2,2,2,2,3,120,4287,4286,4282,0,1,2,3,3,3,3,3,120,4286,4283,4282,1,3,2,3,3,3,3,3,120,4285,4287,4280,0,1,2,4,4,4,4,3,120,4287,4282,4280,1,3,2,4,4,4,4,3,120,4281,4283,4284,0,1,2,5,5,5,5,3,120,4283,4286,4284,1,3,2,5,5,5,5,3,120,4288,4290,4289,0,1,2,0,0,0,0,3,120,4290,4291,4289,1,3,2,0,0,0,0,3,120,4292,4294,4293,0,1,2,1,1,1,1,3,120,4294,4295,4293,1,3,2,1,1,1,1,3,120,4292,4293,4289,0,1,2,2,2,2,2,3,120,4293,4288,4289,1,3,2,2,2,2,2,3,120,4295,4294,4290,0,1,2,3,3,3,3,3,120,4294,4291,4290,1,3,2,3,3,3,3,3,120,4293,4295,4288,0,1,2,4,4,4,4,3,120,4295,4290,4288,1,3,2,4,4,4,4,3,120,4289,4291,4292,0,1,2,5,5,5,5,3,120,4291,4294,4292,1,3,2,5,5,5,5,3,120,4296,4298,4297,0,1,2,0,0,0,0,3,120,4298,4299,4297,1,3,2,0,0,0,0,3,120,4300,4302,4301,0,1,2,1,1,1,1,3,120,4302,4303,4301,1,3,2,1,1,1,1,3,120,4300,4301,4297,0,1,2,2,2,2,2,3,120,4301,4296,4297,1,3,2,2,2,2,2,3,120,4303,4302,4298,0,1,2,3,3,3,3,3,120,4302,4299,4298,1,3,2,3,3,3,3,3,120,4301,4303,4296,0,1,2,4,4,4,4,3,120,4303,4298,4296,1,3,2,4,4,4,4,3,120,4297,4299,4300,0,1,2,5,5,5,5,3,120,4299,4302,4300,1,3,2,5,5,5,5,3,120,4304,4306,4305,0,1,2,0,0,0,0,3,120,4306,4307,4305,1,3,2,0,0,0,0,3,120,4308,4310,4309,0,1,2,1,1,1,1,3,120,4310,4311,4309,1,3,2,1,1,1,1,3,120,4308,4309,4305,0,1,2,2,2,2,2,3,120,4309,4304,4305,1,3,2,2,2,2,2,3,120,4311,4310,4306,0,1,2,3,3,3,3,3,120,4310,4307,4306,1,3,2,3,3,3,3,3,120,4309,4311,4304,0,1,2,4,4,4,4,3,120,4311,4306,4304,1,3,2,4,4,4,4,3,120,4305,4307,4308,0,1,2,5,5,5,5,3,120,4307,4310,4308,1,3,2,5,5,5,5,3,120,4312,4314,4313,0,1,2,0,0,0,0,3,120,4314,4315,4313,1,3,2,0,0,0,0,3,120,4316,4318,4317,0,1,2,1,1,1,1,3,120,4318,4319,4317,1,3,2,1,1,1,1,3,120,4316,4317,4313,0,1,2,2,2,2,2,3,120,4317,4312,4313,1,3,2,2,2,2,2,3,120,4319,4318,4314,0,1,2,3,3,3,3,3,120,4318,4315,4314,1,3,2,3,3,3,3,3,120,4317,4319,4312,0,1,2,4,4,4,4,3,120,4319,4314,4312,1,3,2,4,4,4,4,3,120,4313,4315,4316,0,1,2,5,5,5,5,3,120,4315,4318,4316,1,3,2,5,5,5,5,3,120,4320,4322,4321,0,1,2,0,0,0,0,3,120,4322,4323,4321,1,3,2,0,0,0,0,3,120,4324,4326,4325,0,1,2,1,1,1,1,3,120,4326,4327,4325,1,3,2,1,1,1,1,3,120,4324,4325,4321,0,1,2,2,2,2,2,3,120,4325,4320,4321,1,3,2,2,2,2,2,3,120,4327,4326,4322,0,1,2,3,3,3,3,3,120,4326,4323,4322,1,3,2,3,3,3,3,3,120,4325,4327,4320,0,1,2,4,4,4,4,3,120,4327,4322,4320,1,3,2,4,4,4,4,3,120,4321,4323,4324,0,1,2,5,5,5,5,3,120,4323,4326,4324,1,3,2,5,5,5,5,3,120,4328,4330,4329,0,1,2,0,0,0,0,3,120,4330,4331,4329,1,3,2,0,0,0,0,3,120,4332,4334,4333,0,1,2,1,1,1,1,3,120,4334,4335,4333,1,3,2,1,1,1,1,3,120,4332,4333,4329,0,1,2,2,2,2,2,3,120,4333,4328,4329,1,3,2,2,2,2,2,3,120,4335,4334,4330,0,1,2,3,3,3,3,3,120,4334,4331,4330,1,3,2,3,3,3,3,3,120,4333,4335,4328,0,1,2,4,4,4,4,3,120,4335,4330,4328,1,3,2,4,4,4,4,3,120,4329,4331,4332,0,1,2,5,5,5,5,3,120,4331,4334,4332,1,3,2,5,5,5,5,3,120,4336,4338,4337,0,1,2,0,0,0,0,3,120,4338,4339,4337,1,3,2,0,0,0,0,3,120,4340,4342,4341,0,1,2,1,1,1,1,3,120,4342,4343,4341,1,3,2,1,1,1,1,3,120,4340,4341,4337,0,1,2,2,2,2,2,3,120,4341,4336,4337,1,3,2,2,2,2,2,3,120,4343,4342,4338,0,1,2,3,3,3,3,3,120,4342,4339,4338,1,3,2,3,3,3,3,3,120,4341,4343,4336,0,1,2,4,4,4,4,3,120,4343,4338,4336,1,3,2,4,4,4,4,3,120,4337,4339,4340,0,1,2,5,5,5,5,3,120,4339,4342,4340,1,3,2,5,5,5,5,3,120,4344,4346,4345,0,1,2,0,0,0,0,3,120,4346,4347,4345,1,3,2,0,0,0,0,3,120,4348,4350,4349,0,1,2,1,1,1,1,3,120,4350,4351,4349,1,3,2,1,1,1,1,3,120,4348,4349,4345,0,1,2,2,2,2,2,3,120,4349,4344,4345,1,3,2,2,2,2,2,3,120,4351,4350,4346,0,1,2,3,3,3,3,3,120,4350,4347,4346,1,3,2,3,3,3,3,3,120,4349,4351,4344,0,1,2,4,4,4,4,3,120,4351,4346,4344,1,3,2,4,4,4,4,3,120,4345,4347,4348,0,1,2,5,5,5,5,3,120,4347,4350,4348,1,3,2,5,5,5,5,3,120,4352,4354,4353,0,1,2,0,0,0,0,3,120,4354,4355,4353,1,3,2,0,0,0,0,3,120,4356,4358,4357,0,1,2,1,1,1,1,3,120,4358,4359,4357,1,3,2,1,1,1,1,3,120,4356,4357,4353,0,1,2,2,2,2,2,3,120,4357,4352,4353,1,3,2,2,2,2,2,3,120,4359,4358,4354,0,1,2,3,3,3,3,3,120,4358,4355,4354,1,3,2,3,3,3,3,3,120,4357,4359,4352,0,1,2,4,4,4,4,3,120,4359,4354,4352,1,3,2,4,4,4,4,3,120,4353,4355,4356,0,1,2,5,5,5,5,3,120,4355,4358,4356,1,3,2,5,5,5,5,3,120,4360,4362,4361,0,1,2,0,0,0,0,3,120,4362,4363,4361,1,3,2,0,0,0,0,3,120,4364,4366,4365,0,1,2,1,1,1,1,3,120,4366,4367,4365,1,3,2,1,1,1,1,3,120,4364,4365,4361,0,1,2,2,2,2,2,3,120,4365,4360,4361,1,3,2,2,2,2,2,3,120,4367,4366,4362,0,1,2,3,3,3,3,3,120,4366,4363,4362,1,3,2,3,3,3,3,3,120,4365,4367,4360,0,1,2,4,4,4,4,3,120,4367,4362,4360,1,3,2,4,4,4,4,3,120,4361,4363,4364,0,1,2,5,5,5,5,3,120,4363,4366,4364,1,3,2,5,5,5,5,3,120,4368,4370,4369,0,1,2,0,0,0,0,3,120,4370,4371,4369,1,3,2,0,0,0,0,3,120,4372,4374,4373,0,1,2,1,1,1,1,3,120,4374,4375,4373,1,3,2,1,1,1,1,3,120,4372,4373,4369,0,1,2,2,2,2,2,3,120,4373,4368,4369,1,3,2,2,2,2,2,3,120,4375,4374,4370,0,1,2,3,3,3,3,3,120,4374,4371,4370,1,3,2,3,3,3,3,3,120,4373,4375,4368,0,1,2,4,4,4,4,3,120,4375,4370,4368,1,3,2,4,4,4,4,3,120,4369,4371,4372,0,1,2,5,5,5,5,3,120,4371,4374,4372,1,3,2,5,5,5,5,3,120,4376,4378,4377,0,1,2,0,0,0,0,3,120,4378,4379,4377,1,3,2,0,0,0,0,3,120,4380,4382,4381,0,1,2,1,1,1,1,3,120,4382,4383,4381,1,3,2,1,1,1,1,3,120,4380,4381,4377,0,1,2,2,2,2,2,3,120,4381,4376,4377,1,3,2,2,2,2,2,3,120,4383,4382,4378,0,1,2,3,3,3,3,3,120,4382,4379,4378,1,3,2,3,3,3,3,3,120,4381,4383,4376,0,1,2,4,4,4,4,3,120,4383,4378,4376,1,3,2,4,4,4,4,3,120,4377,4379,4380,0,1,2,5,5,5,5,3,120,4379,4382,4380,1,3,2,5,5,5,5,3,120,4384,4386,4385,0,1,2,0,0,0,0,3,120,4386,4387,4385,1,3,2,0,0,0,0,3,120,4388,4390,4389,0,1,2,1,1,1,1,3,120,4390,4391,4389,1,3,2,1,1,1,1,3,120,4388,4389,4385,0,1,2,2,2,2,2,3,120,4389,4384,4385,1,3,2,2,2,2,2,3,120,4391,4390,4386,0,1,2,3,3,3,3,3,120,4390,4387,4386,1,3,2,3,3,3,3,3,120,4389,4391,4384,0,1,2,4,4,4,4,3,120,4391,4386,4384,1,3,2,4,4,4,4,3,120,4385,4387,4388,0,1,2,5,5,5,5,3,120,4387,4390,4388,1,3,2,5,5,5,5,3,120,4392,4394,4393,0,1,2,0,0,0,0,3,120,4394,4395,4393,1,3,2,0,0,0,0,3,120,4396,4398,4397,0,1,2,1,1,1,1,3,120,4398,4399,4397,1,3,2,1,1,1,1,3,120,4396,4397,4393,0,1,2,2,2,2,2,3,120,4397,4392,4393,1,3,2,2,2,2,2,3,120,4399,4398,4394,0,1,2,3,3,3,3,3,120,4398,4395,4394,1,3,2,3,3,3,3,3,120,4397,4399,4392,0,1,2,4,4,4,4,3,120,4399,4394,4392,1,3,2,4,4,4,4,3,120,4393,4395,4396,0,1,2,5,5,5,5,3,120,4395,4398,4396,1,3,2,5,5,5,5,3,120,4400,4402,4401,0,1,2,0,0,0,0,3,120,4402,4403,4401,1,3,2,0,0,0,0,3,120,4404,4406,4405,0,1,2,1,1,1,1,3,120,4406,4407,4405,1,3,2,1,1,1,1,3,120,4404,4405,4401,0,1,2,2,2,2,2,3,120,4405,4400,4401,1,3,2,2,2,2,2,3,120,4407,4406,4402,0,1,2,3,3,3,3,3,120,4406,4403,4402,1,3,2,3,3,3,3,3,120,4405,4407,4400,0,1,2,4,4,4,4,3,120,4407,4402,4400,1,3,2,4,4,4,4,3,120,4401,4403,4404,0,1,2,5,5,5,5,3,120,4403,4406,4404,1,3,2,5,5,5,5,3,120,4408,4410,4409,0,1,2,0,0,0,0,3,120,4410,4411,4409,1,3,2,0,0,0,0,3,120,4412,4414,4413,0,1,2,1,1,1,1,3,120,4414,4415,4413,1,3,2,1,1,1,1,3,120,4412,4413,4409,0,1,2,2,2,2,2,3,120,4413,4408,4409,1,3,2,2,2,2,2,3,120,4415,4414,4410,0,1,2,3,3,3,3,3,120,4414,4411,4410,1,3,2,3,3,3,3,3,120,4413,4415,4408,0,1,2,4,4,4,4,3,120,4415,4410,4408,1,3,2,4,4,4,4,3,120,4409,4411,4412,0,1,2,5,5,5,5,3,120,4411,4414,4412,1,3,2,5,5,5,5,3,120,4416,4418,4417,0,1,2,0,0,0,0,3,120,4418,4419,4417,1,3,2,0,0,0,0,3,120,4420,4422,4421,0,1,2,1,1,1,1,3,120,4422,4423,4421,1,3,2,1,1,1,1,3,120,4420,4421,4417,0,1,2,2,2,2,2,3,120,4421,4416,4417,1,3,2,2,2,2,2,3,120,4423,4422,4418,0,1,2,3,3,3,3,3,120,4422,4419,4418,1,3,2,3,3,3,3,3,120,4421,4423,4416,0,1,2,4,4,4,4,3,120,4423,4418,4416,1,3,2,4,4,4,4,3,120,4417,4419,4420,0,1,2,5,5,5,5,3,120,4419,4422,4420,1,3,2,5,5,5,5,3,120,4424,4426,4425,0,1,2,0,0,0,0,3,120,4426,4427,4425,1,3,2,0,0,0,0,3,120,4428,4430,4429,0,1,2,1,1,1,1,3,120,4430,4431,4429,1,3,2,1,1,1,1,3,120,4428,4429,4425,0,1,2,2,2,2,2,3,120,4429,4424,4425,1,3,2,2,2,2,2,3,120,4431,4430,4426,0,1,2,3,3,3,3,3,120,4430,4427,4426,1,3,2,3,3,3,3,3,120,4429,4431,4424,0,1,2,4,4,4,4,3,120,4431,4426,4424,1,3,2,4,4,4,4,3,120,4425,4427,4428,0,1,2,5,5,5,5,3,120,4427,4430,4428,1,3,2,5,5,5,5,3,120,4432,4434,4433,0,1,2,0,0,0,0,3,120,4434,4435,4433,1,3,2,0,0,0,0,3,120,4436,4438,4437,0,1,2,1,1,1,1,3,120,4438,4439,4437,1,3,2,1,1,1,1,3,120,4436,4437,4433,0,1,2,2,2,2,2,3,120,4437,4432,4433,1,3,2,2,2,2,2,3,120,4439,4438,4434,0,1,2,3,3,3,3,3,120,4438,4435,4434,1,3,2,3,3,3,3,3,120,4437,4439,4432,0,1,2,4,4,4,4,3,120,4439,4434,4432,1,3,2,4,4,4,4,3,120,4433,4435,4436,0,1,2,5,5,5,5,3,120,4435,4438,4436,1,3,2,5,5,5,5,3,120,4440,4442,4441,0,1,2,0,0,0,0,3,120,4442,4443,4441,1,3,2,0,0,0,0,3,120,4444,4446,4445,0,1,2,1,1,1,1,3,120,4446,4447,4445,1,3,2,1,1,1,1,3,120,4444,4445,4441,0,1,2,2,2,2,2,3,120,4445,4440,4441,1,3,2,2,2,2,2,3,120,4447,4446,4442,0,1,2,3,3,3,3,3,120,4446,4443,4442,1,3,2,3,3,3,3,3,120,4445,4447,4440,0,1,2,4,4,4,4,3,120,4447,4442,4440,1,3,2,4,4,4,4,3,120,4441,4443,4444,0,1,2,5,5,5,5,3,120,4443,4446,4444,1,3,2,5,5,5,5,3,120,4448,4450,4449,0,1,2,0,0,0,0,3,120,4450,4451,4449,1,3,2,0,0,0,0,3,120,4452,4454,4453,0,1,2,1,1,1,1,3,120,4454,4455,4453,1,3,2,1,1,1,1,3,120,4452,4453,4449,0,1,2,2,2,2,2,3,120,4453,4448,4449,1,3,2,2,2,2,2,3,120,4455,4454,4450,0,1,2,3,3,3,3,3,120,4454,4451,4450,1,3,2,3,3,3,3,3,120,4453,4455,4448,0,1,2,4,4,4,4,3,120,4455,4450,4448,1,3,2,4,4,4,4,3,120,4449,4451,4452,0,1,2,5,5,5,5,3,120,4451,4454,4452,1,3,2,5,5,5,5,3,120,4456,4458,4457,0,1,2,0,0,0,0,3,120,4458,4459,4457,1,3,2,0,0,0,0,3,120,4460,4462,4461,0,1,2,1,1,1,1,3,120,4462,4463,4461,1,3,2,1,1,1,1,3,120,4460,4461,4457,0,1,2,2,2,2,2,3,120,4461,4456,4457,1,3,2,2,2,2,2,3,120,4463,4462,4458,0,1,2,3,3,3,3,3,120,4462,4459,4458,1,3,2,3,3,3,3,3,120,4461,4463,4456,0,1,2,4,4,4,4,3,120,4463,4458,4456,1,3,2,4,4,4,4,3,120,4457,4459,4460,0,1,2,5,5,5,5,3,120,4459,4462,4460,1,3,2,5,5,5,5,3,120,4464,4466,4465,0,1,2,0,0,0,0,3,120,4466,4467,4465,1,3,2,0,0,0,0,3,120,4468,4470,4469,0,1,2,1,1,1,1,3,120,4470,4471,4469,1,3,2,1,1,1,1,3,120,4468,4469,4465,0,1,2,2,2,2,2,3,120,4469,4464,4465,1,3,2,2,2,2,2,3,120,4471,4470,4466,0,1,2,3,3,3,3,3,120,4470,4467,4466,1,3,2,3,3,3,3,3,120,4469,4471,4464,0,1,2,4,4,4,4,3,120,4471,4466,4464,1,3,2,4,4,4,4,3,120,4465,4467,4468,0,1,2,5,5,5,5,3,120,4467,4470,4468,1,3,2,5,5,5,5,3,120,4472,4474,4473,0,1,2,0,0,0,0,3,120,4474,4475,4473,1,3,2,0,0,0,0,3,120,4476,4478,4477,0,1,2,1,1,1,1,3,120,4478,4479,4477,1,3,2,1,1,1,1,3,120,4476,4477,4473,0,1,2,2,2,2,2,3,120,4477,4472,4473,1,3,2,2,2,2,2,3,120,4479,4478,4474,0,1,2,3,3,3,3,3,120,4478,4475,4474,1,3,2,3,3,3,3,3,120,4477,4479,4472,0,1,2,4,4,4,4,3,120,4479,4474,4472,1,3,2,4,4,4,4,3,120,4473,4475,4476,0,1,2,5,5,5,5,3,120,4475,4478,4476,1,3,2,5,5,5,5,3,120,4480,4482,4481,0,1,2,0,0,0,0,3,120,4482,4483,4481,1,3,2,0,0,0,0,3,120,4484,4486,4485,0,1,2,1,1,1,1,3,120,4486,4487,4485,1,3,2,1,1,1,1,3,120,4484,4485,4481,0,1,2,2,2,2,2,3,120,4485,4480,4481,1,3,2,2,2,2,2,3,120,4487,4486,4482,0,1,2,3,3,3,3,3,120,4486,4483,4482,1,3,2,3,3,3,3,3,120,4485,4487,4480,0,1,2,4,4,4,4,3,120,4487,4482,4480,1,3,2,4,4,4,4,3,120,4481,4483,4484,0,1,2,5,5,5,5,3,120,4483,4486,4484,1,3,2,5,5,5,5,3,120,4488,4490,4489,0,1,2,0,0,0,0,3,120,4490,4491,4489,1,3,2,0,0,0,0,3,120,4492,4494,4493,0,1,2,1,1,1,1,3,120,4494,4495,4493,1,3,2,1,1,1,1,3,120,4492,4493,4489,0,1,2,2,2,2,2,3,120,4493,4488,4489,1,3,2,2,2,2,2,3,120,4495,4494,4490,0,1,2,3,3,3,3,3,120,4494,4491,4490,1,3,2,3,3,3,3,3,120,4493,4495,4488,0,1,2,4,4,4,4,3,120,4495,4490,4488,1,3,2,4,4,4,4,3,120,4489,4491,4492,0,1,2,5,5,5,5,3,120,4491,4494,4492,1,3,2,5,5,5,5,3,120,4496,4498,4497,0,1,2,0,0,0,0,3,120,4498,4499,4497,1,3,2,0,0,0,0,3,120,4500,4502,4501,0,1,2,1,1,1,1,3,120,4502,4503,4501,1,3,2,1,1,1,1,3,120,4500,4501,4497,0,1,2,2,2,2,2,3,120,4501,4496,4497,1,3,2,2,2,2,2,3,120,4503,4502,4498,0,1,2,3,3,3,3,3,120,4502,4499,4498,1,3,2,3,3,3,3,3,120,4501,4503,4496,0,1,2,4,4,4,4,3,120,4503,4498,4496,1,3,2,4,4,4,4,3,120,4497,4499,4500,0,1,2,5,5,5,5,3,120,4499,4502,4500,1,3,2,5,5,5,5,3,120,4504,4506,4505,0,1,2,0,0,0,0,3,120,4506,4507,4505,1,3,2,0,0,0,0,3,120,4508,4510,4509,0,1,2,1,1,1,1,3,120,4510,4511,4509,1,3,2,1,1,1,1,3,120,4508,4509,4505,0,1,2,2,2,2,2,3,120,4509,4504,4505,1,3,2,2,2,2,2,3,120,4511,4510,4506,0,1,2,3,3,3,3,3,120,4510,4507,4506,1,3,2,3,3,3,3,3,120,4509,4511,4504,0,1,2,4,4,4,4,3,120,4511,4506,4504,1,3,2,4,4,4,4,3,120,4505,4507,4508,0,1,2,5,5,5,5,3,120,4507,4510,4508,1,3,2,5,5,5,5,3,120,4512,4514,4513,0,1,2,0,0,0,0,3,120,4514,4515,4513,1,3,2,0,0,0,0,3,120,4516,4518,4517,0,1,2,1,1,1,1,3,120,4518,4519,4517,1,3,2,1,1,1,1,3,120,4516,4517,4513,0,1,2,2,2,2,2,3,120,4517,4512,4513,1,3,2,2,2,2,2,3,120,4519,4518,4514,0,1,2,3,3,3,3,3,120,4518,4515,4514,1,3,2,3,3,3,3,3,120,4517,4519,4512,0,1,2,4,4,4,4,3,120,4519,4514,4512,1,3,2,4,4,4,4,3,120,4513,4515,4516,0,1,2,5,5,5,5,3,120,4515,4518,4516,1,3,2,5,5,5,5,3,120,4520,4522,4521,0,1,2,0,0,0,0,3,120,4522,4523,4521,1,3,2,0,0,0,0,3,120,4524,4526,4525,0,1,2,1,1,1,1,3,120,4526,4527,4525,1,3,2,1,1,1,1,3,120,4524,4525,4521,0,1,2,2,2,2,2,3,120,4525,4520,4521,1,3,2,2,2,2,2,3,120,4527,4526,4522,0,1,2,3,3,3,3,3,120,4526,4523,4522,1,3,2,3,3,3,3,3,120,4525,4527,4520,0,1,2,4,4,4,4,3,120,4527,4522,4520,1,3,2,4,4,4,4,3,120,4521,4523,4524,0,1,2,5,5,5,5,3,120,4523,4526,4524,1,3,2,5,5,5,5,3,120,4528,4530,4529,0,1,2,0,0,0,0,3,120,4530,4531,4529,1,3,2,0,0,0,0,3,120,4532,4534,4533,0,1,2,1,1,1,1,3,120,4534,4535,4533,1,3,2,1,1,1,1,3,120,4532,4533,4529,0,1,2,2,2,2,2,3,120,4533,4528,4529,1,3,2,2,2,2,2,3,120,4535,4534,4530,0,1,2,3,3,3,3,3,120,4534,4531,4530,1,3,2,3,3,3,3,3,120,4533,4535,4528,0,1,2,4,4,4,4,3,120,4535,4530,4528,1,3,2,4,4,4,4,3,120,4529,4531,4532,0,1,2,5,5,5,5,3,120,4531,4534,4532,1,3,2,5,5,5,5,3,120,4536,4538,4537,0,1,2,0,0,0,0,3,120,4538,4539,4537,1,3,2,0,0,0,0,3,120,4540,4542,4541,0,1,2,1,1,1,1,3,120,4542,4543,4541,1,3,2,1,1,1,1,3,120,4540,4541,4537,0,1,2,2,2,2,2,3,120,4541,4536,4537,1,3,2,2,2,2,2,3,120,4543,4542,4538,0,1,2,3,3,3,3,3,120,4542,4539,4538,1,3,2,3,3,3,3,3,120,4541,4543,4536,0,1,2,4,4,4,4,3,120,4543,4538,4536,1,3,2,4,4,4,4,3,120,4537,4539,4540,0,1,2,5,5,5,5,3,120,4539,4542,4540,1,3,2,5,5,5,5,3,120,4544,4546,4545,0,1,2,0,0,0,0,3,120,4546,4547,4545,1,3,2,0,0,0,0,3,120,4548,4550,4549,0,1,2,1,1,1,1,3,120,4550,4551,4549,1,3,2,1,1,1,1,3,120,4548,4549,4545,0,1,2,2,2,2,2,3,120,4549,4544,4545,1,3,2,2,2,2,2,3,120,4551,4550,4546,0,1,2,3,3,3,3,3,120,4550,4547,4546,1,3,2,3,3,3,3,3,120,4549,4551,4544,0,1,2,4,4,4,4,3,120,4551,4546,4544,1,3,2,4,4,4,4,3,120,4545,4547,4548,0,1,2,5,5,5,5,3,120,4547,4550,4548,1,3,2,5,5,5,5,3,120,4552,4554,4553,0,1,2,0,0,0,0,3,120,4554,4555,4553,1,3,2,0,0,0,0,3,120,4556,4558,4557,0,1,2,1,1,1,1,3,120,4558,4559,4557,1,3,2,1,1,1,1,3,120,4556,4557,4553,0,1,2,2,2,2,2,3,120,4557,4552,4553,1,3,2,2,2,2,2,3,120,4559,4558,4554,0,1,2,3,3,3,3,3,120,4558,4555,4554,1,3,2,3,3,3,3,3,120,4557,4559,4552,0,1,2,4,4,4,4,3,120,4559,4554,4552,1,3,2,4,4,4,4,3,120,4553,4555,4556,0,1,2,5,5,5,5,3,120,4555,4558,4556,1,3,2,5,5,5,5,3,120,4560,4562,4561,0,1,2,0,0,0,0,3,120,4562,4563,4561,1,3,2,0,0,0,0,3,120,4564,4566,4565,0,1,2,1,1,1,1,3,120,4566,4567,4565,1,3,2,1,1,1,1,3,120,4564,4565,4561,0,1,2,2,2,2,2,3,120,4565,4560,4561,1,3,2,2,2,2,2,3,120,4567,4566,4562,0,1,2,3,3,3,3,3,120,4566,4563,4562,1,3,2,3,3,3,3,3,120,4565,4567,4560,0,1,2,4,4,4,4,3,120,4567,4562,4560,1,3,2,4,4,4,4,3,120,4561,4563,4564,0,1,2,5,5,5,5,3,120,4563,4566,4564,1,3,2,5,5,5,5,3,120,4568,4570,4569,0,1,2,0,0,0,0,3,120,4570,4571,4569,1,3,2,0,0,0,0,3,120,4572,4574,4573,0,1,2,1,1,1,1,3,120,4574,4575,4573,1,3,2,1,1,1,1,3,120,4572,4573,4569,0,1,2,2,2,2,2,3,120,4573,4568,4569,1,3,2,2,2,2,2,3,120,4575,4574,4570,0,1,2,3,3,3,3,3,120,4574,4571,4570,1,3,2,3,3,3,3,3,120,4573,4575,4568,0,1,2,4,4,4,4,3,120,4575,4570,4568,1,3,2,4,4,4,4,3,120,4569,4571,4572,0,1,2,5,5,5,5,3,120,4571,4574,4572,1,3,2,5,5,5,5,3,120,4576,4578,4577,0,1,2,0,0,0,0,3,120,4578,4579,4577,1,3,2,0,0,0,0,3,120,4580,4582,4581,0,1,2,1,1,1,1,3,120,4582,4583,4581,1,3,2,1,1,1,1,3,120,4580,4581,4577,0,1,2,2,2,2,2,3,120,4581,4576,4577,1,3,2,2,2,2,2,3,120,4583,4582,4578,0,1,2,3,3,3,3,3,120,4582,4579,4578,1,3,2,3,3,3,3,3,120,4581,4583,4576,0,1,2,4,4,4,4,3,120,4583,4578,4576,1,3,2,4,4,4,4,3,120,4577,4579,4580,0,1,2,5,5,5,5,3,120,4579,4582,4580,1,3,2,5,5,5,5,3,120,4584,4586,4585,0,1,2,0,0,0,0,3,120,4586,4587,4585,1,3,2,0,0,0,0,3,120,4588,4590,4589,0,1,2,1,1,1,1,3,120,4590,4591,4589,1,3,2,1,1,1,1,3,120,4588,4589,4585,0,1,2,2,2,2,2,3,120,4589,4584,4585,1,3,2,2,2,2,2,3,120,4591,4590,4586,0,1,2,3,3,3,3,3,120,4590,4587,4586,1,3,2,3,3,3,3,3,120,4589,4591,4584,0,1,2,4,4,4,4,3,120,4591,4586,4584,1,3,2,4,4,4,4,3,120,4585,4587,4588,0,1,2,5,5,5,5,3,120,4587,4590,4588,1,3,2,5,5,5,5,3,120,4592,4594,4593,0,1,2,0,0,0,0,3,120,4594,4595,4593,1,3,2,0,0,0,0,3,120,4596,4598,4597,0,1,2,1,1,1,1,3,120,4598,4599,4597,1,3,2,1,1,1,1,3,120,4596,4597,4593,0,1,2,2,2,2,2,3,120,4597,4592,4593,1,3,2,2,2,2,2,3,120,4599,4598,4594,0,1,2,3,3,3,3,3,120,4598,4595,4594,1,3,2,3,3,3,3,3,120,4597,4599,4592,0,1,2,4,4,4,4,3,120,4599,4594,4592,1,3,2,4,4,4,4,3,120,4593,4595,4596,0,1,2,5,5,5,5,3,120,4595,4598,4596,1,3,2,5,5,5,5,3,120,4600,4602,4601,0,1,2,0,0,0,0,3,120,4602,4603,4601,1,3,2,0,0,0,0,3,120,4604,4606,4605,0,1,2,1,1,1,1,3,120,4606,4607,4605,1,3,2,1,1,1,1,3,120,4604,4605,4601,0,1,2,2,2,2,2,3,120,4605,4600,4601,1,3,2,2,2,2,2,3,120,4607,4606,4602,0,1,2,3,3,3,3,3,120,4606,4603,4602,1,3,2,3,3,3,3,3,120,4605,4607,4600,0,1,2,4,4,4,4,3,120,4607,4602,4600,1,3,2,4,4,4,4,3,120,4601,4603,4604,0,1,2,5,5,5,5,3,120,4603,4606,4604,1,3,2,5,5,5,5,3,120,4608,4610,4609,0,1,2,0,0,0,0,3,120,4610,4611,4609,1,3,2,0,0,0,0,3,120,4612,4614,4613,0,1,2,1,1,1,1,3,120,4614,4615,4613,1,3,2,1,1,1,1,3,120,4612,4613,4609,0,1,2,2,2,2,2,3,120,4613,4608,4609,1,3,2,2,2,2,2,3,120,4615,4614,4610,0,1,2,3,3,3,3,3,120,4614,4611,4610,1,3,2,3,3,3,3,3,120,4613,4615,4608,0,1,2,4,4,4,4,3,120,4615,4610,4608,1,3,2,4,4,4,4,3,120,4609,4611,4612,0,1,2,5,5,5,5,3,120,4611,4614,4612,1,3,2,5,5,5,5,3,120,4616,4618,4617,0,1,2,0,0,0,0,3,120,4618,4619,4617,1,3,2,0,0,0,0,3,120,4620,4622,4621,0,1,2,1,1,1,1,3,120,4622,4623,4621,1,3,2,1,1,1,1,3,120,4620,4621,4617,0,1,2,2,2,2,2,3,120,4621,4616,4617,1,3,2,2,2,2,2,3,120,4623,4622,4618,0,1,2,3,3,3,3,3,120,4622,4619,4618,1,3,2,3,3,3,3,3,120,4621,4623,4616,0,1,2,4,4,4,4,3,120,4623,4618,4616,1,3,2,4,4,4,4,3,120,4617,4619,4620,0,1,2,5,5,5,5,3,120,4619,4622,4620,1,3,2,5,5,5,5,3,120,4624,4626,4625,0,1,2,0,0,0,0,3,120,4626,4627,4625,1,3,2,0,0,0,0,3,120,4628,4630,4629,0,1,2,1,1,1,1,3,120,4630,4631,4629,1,3,2,1,1,1,1,3,120,4628,4629,4625,0,1,2,2,2,2,2,3,120,4629,4624,4625,1,3,2,2,2,2,2,3,120,4631,4630,4626,0,1,2,3,3,3,3,3,120,4630,4627,4626,1,3,2,3,3,3,3,3,120,4629,4631,4624,0,1,2,4,4,4,4,3,120,4631,4626,4624,1,3,2,4,4,4,4,3,120,4625,4627,4628,0,1,2,5,5,5,5,3,120,4627,4630,4628,1,3,2,5,5,5,5,3,120,4632,4634,4633,0,1,2,0,0,0,0,3,120,4634,4635,4633,1,3,2,0,0,0,0,3,120,4636,4638,4637,0,1,2,1,1,1,1,3,120,4638,4639,4637,1,3,2,1,1,1,1,3,120,4636,4637,4633,0,1,2,2,2,2,2,3,120,4637,4632,4633,1,3,2,2,2,2,2,3,120,4639,4638,4634,0,1,2,3,3,3,3,3,120,4638,4635,4634,1,3,2,3,3,3,3,3,120,4637,4639,4632,0,1,2,4,4,4,4,3,120,4639,4634,4632,1,3,2,4,4,4,4,3,120,4633,4635,4636,0,1,2,5,5,5,5,3,120,4635,4638,4636,1,3,2,5,5,5,5,3,120,4640,4642,4641,0,1,2,0,0,0,0,3,120,4642,4643,4641,1,3,2,0,0,0,0,3,120,4644,4646,4645,0,1,2,1,1,1,1,3,120,4646,4647,4645,1,3,2,1,1,1,1,3,120,4644,4645,4641,0,1,2,2,2,2,2,3,120,4645,4640,4641,1,3,2,2,2,2,2,3,120,4647,4646,4642,0,1,2,3,3,3,3,3,120,4646,4643,4642,1,3,2,3,3,3,3,3,120,4645,4647,4640,0,1,2,4,4,4,4,3,120,4647,4642,4640,1,3,2,4,4,4,4,3,120,4641,4643,4644,0,1,2,5,5,5,5,3,120,4643,4646,4644,1,3,2,5,5,5,5,3,120,4648,4650,4649,0,1,2,0,0,0,0,3,120,4650,4651,4649,1,3,2,0,0,0,0,3,120,4652,4654,4653,0,1,2,1,1,1,1,3,120,4654,4655,4653,1,3,2,1,1,1,1,3,120,4652,4653,4649,0,1,2,2,2,2,2,3,120,4653,4648,4649,1,3,2,2,2,2,2,3,120,4655,4654,4650,0,1,2,3,3,3,3,3,120,4654,4651,4650,1,3,2,3,3,3,3,3,120,4653,4655,4648,0,1,2,4,4,4,4,3,120,4655,4650,4648,1,3,2,4,4,4,4,3,120,4649,4651,4652,0,1,2,5,5,5,5,3,120,4651,4654,4652,1,3,2,5,5,5,5,3,120,4656,4658,4657,0,1,2,0,0,0,0,3,120,4658,4659,4657,1,3,2,0,0,0,0,3,120,4660,4662,4661,0,1,2,1,1,1,1,3,120,4662,4663,4661,1,3,2,1,1,1,1,3,120,4660,4661,4657,0,1,2,2,2,2,2,3,120,4661,4656,4657,1,3,2,2,2,2,2,3,120,4663,4662,4658,0,1,2,3,3,3,3,3,120,4662,4659,4658,1,3,2,3,3,3,3,3,120,4661,4663,4656,0,1,2,4,4,4,4,3,120,4663,4658,4656,1,3,2,4,4,4,4,3,120,4657,4659,4660,0,1,2,5,5,5,5,3,120,4659,4662,4660,1,3,2,5,5,5,5,3,120,4664,4666,4665,0,1,2,0,0,0,0,3,120,4666,4667,4665,1,3,2,0,0,0,0,3,120,4668,4670,4669,0,1,2,1,1,1,1,3,120,4670,4671,4669,1,3,2,1,1,1,1,3,120,4668,4669,4665,0,1,2,2,2,2,2,3,120,4669,4664,4665,1,3,2,2,2,2,2,3,120,4671,4670,4666,0,1,2,3,3,3,3,3,120,4670,4667,4666,1,3,2,3,3,3,3,3,120,4669,4671,4664,0,1,2,4,4,4,4,3,120,4671,4666,4664,1,3,2,4,4,4,4,3,120,4665,4667,4668,0,1,2,5,5,5,5,3,120,4667,4670,4668,1,3,2,5,5,5,5,3,120,4672,4674,4673,0,1,2,0,0,0,0,3,120,4674,4675,4673,1,3,2,0,0,0,0,3,120,4676,4678,4677,0,1,2,1,1,1,1,3,120,4678,4679,4677,1,3,2,1,1,1,1,3,120,4676,4677,4673,0,1,2,2,2,2,2,3,120,4677,4672,4673,1,3,2,2,2,2,2,3,120,4679,4678,4674,0,1,2,3,3,3,3,3,120,4678,4675,4674,1,3,2,3,3,3,3,3,120,4677,4679,4672,0,1,2,4,4,4,4,3,120,4679,4674,4672,1,3,2,4,4,4,4,3,120,4673,4675,4676,0,1,2,5,5,5,5,3,120,4675,4678,4676,1,3,2,5,5,5,5,3,120,4680,4682,4681,0,1,2,0,0,0,0,3,120,4682,4683,4681,1,3,2,0,0,0,0,3,120,4684,4686,4685,0,1,2,1,1,1,1,3,120,4686,4687,4685,1,3,2,1,1,1,1,3,120,4684,4685,4681,0,1,2,2,2,2,2,3,120,4685,4680,4681,1,3,2,2,2,2,2,3,120,4687,4686,4682,0,1,2,3,3,3,3,3,120,4686,4683,4682,1,3,2,3,3,3,3,3,120,4685,4687,4680,0,1,2,4,4,4,4,3,120,4687,4682,4680,1,3,2,4,4,4,4,3,120,4681,4683,4684,0,1,2,5,5,5,5,3,120,4683,4686,4684,1,3,2,5,5,5,5,3,120,4688,4690,4689,0,1,2,0,0,0,0,3,120,4690,4691,4689,1,3,2,0,0,0,0,3,120,4692,4694,4693,0,1,2,1,1,1,1,3,120,4694,4695,4693,1,3,2,1,1,1,1,3,120,4692,4693,4689,0,1,2,2,2,2,2,3,120,4693,4688,4689,1,3,2,2,2,2,2,3,120,4695,4694,4690,0,1,2,3,3,3,3,3,120,4694,4691,4690,1,3,2,3,3,3,3,3,120,4693,4695,4688,0,1,2,4,4,4,4,3,120,4695,4690,4688,1,3,2,4,4,4,4,3,120,4689,4691,4692,0,1,2,5,5,5,5,3,120,4691,4694,4692,1,3,2,5,5,5,5,3,120,4696,4698,4697,0,1,2,0,0,0,0,3,120,4698,4699,4697,1,3,2,0,0,0,0,3,120,4700,4702,4701,0,1,2,1,1,1,1,3,120,4702,4703,4701,1,3,2,1,1,1,1,3,120,4700,4701,4697,0,1,2,2,2,2,2,3,120,4701,4696,4697,1,3,2,2,2,2,2,3,120,4703,4702,4698,0,1,2,3,3,3,3,3,120,4702,4699,4698,1,3,2,3,3,3,3,3,120,4701,4703,4696,0,1,2,4,4,4,4,3,120,4703,4698,4696,1,3,2,4,4,4,4,3,120,4697,4699,4700,0,1,2,5,5,5,5,3,120,4699,4702,4700,1,3,2,5,5,5,5,3,120,4704,4706,4705,0,1,2,0,0,0,0,3,120,4706,4707,4705,1,3,2,0,0,0,0,3,120,4708,4710,4709,0,1,2,1,1,1,1,3,120,4710,4711,4709,1,3,2,1,1,1,1,3,120,4708,4709,4705,0,1,2,2,2,2,2,3,120,4709,4704,4705,1,3,2,2,2,2,2,3,120,4711,4710,4706,0,1,2,3,3,3,3,3,120,4710,4707,4706,1,3,2,3,3,3,3,3,120,4709,4711,4704,0,1,2,4,4,4,4,3,120,4711,4706,4704,1,3,2,4,4,4,4,3,120,4705,4707,4708,0,1,2,5,5,5,5,3,120,4707,4710,4708,1,3,2,5,5,5,5,3,120,4712,4714,4713,0,1,2,0,0,0,0,3,120,4714,4715,4713,1,3,2,0,0,0,0,3,120,4716,4718,4717,0,1,2,1,1,1,1,3,120,4718,4719,4717,1,3,2,1,1,1,1,3,120,4716,4717,4713,0,1,2,2,2,2,2,3,120,4717,4712,4713,1,3,2,2,2,2,2,3,120,4719,4718,4714,0,1,2,3,3,3,3,3,120,4718,4715,4714,1,3,2,3,3,3,3,3,120,4717,4719,4712,0,1,2,4,4,4,4,3,120,4719,4714,4712,1,3,2,4,4,4,4,3,120,4713,4715,4716,0,1,2,5,5,5,5,3,120,4715,4718,4716,1,3,2,5,5,5,5,3,120,4720,4722,4721,0,1,2,0,0,0,0,3,120,4722,4723,4721,1,3,2,0,0,0,0,3,120,4724,4726,4725,0,1,2,1,1,1,1,3,120,4726,4727,4725,1,3,2,1,1,1,1,3,120,4724,4725,4721,0,1,2,2,2,2,2,3,120,4725,4720,4721,1,3,2,2,2,2,2,3,120,4727,4726,4722,0,1,2,3,3,3,3,3,120,4726,4723,4722,1,3,2,3,3,3,3,3,120,4725,4727,4720,0,1,2,4,4,4,4,3,120,4727,4722,4720,1,3,2,4,4,4,4,3,120,4721,4723,4724,0,1,2,5,5,5,5,3,120,4723,4726,4724,1,3,2,5,5,5,5,3,120,4728,4730,4729,0,1,2,0,0,0,0,3,120,4730,4731,4729,1,3,2,0,0,0,0,3,120,4732,4734,4733,0,1,2,1,1,1,1,3,120,4734,4735,4733,1,3,2,1,1,1,1,3,120,4732,4733,4729,0,1,2,2,2,2,2,3,120,4733,4728,4729,1,3,2,2,2,2,2,3,120,4735,4734,4730,0,1,2,3,3,3,3,3,120,4734,4731,4730,1,3,2,3,3,3,3,3,120,4733,4735,4728,0,1,2,4,4,4,4,3,120,4735,4730,4728,1,3,2,4,4,4,4,3,120,4729,4731,4732,0,1,2,5,5,5,5,3,120,4731,4734,4732,1,3,2,5,5,5,5,3,120,4736,4738,4737,0,1,2,0,0,0,0,3,120,4738,4739,4737,1,3,2,0,0,0,0,3,120,4740,4742,4741,0,1,2,1,1,1,1,3,120,4742,4743,4741,1,3,2,1,1,1,1,3,120,4740,4741,4737,0,1,2,2,2,2,2,3,120,4741,4736,4737,1,3,2,2,2,2,2,3,120,4743,4742,4738,0,1,2,3,3,3,3,3,120,4742,4739,4738,1,3,2,3,3,3,3,3,120,4741,4743,4736,0,1,2,4,4,4,4,3,120,4743,4738,4736,1,3,2,4,4,4,4,3,120,4737,4739,4740,0,1,2,5,5,5,5,3,120,4739,4742,4740,1,3,2,5,5,5,5,3,120,4744,4746,4745,0,1,2,0,0,0,0,3,120,4746,4747,4745,1,3,2,0,0,0,0,3,120,4748,4750,4749,0,1,2,1,1,1,1,3,120,4750,4751,4749,1,3,2,1,1,1,1,3,120,4748,4749,4745,0,1,2,2,2,2,2,3,120,4749,4744,4745,1,3,2,2,2,2,2,3,120,4751,4750,4746,0,1,2,3,3,3,3,3,120,4750,4747,4746,1,3,2,3,3,3,3,3,120,4749,4751,4744,0,1,2,4,4,4,4,3,120,4751,4746,4744,1,3,2,4,4,4,4,3,120,4745,4747,4748,0,1,2,5,5,5,5,3,120,4747,4750,4748,1,3,2,5,5,5,5,3,120,4752,4754,4753,0,1,2,0,0,0,0,3,120,4754,4755,4753,1,3,2,0,0,0,0,3,120,4756,4758,4757,0,1,2,1,1,1,1,3,120,4758,4759,4757,1,3,2,1,1,1,1,3,120,4756,4757,4753,0,1,2,2,2,2,2,3,120,4757,4752,4753,1,3,2,2,2,2,2,3,120,4759,4758,4754,0,1,2,3,3,3,3,3,120,4758,4755,4754,1,3,2,3,3,3,3,3,120,4757,4759,4752,0,1,2,4,4,4,4,3,120,4759,4754,4752,1,3,2,4,4,4,4,3,120,4753,4755,4756,0,1,2,5,5,5,5,3,120,4755,4758,4756,1,3,2,5,5,5,5,3,120,4760,4762,4761,0,1,2,0,0,0,0,3,120,4762,4763,4761,1,3,2,0,0,0,0,3,120,4764,4766,4765,0,1,2,1,1,1,1,3,120,4766,4767,4765,1,3,2,1,1,1,1,3,120,4764,4765,4761,0,1,2,2,2,2,2,3,120,4765,4760,4761,1,3,2,2,2,2,2,3,120,4767,4766,4762,0,1,2,3,3,3,3,3,120,4766,4763,4762,1,3,2,3,3,3,3,3,120,4765,4767,4760,0,1,2,4,4,4,4,3,120,4767,4762,4760,1,3,2,4,4,4,4,3,120,4761,4763,4764,0,1,2,5,5,5,5,3,120,4763,4766,4764,1,3,2,5,5,5,5,3,120,4768,4770,4769,0,1,2,0,0,0,0,3,120,4770,4771,4769,1,3,2,0,0,0,0,3,120,4772,4774,4773,0,1,2,1,1,1,1,3,120,4774,4775,4773,1,3,2,1,1,1,1,3,120,4772,4773,4769,0,1,2,2,2,2,2,3,120,4773,4768,4769,1,3,2,2,2,2,2,3,120,4775,4774,4770,0,1,2,3,3,3,3,3,120,4774,4771,4770,1,3,2,3,3,3,3,3,120,4773,4775,4768,0,1,2,4,4,4,4,3,120,4775,4770,4768,1,3,2,4,4,4,4,3,120,4769,4771,4772,0,1,2,5,5,5,5,3,120,4771,4774,4772,1,3,2,5,5,5,5,3,120,4776,4778,4777,0,1,2,0,0,0,0,3,120,4778,4779,4777,1,3,2,0,0,0,0,3,120,4780,4782,4781,0,1,2,1,1,1,1,3,120,4782,4783,4781,1,3,2,1,1,1,1,3,120,4780,4781,4777,0,1,2,2,2,2,2,3,120,4781,4776,4777,1,3,2,2,2,2,2,3,120,4783,4782,4778,0,1,2,3,3,3,3,3,120,4782,4779,4778,1,3,2,3,3,3,3,3,120,4781,4783,4776,0,1,2,4,4,4,4,3,120,4783,4778,4776,1,3,2,4,4,4,4,3,120,4777,4779,4780,0,1,2,5,5,5,5,3,120,4779,4782,4780,1,3,2,5,5,5,5,3,120,4784,4786,4785,0,1,2,0,0,0,0,3,120,4786,4787,4785,1,3,2,0,0,0,0,3,120,4788,4790,4789,0,1,2,1,1,1,1,3,120,4790,4791,4789,1,3,2,1,1,1,1,3,120,4788,4789,4785,0,1,2,2,2,2,2,3,120,4789,4784,4785,1,3,2,2,2,2,2,3,120,4791,4790,4786,0,1,2,3,3,3,3,3,120,4790,4787,4786,1,3,2,3,3,3,3,3,120,4789,4791,4784,0,1,2,4,4,4,4,3,120,4791,4786,4784,1,3,2,4,4,4,4,3,120,4785,4787,4788,0,1,2,5,5,5,5,3,120,4787,4790,4788,1,3,2,5,5,5,5,3,120,4792,4794,4793,0,1,2,0,0,0,0,3,120,4794,4795,4793,1,3,2,0,0,0,0,3,120,4796,4798,4797,0,1,2,1,1,1,1,3,120,4798,4799,4797,1,3,2,1,1,1,1,3,120,4796,4797,4793,0,1,2,2,2,2,2,3,120,4797,4792,4793,1,3,2,2,2,2,2,3,120,4799,4798,4794,0,1,2,3,3,3,3,3,120,4798,4795,4794,1,3,2,3,3,3,3,3,120,4797,4799,4792,0,1,2,4,4,4,4,3,120,4799,4794,4792,1,3,2,4,4,4,4,3,120,4793,4795,4796,0,1,2,5,5,5,5,3,120,4795,4798,4796,1,3,2,5,5,5,5,3,120,4800,4802,4801,0,1,2,0,0,0,0,3,120,4802,4803,4801,1,3,2,0,0,0,0,3,120,4804,4806,4805,0,1,2,1,1,1,1,3,120,4806,4807,4805,1,3,2,1,1,1,1,3,120,4804,4805,4801,0,1,2,2,2,2,2,3,120,4805,4800,4801,1,3,2,2,2,2,2,3,120,4807,4806,4802,0,1,2,3,3,3,3,3,120,4806,4803,4802,1,3,2,3,3,3,3,3,120,4805,4807,4800,0,1,2,4,4,4,4,3,120,4807,4802,4800,1,3,2,4,4,4,4,3,120,4801,4803,4804,0,1,2,5,5,5,5,3,120,4803,4806,4804,1,3,2,5,5,5,5,3,120,4808,4810,4809,0,1,2,0,0,0,0,3,120,4810,4811,4809,1,3,2,0,0,0,0,3,120,4812,4814,4813,0,1,2,1,1,1,1,3,120,4814,4815,4813,1,3,2,1,1,1,1,3,120,4812,4813,4809,0,1,2,2,2,2,2,3,120,4813,4808,4809,1,3,2,2,2,2,2,3,120,4815,4814,4810,0,1,2,3,3,3,3,3,120,4814,4811,4810,1,3,2,3,3,3,3,3,120,4813,4815,4808,0,1,2,4,4,4,4,3,120,4815,4810,4808,1,3,2,4,4,4,4,3,120,4809,4811,4812,0,1,2,5,5,5,5,3,120,4811,4814,4812,1,3,2,5,5,5,5,3,120,4816,4818,4817,0,1,2,0,0,0,0,3,120,4818,4819,4817,1,3,2,0,0,0,0,3,120,4820,4822,4821,0,1,2,1,1,1,1,3,120,4822,4823,4821,1,3,2,1,1,1,1,3,120,4820,4821,4817,0,1,2,2,2,2,2,3,120,4821,4816,4817,1,3,2,2,2,2,2,3,120,4823,4822,4818,0,1,2,3,3,3,3,3,120,4822,4819,4818,1,3,2,3,3,3,3,3,120,4821,4823,4816,0,1,2,4,4,4,4,3,120,4823,4818,4816,1,3,2,4,4,4,4,3,120,4817,4819,4820,0,1,2,5,5,5,5,3,120,4819,4822,4820,1,3,2,5,5,5,5,3,120,4824,4826,4825,0,1,2,0,0,0,0,3,120,4826,4827,4825,1,3,2,0,0,0,0,3,120,4828,4830,4829,0,1,2,1,1,1,1,3,120,4830,4831,4829,1,3,2,1,1,1,1,3,120,4828,4829,4825,0,1,2,2,2,2,2,3,120,4829,4824,4825,1,3,2,2,2,2,2,3,120,4831,4830,4826,0,1,2,3,3,3,3,3,120,4830,4827,4826,1,3,2,3,3,3,3,3,120,4829,4831,4824,0,1,2,4,4,4,4,3,120,4831,4826,4824,1,3,2,4,4,4,4,3,120,4825,4827,4828,0,1,2,5,5,5,5,3,120,4827,4830,4828,1,3,2,5,5,5,5,3,120,4832,4834,4833,0,1,2,0,0,0,0,3,120,4834,4835,4833,1,3,2,0,0,0,0,3,120,4836,4838,4837,0,1,2,1,1,1,1,3,120,4838,4839,4837,1,3,2,1,1,1,1,3,120,4836,4837,4833,0,1,2,2,2,2,2,3,120,4837,4832,4833,1,3,2,2,2,2,2,3,120,4839,4838,4834,0,1,2,3,3,3,3,3,120,4838,4835,4834,1,3,2,3,3,3,3,3,120,4837,4839,4832,0,1,2,4,4,4,4,3,120,4839,4834,4832,1,3,2,4,4,4,4,3,120,4833,4835,4836,0,1,2,5,5,5,5,3,120,4835,4838,4836,1,3,2,5,5,5,5,3,120,4840,4842,4841,0,1,2,0,0,0,0,3,120,4842,4843,4841,1,3,2,0,0,0,0,3,120,4844,4846,4845,0,1,2,1,1,1,1,3,120,4846,4847,4845,1,3,2,1,1,1,1,3,120,4844,4845,4841,0,1,2,2,2,2,2,3,120,4845,4840,4841,1,3,2,2,2,2,2,3,120,4847,4846,4842,0,1,2,3,3,3,3,3,120,4846,4843,4842,1,3,2,3,3,3,3,3,120,4845,4847,4840,0,1,2,4,4,4,4,3,120,4847,4842,4840,1,3,2,4,4,4,4,3,120,4841,4843,4844,0,1,2,5,5,5,5,3,120,4843,4846,4844,1,3,2,5,5,5,5,3,120,4848,4850,4849,0,1,2,0,0,0,0,3,120,4850,4851,4849,1,3,2,0,0,0,0,3,120,4852,4854,4853,0,1,2,1,1,1,1,3,120,4854,4855,4853,1,3,2,1,1,1,1,3,120,4852,4853,4849,0,1,2,2,2,2,2,3,120,4853,4848,4849,1,3,2,2,2,2,2,3,120,4855,4854,4850,0,1,2,3,3,3,3,3,120,4854,4851,4850,1,3,2,3,3,3,3,3,120,4853,4855,4848,0,1,2,4,4,4,4,3,120,4855,4850,4848,1,3,2,4,4,4,4,3,120,4849,4851,4852,0,1,2,5,5,5,5,3,120,4851,4854,4852,1,3,2,5,5,5,5,3,120,4856,4858,4857,0,1,2,0,0,0,0,3,120,4858,4859,4857,1,3,2,0,0,0,0,3,120,4860,4862,4861,0,1,2,1,1,1,1,3,120,4862,4863,4861,1,3,2,1,1,1,1,3,120,4860,4861,4857,0,1,2,2,2,2,2,3,120,4861,4856,4857,1,3,2,2,2,2,2,3,120,4863,4862,4858,0,1,2,3,3,3,3,3,120,4862,4859,4858,1,3,2,3,3,3,3,3,120,4861,4863,4856,0,1,2,4,4,4,4,3,120,4863,4858,4856,1,3,2,4,4,4,4,3,120,4857,4859,4860,0,1,2,5,5,5,5,3,120,4859,4862,4860,1,3,2,5,5,5,5,3,120,4864,4866,4865,0,1,2,0,0,0,0,3,120,4866,4867,4865,1,3,2,0,0,0,0,3,120,4868,4870,4869,0,1,2,1,1,1,1,3,120,4870,4871,4869,1,3,2,1,1,1,1,3,120,4868,4869,4865,0,1,2,2,2,2,2,3,120,4869,4864,4865,1,3,2,2,2,2,2,3,120,4871,4870,4866,0,1,2,3,3,3,3,3,120,4870,4867,4866,1,3,2,3,3,3,3,3,120,4869,4871,4864,0,1,2,4,4,4,4,3,120,4871,4866,4864,1,3,2,4,4,4,4,3,120,4865,4867,4868,0,1,2,5,5,5,5,3,120,4867,4870,4868,1,3,2,5,5,5,5,3,120,4872,4874,4873,0,1,2,0,0,0,0,3,120,4874,4875,4873,1,3,2,0,0,0,0,3,120,4876,4878,4877,0,1,2,1,1,1,1,3,120,4878,4879,4877,1,3,2,1,1,1,1,3,120,4876,4877,4873,0,1,2,2,2,2,2,3,120,4877,4872,4873,1,3,2,2,2,2,2,3,120,4879,4878,4874,0,1,2,3,3,3,3,3,120,4878,4875,4874,1,3,2,3,3,3,3,3,120,4877,4879,4872,0,1,2,4,4,4,4,3,120,4879,4874,4872,1,3,2,4,4,4,4,3,120,4873,4875,4876,0,1,2,5,5,5,5,3,120,4875,4878,4876,1,3,2,5,5,5,5,3,120,4880,4882,4881,0,1,2,0,0,0,0,3,120,4882,4883,4881,1,3,2,0,0,0,0,3,120,4884,4886,4885,0,1,2,1,1,1,1,3,120,4886,4887,4885,1,3,2,1,1,1,1,3,120,4884,4885,4881,0,1,2,2,2,2,2,3,120,4885,4880,4881,1,3,2,2,2,2,2,3,120,4887,4886,4882,0,1,2,3,3,3,3,3,120,4886,4883,4882,1,3,2,3,3,3,3,3,120,4885,4887,4880,0,1,2,4,4,4,4,3,120,4887,4882,4880,1,3,2,4,4,4,4,3,120,4881,4883,4884,0,1,2,5,5,5,5,3,120,4883,4886,4884,1,3,2,5,5,5,5,3,120,4888,4890,4889,0,1,2,0,0,0,0,3,120,4890,4891,4889,1,3,2,0,0,0,0,3,120,4892,4894,4893,0,1,2,1,1,1,1,3,120,4894,4895,4893,1,3,2,1,1,1,1,3,120,4892,4893,4889,0,1,2,2,2,2,2,3,120,4893,4888,4889,1,3,2,2,2,2,2,3,120,4895,4894,4890,0,1,2,3,3,3,3,3,120,4894,4891,4890,1,3,2,3,3,3,3,3,120,4893,4895,4888,0,1,2,4,4,4,4,3,120,4895,4890,4888,1,3,2,4,4,4,4,3,120,4889,4891,4892,0,1,2,5,5,5,5,3,120,4891,4894,4892,1,3,2,5,5,5,5,3,120,4896,4898,4897,0,1,2,0,0,0,0,3,120,4898,4899,4897,1,3,2,0,0,0,0,3,120,4900,4902,4901,0,1,2,1,1,1,1,3,120,4902,4903,4901,1,3,2,1,1,1,1,3,120,4900,4901,4897,0,1,2,2,2,2,2,3,120,4901,4896,4897,1,3,2,2,2,2,2,3,120,4903,4902,4898,0,1,2,3,3,3,3,3,120,4902,4899,4898,1,3,2,3,3,3,3,3,120,4901,4903,4896,0,1,2,4,4,4,4,3,120,4903,4898,4896,1,3,2,4,4,4,4,3,120,4897,4899,4900,0,1,2,5,5,5,5,3,120,4899,4902,4900,1,3,2,5,5,5,5,3,120,4904,4906,4905,0,1,2,0,0,0,0,3,120,4906,4907,4905,1,3,2,0,0,0,0,3,120,4908,4910,4909,0,1,2,1,1,1,1,3,120,4910,4911,4909,1,3,2,1,1,1,1,3,120,4908,4909,4905,0,1,2,2,2,2,2,3,120,4909,4904,4905,1,3,2,2,2,2,2,3,120,4911,4910,4906,0,1,2,3,3,3,3,3,120,4910,4907,4906,1,3,2,3,3,3,3,3,120,4909,4911,4904,0,1,2,4,4,4,4,3,120,4911,4906,4904,1,3,2,4,4,4,4,3,120,4905,4907,4908,0,1,2,5,5,5,5,3,120,4907,4910,4908,1,3,2,5,5,5,5,3,120,4912,4914,4913,0,1,2,0,0,0,0,3,120,4914,4915,4913,1,3,2,0,0,0,0,3,120,4916,4918,4917,0,1,2,1,1,1,1,3,120,4918,4919,4917,1,3,2,1,1,1,1,3,120,4916,4917,4913,0,1,2,2,2,2,2,3,120,4917,4912,4913,1,3,2,2,2,2,2,3,120,4919,4918,4914,0,1,2,3,3,3,3,3,120,4918,4915,4914,1,3,2,3,3,3,3,3,120,4917,4919,4912,0,1,2,4,4,4,4,3,120,4919,4914,4912,1,3,2,4,4,4,4,3,120,4913,4915,4916,0,1,2,5,5,5,5,3,120,4915,4918,4916,1,3,2,5,5,5,5,3,120,4920,4922,4921,0,1,2,0,0,0,0,3,120,4922,4923,4921,1,3,2,0,0,0,0,3,120,4924,4926,4925,0,1,2,1,1,1,1,3,120,4926,4927,4925,1,3,2,1,1,1,1,3,120,4924,4925,4921,0,1,2,2,2,2,2,3,120,4925,4920,4921,1,3,2,2,2,2,2,3,120,4927,4926,4922,0,1,2,3,3,3,3,3,120,4926,4923,4922,1,3,2,3,3,3,3,3,120,4925,4927,4920,0,1,2,4,4,4,4,3,120,4927,4922,4920,1,3,2,4,4,4,4,3,120,4921,4923,4924,0,1,2,5,5,5,5,3,120,4923,4926,4924,1,3,2,5,5,5,5,3,120,4928,4930,4929,0,1,2,0,0,0,0,3,120,4930,4931,4929,1,3,2,0,0,0,0,3,120,4932,4934,4933,0,1,2,1,1,1,1,3,120,4934,4935,4933,1,3,2,1,1,1,1,3,120,4932,4933,4929,0,1,2,2,2,2,2,3,120,4933,4928,4929,1,3,2,2,2,2,2,3,120,4935,4934,4930,0,1,2,3,3,3,3,3,120,4934,4931,4930,1,3,2,3,3,3,3,3,120,4933,4935,4928,0,1,2,4,4,4,4,3,120,4935,4930,4928,1,3,2,4,4,4,4,3,120,4929,4931,4932,0,1,2,5,5,5,5,3,120,4931,4934,4932,1,3,2,5,5,5,5,3,120,4936,4938,4937,0,1,2,0,0,0,0,3,120,4938,4939,4937,1,3,2,0,0,0,0,3,120,4940,4942,4941,0,1,2,1,1,1,1,3,120,4942,4943,4941,1,3,2,1,1,1,1,3,120,4940,4941,4937,0,1,2,2,2,2,2,3,120,4941,4936,4937,1,3,2,2,2,2,2,3,120,4943,4942,4938,0,1,2,3,3,3,3,3,120,4942,4939,4938,1,3,2,3,3,3,3,3,120,4941,4943,4936,0,1,2,4,4,4,4,3,120,4943,4938,4936,1,3,2,4,4,4,4,3,120,4937,4939,4940,0,1,2,5,5,5,5,3,120,4939,4942,4940,1,3,2,5,5,5,5,3,120,4944,4946,4945,0,1,2,0,0,0,0,3,120,4946,4947,4945,1,3,2,0,0,0,0,3,120,4948,4950,4949,0,1,2,1,1,1,1,3,120,4950,4951,4949,1,3,2,1,1,1,1,3,120,4948,4949,4945,0,1,2,2,2,2,2,3,120,4949,4944,4945,1,3,2,2,2,2,2,3,120,4951,4950,4946,0,1,2,3,3,3,3,3,120,4950,4947,4946,1,3,2,3,3,3,3,3,120,4949,4951,4944,0,1,2,4,4,4,4,3,120,4951,4946,4944,1,3,2,4,4,4,4,3,120,4945,4947,4948,0,1,2,5,5,5,5,3,120,4947,4950,4948,1,3,2,5,5,5,5,3,120,4952,4954,4953,0,1,2,0,0,0,0,3,120,4954,4955,4953,1,3,2,0,0,0,0,3,120,4956,4958,4957,0,1,2,1,1,1,1,3,120,4958,4959,4957,1,3,2,1,1,1,1,3,120,4956,4957,4953,0,1,2,2,2,2,2,3,120,4957,4952,4953,1,3,2,2,2,2,2,3,120,4959,4958,4954,0,1,2,3,3,3,3,3,120,4958,4955,4954,1,3,2,3,3,3,3,3,120,4957,4959,4952,0,1,2,4,4,4,4,3,120,4959,4954,4952,1,3,2,4,4,4,4,3,120,4953,4955,4956,0,1,2,5,5,5,5,3,120,4955,4958,4956,1,3,2,5,5,5,5,3,120,4960,4962,4961,0,1,2,0,0,0,0,3,120,4962,4963,4961,1,3,2,0,0,0,0,3,120,4964,4966,4965,0,1,2,1,1,1,1,3,120,4966,4967,4965,1,3,2,1,1,1,1,3,120,4964,4965,4961,0,1,2,2,2,2,2,3,120,4965,4960,4961,1,3,2,2,2,2,2,3,120,4967,4966,4962,0,1,2,3,3,3,3,3,120,4966,4963,4962,1,3,2,3,3,3,3,3,120,4965,4967,4960,0,1,2,4,4,4,4,3,120,4967,4962,4960,1,3,2,4,4,4,4,3,120,4961,4963,4964,0,1,2,5,5,5,5,3,120,4963,4966,4964,1,3,2,5,5,5,5,3,120,4968,4970,4969,0,1,2,0,0,0,0,3,120,4970,4971,4969,1,3,2,0,0,0,0,3,120,4972,4974,4973,0,1,2,1,1,1,1,3,120,4974,4975,4973,1,3,2,1,1,1,1,3,120,4972,4973,4969,0,1,2,2,2,2,2,3,120,4973,4968,4969,1,3,2,2,2,2,2,3,120,4975,4974,4970,0,1,2,3,3,3,3,3,120,4974,4971,4970,1,3,2,3,3,3,3,3,120,4973,4975,4968,0,1,2,4,4,4,4,3,120,4975,4970,4968,1,3,2,4,4,4,4,3,120,4969,4971,4972,0,1,2,5,5,5,5,3,120,4971,4974,4972,1,3,2,5,5,5,5,3,120,4976,4978,4977,0,1,2,0,0,0,0,3,120,4978,4979,4977,1,3,2,0,0,0,0,3,120,4980,4982,4981,0,1,2,1,1,1,1,3,120,4982,4983,4981,1,3,2,1,1,1,1,3,120,4980,4981,4977,0,1,2,2,2,2,2,3,120,4981,4976,4977,1,3,2,2,2,2,2,3,120,4983,4982,4978,0,1,2,3,3,3,3,3,120,4982,4979,4978,1,3,2,3,3,3,3,3,120,4981,4983,4976,0,1,2,4,4,4,4,3,120,4983,4978,4976,1,3,2,4,4,4,4,3,120,4977,4979,4980,0,1,2,5,5,5,5,3,120,4979,4982,4980,1,3,2,5,5,5,5,3,120,4984,4986,4985,0,1,2,0,0,0,0,3,120,4986,4987,4985,1,3,2,0,0,0,0,3,120,4988,4990,4989,0,1,2,1,1,1,1,3,120,4990,4991,4989,1,3,2,1,1,1,1,3,120,4988,4989,4985,0,1,2,2,2,2,2,3,120,4989,4984,4985,1,3,2,2,2,2,2,3,120,4991,4990,4986,0,1,2,3,3,3,3,3,120,4990,4987,4986,1,3,2,3,3,3,3,3,120,4989,4991,4984,0,1,2,4,4,4,4,3,120,4991,4986,4984,1,3,2,4,4,4,4,3,120,4985,4987,4988,0,1,2,5,5,5,5,3,120,4987,4990,4988,1,3,2,5,5,5,5,3,120,4992,4994,4993,0,1,2,0,0,0,0,3,120,4994,4995,4993,1,3,2,0,0,0,0,3,120,4996,4998,4997,0,1,2,1,1,1,1,3,120,4998,4999,4997,1,3,2,1,1,1,1,3,120,4996,4997,4993,0,1,2,2,2,2,2,3,120,4997,4992,4993,1,3,2,2,2,2,2,3,120,4999,4998,4994,0,1,2,3,3,3,3,3,120,4998,4995,4994,1,3,2,3,3,3,3,3,120,4997,4999,4992,0,1,2,4,4,4,4,3,120,4999,4994,4992,1,3,2,4,4,4,4,3,120,4993,4995,4996,0,1,2,5,5,5,5,3,120,4995,4998,4996,1,3,2,5,5,5,5,3,120,5000,5002,5001,0,1,2,0,0,0,0,3,120,5002,5003,5001,1,3,2,0,0,0,0,3,120,5004,5006,5005,0,1,2,1,1,1,1,3,120,5006,5007,5005,1,3,2,1,1,1,1,3,120,5004,5005,5001,0,1,2,2,2,2,2,3,120,5005,5000,5001,1,3,2,2,2,2,2,3,120,5007,5006,5002,0,1,2,3,3,3,3,3,120,5006,5003,5002,1,3,2,3,3,3,3,3,120,5005,5007,5000,0,1,2,4,4,4,4,3,120,5007,5002,5000,1,3,2,4,4,4,4,3,120,5001,5003,5004,0,1,2,5,5,5,5,3,120,5003,5006,5004,1,3,2,5,5,5,5,3,120,5008,5010,5009,0,1,2,0,0,0,0,3,120,5010,5011,5009,1,3,2,0,0,0,0,3,120,5012,5014,5013,0,1,2,1,1,1,1,3,120,5014,5015,5013,1,3,2,1,1,1,1,3,120,5012,5013,5009,0,1,2,2,2,2,2,3,120,5013,5008,5009,1,3,2,2,2,2,2,3,120,5015,5014,5010,0,1,2,3,3,3,3,3,120,5014,5011,5010,1,3,2,3,3,3,3,3,120,5013,5015,5008,0,1,2,4,4,4,4,3,120,5015,5010,5008,1,3,2,4,4,4,4,3,120,5009,5011,5012,0,1,2,5,5,5,5,3,120,5011,5014,5012,1,3,2,5,5,5,5,3,120,5016,5018,5017,0,1,2,0,0,0,0,3,120,5018,5019,5017,1,3,2,0,0,0,0,3,120,5020,5022,5021,0,1,2,1,1,1,1,3,120,5022,5023,5021,1,3,2,1,1,1,1,3,120,5020,5021,5017,0,1,2,2,2,2,2,3,120,5021,5016,5017,1,3,2,2,2,2,2,3,120,5023,5022,5018,0,1,2,3,3,3,3,3,120,5022,5019,5018,1,3,2,3,3,3,3,3,120,5021,5023,5016,0,1,2,4,4,4,4,3,120,5023,5018,5016,1,3,2,4,4,4,4,3,120,5017,5019,5020,0,1,2,5,5,5,5,3,120,5019,5022,5020,1,3,2,5,5,5,5,3,120,5024,5026,5025,0,1,2,0,0,0,0,3,120,5026,5027,5025,1,3,2,0,0,0,0,3,120,5028,5030,5029,0,1,2,1,1,1,1,3,120,5030,5031,5029,1,3,2,1,1,1,1,3,120,5028,5029,5025,0,1,2,2,2,2,2,3,120,5029,5024,5025,1,3,2,2,2,2,2,3,120,5031,5030,5026,0,1,2,3,3,3,3,3,120,5030,5027,5026,1,3,2,3,3,3,3,3,120,5029,5031,5024,0,1,2,4,4,4,4,3,120,5031,5026,5024,1,3,2,4,4,4,4,3,120,5025,5027,5028,0,1,2,5,5,5,5,3,120,5027,5030,5028,1,3,2,5,5,5,5,3,120,5032,5034,5033,0,1,2,0,0,0,0,3,120,5034,5035,5033,1,3,2,0,0,0,0,3,120,5036,5038,5037,0,1,2,1,1,1,1,3,120,5038,5039,5037,1,3,2,1,1,1,1,3,120,5036,5037,5033,0,1,2,2,2,2,2,3,120,5037,5032,5033,1,3,2,2,2,2,2,3,120,5039,5038,5034,0,1,2,3,3,3,3,3,120,5038,5035,5034,1,3,2,3,3,3,3,3,120,5037,5039,5032,0,1,2,4,4,4,4,3,120,5039,5034,5032,1,3,2,4,4,4,4,3,120,5033,5035,5036,0,1,2,5,5,5,5,3,120,5035,5038,5036,1,3,2,5,5,5,5,3,120,5040,5042,5041,0,1,2,0,0,0,0,3,120,5042,5043,5041,1,3,2,0,0,0,0,3,120,5044,5046,5045,0,1,2,1,1,1,1,3,120,5046,5047,5045,1,3,2,1,1,1,1,3,120,5044,5045,5041,0,1,2,2,2,2,2,3,120,5045,5040,5041,1,3,2,2,2,2,2,3,120,5047,5046,5042,0,1,2,3,3,3,3,3,120,5046,5043,5042,1,3,2,3,3,3,3,3,120,5045,5047,5040,0,1,2,4,4,4,4,3,120,5047,5042,5040,1,3,2,4,4,4,4,3,120,5041,5043,5044,0,1,2,5,5,5,5,3,120,5043,5046,5044,1,3,2,5,5,5,5,3,120,5048,5050,5049,0,1,2,0,0,0,0,3,120,5050,5051,5049,1,3,2,0,0,0,0,3,120,5052,5054,5053,0,1,2,1,1,1,1,3,120,5054,5055,5053,1,3,2,1,1,1,1,3,120,5052,5053,5049,0,1,2,2,2,2,2,3,120,5053,5048,5049,1,3,2,2,2,2,2,3,120,5055,5054,5050,0,1,2,3,3,3,3,3,120,5054,5051,5050,1,3,2,3,3,3,3,3,120,5053,5055,5048,0,1,2,4,4,4,4,3,120,5055,5050,5048,1,3,2,4,4,4,4,3,120,5049,5051,5052,0,1,2,5,5,5,5,3,120,5051,5054,5052,1,3,2,5,5,5,5,3,120,5056,5058,5057,0,1,2,0,0,0,0,3,120,5058,5059,5057,1,3,2,0,0,0,0,3,120,5060,5062,5061,0,1,2,1,1,1,1,3,120,5062,5063,5061,1,3,2,1,1,1,1,3,120,5060,5061,5057,0,1,2,2,2,2,2,3,120,5061,5056,5057,1,3,2,2,2,2,2,3,120,5063,5062,5058,0,1,2,3,3,3,3,3,120,5062,5059,5058,1,3,2,3,3,3,3,3,120,5061,5063,5056,0,1,2,4,4,4,4,3,120,5063,5058,5056,1,3,2,4,4,4,4,3,120,5057,5059,5060,0,1,2,5,5,5,5,3,120,5059,5062,5060,1,3,2,5,5,5,5,3,120,5064,5066,5065,0,1,2,0,0,0,0,3,120,5066,5067,5065,1,3,2,0,0,0,0,3,120,5068,5070,5069,0,1,2,1,1,1,1,3,120,5070,5071,5069,1,3,2,1,1,1,1,3,120,5068,5069,5065,0,1,2,2,2,2,2,3,120,5069,5064,5065,1,3,2,2,2,2,2,3,120,5071,5070,5066,0,1,2,3,3,3,3,3,120,5070,5067,5066,1,3,2,3,3,3,3,3,120,5069,5071,5064,0,1,2,4,4,4,4,3,120,5071,5066,5064,1,3,2,4,4,4,4,3,120,5065,5067,5068,0,1,2,5,5,5,5,3,120,5067,5070,5068,1,3,2,5,5,5,5,3,120,5072,5074,5073,0,1,2,0,0,0,0,3,120,5074,5075,5073,1,3,2,0,0,0,0,3,120,5076,5078,5077,0,1,2,1,1,1,1,3,120,5078,5079,5077,1,3,2,1,1,1,1,3,120,5076,5077,5073,0,1,2,2,2,2,2,3,120,5077,5072,5073,1,3,2,2,2,2,2,3,120,5079,5078,5074,0,1,2,3,3,3,3,3,120,5078,5075,5074,1,3,2,3,3,3,3,3,120,5077,5079,5072,0,1,2,4,4,4,4,3,120,5079,5074,5072,1,3,2,4,4,4,4,3,120,5073,5075,5076,0,1,2,5,5,5,5,3,120,5075,5078,5076,1,3,2,5,5,5,5,3,120,5080,5082,5081,0,1,2,0,0,0,0,3,120,5082,5083,5081,1,3,2,0,0,0,0,3,120,5084,5086,5085,0,1,2,1,1,1,1,3,120,5086,5087,5085,1,3,2,1,1,1,1,3,120,5084,5085,5081,0,1,2,2,2,2,2,3,120,5085,5080,5081,1,3,2,2,2,2,2,3,120,5087,5086,5082,0,1,2,3,3,3,3,3,120,5086,5083,5082,1,3,2,3,3,3,3,3,120,5085,5087,5080,0,1,2,4,4,4,4,3,120,5087,5082,5080,1,3,2,4,4,4,4,3,120,5081,5083,5084,0,1,2,5,5,5,5,3,120,5083,5086,5084,1,3,2,5,5,5,5,3,120,5088,5090,5089,0,1,2,0,0,0,0,3,120,5090,5091,5089,1,3,2,0,0,0,0,3,120,5092,5094,5093,0,1,2,1,1,1,1,3,120,5094,5095,5093,1,3,2,1,1,1,1,3,120,5092,5093,5089,0,1,2,2,2,2,2,3,120,5093,5088,5089,1,3,2,2,2,2,2,3,120,5095,5094,5090,0,1,2,3,3,3,3,3,120,5094,5091,5090,1,3,2,3,3,3,3,3,120,5093,5095,5088,0,1,2,4,4,4,4,3,120,5095,5090,5088,1,3,2,4,4,4,4,3,120,5089,5091,5092,0,1,2,5,5,5,5,3,120,5091,5094,5092,1,3,2,5,5,5,5,3,120,5096,5098,5097,0,1,2,0,0,0,0,3,120,5098,5099,5097,1,3,2,0,0,0,0,3,120,5100,5102,5101,0,1,2,1,1,1,1,3,120,5102,5103,5101,1,3,2,1,1,1,1,3,120,5100,5101,5097,0,1,2,2,2,2,2,3,120,5101,5096,5097,1,3,2,2,2,2,2,3,120,5103,5102,5098,0,1,2,3,3,3,3,3,120,5102,5099,5098,1,3,2,3,3,3,3,3,120,5101,5103,5096,0,1,2,4,4,4,4,3,120,5103,5098,5096,1,3,2,4,4,4,4,3,120,5097,5099,5100,0,1,2,5,5,5,5,3,120,5099,5102,5100,1,3,2,5,5,5,5,3,120,5104,5106,5105,0,1,2,0,0,0,0,3,120,5106,5107,5105,1,3,2,0,0,0,0,3,120,5108,5110,5109,0,1,2,1,1,1,1,3,120,5110,5111,5109,1,3,2,1,1,1,1,3,120,5108,5109,5105,0,1,2,2,2,2,2,3,120,5109,5104,5105,1,3,2,2,2,2,2,3,120,5111,5110,5106,0,1,2,3,3,3,3,3,120,5110,5107,5106,1,3,2,3,3,3,3,3,120,5109,5111,5104,0,1,2,4,4,4,4,3,120,5111,5106,5104,1,3,2,4,4,4,4,3,120,5105,5107,5108,0,1,2,5,5,5,5,3,120,5107,5110,5108,1,3,2,5,5,5,5,3,120,5112,5114,5113,0,1,2,0,0,0,0,3,120,5114,5115,5113,1,3,2,0,0,0,0,3,120,5116,5118,5117,0,1,2,1,1,1,1,3,120,5118,5119,5117,1,3,2,1,1,1,1,3,120,5116,5117,5113,0,1,2,2,2,2,2,3,120,5117,5112,5113,1,3,2,2,2,2,2,3,120,5119,5118,5114,0,1,2,3,3,3,3,3,120,5118,5115,5114,1,3,2,3,3,3,3,3,120,5117,5119,5112,0,1,2,4,4,4,4,3,120,5119,5114,5112,1,3,2,4,4,4,4,3,120,5113,5115,5116,0,1,2,5,5,5,5,3,120,5115,5118,5116,1,3,2,5,5,5,5,3,120,5120,5122,5121,0,1,2,0,0,0,0,3,120,5122,5123,5121,1,3,2,0,0,0,0,3,120,5124,5126,5125,0,1,2,1,1,1,1,3,120,5126,5127,5125,1,3,2,1,1,1,1,3,120,5124,5125,5121,0,1,2,2,2,2,2,3,120,5125,5120,5121,1,3,2,2,2,2,2,3,120,5127,5126,5122,0,1,2,3,3,3,3,3,120,5126,5123,5122,1,3,2,3,3,3,3,3,120,5125,5127,5120,0,1,2,4,4,4,4,3,120,5127,5122,5120,1,3,2,4,4,4,4,3,120,5121,5123,5124,0,1,2,5,5,5,5,3,120,5123,5126,5124,1,3,2,5,5,5,5,3,120,5128,5130,5129,0,1,2,0,0,0,0,3,120,5130,5131,5129,1,3,2,0,0,0,0,3,120,5132,5134,5133,0,1,2,1,1,1,1,3,120,5134,5135,5133,1,3,2,1,1,1,1,3,120,5132,5133,5129,0,1,2,2,2,2,2,3,120,5133,5128,5129,1,3,2,2,2,2,2,3,120,5135,5134,5130,0,1,2,3,3,3,3,3,120,5134,5131,5130,1,3,2,3,3,3,3,3,120,5133,5135,5128,0,1,2,4,4,4,4,3,120,5135,5130,5128,1,3,2,4,4,4,4,3,120,5129,5131,5132,0,1,2,5,5,5,5,3,120,5131,5134,5132,1,3,2,5,5,5,5,3,120,5136,5138,5137,0,1,2,0,0,0,0,3,120,5138,5139,5137,1,3,2,0,0,0,0,3,120,5140,5142,5141,0,1,2,1,1,1,1,3,120,5142,5143,5141,1,3,2,1,1,1,1,3,120,5140,5141,5137,0,1,2,2,2,2,2,3,120,5141,5136,5137,1,3,2,2,2,2,2,3,120,5143,5142,5138,0,1,2,3,3,3,3,3,120,5142,5139,5138,1,3,2,3,3,3,3,3,120,5141,5143,5136,0,1,2,4,4,4,4,3,120,5143,5138,5136,1,3,2,4,4,4,4,3,120,5137,5139,5140,0,1,2,5,5,5,5,3,120,5139,5142,5140,1,3,2,5,5,5,5,3,120,5144,5146,5145,0,1,2,0,0,0,0,3,120,5146,5147,5145,1,3,2,0,0,0,0,3,120,5148,5150,5149,0,1,2,1,1,1,1,3,120,5150,5151,5149,1,3,2,1,1,1,1,3,120,5148,5149,5145,0,1,2,2,2,2,2,3,120,5149,5144,5145,1,3,2,2,2,2,2,3,120,5151,5150,5146,0,1,2,3,3,3,3,3,120,5150,5147,5146,1,3,2,3,3,3,3,3,120,5149,5151,5144,0,1,2,4,4,4,4,3,120,5151,5146,5144,1,3,2,4,4,4,4,3,120,5145,5147,5148,0,1,2,5,5,5,5,3,120,5147,5150,5148,1,3,2,5,5,5,5,3,120,5152,5154,5153,0,1,2,0,0,0,0,3,120,5154,5155,5153,1,3,2,0,0,0,0,3,120,5156,5158,5157,0,1,2,1,1,1,1,3,120,5158,5159,5157,1,3,2,1,1,1,1,3,120,5156,5157,5153,0,1,2,2,2,2,2,3,120,5157,5152,5153,1,3,2,2,2,2,2,3,120,5159,5158,5154,0,1,2,3,3,3,3,3,120,5158,5155,5154,1,3,2,3,3,3,3,3,120,5157,5159,5152,0,1,2,4,4,4,4,3,120,5159,5154,5152,1,3,2,4,4,4,4,3,120,5153,5155,5156,0,1,2,5,5,5,5,3,120,5155,5158,5156,1,3,2,5,5,5,5,3,120,5160,5162,5161,0,1,2,0,0,0,0,3,120,5162,5163,5161,1,3,2,0,0,0,0,3,120,5164,5166,5165,0,1,2,1,1,1,1,3,120,5166,5167,5165,1,3,2,1,1,1,1,3,120,5164,5165,5161,0,1,2,2,2,2,2,3,120,5165,5160,5161,1,3,2,2,2,2,2,3,120,5167,5166,5162,0,1,2,3,3,3,3,3,120,5166,5163,5162,1,3,2,3,3,3,3,3,120,5165,5167,5160,0,1,2,4,4,4,4,3,120,5167,5162,5160,1,3,2,4,4,4,4,3,120,5161,5163,5164,0,1,2,5,5,5,5,3,120,5163,5166,5164,1,3,2,5,5,5,5,3,120,5168,5170,5169,0,1,2,0,0,0,0,3,120,5170,5171,5169,1,3,2,0,0,0,0,3,120,5172,5174,5173,0,1,2,1,1,1,1,3,120,5174,5175,5173,1,3,2,1,1,1,1,3,120,5172,5173,5169,0,1,2,2,2,2,2,3,120,5173,5168,5169,1,3,2,2,2,2,2,3,120,5175,5174,5170,0,1,2,3,3,3,3,3,120,5174,5171,5170,1,3,2,3,3,3,3,3,120,5173,5175,5168,0,1,2,4,4,4,4,3,120,5175,5170,5168,1,3,2,4,4,4,4,3,120,5169,5171,5172,0,1,2,5,5,5,5,3,120,5171,5174,5172,1,3,2,5,5,5,5,3,120,5176,5178,5177,0,1,2,0,0,0,0,3,120,5178,5179,5177,1,3,2,0,0,0,0,3,120,5180,5182,5181,0,1,2,1,1,1,1,3,120,5182,5183,5181,1,3,2,1,1,1,1,3,120,5180,5181,5177,0,1,2,2,2,2,2,3,120,5181,5176,5177,1,3,2,2,2,2,2,3,120,5183,5182,5178,0,1,2,3,3,3,3,3,120,5182,5179,5178,1,3,2,3,3,3,3,3,120,5181,5183,5176,0,1,2,4,4,4,4,3,120,5183,5178,5176,1,3,2,4,4,4,4,3,120,5177,5179,5180,0,1,2,5,5,5,5,3,120,5179,5182,5180,1,3,2,5,5,5,5,3,120,5184,5186,5185,0,1,2,0,0,0,0,3,120,5186,5187,5185,1,3,2,0,0,0,0,3,120,5188,5190,5189,0,1,2,1,1,1,1,3,120,5190,5191,5189,1,3,2,1,1,1,1,3,120,5188,5189,5185,0,1,2,2,2,2,2,3,120,5189,5184,5185,1,3,2,2,2,2,2,3,120,5191,5190,5186,0,1,2,3,3,3,3,3,120,5190,5187,5186,1,3,2,3,3,3,3,3,120,5189,5191,5184,0,1,2,4,4,4,4,3,120,5191,5186,5184,1,3,2,4,4,4,4,3,120,5185,5187,5188,0,1,2,5,5,5,5,3,120,5187,5190,5188,1,3,2,5,5,5,5,3,120,5192,5194,5193,0,1,2,0,0,0,0,3,120,5194,5195,5193,1,3,2,0,0,0,0,3,120,5196,5198,5197,0,1,2,1,1,1,1,3,120,5198,5199,5197,1,3,2,1,1,1,1,3,120,5196,5197,5193,0,1,2,2,2,2,2,3,120,5197,5192,5193,1,3,2,2,2,2,2,3,120,5199,5198,5194,0,1,2,3,3,3,3,3,120,5198,5195,5194,1,3,2,3,3,3,3,3,120,5197,5199,5192,0,1,2,4,4,4,4,3,120,5199,5194,5192,1,3,2,4,4,4,4,3,120,5193,5195,5196,0,1,2,5,5,5,5,3,120,5195,5198,5196,1,3,2,5,5,5,5,3,120,5200,5202,5201,0,1,2,0,0,0,0,3,120,5202,5203,5201,1,3,2,0,0,0,0,3,120,5204,5206,5205,0,1,2,1,1,1,1,3,120,5206,5207,5205,1,3,2,1,1,1,1,3,120,5204,5205,5201,0,1,2,2,2,2,2,3,120,5205,5200,5201,1,3,2,2,2,2,2,3,120,5207,5206,5202,0,1,2,3,3,3,3,3,120,5206,5203,5202,1,3,2,3,3,3,3,3,120,5205,5207,5200,0,1,2,4,4,4,4,3,120,5207,5202,5200,1,3,2,4,4,4,4,3,120,5201,5203,5204,0,1,2,5,5,5,5,3,120,5203,5206,5204,1,3,2,5,5,5,5,3,120,5208,5210,5209,0,1,2,0,0,0,0,3,120,5210,5211,5209,1,3,2,0,0,0,0,3,120,5212,5214,5213,0,1,2,1,1,1,1,3,120,5214,5215,5213,1,3,2,1,1,1,1,3,120,5212,5213,5209,0,1,2,2,2,2,2,3,120,5213,5208,5209,1,3,2,2,2,2,2,3,120,5215,5214,5210,0,1,2,3,3,3,3,3,120,5214,5211,5210,1,3,2,3,3,3,3,3,120,5213,5215,5208,0,1,2,4,4,4,4,3,120,5215,5210,5208,1,3,2,4,4,4,4,3,120,5209,5211,5212,0,1,2,5,5,5,5,3,120,5211,5214,5212,1,3,2,5,5,5,5,3,120,5216,5218,5217,0,1,2,0,0,0,0,3,120,5218,5219,5217,1,3,2,0,0,0,0,3,120,5220,5222,5221,0,1,2,1,1,1,1,3,120,5222,5223,5221,1,3,2,1,1,1,1,3,120,5220,5221,5217,0,1,2,2,2,2,2,3,120,5221,5216,5217,1,3,2,2,2,2,2,3,120,5223,5222,5218,0,1,2,3,3,3,3,3,120,5222,5219,5218,1,3,2,3,3,3,3,3,120,5221,5223,5216,0,1,2,4,4,4,4,3,120,5223,5218,5216,1,3,2,4,4,4,4,3,120,5217,5219,5220,0,1,2,5,5,5,5,3,120,5219,5222,5220,1,3,2,5,5,5,5,3,120,5224,5226,5225,0,1,2,0,0,0,0,3,120,5226,5227,5225,1,3,2,0,0,0,0,3,120,5228,5230,5229,0,1,2,1,1,1,1,3,120,5230,5231,5229,1,3,2,1,1,1,1,3,120,5228,5229,5225,0,1,2,2,2,2,2,3,120,5229,5224,5225,1,3,2,2,2,2,2,3,120,5231,5230,5226,0,1,2,3,3,3,3,3,120,5230,5227,5226,1,3,2,3,3,3,3,3,120,5229,5231,5224,0,1,2,4,4,4,4,3,120,5231,5226,5224,1,3,2,4,4,4,4,3,120,5225,5227,5228,0,1,2,5,5,5,5,3,120,5227,5230,5228,1,3,2,5,5,5,5,3,120,5232,5234,5233,0,1,2,0,0,0,0,3,120,5234,5235,5233,1,3,2,0,0,0,0,3,120,5236,5238,5237,0,1,2,1,1,1,1,3,120,5238,5239,5237,1,3,2,1,1,1,1,3,120,5236,5237,5233,0,1,2,2,2,2,2,3,120,5237,5232,5233,1,3,2,2,2,2,2,3,120,5239,5238,5234,0,1,2,3,3,3,3,3,120,5238,5235,5234,1,3,2,3,3,3,3,3,120,5237,5239,5232,0,1,2,4,4,4,4,3,120,5239,5234,5232,1,3,2,4,4,4,4,3,120,5233,5235,5236,0,1,2,5,5,5,5,3,120,5235,5238,5236,1,3,2,5,5,5,5,3,120,5240,5242,5241,0,1,2,0,0,0,0,3,120,5242,5243,5241,1,3,2,0,0,0,0,3,120,5244,5246,5245,0,1,2,1,1,1,1,3,120,5246,5247,5245,1,3,2,1,1,1,1,3,120,5244,5245,5241,0,1,2,2,2,2,2,3,120,5245,5240,5241,1,3,2,2,2,2,2,3,120,5247,5246,5242,0,1,2,3,3,3,3,3,120,5246,5243,5242,1,3,2,3,3,3,3,3,120,5245,5247,5240,0,1,2,4,4,4,4,3,120,5247,5242,5240,1,3,2,4,4,4,4,3,120,5241,5243,5244,0,1,2,5,5,5,5,3,120,5243,5246,5244,1,3,2,5,5,5,5,3,120,5248,5250,5249,0,1,2,0,0,0,0,3,120,5250,5251,5249,1,3,2,0,0,0,0,3,120,5252,5254,5253,0,1,2,1,1,1,1,3,120,5254,5255,5253,1,3,2,1,1,1,1,3,120,5252,5253,5249,0,1,2,2,2,2,2,3,120,5253,5248,5249,1,3,2,2,2,2,2,3,120,5255,5254,5250,0,1,2,3,3,3,3,3,120,5254,5251,5250,1,3,2,3,3,3,3,3,120,5253,5255,5248,0,1,2,4,4,4,4,3,120,5255,5250,5248,1,3,2,4,4,4,4,3,120,5249,5251,5252,0,1,2,5,5,5,5,3,120,5251,5254,5252,1,3,2,5,5,5,5,3,120,5256,5258,5257,0,1,2,0,0,0,0,3,120,5258,5259,5257,1,3,2,0,0,0,0,3,120,5260,5262,5261,0,1,2,1,1,1,1,3,120,5262,5263,5261,1,3,2,1,1,1,1,3,120,5260,5261,5257,0,1,2,2,2,2,2,3,120,5261,5256,5257,1,3,2,2,2,2,2,3,120,5263,5262,5258,0,1,2,3,3,3,3,3,120,5262,5259,5258,1,3,2,3,3,3,3,3,120,5261,5263,5256,0,1,2,4,4,4,4,3,120,5263,5258,5256,1,3,2,4,4,4,4,3,120,5257,5259,5260,0,1,2,5,5,5,5,3,120,5259,5262,5260,1,3,2,5,5,5,5,3,120,5264,5266,5265,0,1,2,0,0,0,0,3,120,5266,5267,5265,1,3,2,0,0,0,0,3,120,5268,5270,5269,0,1,2,1,1,1,1,3,120,5270,5271,5269,1,3,2,1,1,1,1,3,120,5268,5269,5265,0,1,2,2,2,2,2,3,120,5269,5264,5265,1,3,2,2,2,2,2,3,120,5271,5270,5266,0,1,2,3,3,3,3,3,120,5270,5267,5266,1,3,2,3,3,3,3,3,120,5269,5271,5264,0,1,2,4,4,4,4,3,120,5271,5266,5264,1,3,2,4,4,4,4,3,120,5265,5267,5268,0,1,2,5,5,5,5,3,120,5267,5270,5268,1,3,2,5,5,5,5,3,120,5272,5274,5273,0,1,2,0,0,0,0,3,120,5274,5275,5273,1,3,2,0,0,0,0,3,120,5276,5278,5277,0,1,2,1,1,1,1,3,120,5278,5279,5277,1,3,2,1,1,1,1,3,120,5276,5277,5273,0,1,2,2,2,2,2,3,120,5277,5272,5273,1,3,2,2,2,2,2,3,120,5279,5278,5274,0,1,2,3,3,3,3,3,120,5278,5275,5274,1,3,2,3,3,3,3,3,120,5277,5279,5272,0,1,2,4,4,4,4,3,120,5279,5274,5272,1,3,2,4,4,4,4,3,120,5273,5275,5276,0,1,2,5,5,5,5,3,120,5275,5278,5276,1,3,2,5,5,5,5,3,120,5280,5282,5281,0,1,2,0,0,0,0,3,120,5282,5283,5281,1,3,2,0,0,0,0,3,120,5284,5286,5285,0,1,2,1,1,1,1,3,120,5286,5287,5285,1,3,2,1,1,1,1,3,120,5284,5285,5281,0,1,2,2,2,2,2,3,120,5285,5280,5281,1,3,2,2,2,2,2,3,120,5287,5286,5282,0,1,2,3,3,3,3,3,120,5286,5283,5282,1,3,2,3,3,3,3,3,120,5285,5287,5280,0,1,2,4,4,4,4,3,120,5287,5282,5280,1,3,2,4,4,4,4,3,120,5281,5283,5284,0,1,2,5,5,5,5,3,120,5283,5286,5284,1,3,2,5,5,5,5,3,120,5288,5290,5289,0,1,2,0,0,0,0,3,120,5290,5291,5289,1,3,2,0,0,0,0,3,120,5292,5294,5293,0,1,2,1,1,1,1,3,120,5294,5295,5293,1,3,2,1,1,1,1,3,120,5292,5293,5289,0,1,2,2,2,2,2,3,120,5293,5288,5289,1,3,2,2,2,2,2,3,120,5295,5294,5290,0,1,2,3,3,3,3,3,120,5294,5291,5290,1,3,2,3,3,3,3,3,120,5293,5295,5288,0,1,2,4,4,4,4,3,120,5295,5290,5288,1,3,2,4,4,4,4,3,120,5289,5291,5292,0,1,2,5,5,5,5,3,120,5291,5294,5292,1,3,2,5,5,5,5,3,120,5296,5298,5297,0,1,2,0,0,0,0,3,120,5298,5299,5297,1,3,2,0,0,0,0,3,120,5300,5302,5301,0,1,2,1,1,1,1,3,120,5302,5303,5301,1,3,2,1,1,1,1,3,120,5300,5301,5297,0,1,2,2,2,2,2,3,120,5301,5296,5297,1,3,2,2,2,2,2,3,120,5303,5302,5298,0,1,2,3,3,3,3,3,120,5302,5299,5298,1,3,2,3,3,3,3,3,120,5301,5303,5296,0,1,2,4,4,4,4,3,120,5303,5298,5296,1,3,2,4,4,4,4,3,120,5297,5299,5300,0,1,2,5,5,5,5,3,120,5299,5302,5300,1,3,2,5,5,5,5,3,120,5304,5306,5305,0,1,2,0,0,0,0,3,120,5306,5307,5305,1,3,2,0,0,0,0,3,120,5308,5310,5309,0,1,2,1,1,1,1,3,120,5310,5311,5309,1,3,2,1,1,1,1,3,120,5308,5309,5305,0,1,2,2,2,2,2,3,120,5309,5304,5305,1,3,2,2,2,2,2,3,120,5311,5310,5306,0,1,2,3,3,3,3,3,120,5310,5307,5306,1,3,2,3,3,3,3,3,120,5309,5311,5304,0,1,2,4,4,4,4,3,120,5311,5306,5304,1,3,2,4,4,4,4,3,120,5305,5307,5308,0,1,2,5,5,5,5,3,120,5307,5310,5308,1,3,2,5,5,5,5,3,120,5312,5314,5313,0,1,2,0,0,0,0,3,120,5314,5315,5313,1,3,2,0,0,0,0,3,120,5316,5318,5317,0,1,2,1,1,1,1,3,120,5318,5319,5317,1,3,2,1,1,1,1,3,120,5316,5317,5313,0,1,2,2,2,2,2,3,120,5317,5312,5313,1,3,2,2,2,2,2,3,120,5319,5318,5314,0,1,2,3,3,3,3,3,120,5318,5315,5314,1,3,2,3,3,3,3,3,120,5317,5319,5312,0,1,2,4,4,4,4,3,120,5319,5314,5312,1,3,2,4,4,4,4,3,120,5313,5315,5316,0,1,2,5,5,5,5,3,120,5315,5318,5316,1,3,2,5,5,5,5,3,120,5320,5322,5321,0,1,2,0,0,0,0,3,120,5322,5323,5321,1,3,2,0,0,0,0,3,120,5324,5326,5325,0,1,2,1,1,1,1,3,120,5326,5327,5325,1,3,2,1,1,1,1,3,120,5324,5325,5321,0,1,2,2,2,2,2,3,120,5325,5320,5321,1,3,2,2,2,2,2,3,120,5327,5326,5322,0,1,2,3,3,3,3,3,120,5326,5323,5322,1,3,2,3,3,3,3,3,120,5325,5327,5320,0,1,2,4,4,4,4,3,120,5327,5322,5320,1,3,2,4,4,4,4,3,120,5321,5323,5324,0,1,2,5,5,5,5,3,120,5323,5326,5324,1,3,2,5,5,5,5,3,120,5328,5330,5329,0,1,2,0,0,0,0,3,120,5330,5331,5329,1,3,2,0,0,0,0,3,120,5332,5334,5333,0,1,2,1,1,1,1,3,120,5334,5335,5333,1,3,2,1,1,1,1,3,120,5332,5333,5329,0,1,2,2,2,2,2,3,120,5333,5328,5329,1,3,2,2,2,2,2,3,120,5335,5334,5330,0,1,2,3,3,3,3,3,120,5334,5331,5330,1,3,2,3,3,3,3,3,120,5333,5335,5328,0,1,2,4,4,4,4,3,120,5335,5330,5328,1,3,2,4,4,4,4,3,120,5329,5331,5332,0,1,2,5,5,5,5,3,120,5331,5334,5332,1,3,2,5,5,5,5,3,120,5336,5338,5337,0,1,2,0,0,0,0,3,120,5338,5339,5337,1,3,2,0,0,0,0,3,120,5340,5342,5341,0,1,2,1,1,1,1,3,120,5342,5343,5341,1,3,2,1,1,1,1,3,120,5340,5341,5337,0,1,2,2,2,2,2,3,120,5341,5336,5337,1,3,2,2,2,2,2,3,120,5343,5342,5338,0,1,2,3,3,3,3,3,120,5342,5339,5338,1,3,2,3,3,3,3,3,120,5341,5343,5336,0,1,2,4,4,4,4,3,120,5343,5338,5336,1,3,2,4,4,4,4,3,120,5337,5339,5340,0,1,2,5,5,5,5,3,120,5339,5342,5340,1,3,2,5,5,5,5,3,120,5344,5346,5345,0,1,2,0,0,0,0,3,120,5346,5347,5345,1,3,2,0,0,0,0,3,120,5348,5350,5349,0,1,2,1,1,1,1,3,120,5350,5351,5349,1,3,2,1,1,1,1,3,120,5348,5349,5345,0,1,2,2,2,2,2,3,120,5349,5344,5345,1,3,2,2,2,2,2,3,120,5351,5350,5346,0,1,2,3,3,3,3,3,120,5350,5347,5346,1,3,2,3,3,3,3,3,120,5349,5351,5344,0,1,2,4,4,4,4,3,120,5351,5346,5344,1,3,2,4,4,4,4,3,120,5345,5347,5348,0,1,2,5,5,5,5,3,120,5347,5350,5348,1,3,2,5,5,5,5,3,120,5352,5354,5353,0,1,2,0,0,0,0,3,120,5354,5355,5353,1,3,2,0,0,0,0,3,120,5356,5358,5357,0,1,2,1,1,1,1,3,120,5358,5359,5357,1,3,2,1,1,1,1,3,120,5356,5357,5353,0,1,2,2,2,2,2,3,120,5357,5352,5353,1,3,2,2,2,2,2,3,120,5359,5358,5354,0,1,2,3,3,3,3,3,120,5358,5355,5354,1,3,2,3,3,3,3,3,120,5357,5359,5352,0,1,2,4,4,4,4,3,120,5359,5354,5352,1,3,2,4,4,4,4,3,120,5353,5355,5356,0,1,2,5,5,5,5,3,120,5355,5358,5356,1,3,2,5,5,5,5,3,120,5360,5362,5361,0,1,2,0,0,0,0,4,120,5362,5363,5361,1,3,2,0,0,0,0,4,120,5364,5366,5365,0,1,2,1,1,1,1,4,120,5366,5367,5365,1,3,2,1,1,1,1,4,120,5364,5365,5361,0,1,2,2,2,2,2,4,120,5365,5360,5361,1,3,2,2,2,2,2,4,120,5367,5366,5362,0,1,2,3,3,3,3,4,120,5366,5363,5362,1,3,2,3,3,3,3,4,120,5365,5367,5360,0,1,2,4,4,4,4,4,120,5367,5362,5360,1,3,2,4,4,4,4,4,120,5361,5363,5364,0,1,2,5,5,5,5,4,120,5363,5366,5364,1,3,2,5,5,5,5,4,120,5368,5370,5369,0,1,2,0,0,0,0,4,120,5370,5371,5369,1,3,2,0,0,0,0,4,120,5372,5374,5373,0,1,2,1,1,1,1,4,120,5374,5375,5373,1,3,2,1,1,1,1,4,120,5372,5373,5369,0,1,2,2,2,2,2,4,120,5373,5368,5369,1,3,2,2,2,2,2,4,120,5375,5374,5370,0,1,2,3,3,3,3,4,120,5374,5371,5370,1,3,2,3,3,3,3,4,120,5373,5375,5368,0,1,2,4,4,4,4,4,120,5375,5370,5368,1,3,2,4,4,4,4,4,120,5369,5371,5372,0,1,2,5,5,5,5,4,120,5371,5374,5372,1,3,2,5,5,5,5,4,120,5376,5378,5377,0,1,2,0,0,0,0,4,120,5378,5379,5377,1,3,2,0,0,0,0,4,120,5380,5382,5381,0,1,2,1,1,1,1,4,120,5382,5383,5381,1,3,2,1,1,1,1,4,120,5380,5381,5377,0,1,2,2,2,2,2,4,120,5381,5376,5377,1,3,2,2,2,2,2,4,120,5383,5382,5378,0,1,2,3,3,3,3,4,120,5382,5379,5378,1,3,2,3,3,3,3,4,120,5381,5383,5376,0,1,2,4,4,4,4,4,120,5383,5378,5376,1,3,2,4,4,4,4,4,120,5377,5379,5380,0,1,2,5,5,5,5,4,120,5379,5382,5380,1,3,2,5,5,5,5,4,120,5384,5386,5385,0,1,2,0,0,0,0,4,120,5386,5387,5385,1,3,2,0,0,0,0,4,120,5388,5390,5389,0,1,2,1,1,1,1,4,120,5390,5391,5389,1,3,2,1,1,1,1,4,120,5388,5389,5385,0,1,2,2,2,2,2,4,120,5389,5384,5385,1,3,2,2,2,2,2,4,120,5391,5390,5386,0,1,2,3,3,3,3,4,120,5390,5387,5386,1,3,2,3,3,3,3,4,120,5389,5391,5384,0,1,2,4,4,4,4,4,120,5391,5386,5384,1,3,2,4,4,4,4,4,120,5385,5387,5388,0,1,2,5,5,5,5,4,120,5387,5390,5388,1,3,2,5,5,5,5,4,120,5392,5394,5393,0,1,2,0,0,0,0,4,120,5394,5395,5393,1,3,2,0,0,0,0,4,120,5396,5398,5397,0,1,2,1,1,1,1,4,120,5398,5399,5397,1,3,2,1,1,1,1,4,120,5396,5397,5393,0,1,2,2,2,2,2,4,120,5397,5392,5393,1,3,2,2,2,2,2,4,120,5399,5398,5394,0,1,2,3,3,3,3,4,120,5398,5395,5394,1,3,2,3,3,3,3,4,120,5397,5399,5392,0,1,2,4,4,4,4,4,120,5399,5394,5392,1,3,2,4,4,4,4,4,120,5393,5395,5396,0,1,2,5,5,5,5,4,120,5395,5398,5396,1,3,2,5,5,5,5,4,120,5400,5402,5401,0,1,2,0,0,0,0,4,120,5402,5403,5401,1,3,2,0,0,0,0,4,120,5404,5406,5405,0,1,2,1,1,1,1,4,120,5406,5407,5405,1,3,2,1,1,1,1,4,120,5404,5405,5401,0,1,2,2,2,2,2,4,120,5405,5400,5401,1,3,2,2,2,2,2,4,120,5407,5406,5402,0,1,2,3,3,3,3,4,120,5406,5403,5402,1,3,2,3,3,3,3,4,120,5405,5407,5400,0,1,2,4,4,4,4,4,120,5407,5402,5400,1,3,2,4,4,4,4,4,120,5401,5403,5404,0,1,2,5,5,5,5,4,120,5403,5406,5404,1,3,2,5,5,5,5,4,120,5408,5410,5409,0,1,2,0,0,0,0,4,120,5410,5411,5409,1,3,2,0,0,0,0,4,120,5412,5414,5413,0,1,2,1,1,1,1,4,120,5414,5415,5413,1,3,2,1,1,1,1,4,120,5412,5413,5409,0,1,2,2,2,2,2,4,120,5413,5408,5409,1,3,2,2,2,2,2,4,120,5415,5414,5410,0,1,2,3,3,3,3,4,120,5414,5411,5410,1,3,2,3,3,3,3,4,120,5413,5415,5408,0,1,2,4,4,4,4,4,120,5415,5410,5408,1,3,2,4,4,4,4,4,120,5409,5411,5412,0,1,2,5,5,5,5,4,120,5411,5414,5412,1,3,2,5,5,5,5,4,120,5416,5418,5417,0,1,2,0,0,0,0,4,120,5418,5419,5417,1,3,2,0,0,0,0,4,120,5420,5422,5421,0,1,2,1,1,1,1,4,120,5422,5423,5421,1,3,2,1,1,1,1,4,120,5420,5421,5417,0,1,2,2,2,2,2,4,120,5421,5416,5417,1,3,2,2,2,2,2,4,120,5423,5422,5418,0,1,2,3,3,3,3,4,120,5422,5419,5418,1,3,2,3,3,3,3,4,120,5421,5423,5416,0,1,2,4,4,4,4,4,120,5423,5418,5416,1,3,2,4,4,4,4,4,120,5417,5419,5420,0,1,2,5,5,5,5,4,120,5419,5422,5420,1,3,2,5,5,5,5,4,120,5424,5426,5425,0,1,2,0,0,0,0,4,120,5426,5427,5425,1,3,2,0,0,0,0,4,120,5428,5430,5429,0,1,2,1,1,1,1,4,120,5430,5431,5429,1,3,2,1,1,1,1,4,120,5428,5429,5425,0,1,2,2,2,2,2,4,120,5429,5424,5425,1,3,2,2,2,2,2,4,120,5431,5430,5426,0,1,2,3,3,3,3,4,120,5430,5427,5426,1,3,2,3,3,3,3,4,120,5429,5431,5424,0,1,2,4,4,4,4,4,120,5431,5426,5424,1,3,2,4,4,4,4,4,120,5425,5427,5428,0,1,2,5,5,5,5,4,120,5427,5430,5428,1,3,2,5,5,5,5,4,120,5432,5434,5433,0,1,2,0,0,0,0,4,120,5434,5435,5433,1,3,2,0,0,0,0,4,120,5436,5438,5437,0,1,2,1,1,1,1,4,120,5438,5439,5437,1,3,2,1,1,1,1,4,120,5436,5437,5433,0,1,2,2,2,2,2,4,120,5437,5432,5433,1,3,2,2,2,2,2,4,120,5439,5438,5434,0,1,2,3,3,3,3,4,120,5438,5435,5434,1,3,2,3,3,3,3,4,120,5437,5439,5432,0,1,2,4,4,4,4,4,120,5439,5434,5432,1,3,2,4,4,4,4,4,120,5433,5435,5436,0,1,2,5,5,5,5,4,120,5435,5438,5436,1,3,2,5,5,5,5,4,120,5440,5442,5441,0,1,2,0,0,0,0,4,120,5442,5443,5441,1,3,2,0,0,0,0,4,120,5444,5446,5445,0,1,2,1,1,1,1,4,120,5446,5447,5445,1,3,2,1,1,1,1,4,120,5444,5445,5441,0,1,2,2,2,2,2,4,120,5445,5440,5441,1,3,2,2,2,2,2,4,120,5447,5446,5442,0,1,2,3,3,3,3,4,120,5446,5443,5442,1,3,2,3,3,3,3,4,120,5445,5447,5440,0,1,2,4,4,4,4,4,120,5447,5442,5440,1,3,2,4,4,4,4,4,120,5441,5443,5444,0,1,2,5,5,5,5,4,120,5443,5446,5444,1,3,2,5,5,5,5,4,120,5448,5450,5449,0,1,2,0,0,0,0,4,120,5450,5451,5449,1,3,2,0,0,0,0,4,120,5452,5454,5453,0,1,2,1,1,1,1,4,120,5454,5455,5453,1,3,2,1,1,1,1,4,120,5452,5453,5449,0,1,2,2,2,2,2,4,120,5453,5448,5449,1,3,2,2,2,2,2,4,120,5455,5454,5450,0,1,2,3,3,3,3,4,120,5454,5451,5450,1,3,2,3,3,3,3,4,120,5453,5455,5448,0,1,2,4,4,4,4,4,120,5455,5450,5448,1,3,2,4,4,4,4,4,120,5449,5451,5452,0,1,2,5,5,5,5,4,120,5451,5454,5452,1,3,2,5,5,5,5,4,120,5456,5458,5457,0,1,2,0,0,0,0,4,120,5458,5459,5457,1,3,2,0,0,0,0,4,120,5460,5462,5461,0,1,2,1,1,1,1,4,120,5462,5463,5461,1,3,2,1,1,1,1,4,120,5460,5461,5457,0,1,2,2,2,2,2,4,120,5461,5456,5457,1,3,2,2,2,2,2,4,120,5463,5462,5458,0,1,2,3,3,3,3,4,120,5462,5459,5458,1,3,2,3,3,3,3,4,120,5461,5463,5456,0,1,2,4,4,4,4,4,120,5463,5458,5456,1,3,2,4,4,4,4,4,120,5457,5459,5460,0,1,2,5,5,5,5,4,120,5459,5462,5460,1,3,2,5,5,5,5,4,120,5464,5466,5465,0,1,2,0,0,0,0,4,120,5466,5467,5465,1,3,2,0,0,0,0,4,120,5468,5470,5469,0,1,2,1,1,1,1,4,120,5470,5471,5469,1,3,2,1,1,1,1,4,120,5468,5469,5465,0,1,2,2,2,2,2,4,120,5469,5464,5465,1,3,2,2,2,2,2,4,120,5471,5470,5466,0,1,2,3,3,3,3,4,120,5470,5467,5466,1,3,2,3,3,3,3,4,120,5469,5471,5464,0,1,2,4,4,4,4,4,120,5471,5466,5464,1,3,2,4,4,4,4,4,120,5465,5467,5468,0,1,2,5,5,5,5,4,120,5467,5470,5468,1,3,2,5,5,5,5,4,120,5472,5474,5473,0,1,2,0,0,0,0,4,120,5474,5475,5473,1,3,2,0,0,0,0,4,120,5476,5478,5477,0,1,2,1,1,1,1,4,120,5478,5479,5477,1,3,2,1,1,1,1,4,120,5476,5477,5473,0,1,2,2,2,2,2,4,120,5477,5472,5473,1,3,2,2,2,2,2,4,120,5479,5478,5474,0,1,2,3,3,3,3,4,120,5478,5475,5474,1,3,2,3,3,3,3,4,120,5477,5479,5472,0,1,2,4,4,4,4,4,120,5479,5474,5472,1,3,2,4,4,4,4,4,120,5473,5475,5476,0,1,2,5,5,5,5,4,120,5475,5478,5476,1,3,2,5,5,5,5,4,120,5480,5482,5481,0,1,2,0,0,0,0,4,120,5482,5483,5481,1,3,2,0,0,0,0,4,120,5484,5486,5485,0,1,2,1,1,1,1,4,120,5486,5487,5485,1,3,2,1,1,1,1,4,120,5484,5485,5481,0,1,2,2,2,2,2,4,120,5485,5480,5481,1,3,2,2,2,2,2,4,120,5487,5486,5482,0,1,2,3,3,3,3,4,120,5486,5483,5482,1,3,2,3,3,3,3,4,120,5485,5487,5480,0,1,2,4,4,4,4,4,120,5487,5482,5480,1,3,2,4,4,4,4,4,120,5481,5483,5484,0,1,2,5,5,5,5,4,120,5483,5486,5484,1,3,2,5,5,5,5,4,120,5488,5490,5489,0,1,2,0,0,0,0,4,120,5490,5491,5489,1,3,2,0,0,0,0,4,120,5492,5494,5493,0,1,2,1,1,1,1,4,120,5494,5495,5493,1,3,2,1,1,1,1,4,120,5492,5493,5489,0,1,2,2,2,2,2,4,120,5493,5488,5489,1,3,2,2,2,2,2,4,120,5495,5494,5490,0,1,2,3,3,3,3,4,120,5494,5491,5490,1,3,2,3,3,3,3,4,120,5493,5495,5488,0,1,2,4,4,4,4,4,120,5495,5490,5488,1,3,2,4,4,4,4,4,120,5489,5491,5492,0,1,2,5,5,5,5,4,120,5491,5494,5492,1,3,2,5,5,5,5,4,120,5496,5498,5497,0,1,2,0,0,0,0,4,120,5498,5499,5497,1,3,2,0,0,0,0,4,120,5500,5502,5501,0,1,2,1,1,1,1,4,120,5502,5503,5501,1,3,2,1,1,1,1,4,120,5500,5501,5497,0,1,2,2,2,2,2,4,120,5501,5496,5497,1,3,2,2,2,2,2,4,120,5503,5502,5498,0,1,2,3,3,3,3,4,120,5502,5499,5498,1,3,2,3,3,3,3,4,120,5501,5503,5496,0,1,2,4,4,4,4,4,120,5503,5498,5496,1,3,2,4,4,4,4,4,120,5497,5499,5500,0,1,2,5,5,5,5,4,120,5499,5502,5500,1,3,2,5,5,5,5,4,120,5504,5506,5505,0,1,2,0,0,0,0,4,120,5506,5507,5505,1,3,2,0,0,0,0,4,120,5508,5510,5509,0,1,2,1,1,1,1,4,120,5510,5511,5509,1,3,2,1,1,1,1,4,120,5508,5509,5505,0,1,2,2,2,2,2,4,120,5509,5504,5505,1,3,2,2,2,2,2,4,120,5511,5510,5506,0,1,2,3,3,3,3,4,120,5510,5507,5506,1,3,2,3,3,3,3,4,120,5509,5511,5504,0,1,2,4,4,4,4,4,120,5511,5506,5504,1,3,2,4,4,4,4,4,120,5505,5507,5508,0,1,2,5,5,5,5,4,120,5507,5510,5508,1,3,2,5,5,5,5,4,120,5512,5514,5513,0,1,2,0,0,0,0,4,120,5514,5515,5513,1,3,2,0,0,0,0,4,120,5516,5518,5517,0,1,2,1,1,1,1,4,120,5518,5519,5517,1,3,2,1,1,1,1,4,120,5516,5517,5513,0,1,2,2,2,2,2,4,120,5517,5512,5513,1,3,2,2,2,2,2,4,120,5519,5518,5514,0,1,2,3,3,3,3,4,120,5518,5515,5514,1,3,2,3,3,3,3,4,120,5517,5519,5512,0,1,2,4,4,4,4,4,120,5519,5514,5512,1,3,2,4,4,4,4,4,120,5513,5515,5516,0,1,2,5,5,5,5,4,120,5515,5518,5516,1,3,2,5,5,5,5,4,120,5520,5522,5521,0,1,2,0,0,0,0,4,120,5522,5523,5521,1,3,2,0,0,0,0,4,120,5524,5526,5525,0,1,2,1,1,1,1,4,120,5526,5527,5525,1,3,2,1,1,1,1,4,120,5524,5525,5521,0,1,2,2,2,2,2,4,120,5525,5520,5521,1,3,2,2,2,2,2,4,120,5527,5526,5522,0,1,2,3,3,3,3,4,120,5526,5523,5522,1,3,2,3,3,3,3,4,120,5525,5527,5520,0,1,2,4,4,4,4,4,120,5527,5522,5520,1,3,2,4,4,4,4,4,120,5521,5523,5524,0,1,2,5,5,5,5,4,120,5523,5526,5524,1,3,2,5,5,5,5,4,120,5528,5530,5529,0,1,2,0,0,0,0,4,120,5530,5531,5529,1,3,2,0,0,0,0,4,120,5532,5534,5533,0,1,2,1,1,1,1,4,120,5534,5535,5533,1,3,2,1,1,1,1,4,120,5532,5533,5529,0,1,2,2,2,2,2,4,120,5533,5528,5529,1,3,2,2,2,2,2,4,120,5535,5534,5530,0,1,2,3,3,3,3,4,120,5534,5531,5530,1,3,2,3,3,3,3,4,120,5533,5535,5528,0,1,2,4,4,4,4,4,120,5535,5530,5528,1,3,2,4,4,4,4,4,120,5529,5531,5532,0,1,2,5,5,5,5,4,120,5531,5534,5532,1,3,2,5,5,5,5,4,120,5536,5538,5537,0,1,2,0,0,0,0,4,120,5538,5539,5537,1,3,2,0,0,0,0,4,120,5540,5542,5541,0,1,2,1,1,1,1,4,120,5542,5543,5541,1,3,2,1,1,1,1,4,120,5540,5541,5537,0,1,2,2,2,2,2,4,120,5541,5536,5537,1,3,2,2,2,2,2,4,120,5543,5542,5538,0,1,2,3,3,3,3,4,120,5542,5539,5538,1,3,2,3,3,3,3,4,120,5541,5543,5536,0,1,2,4,4,4,4,4,120,5543,5538,5536,1,3,2,4,4,4,4,4,120,5537,5539,5540,0,1,2,5,5,5,5,4,120,5539,5542,5540,1,3,2,5,5,5,5,4,120,5544,5546,5545,0,1,2,0,0,0,0,4,120,5546,5547,5545,1,3,2,0,0,0,0,4,120,5548,5550,5549,0,1,2,1,1,1,1,4,120,5550,5551,5549,1,3,2,1,1,1,1,4,120,5548,5549,5545,0,1,2,2,2,2,2,4,120,5549,5544,5545,1,3,2,2,2,2,2,4,120,5551,5550,5546,0,1,2,3,3,3,3,4,120,5550,5547,5546,1,3,2,3,3,3,3,4,120,5549,5551,5544,0,1,2,4,4,4,4,4,120,5551,5546,5544,1,3,2,4,4,4,4,4,120,5545,5547,5548,0,1,2,5,5,5,5,4,120,5547,5550,5548,1,3,2,5,5,5,5,4,120,5552,5554,5553,0,1,2,0,0,0,0,4,120,5554,5555,5553,1,3,2,0,0,0,0,4,120,5556,5558,5557,0,1,2,1,1,1,1,4,120,5558,5559,5557,1,3,2,1,1,1,1,4,120,5556,5557,5553,0,1,2,2,2,2,2,4,120,5557,5552,5553,1,3,2,2,2,2,2,4,120,5559,5558,5554,0,1,2,3,3,3,3,4,120,5558,5555,5554,1,3,2,3,3,3,3,4,120,5557,5559,5552,0,1,2,4,4,4,4,4,120,5559,5554,5552,1,3,2,4,4,4,4,4,120,5553,5555,5556,0,1,2,5,5,5,5,4,120,5555,5558,5556,1,3,2,5,5,5,5,4,120,5560,5562,5561,0,1,2,0,0,0,0,4,120,5562,5563,5561,1,3,2,0,0,0,0,4,120,5564,5566,5565,0,1,2,1,1,1,1,4,120,5566,5567,5565,1,3,2,1,1,1,1,4,120,5564,5565,5561,0,1,2,2,2,2,2,4,120,5565,5560,5561,1,3,2,2,2,2,2,4,120,5567,5566,5562,0,1,2,3,3,3,3,4,120,5566,5563,5562,1,3,2,3,3,3,3,4,120,5565,5567,5560,0,1,2,4,4,4,4,4,120,5567,5562,5560,1,3,2,4,4,4,4,4,120,5561,5563,5564,0,1,2,5,5,5,5,4,120,5563,5566,5564,1,3,2,5,5,5,5,4,120,5568,5570,5569,0,1,2,0,0,0,0,4,120,5570,5571,5569,1,3,2,0,0,0,0,4,120,5572,5574,5573,0,1,2,1,1,1,1,4,120,5574,5575,5573,1,3,2,1,1,1,1,4,120,5572,5573,5569,0,1,2,2,2,2,2,4,120,5573,5568,5569,1,3,2,2,2,2,2,4,120,5575,5574,5570,0,1,2,3,3,3,3,4,120,5574,5571,5570,1,3,2,3,3,3,3,4,120,5573,5575,5568,0,1,2,4,4,4,4,4,120,5575,5570,5568,1,3,2,4,4,4,4,4,120,5569,5571,5572,0,1,2,5,5,5,5,4,120,5571,5574,5572,1,3,2,5,5,5,5,4,120,5576,5578,5577,0,1,2,0,0,0,0,4,120,5578,5579,5577,1,3,2,0,0,0,0,4,120,5580,5582,5581,0,1,2,1,1,1,1,4,120,5582,5583,5581,1,3,2,1,1,1,1,4,120,5580,5581,5577,0,1,2,2,2,2,2,4,120,5581,5576,5577,1,3,2,2,2,2,2,4,120,5583,5582,5578,0,1,2,3,3,3,3,4,120,5582,5579,5578,1,3,2,3,3,3,3,4,120,5581,5583,5576,0,1,2,4,4,4,4,4,120,5583,5578,5576,1,3,2,4,4,4,4,4,120,5577,5579,5580,0,1,2,5,5,5,5,4,120,5579,5582,5580,1,3,2,5,5,5,5,4,120,5584,5586,5585,0,1,2,0,0,0,0,4,120,5586,5587,5585,1,3,2,0,0,0,0,4,120,5588,5590,5589,0,1,2,1,1,1,1,4,120,5590,5591,5589,1,3,2,1,1,1,1,4,120,5588,5589,5585,0,1,2,2,2,2,2,4,120,5589,5584,5585,1,3,2,2,2,2,2,4,120,5591,5590,5586,0,1,2,3,3,3,3,4,120,5590,5587,5586,1,3,2,3,3,3,3,4,120,5589,5591,5584,0,1,2,4,4,4,4,4,120,5591,5586,5584,1,3,2,4,4,4,4,4,120,5585,5587,5588,0,1,2,5,5,5,5,4,120,5587,5590,5588,1,3,2,5,5,5,5,4,120,5592,5594,5593,0,1,2,0,0,0,0,4,120,5594,5595,5593,1,3,2,0,0,0,0,4,120,5596,5598,5597,0,1,2,1,1,1,1,4,120,5598,5599,5597,1,3,2,1,1,1,1,4,120,5596,5597,5593,0,1,2,2,2,2,2,4,120,5597,5592,5593,1,3,2,2,2,2,2,4,120,5599,5598,5594,0,1,2,3,3,3,3,4,120,5598,5595,5594,1,3,2,3,3,3,3,4,120,5597,5599,5592,0,1,2,4,4,4,4,4,120,5599,5594,5592,1,3,2,4,4,4,4,4,120,5593,5595,5596,0,1,2,5,5,5,5,4,120,5595,5598,5596,1,3,2,5,5,5,5,4,120,5600,5602,5601,0,1,2,0,0,0,0,4,120,5602,5603,5601,1,3,2,0,0,0,0,4,120,5604,5606,5605,0,1,2,1,1,1,1,4,120,5606,5607,5605,1,3,2,1,1,1,1,4,120,5604,5605,5601,0,1,2,2,2,2,2,4,120,5605,5600,5601,1,3,2,2,2,2,2,4,120,5607,5606,5602,0,1,2,3,3,3,3,4,120,5606,5603,5602,1,3,2,3,3,3,3,4,120,5605,5607,5600,0,1,2,4,4,4,4,4,120,5607,5602,5600,1,3,2,4,4,4,4,4,120,5601,5603,5604,0,1,2,5,5,5,5,4,120,5603,5606,5604,1,3,2,5,5,5,5,4,120,5608,5610,5609,0,1,2,0,0,0,0,4,120,5610,5611,5609,1,3,2,0,0,0,0,4,120,5612,5614,5613,0,1,2,1,1,1,1,4,120,5614,5615,5613,1,3,2,1,1,1,1,4,120,5612,5613,5609,0,1,2,2,2,2,2,4,120,5613,5608,5609,1,3,2,2,2,2,2,4,120,5615,5614,5610,0,1,2,3,3,3,3,4,120,5614,5611,5610,1,3,2,3,3,3,3,4,120,5613,5615,5608,0,1,2,4,4,4,4,4,120,5615,5610,5608,1,3,2,4,4,4,4,4,120,5609,5611,5612,0,1,2,5,5,5,5,4,120,5611,5614,5612,1,3,2,5,5,5,5,4,120,5616,5618,5617,0,1,2,0,0,0,0,4,120,5618,5619,5617,1,3,2,0,0,0,0,4,120,5620,5622,5621,0,1,2,1,1,1,1,4,120,5622,5623,5621,1,3,2,1,1,1,1,4,120,5620,5621,5617,0,1,2,2,2,2,2,4,120,5621,5616,5617,1,3,2,2,2,2,2,4,120,5623,5622,5618,0,1,2,3,3,3,3,4,120,5622,5619,5618,1,3,2,3,3,3,3,4,120,5621,5623,5616,0,1,2,4,4,4,4,4,120,5623,5618,5616,1,3,2,4,4,4,4,4,120,5617,5619,5620,0,1,2,5,5,5,5,4,120,5619,5622,5620,1,3,2,5,5,5,5,4,120,5624,5626,5625,0,1,2,0,0,0,0,4,120,5626,5627,5625,1,3,2,0,0,0,0,4,120,5628,5630,5629,0,1,2,1,1,1,1,4,120,5630,5631,5629,1,3,2,1,1,1,1,4,120,5628,5629,5625,0,1,2,2,2,2,2,4,120,5629,5624,5625,1,3,2,2,2,2,2,4,120,5631,5630,5626,0,1,2,3,3,3,3,4,120,5630,5627,5626,1,3,2,3,3,3,3,4,120,5629,5631,5624,0,1,2,4,4,4,4,4,120,5631,5626,5624,1,3,2,4,4,4,4,4,120,5625,5627,5628,0,1,2,5,5,5,5,4,120,5627,5630,5628,1,3,2,5,5,5,5,4,120,5632,5634,5633,0,1,2,0,0,0,0,4,120,5634,5635,5633,1,3,2,0,0,0,0,4,120,5636,5638,5637,0,1,2,1,1,1,1,4,120,5638,5639,5637,1,3,2,1,1,1,1,4,120,5636,5637,5633,0,1,2,2,2,2,2,4,120,5637,5632,5633,1,3,2,2,2,2,2,4,120,5639,5638,5634,0,1,2,3,3,3,3,4,120,5638,5635,5634,1,3,2,3,3,3,3,4,120,5637,5639,5632,0,1,2,4,4,4,4,4,120,5639,5634,5632,1,3,2,4,4,4,4,4,120,5633,5635,5636,0,1,2,5,5,5,5,4,120,5635,5638,5636,1,3,2,5,5,5,5,4,120,5640,5642,5641,0,1,2,0,0,0,0,4,120,5642,5643,5641,1,3,2,0,0,0,0,4,120,5644,5646,5645,0,1,2,1,1,1,1,4,120,5646,5647,5645,1,3,2,1,1,1,1,4,120,5644,5645,5641,0,1,2,2,2,2,2,4,120,5645,5640,5641,1,3,2,2,2,2,2,4,120,5647,5646,5642,0,1,2,3,3,3,3,4,120,5646,5643,5642,1,3,2,3,3,3,3,4,120,5645,5647,5640,0,1,2,4,4,4,4,4,120,5647,5642,5640,1,3,2,4,4,4,4,4,120,5641,5643,5644,0,1,2,5,5,5,5,4,120,5643,5646,5644,1,3,2,5,5,5,5,4,120,5648,5650,5649,0,1,2,0,0,0,0,4,120,5650,5651,5649,1,3,2,0,0,0,0,4,120,5652,5654,5653,0,1,2,1,1,1,1,4,120,5654,5655,5653,1,3,2,1,1,1,1,4,120,5652,5653,5649,0,1,2,2,2,2,2,4,120,5653,5648,5649,1,3,2,2,2,2,2,4,120,5655,5654,5650,0,1,2,3,3,3,3,4,120,5654,5651,5650,1,3,2,3,3,3,3,4,120,5653,5655,5648,0,1,2,4,4,4,4,4,120,5655,5650,5648,1,3,2,4,4,4,4,4,120,5649,5651,5652,0,1,2,5,5,5,5,4,120,5651,5654,5652,1,3,2,5,5,5,5,4,120,5656,5658,5657,0,1,2,0,0,0,0,4,120,5658,5659,5657,1,3,2,0,0,0,0,4,120,5660,5662,5661,0,1,2,1,1,1,1,4,120,5662,5663,5661,1,3,2,1,1,1,1,4,120,5660,5661,5657,0,1,2,2,2,2,2,4,120,5661,5656,5657,1,3,2,2,2,2,2,4,120,5663,5662,5658,0,1,2,3,3,3,3,4,120,5662,5659,5658,1,3,2,3,3,3,3,4,120,5661,5663,5656,0,1,2,4,4,4,4,4,120,5663,5658,5656,1,3,2,4,4,4,4,4,120,5657,5659,5660,0,1,2,5,5,5,5,4,120,5659,5662,5660,1,3,2,5,5,5,5,4,120,5664,5666,5665,0,1,2,0,0,0,0,4,120,5666,5667,5665,1,3,2,0,0,0,0,4,120,5668,5670,5669,0,1,2,1,1,1,1,4,120,5670,5671,5669,1,3,2,1,1,1,1,4,120,5668,5669,5665,0,1,2,2,2,2,2,4,120,5669,5664,5665,1,3,2,2,2,2,2,4,120,5671,5670,5666,0,1,2,3,3,3,3,4,120,5670,5667,5666,1,3,2,3,3,3,3,4,120,5669,5671,5664,0,1,2,4,4,4,4,4,120,5671,5666,5664,1,3,2,4,4,4,4,4,120,5665,5667,5668,0,1,2,5,5,5,5,4,120,5667,5670,5668,1,3,2,5,5,5,5,4,120,5672,5674,5673,0,1,2,0,0,0,0,4,120,5674,5675,5673,1,3,2,0,0,0,0,4,120,5676,5678,5677,0,1,2,1,1,1,1,4,120,5678,5679,5677,1,3,2,1,1,1,1,4,120,5676,5677,5673,0,1,2,2,2,2,2,4,120,5677,5672,5673,1,3,2,2,2,2,2,4,120,5679,5678,5674,0,1,2,3,3,3,3,4,120,5678,5675,5674,1,3,2,3,3,3,3,4,120,5677,5679,5672,0,1,2,4,4,4,4,4,120,5679,5674,5672,1,3,2,4,4,4,4,4,120,5673,5675,5676,0,1,2,5,5,5,5,4,120,5675,5678,5676,1,3,2,5,5,5,5,4,120,5680,5682,5681,0,1,2,0,0,0,0,4,120,5682,5683,5681,1,3,2,0,0,0,0,4,120,5684,5686,5685,0,1,2,1,1,1,1,4,120,5686,5687,5685,1,3,2,1,1,1,1,4,120,5684,5685,5681,0,1,2,2,2,2,2,4,120,5685,5680,5681,1,3,2,2,2,2,2,4,120,5687,5686,5682,0,1,2,3,3,3,3,4,120,5686,5683,5682,1,3,2,3,3,3,3,4,120,5685,5687,5680,0,1,2,4,4,4,4,4,120,5687,5682,5680,1,3,2,4,4,4,4,4,120,5681,5683,5684,0,1,2,5,5,5,5,4,120,5683,5686,5684,1,3,2,5,5,5,5,4,120,5688,5690,5689,0,1,2,0,0,0,0,4,120,5690,5691,5689,1,3,2,0,0,0,0,4,120,5692,5694,5693,0,1,2,1,1,1,1,4,120,5694,5695,5693,1,3,2,1,1,1,1,4,120,5692,5693,5689,0,1,2,2,2,2,2,4,120,5693,5688,5689,1,3,2,2,2,2,2,4,120,5695,5694,5690,0,1,2,3,3,3,3,4,120,5694,5691,5690,1,3,2,3,3,3,3,4,120,5693,5695,5688,0,1,2,4,4,4,4,4,120,5695,5690,5688,1,3,2,4,4,4,4,4,120,5689,5691,5692,0,1,2,5,5,5,5,4,120,5691,5694,5692,1,3,2,5,5,5,5,4,120,5696,5698,5697,0,1,2,0,0,0,0,4,120,5698,5699,5697,1,3,2,0,0,0,0,4,120,5700,5702,5701,0,1,2,1,1,1,1,4,120,5702,5703,5701,1,3,2,1,1,1,1,4,120,5700,5701,5697,0,1,2,2,2,2,2,4,120,5701,5696,5697,1,3,2,2,2,2,2,4,120,5703,5702,5698,0,1,2,3,3,3,3,4,120,5702,5699,5698,1,3,2,3,3,3,3,4,120,5701,5703,5696,0,1,2,4,4,4,4,4,120,5703,5698,5696,1,3,2,4,4,4,4,4,120,5697,5699,5700,0,1,2,5,5,5,5,4,120,5699,5702,5700,1,3,2,5,5,5,5,4,120,5704,5706,5705,0,1,2,0,0,0,0,4,120,5706,5707,5705,1,3,2,0,0,0,0,4,120,5708,5710,5709,0,1,2,1,1,1,1,4,120,5710,5711,5709,1,3,2,1,1,1,1,4,120,5708,5709,5705,0,1,2,2,2,2,2,4,120,5709,5704,5705,1,3,2,2,2,2,2,4,120,5711,5710,5706,0,1,2,3,3,3,3,4,120,5710,5707,5706,1,3,2,3,3,3,3,4,120,5709,5711,5704,0,1,2,4,4,4,4,4,120,5711,5706,5704,1,3,2,4,4,4,4,4,120,5705,5707,5708,0,1,2,5,5,5,5,4,120,5707,5710,5708,1,3,2,5,5,5,5,4,120,5712,5714,5713,0,1,2,0,0,0,0,4,120,5714,5715,5713,1,3,2,0,0,0,0,4,120,5716,5718,5717,0,1,2,1,1,1,1,4,120,5718,5719,5717,1,3,2,1,1,1,1,4,120,5716,5717,5713,0,1,2,2,2,2,2,4,120,5717,5712,5713,1,3,2,2,2,2,2,4,120,5719,5718,5714,0,1,2,3,3,3,3,4,120,5718,5715,5714,1,3,2,3,3,3,3,4,120,5717,5719,5712,0,1,2,4,4,4,4,4,120,5719,5714,5712,1,3,2,4,4,4,4,4,120,5713,5715,5716,0,1,2,5,5,5,5,4,120,5715,5718,5716,1,3,2,5,5,5,5,4,120,5720,5722,5721,0,1,2,0,0,0,0,4,120,5722,5723,5721,1,3,2,0,0,0,0,4,120,5724,5726,5725,0,1,2,1,1,1,1,4,120,5726,5727,5725,1,3,2,1,1,1,1,4,120,5724,5725,5721,0,1,2,2,2,2,2,4,120,5725,5720,5721,1,3,2,2,2,2,2,4,120,5727,5726,5722,0,1,2,3,3,3,3,4,120,5726,5723,5722,1,3,2,3,3,3,3,4,120,5725,5727,5720,0,1,2,4,4,4,4,4,120,5727,5722,5720,1,3,2,4,4,4,4,4,120,5721,5723,5724,0,1,2,5,5,5,5,4,120,5723,5726,5724,1,3,2,5,5,5,5,4,120,5728,5730,5729,0,1,2,0,0,0,0,4,120,5730,5731,5729,1,3,2,0,0,0,0,4,120,5732,5734,5733,0,1,2,1,1,1,1,4,120,5734,5735,5733,1,3,2,1,1,1,1,4,120,5732,5733,5729,0,1,2,2,2,2,2,4,120,5733,5728,5729,1,3,2,2,2,2,2,4,120,5735,5734,5730,0,1,2,3,3,3,3,4,120,5734,5731,5730,1,3,2,3,3,3,3,4,120,5733,5735,5728,0,1,2,4,4,4,4,4,120,5735,5730,5728,1,3,2,4,4,4,4,4,120,5729,5731,5732,0,1,2,5,5,5,5,4,120,5731,5734,5732,1,3,2,5,5,5,5,4,120,5736,5738,5737,0,1,2,0,0,0,0,4,120,5738,5739,5737,1,3,2,0,0,0,0,4,120,5740,5742,5741,0,1,2,1,1,1,1,4,120,5742,5743,5741,1,3,2,1,1,1,1,4,120,5740,5741,5737,0,1,2,2,2,2,2,4,120,5741,5736,5737,1,3,2,2,2,2,2,4,120,5743,5742,5738,0,1,2,3,3,3,3,4,120,5742,5739,5738,1,3,2,3,3,3,3,4,120,5741,5743,5736,0,1,2,4,4,4,4,4,120,5743,5738,5736,1,3,2,4,4,4,4,4,120,5737,5739,5740,0,1,2,5,5,5,5,4,120,5739,5742,5740,1,3,2,5,5,5,5,4,120,5744,5746,5745,0,1,2,0,0,0,0,4,120,5746,5747,5745,1,3,2,0,0,0,0,4,120,5748,5750,5749,0,1,2,1,1,1,1,4,120,5750,5751,5749,1,3,2,1,1,1,1,4,120,5748,5749,5745,0,1,2,2,2,2,2,4,120,5749,5744,5745,1,3,2,2,2,2,2,4,120,5751,5750,5746,0,1,2,3,3,3,3,4,120,5750,5747,5746,1,3,2,3,3,3,3,4,120,5749,5751,5744,0,1,2,4,4,4,4,4,120,5751,5746,5744,1,3,2,4,4,4,4,4,120,5745,5747,5748,0,1,2,5,5,5,5,4,120,5747,5750,5748,1,3,2,5,5,5,5,4,120,5752,5754,5753,0,1,2,0,0,0,0,4,120,5754,5755,5753,1,3,2,0,0,0,0,4,120,5756,5758,5757,0,1,2,1,1,1,1,4,120,5758,5759,5757,1,3,2,1,1,1,1,4,120,5756,5757,5753,0,1,2,2,2,2,2,4,120,5757,5752,5753,1,3,2,2,2,2,2,4,120,5759,5758,5754,0,1,2,3,3,3,3,4,120,5758,5755,5754,1,3,2,3,3,3,3,4,120,5757,5759,5752,0,1,2,4,4,4,4,4,120,5759,5754,5752,1,3,2,4,4,4,4,4,120,5753,5755,5756,0,1,2,5,5,5,5,4,120,5755,5758,5756,1,3,2,5,5,5,5,4,120,5760,5762,5761,0,1,2,0,0,0,0,4,120,5762,5763,5761,1,3,2,0,0,0,0,4,120,5764,5766,5765,0,1,2,1,1,1,1,4,120,5766,5767,5765,1,3,2,1,1,1,1,4,120,5764,5765,5761,0,1,2,2,2,2,2,4,120,5765,5760,5761,1,3,2,2,2,2,2,4,120,5767,5766,5762,0,1,2,3,3,3,3,4,120,5766,5763,5762,1,3,2,3,3,3,3,4,120,5765,5767,5760,0,1,2,4,4,4,4,4,120,5767,5762,5760,1,3,2,4,4,4,4,4,120,5761,5763,5764,0,1,2,5,5,5,5,4,120,5763,5766,5764,1,3,2,5,5,5,5,4,120,5768,5770,5769,0,1,2,0,0,0,0,4,120,5770,5771,5769,1,3,2,0,0,0,0,4,120,5772,5774,5773,0,1,2,1,1,1,1,4,120,5774,5775,5773,1,3,2,1,1,1,1,4,120,5772,5773,5769,0,1,2,2,2,2,2,4,120,5773,5768,5769,1,3,2,2,2,2,2,4,120,5775,5774,5770,0,1,2,3,3,3,3,4,120,5774,5771,5770,1,3,2,3,3,3,3,4,120,5773,5775,5768,0,1,2,4,4,4,4,4,120,5775,5770,5768,1,3,2,4,4,4,4,4,120,5769,5771,5772,0,1,2,5,5,5,5,4,120,5771,5774,5772,1,3,2,5,5,5,5,4,120,5776,5778,5777,0,1,2,0,0,0,0,4,120,5778,5779,5777,1,3,2,0,0,0,0,4,120,5780,5782,5781,0,1,2,1,1,1,1,4,120,5782,5783,5781,1,3,2,1,1,1,1,4,120,5780,5781,5777,0,1,2,2,2,2,2,4,120,5781,5776,5777,1,3,2,2,2,2,2,4,120,5783,5782,5778,0,1,2,3,3,3,3,4,120,5782,5779,5778,1,3,2,3,3,3,3,4,120,5781,5783,5776,0,1,2,4,4,4,4,4,120,5783,5778,5776,1,3,2,4,4,4,4,4,120,5777,5779,5780,0,1,2,5,5,5,5,4,120,5779,5782,5780,1,3,2,5,5,5,5,4,120,5784,5786,5785,0,1,2,0,0,0,0,4,120,5786,5787,5785,1,3,2,0,0,0,0,4,120,5788,5790,5789,0,1,2,1,1,1,1,4,120,5790,5791,5789,1,3,2,1,1,1,1,4,120,5788,5789,5785,0,1,2,2,2,2,2,4,120,5789,5784,5785,1,3,2,2,2,2,2,4,120,5791,5790,5786,0,1,2,3,3,3,3,4,120,5790,5787,5786,1,3,2,3,3,3,3,4,120,5789,5791,5784,0,1,2,4,4,4,4,4,120,5791,5786,5784,1,3,2,4,4,4,4,4,120,5785,5787,5788,0,1,2,5,5,5,5,4,120,5787,5790,5788,1,3,2,5,5,5,5,4,120,5792,5794,5793,0,1,2,0,0,0,0,4,120,5794,5795,5793,1,3,2,0,0,0,0,4,120,5796,5798,5797,0,1,2,1,1,1,1,4,120,5798,5799,5797,1,3,2,1,1,1,1,4,120,5796,5797,5793,0,1,2,2,2,2,2,4,120,5797,5792,5793,1,3,2,2,2,2,2,4,120,5799,5798,5794,0,1,2,3,3,3,3,4,120,5798,5795,5794,1,3,2,3,3,3,3,4,120,5797,5799,5792,0,1,2,4,4,4,4,4,120,5799,5794,5792,1,3,2,4,4,4,4,4,120,5793,5795,5796,0,1,2,5,5,5,5,4,120,5795,5798,5796,1,3,2,5,5,5,5,4,120,5800,5802,5801,0,1,2,0,0,0,0,4,120,5802,5803,5801,1,3,2,0,0,0,0,4,120,5804,5806,5805,0,1,2,1,1,1,1,4,120,5806,5807,5805,1,3,2,1,1,1,1,4,120,5804,5805,5801,0,1,2,2,2,2,2,4,120,5805,5800,5801,1,3,2,2,2,2,2,4,120,5807,5806,5802,0,1,2,3,3,3,3,4,120,5806,5803,5802,1,3,2,3,3,3,3,4,120,5805,5807,5800,0,1,2,4,4,4,4,4,120,5807,5802,5800,1,3,2,4,4,4,4,4,120,5801,5803,5804,0,1,2,5,5,5,5,4,120,5803,5806,5804,1,3,2,5,5,5,5,4,120,5808,5810,5809,0,1,2,0,0,0,0,4,120,5810,5811,5809,1,3,2,0,0,0,0,4,120,5812,5814,5813,0,1,2,1,1,1,1,4,120,5814,5815,5813,1,3,2,1,1,1,1,4,120,5812,5813,5809,0,1,2,2,2,2,2,4,120,5813,5808,5809,1,3,2,2,2,2,2,4,120,5815,5814,5810,0,1,2,3,3,3,3,4,120,5814,5811,5810,1,3,2,3,3,3,3,4,120,5813,5815,5808,0,1,2,4,4,4,4,4,120,5815,5810,5808,1,3,2,4,4,4,4,4,120,5809,5811,5812,0,1,2,5,5,5,5,4,120,5811,5814,5812,1,3,2,5,5,5,5,4,120,5816,5818,5817,0,1,2,0,0,0,0,4,120,5818,5819,5817,1,3,2,0,0,0,0,4,120,5820,5822,5821,0,1,2,1,1,1,1,4,120,5822,5823,5821,1,3,2,1,1,1,1,4,120,5820,5821,5817,0,1,2,2,2,2,2,4,120,5821,5816,5817,1,3,2,2,2,2,2,4,120,5823,5822,5818,0,1,2,3,3,3,3,4,120,5822,5819,5818,1,3,2,3,3,3,3,4,120,5821,5823,5816,0,1,2,4,4,4,4,4,120,5823,5818,5816,1,3,2,4,4,4,4,4,120,5817,5819,5820,0,1,2,5,5,5,5,4,120,5819,5822,5820,1,3,2,5,5,5,5,4,120,5824,5826,5825,0,1,2,0,0,0,0,4,120,5826,5827,5825,1,3,2,0,0,0,0,4,120,5828,5830,5829,0,1,2,1,1,1,1,4,120,5830,5831,5829,1,3,2,1,1,1,1,4,120,5828,5829,5825,0,1,2,2,2,2,2,4,120,5829,5824,5825,1,3,2,2,2,2,2,4,120,5831,5830,5826,0,1,2,3,3,3,3,4,120,5830,5827,5826,1,3,2,3,3,3,3,4,120,5829,5831,5824,0,1,2,4,4,4,4,4,120,5831,5826,5824,1,3,2,4,4,4,4,4,120,5825,5827,5828,0,1,2,5,5,5,5,4,120,5827,5830,5828,1,3,2,5,5,5,5,4,120,5832,5834,5833,0,1,2,0,0,0,0,4,120,5834,5835,5833,1,3,2,0,0,0,0,4,120,5836,5838,5837,0,1,2,1,1,1,1,4,120,5838,5839,5837,1,3,2,1,1,1,1,4,120,5836,5837,5833,0,1,2,2,2,2,2,4,120,5837,5832,5833,1,3,2,2,2,2,2,4,120,5839,5838,5834,0,1,2,3,3,3,3,4,120,5838,5835,5834,1,3,2,3,3,3,3,4,120,5837,5839,5832,0,1,2,4,4,4,4,4,120,5839,5834,5832,1,3,2,4,4,4,4,4,120,5833,5835,5836,0,1,2,5,5,5,5,4,120,5835,5838,5836,1,3,2,5,5,5,5,4,120,5840,5842,5841,0,1,2,0,0,0,0,4,120,5842,5843,5841,1,3,2,0,0,0,0,4,120,5844,5846,5845,0,1,2,1,1,1,1,4,120,5846,5847,5845,1,3,2,1,1,1,1,4,120,5844,5845,5841,0,1,2,2,2,2,2,4,120,5845,5840,5841,1,3,2,2,2,2,2,4,120,5847,5846,5842,0,1,2,3,3,3,3,4,120,5846,5843,5842,1,3,2,3,3,3,3,4,120,5845,5847,5840,0,1,2,4,4,4,4,4,120,5847,5842,5840,1,3,2,4,4,4,4,4,120,5841,5843,5844,0,1,2,5,5,5,5,4,120,5843,5846,5844,1,3,2,5,5,5,5,4,120,5848,5850,5849,0,1,2,0,0,0,0,4,120,5850,5851,5849,1,3,2,0,0,0,0,4,120,5852,5854,5853,0,1,2,1,1,1,1,4,120,5854,5855,5853,1,3,2,1,1,1,1,4,120,5852,5853,5849,0,1,2,2,2,2,2,4,120,5853,5848,5849,1,3,2,2,2,2,2,4,120,5855,5854,5850,0,1,2,3,3,3,3,4,120,5854,5851,5850,1,3,2,3,3,3,3,4,120,5853,5855,5848,0,1,2,4,4,4,4,4,120,5855,5850,5848,1,3,2,4,4,4,4,4,120,5849,5851,5852,0,1,2,5,5,5,5,4,120,5851,5854,5852,1,3,2,5,5,5,5,4,120,5856,5858,5857,0,1,2,0,0,0,0,4,120,5858,5859,5857,1,3,2,0,0,0,0,4,120,5860,5862,5861,0,1,2,1,1,1,1,4,120,5862,5863,5861,1,3,2,1,1,1,1,4,120,5860,5861,5857,0,1,2,2,2,2,2,4,120,5861,5856,5857,1,3,2,2,2,2,2,4,120,5863,5862,5858,0,1,2,3,3,3,3,4,120,5862,5859,5858,1,3,2,3,3,3,3,4,120,5861,5863,5856,0,1,2,4,4,4,4,4,120,5863,5858,5856,1,3,2,4,4,4,4,4,120,5857,5859,5860,0,1,2,5,5,5,5,4,120,5859,5862,5860,1,3,2,5,5,5,5,4,120,5864,5866,5865,0,1,2,0,0,0,0,4,120,5866,5867,5865,1,3,2,0,0,0,0,4,120,5868,5870,5869,0,1,2,1,1,1,1,4,120,5870,5871,5869,1,3,2,1,1,1,1,4,120,5868,5869,5865,0,1,2,2,2,2,2,4,120,5869,5864,5865,1,3,2,2,2,2,2,4,120,5871,5870,5866,0,1,2,3,3,3,3,4,120,5870,5867,5866,1,3,2,3,3,3,3,4,120,5869,5871,5864,0,1,2,4,4,4,4,4,120,5871,5866,5864,1,3,2,4,4,4,4,4,120,5865,5867,5868,0,1,2,5,5,5,5,4,120,5867,5870,5868,1,3,2,5,5,5,5,4,120,5872,5874,5873,0,1,2,0,0,0,0,4,120,5874,5875,5873,1,3,2,0,0,0,0,4,120,5876,5878,5877,0,1,2,1,1,1,1,4,120,5878,5879,5877,1,3,2,1,1,1,1,4,120,5876,5877,5873,0,1,2,2,2,2,2,4,120,5877,5872,5873,1,3,2,2,2,2,2,4,120,5879,5878,5874,0,1,2,3,3,3,3,4,120,5878,5875,5874,1,3,2,3,3,3,3,4,120,5877,5879,5872,0,1,2,4,4,4,4,4,120,5879,5874,5872,1,3,2,4,4,4,4,4,120,5873,5875,5876,0,1,2,5,5,5,5,4,120,5875,5878,5876,1,3,2,5,5,5,5,4,120,5880,5882,5881,0,1,2,0,0,0,0,4,120,5882,5883,5881,1,3,2,0,0,0,0,4,120,5884,5886,5885,0,1,2,1,1,1,1,4,120,5886,5887,5885,1,3,2,1,1,1,1,4,120,5884,5885,5881,0,1,2,2,2,2,2,4,120,5885,5880,5881,1,3,2,2,2,2,2,4,120,5887,5886,5882,0,1,2,3,3,3,3,4,120,5886,5883,5882,1,3,2,3,3,3,3,4,120,5885,5887,5880,0,1,2,4,4,4,4,4,120,5887,5882,5880,1,3,2,4,4,4,4,4,120,5881,5883,5884,0,1,2,5,5,5,5,4,120,5883,5886,5884,1,3,2,5,5,5,5,4,120,5888,5890,5889,0,1,2,0,0,0,0,4,120,5890,5891,5889,1,3,2,0,0,0,0,4,120,5892,5894,5893,0,1,2,1,1,1,1,4,120,5894,5895,5893,1,3,2,1,1,1,1,4,120,5892,5893,5889,0,1,2,2,2,2,2,4,120,5893,5888,5889,1,3,2,2,2,2,2,4,120,5895,5894,5890,0,1,2,3,3,3,3,4,120,5894,5891,5890,1,3,2,3,3,3,3,4,120,5893,5895,5888,0,1,2,4,4,4,4,4,120,5895,5890,5888,1,3,2,4,4,4,4,4,120,5889,5891,5892,0,1,2,5,5,5,5,4,120,5891,5894,5892,1,3,2,5,5,5,5,4,120,5896,5898,5897,0,1,2,0,0,0,0,4,120,5898,5899,5897,1,3,2,0,0,0,0,4,120,5900,5902,5901,0,1,2,1,1,1,1,4,120,5902,5903,5901,1,3,2,1,1,1,1,4,120,5900,5901,5897,0,1,2,2,2,2,2,4,120,5901,5896,5897,1,3,2,2,2,2,2,4,120,5903,5902,5898,0,1,2,3,3,3,3,4,120,5902,5899,5898,1,3,2,3,3,3,3,4,120,5901,5903,5896,0,1,2,4,4,4,4,4,120,5903,5898,5896,1,3,2,4,4,4,4,4,120,5897,5899,5900,0,1,2,5,5,5,5,4,120,5899,5902,5900,1,3,2,5,5,5,5,4,120,5904,5906,5905,0,1,2,0,0,0,0,4,120,5906,5907,5905,1,3,2,0,0,0,0,4,120,5908,5910,5909,0,1,2,1,1,1,1,4,120,5910,5911,5909,1,3,2,1,1,1,1,4,120,5908,5909,5905,0,1,2,2,2,2,2,4,120,5909,5904,5905,1,3,2,2,2,2,2,4,120,5911,5910,5906,0,1,2,3,3,3,3,4,120,5910,5907,5906,1,3,2,3,3,3,3,4,120,5909,5911,5904,0,1,2,4,4,4,4,4,120,5911,5906,5904,1,3,2,4,4,4,4,4,120,5905,5907,5908,0,1,2,5,5,5,5,4,120,5907,5910,5908,1,3,2,5,5,5,5,4,120,5912,5914,5913,0,1,2,0,0,0,0,4,120,5914,5915,5913,1,3,2,0,0,0,0,4,120,5916,5918,5917,0,1,2,1,1,1,1,4,120,5918,5919,5917,1,3,2,1,1,1,1,4,120,5916,5917,5913,0,1,2,2,2,2,2,4,120,5917,5912,5913,1,3,2,2,2,2,2,4,120,5919,5918,5914,0,1,2,3,3,3,3,4,120,5918,5915,5914,1,3,2,3,3,3,3,4,120,5917,5919,5912,0,1,2,4,4,4,4,4,120,5919,5914,5912,1,3,2,4,4,4,4,4,120,5913,5915,5916,0,1,2,5,5,5,5,4,120,5915,5918,5916,1,3,2,5,5,5,5,4,120,5920,5922,5921,0,1,2,0,0,0,0,4,120,5922,5923,5921,1,3,2,0,0,0,0,4,120,5924,5926,5925,0,1,2,1,1,1,1,4,120,5926,5927,5925,1,3,2,1,1,1,1,4,120,5924,5925,5921,0,1,2,2,2,2,2,4,120,5925,5920,5921,1,3,2,2,2,2,2,4,120,5927,5926,5922,0,1,2,3,3,3,3,4,120,5926,5923,5922,1,3,2,3,3,3,3,4,120,5925,5927,5920,0,1,2,4,4,4,4,4,120,5927,5922,5920,1,3,2,4,4,4,4,4,120,5921,5923,5924,0,1,2,5,5,5,5,4,120,5923,5926,5924,1,3,2,5,5,5,5,4,120,5928,5930,5929,0,1,2,0,0,0,0,4,120,5930,5931,5929,1,3,2,0,0,0,0,4,120,5932,5934,5933,0,1,2,1,1,1,1,4,120,5934,5935,5933,1,3,2,1,1,1,1,4,120,5932,5933,5929,0,1,2,2,2,2,2,4,120,5933,5928,5929,1,3,2,2,2,2,2,4,120,5935,5934,5930,0,1,2,3,3,3,3,4,120,5934,5931,5930,1,3,2,3,3,3,3,4,120,5933,5935,5928,0,1,2,4,4,4,4,4,120,5935,5930,5928,1,3,2,4,4,4,4,4,120,5929,5931,5932,0,1,2,5,5,5,5,4,120,5931,5934,5932,1,3,2,5,5,5,5,4,120,5936,5938,5937,0,1,2,0,0,0,0,4,120,5938,5939,5937,1,3,2,0,0,0,0,4,120,5940,5942,5941,0,1,2,1,1,1,1,4,120,5942,5943,5941,1,3,2,1,1,1,1,4,120,5940,5941,5937,0,1,2,2,2,2,2,4,120,5941,5936,5937,1,3,2,2,2,2,2,4,120,5943,5942,5938,0,1,2,3,3,3,3,4,120,5942,5939,5938,1,3,2,3,3,3,3,4,120,5941,5943,5936,0,1,2,4,4,4,4,4,120,5943,5938,5936,1,3,2,4,4,4,4,4,120,5937,5939,5940,0,1,2,5,5,5,5,4,120,5939,5942,5940,1,3,2,5,5,5,5,4,120,5944,5946,5945,0,1,2,0,0,0,0,4,120,5946,5947,5945,1,3,2,0,0,0,0,4,120,5948,5950,5949,0,1,2,1,1,1,1,4,120,5950,5951,5949,1,3,2,1,1,1,1,4,120,5948,5949,5945,0,1,2,2,2,2,2,4,120,5949,5944,5945,1,3,2,2,2,2,2,4,120,5951,5950,5946,0,1,2,3,3,3,3,4,120,5950,5947,5946,1,3,2,3,3,3,3,4,120,5949,5951,5944,0,1,2,4,4,4,4,4,120,5951,5946,5944,1,3,2,4,4,4,4,4,120,5945,5947,5948,0,1,2,5,5,5,5,4,120,5947,5950,5948,1,3,2,5,5,5,5,4,120,5952,5954,5953,0,1,2,0,0,0,0,4,120,5954,5955,5953,1,3,2,0,0,0,0,4,120,5956,5958,5957,0,1,2,1,1,1,1,4,120,5958,5959,5957,1,3,2,1,1,1,1,4,120,5956,5957,5953,0,1,2,2,2,2,2,4,120,5957,5952,5953,1,3,2,2,2,2,2,4,120,5959,5958,5954,0,1,2,3,3,3,3,4,120,5958,5955,5954,1,3,2,3,3,3,3,4,120,5957,5959,5952,0,1,2,4,4,4,4,4,120,5959,5954,5952,1,3,2,4,4,4,4,4,120,5953,5955,5956,0,1,2,5,5,5,5,4,120,5955,5958,5956,1,3,2,5,5,5,5,4,120,5960,5962,5961,0,1,2,0,0,0,0,4,120,5962,5963,5961,1,3,2,0,0,0,0,4,120,5964,5966,5965,0,1,2,1,1,1,1,4,120,5966,5967,5965,1,3,2,1,1,1,1,4,120,5964,5965,5961,0,1,2,2,2,2,2,4,120,5965,5960,5961,1,3,2,2,2,2,2,4,120,5967,5966,5962,0,1,2,3,3,3,3,4,120,5966,5963,5962,1,3,2,3,3,3,3,4,120,5965,5967,5960,0,1,2,4,4,4,4,4,120,5967,5962,5960,1,3,2,4,4,4,4,4,120,5961,5963,5964,0,1,2,5,5,5,5,4,120,5963,5966,5964,1,3,2,5,5,5,5,4,120,5968,5970,5969,0,1,2,0,0,0,0,4,120,5970,5971,5969,1,3,2,0,0,0,0,4,120,5972,5974,5973,0,1,2,1,1,1,1,4,120,5974,5975,5973,1,3,2,1,1,1,1,4,120,5972,5973,5969,0,1,2,2,2,2,2,4,120,5973,5968,5969,1,3,2,2,2,2,2,4,120,5975,5974,5970,0,1,2,3,3,3,3,4,120,5974,5971,5970,1,3,2,3,3,3,3,4,120,5973,5975,5968,0,1,2,4,4,4,4,4,120,5975,5970,5968,1,3,2,4,4,4,4,4,120,5969,5971,5972,0,1,2,5,5,5,5,4,120,5971,5974,5972,1,3,2,5,5,5,5,4,120,5976,5978,5977,0,1,2,0,0,0,0,4,120,5978,5979,5977,1,3,2,0,0,0,0,4,120,5980,5982,5981,0,1,2,1,1,1,1,4,120,5982,5983,5981,1,3,2,1,1,1,1,4,120,5980,5981,5977,0,1,2,2,2,2,2,4,120,5981,5976,5977,1,3,2,2,2,2,2,4,120,5983,5982,5978,0,1,2,3,3,3,3,4,120,5982,5979,5978,1,3,2,3,3,3,3,4,120,5981,5983,5976,0,1,2,4,4,4,4,4,120,5983,5978,5976,1,3,2,4,4,4,4,4,120,5977,5979,5980,0,1,2,5,5,5,5,4,120,5979,5982,5980,1,3,2,5,5,5,5,4,120,5984,5986,5985,0,1,2,0,0,0,0,4,120,5986,5987,5985,1,3,2,0,0,0,0,4,120,5988,5990,5989,0,1,2,1,1,1,1,4,120,5990,5991,5989,1,3,2,1,1,1,1,4,120,5988,5989,5985,0,1,2,2,2,2,2,4,120,5989,5984,5985,1,3,2,2,2,2,2,4,120,5991,5990,5986,0,1,2,3,3,3,3,4,120,5990,5987,5986,1,3,2,3,3,3,3,4,120,5989,5991,5984,0,1,2,4,4,4,4,4,120,5991,5986,5984,1,3,2,4,4,4,4,4,120,5985,5987,5988,0,1,2,5,5,5,5,4,120,5987,5990,5988,1,3,2,5,5,5,5,4,120,5992,5994,5993,0,1,2,0,0,0,0,4,120,5994,5995,5993,1,3,2,0,0,0,0,4,120,5996,5998,5997,0,1,2,1,1,1,1,4,120,5998,5999,5997,1,3,2,1,1,1,1,4,120,5996,5997,5993,0,1,2,2,2,2,2,4,120,5997,5992,5993,1,3,2,2,2,2,2,4,120,5999,5998,5994,0,1,2,3,3,3,3,4,120,5998,5995,5994,1,3,2,3,3,3,3,4,120,5997,5999,5992,0,1,2,4,4,4,4,4,120,5999,5994,5992,1,3,2,4,4,4,4,4,120,5993,5995,5996,0,1,2,5,5,5,5,4,120,5995,5998,5996,1,3,2,5,5,5,5,4,120,6000,6002,6001,0,1,2,0,0,0,0,4,120,6002,6003,6001,1,3,2,0,0,0,0,4,120,6004,6006,6005,0,1,2,1,1,1,1,4,120,6006,6007,6005,1,3,2,1,1,1,1,4,120,6004,6005,6001,0,1,2,2,2,2,2,4,120,6005,6000,6001,1,3,2,2,2,2,2,4,120,6007,6006,6002,0,1,2,3,3,3,3,4,120,6006,6003,6002,1,3,2,3,3,3,3,4,120,6005,6007,6000,0,1,2,4,4,4,4,4,120,6007,6002,6000,1,3,2,4,4,4,4,4,120,6001,6003,6004,0,1,2,5,5,5,5,4,120,6003,6006,6004,1,3,2,5,5,5,5,4,120,6008,6010,6009,0,1,2,0,0,0,0,4,120,6010,6011,6009,1,3,2,0,0,0,0,4,120,6012,6014,6013,0,1,2,1,1,1,1,4,120,6014,6015,6013,1,3,2,1,1,1,1,4,120,6012,6013,6009,0,1,2,2,2,2,2,4,120,6013,6008,6009,1,3,2,2,2,2,2,4,120,6015,6014,6010,0,1,2,3,3,3,3,4,120,6014,6011,6010,1,3,2,3,3,3,3,4,120,6013,6015,6008,0,1,2,4,4,4,4,4,120,6015,6010,6008,1,3,2,4,4,4,4,4,120,6009,6011,6012,0,1,2,5,5,5,5,4,120,6011,6014,6012,1,3,2,5,5,5,5,4,120,6016,6018,6017,0,1,2,0,0,0,0,4,120,6018,6019,6017,1,3,2,0,0,0,0,4,120,6020,6022,6021,0,1,2,1,1,1,1,4,120,6022,6023,6021,1,3,2,1,1,1,1,4,120,6020,6021,6017,0,1,2,2,2,2,2,4,120,6021,6016,6017,1,3,2,2,2,2,2,4,120,6023,6022,6018,0,1,2,3,3,3,3,4,120,6022,6019,6018,1,3,2,3,3,3,3,4,120,6021,6023,6016,0,1,2,4,4,4,4,4,120,6023,6018,6016,1,3,2,4,4,4,4,4,120,6017,6019,6020,0,1,2,5,5,5,5,4,120,6019,6022,6020,1,3,2,5,5,5,5,4,120,6024,6026,6025,0,1,2,0,0,0,0,4,120,6026,6027,6025,1,3,2,0,0,0,0,4,120,6028,6030,6029,0,1,2,1,1,1,1,4,120,6030,6031,6029,1,3,2,1,1,1,1,4,120,6028,6029,6025,0,1,2,2,2,2,2,4,120,6029,6024,6025,1,3,2,2,2,2,2,4,120,6031,6030,6026,0,1,2,3,3,3,3,4,120,6030,6027,6026,1,3,2,3,3,3,3,4,120,6029,6031,6024,0,1,2,4,4,4,4,4,120,6031,6026,6024,1,3,2,4,4,4,4,4,120,6025,6027,6028,0,1,2,5,5,5,5,4,120,6027,6030,6028,1,3,2,5,5,5,5,4,120,6032,6034,6033,0,1,2,0,0,0,0,4,120,6034,6035,6033,1,3,2,0,0,0,0,4,120,6036,6038,6037,0,1,2,1,1,1,1,4,120,6038,6039,6037,1,3,2,1,1,1,1,4,120,6036,6037,6033,0,1,2,2,2,2,2,4,120,6037,6032,6033,1,3,2,2,2,2,2,4,120,6039,6038,6034,0,1,2,3,3,3,3,4,120,6038,6035,6034,1,3,2,3,3,3,3,4,120,6037,6039,6032,0,1,2,4,4,4,4,4,120,6039,6034,6032,1,3,2,4,4,4,4,4,120,6033,6035,6036,0,1,2,5,5,5,5,4,120,6035,6038,6036,1,3,2,5,5,5,5,4,120,6040,6042,6041,0,1,2,0,0,0,0,4,120,6042,6043,6041,1,3,2,0,0,0,0,4,120,6044,6046,6045,0,1,2,1,1,1,1,4,120,6046,6047,6045,1,3,2,1,1,1,1,4,120,6044,6045,6041,0,1,2,2,2,2,2,4,120,6045,6040,6041,1,3,2,2,2,2,2,4,120,6047,6046,6042,0,1,2,3,3,3,3,4,120,6046,6043,6042,1,3,2,3,3,3,3,4,120,6045,6047,6040,0,1,2,4,4,4,4,4,120,6047,6042,6040,1,3,2,4,4,4,4,4,120,6041,6043,6044,0,1,2,5,5,5,5,4,120,6043,6046,6044,1,3,2,5,5,5,5,4,120,6048,6050,6049,0,1,2,0,0,0,0,4,120,6050,6051,6049,1,3,2,0,0,0,0,4,120,6052,6054,6053,0,1,2,1,1,1,1,4,120,6054,6055,6053,1,3,2,1,1,1,1,4,120,6052,6053,6049,0,1,2,2,2,2,2,4,120,6053,6048,6049,1,3,2,2,2,2,2,4,120,6055,6054,6050,0,1,2,3,3,3,3,4,120,6054,6051,6050,1,3,2,3,3,3,3,4,120,6053,6055,6048,0,1,2,4,4,4,4,4,120,6055,6050,6048,1,3,2,4,4,4,4,4,120,6049,6051,6052,0,1,2,5,5,5,5,4,120,6051,6054,6052,1,3,2,5,5,5,5,4,120,6056,6058,6057,0,1,2,0,0,0,0,4,120,6058,6059,6057,1,3,2,0,0,0,0,4,120,6060,6062,6061,0,1,2,1,1,1,1,4,120,6062,6063,6061,1,3,2,1,1,1,1,4,120,6060,6061,6057,0,1,2,2,2,2,2,4,120,6061,6056,6057,1,3,2,2,2,2,2,4,120,6063,6062,6058,0,1,2,3,3,3,3,4,120,6062,6059,6058,1,3,2,3,3,3,3,4,120,6061,6063,6056,0,1,2,4,4,4,4,4,120,6063,6058,6056,1,3,2,4,4,4,4,4,120,6057,6059,6060,0,1,2,5,5,5,5,4,120,6059,6062,6060,1,3,2,5,5,5,5,4,120,6064,6066,6065,0,1,2,0,0,0,0,4,120,6066,6067,6065,1,3,2,0,0,0,0,4,120,6068,6070,6069,0,1,2,1,1,1,1,4,120,6070,6071,6069,1,3,2,1,1,1,1,4,120,6068,6069,6065,0,1,2,2,2,2,2,4,120,6069,6064,6065,1,3,2,2,2,2,2,4,120,6071,6070,6066,0,1,2,3,3,3,3,4,120,6070,6067,6066,1,3,2,3,3,3,3,4,120,6069,6071,6064,0,1,2,4,4,4,4,4,120,6071,6066,6064,1,3,2,4,4,4,4,4,120,6065,6067,6068,0,1,2,5,5,5,5,4,120,6067,6070,6068,1,3,2,5,5,5,5,4,120,6072,6074,6073,0,1,2,0,0,0,0,4,120,6074,6075,6073,1,3,2,0,0,0,0,4,120,6076,6078,6077,0,1,2,1,1,1,1,4,120,6078,6079,6077,1,3,2,1,1,1,1,4,120,6076,6077,6073,0,1,2,2,2,2,2,4,120,6077,6072,6073,1,3,2,2,2,2,2,4,120,6079,6078,6074,0,1,2,3,3,3,3,4,120,6078,6075,6074,1,3,2,3,3,3,3,4,120,6077,6079,6072,0,1,2,4,4,4,4,4,120,6079,6074,6072,1,3,2,4,4,4,4,4,120,6073,6075,6076,0,1,2,5,5,5,5,4,120,6075,6078,6076,1,3,2,5,5,5,5,4,120,6080,6082,6081,0,1,2,0,0,0,0,4,120,6082,6083,6081,1,3,2,0,0,0,0,4,120,6084,6086,6085,0,1,2,1,1,1,1,4,120,6086,6087,6085,1,3,2,1,1,1,1,4,120,6084,6085,6081,0,1,2,2,2,2,2,4,120,6085,6080,6081,1,3,2,2,2,2,2,4,120,6087,6086,6082,0,1,2,3,3,3,3,4,120,6086,6083,6082,1,3,2,3,3,3,3,4,120,6085,6087,6080,0,1,2,4,4,4,4,4,120,6087,6082,6080,1,3,2,4,4,4,4,4,120,6081,6083,6084,0,1,2,5,5,5,5,4,120,6083,6086,6084,1,3,2,5,5,5,5,4,120,6088,6090,6089,0,1,2,0,0,0,0,4,120,6090,6091,6089,1,3,2,0,0,0,0,4,120,6092,6094,6093,0,1,2,1,1,1,1,4,120,6094,6095,6093,1,3,2,1,1,1,1,4,120,6092,6093,6089,0,1,2,2,2,2,2,4,120,6093,6088,6089,1,3,2,2,2,2,2,4,120,6095,6094,6090,0,1,2,3,3,3,3,4,120,6094,6091,6090,1,3,2,3,3,3,3,4,120,6093,6095,6088,0,1,2,4,4,4,4,4,120,6095,6090,6088,1,3,2,4,4,4,4,4,120,6089,6091,6092,0,1,2,5,5,5,5,4,120,6091,6094,6092,1,3,2,5,5,5,5,4,120,6096,6098,6097,0,1,2,0,0,0,0,4,120,6098,6099,6097,1,3,2,0,0,0,0,4,120,6100,6102,6101,0,1,2,1,1,1,1,4,120,6102,6103,6101,1,3,2,1,1,1,1,4,120,6100,6101,6097,0,1,2,2,2,2,2,4,120,6101,6096,6097,1,3,2,2,2,2,2,4,120,6103,6102,6098,0,1,2,3,3,3,3,4,120,6102,6099,6098,1,3,2,3,3,3,3,4,120,6101,6103,6096,0,1,2,4,4,4,4,4,120,6103,6098,6096,1,3,2,4,4,4,4,4,120,6097,6099,6100,0,1,2,5,5,5,5,4,120,6099,6102,6100,1,3,2,5,5,5,5,4,120,6104,6106,6105,0,1,2,0,0,0,0,4,120,6106,6107,6105,1,3,2,0,0,0,0,4,120,6108,6110,6109,0,1,2,1,1,1,1,4,120,6110,6111,6109,1,3,2,1,1,1,1,4,120,6108,6109,6105,0,1,2,2,2,2,2,4,120,6109,6104,6105,1,3,2,2,2,2,2,4,120,6111,6110,6106,0,1,2,3,3,3,3,4,120,6110,6107,6106,1,3,2,3,3,3,3,4,120,6109,6111,6104,0,1,2,4,4,4,4,4,120,6111,6106,6104,1,3,2,4,4,4,4,4,120,6105,6107,6108,0,1,2,5,5,5,5,4,120,6107,6110,6108,1,3,2,5,5,5,5,4,120,6112,6114,6113,0,1,2,0,0,0,0,4,120,6114,6115,6113,1,3,2,0,0,0,0,4,120,6116,6118,6117,0,1,2,1,1,1,1,4,120,6118,6119,6117,1,3,2,1,1,1,1,4,120,6116,6117,6113,0,1,2,2,2,2,2,4,120,6117,6112,6113,1,3,2,2,2,2,2,4,120,6119,6118,6114,0,1,2,3,3,3,3,4,120,6118,6115,6114,1,3,2,3,3,3,3,4,120,6117,6119,6112,0,1,2,4,4,4,4,4,120,6119,6114,6112,1,3,2,4,4,4,4,4,120,6113,6115,6116,0,1,2,5,5,5,5,4,120,6115,6118,6116,1,3,2,5,5,5,5,4,120,6120,6122,6121,0,1,2,0,0,0,0,4,120,6122,6123,6121,1,3,2,0,0,0,0,4,120,6124,6126,6125,0,1,2,1,1,1,1,4,120,6126,6127,6125,1,3,2,1,1,1,1,4,120,6124,6125,6121,0,1,2,2,2,2,2,4,120,6125,6120,6121,1,3,2,2,2,2,2,4,120,6127,6126,6122,0,1,2,3,3,3,3,4,120,6126,6123,6122,1,3,2,3,3,3,3,4,120,6125,6127,6120,0,1,2,4,4,4,4,4,120,6127,6122,6120,1,3,2,4,4,4,4,4,120,6121,6123,6124,0,1,2,5,5,5,5,4,120,6123,6126,6124,1,3,2,5,5,5,5,4,120,6128,6130,6129,0,1,2,0,0,0,0,4,120,6130,6131,6129,1,3,2,0,0,0,0,4,120,6132,6134,6133,0,1,2,1,1,1,1,4,120,6134,6135,6133,1,3,2,1,1,1,1,4,120,6132,6133,6129,0,1,2,2,2,2,2,4,120,6133,6128,6129,1,3,2,2,2,2,2,4,120,6135,6134,6130,0,1,2,3,3,3,3,4,120,6134,6131,6130,1,3,2,3,3,3,3,4,120,6133,6135,6128,0,1,2,4,4,4,4,4,120,6135,6130,6128,1,3,2,4,4,4,4,4,120,6129,6131,6132,0,1,2,5,5,5,5,4,120,6131,6134,6132,1,3,2,5,5,5,5,4,120,6136,6138,6137,0,1,2,0,0,0,0,4,120,6138,6139,6137,1,3,2,0,0,0,0,4,120,6140,6142,6141,0,1,2,1,1,1,1,4,120,6142,6143,6141,1,3,2,1,1,1,1,4,120,6140,6141,6137,0,1,2,2,2,2,2,4,120,6141,6136,6137,1,3,2,2,2,2,2,4,120,6143,6142,6138,0,1,2,3,3,3,3,4,120,6142,6139,6138,1,3,2,3,3,3,3,4,120,6141,6143,6136,0,1,2,4,4,4,4,4,120,6143,6138,6136,1,3,2,4,4,4,4,4,120,6137,6139,6140,0,1,2,5,5,5,5,4,120,6139,6142,6140,1,3,2,5,5,5,5,4,120,6144,6146,6145,0,1,2,0,0,0,0,4,120,6146,6147,6145,1,3,2,0,0,0,0,4,120,6148,6150,6149,0,1,2,1,1,1,1,4,120,6150,6151,6149,1,3,2,1,1,1,1,4,120,6148,6149,6145,0,1,2,2,2,2,2,4,120,6149,6144,6145,1,3,2,2,2,2,2,4,120,6151,6150,6146,0,1,2,3,3,3,3,4,120,6150,6147,6146,1,3,2,3,3,3,3,4,120,6149,6151,6144,0,1,2,4,4,4,4,4,120,6151,6146,6144,1,3,2,4,4,4,4,4,120,6145,6147,6148,0,1,2,5,5,5,5,4,120,6147,6150,6148,1,3,2,5,5,5,5,4,120,6152,6154,6153,0,1,2,0,0,0,0,4,120,6154,6155,6153,1,3,2,0,0,0,0,4,120,6156,6158,6157,0,1,2,1,1,1,1,4,120,6158,6159,6157,1,3,2,1,1,1,1,4,120,6156,6157,6153,0,1,2,2,2,2,2,4,120,6157,6152,6153,1,3,2,2,2,2,2,4,120,6159,6158,6154,0,1,2,3,3,3,3,4,120,6158,6155,6154,1,3,2,3,3,3,3,4,120,6157,6159,6152,0,1,2,4,4,4,4,4,120,6159,6154,6152,1,3,2,4,4,4,4,4,120,6153,6155,6156,0,1,2,5,5,5,5,4,120,6155,6158,6156,1,3,2,5,5,5,5,4,120,6160,6162,6161,0,1,2,0,0,0,0,4,120,6162,6163,6161,1,3,2,0,0,0,0,4,120,6164,6166,6165,0,1,2,1,1,1,1,4,120,6166,6167,6165,1,3,2,1,1,1,1,4,120,6164,6165,6161,0,1,2,2,2,2,2,4,120,6165,6160,6161,1,3,2,2,2,2,2,4,120,6167,6166,6162,0,1,2,3,3,3,3,4,120,6166,6163,6162,1,3,2,3,3,3,3,4,120,6165,6167,6160,0,1,2,4,4,4,4,4,120,6167,6162,6160,1,3,2,4,4,4,4,4,120,6161,6163,6164,0,1,2,5,5,5,5,4,120,6163,6166,6164,1,3,2,5,5,5,5,4,120,6168,6170,6169,0,1,2,0,0,0,0,4,120,6170,6171,6169,1,3,2,0,0,0,0,4,120,6172,6174,6173,0,1,2,1,1,1,1,4,120,6174,6175,6173,1,3,2,1,1,1,1,4,120,6172,6173,6169,0,1,2,2,2,2,2,4,120,6173,6168,6169,1,3,2,2,2,2,2,4,120,6175,6174,6170,0,1,2,3,3,3,3,4,120,6174,6171,6170,1,3,2,3,3,3,3,4,120,6173,6175,6168,0,1,2,4,4,4,4,4,120,6175,6170,6168,1,3,2,4,4,4,4,4,120,6169,6171,6172,0,1,2,5,5,5,5,4,120,6171,6174,6172,1,3,2,5,5,5,5,4,120,6176,6178,6177,0,1,2,0,0,0,0,4,120,6178,6179,6177,1,3,2,0,0,0,0,4,120,6180,6182,6181,0,1,2,1,1,1,1,4,120,6182,6183,6181,1,3,2,1,1,1,1,4,120,6180,6181,6177,0,1,2,2,2,2,2,4,120,6181,6176,6177,1,3,2,2,2,2,2,4,120,6183,6182,6178,0,1,2,3,3,3,3,4,120,6182,6179,6178,1,3,2,3,3,3,3,4,120,6181,6183,6176,0,1,2,4,4,4,4,4,120,6183,6178,6176,1,3,2,4,4,4,4,4,120,6177,6179,6180,0,1,2,5,5,5,5,4,120,6179,6182,6180,1,3,2,5,5,5,5,4,120,6184,6186,6185,0,1,2,0,0,0,0,4,120,6186,6187,6185,1,3,2,0,0,0,0,4,120,6188,6190,6189,0,1,2,1,1,1,1,4,120,6190,6191,6189,1,3,2,1,1,1,1,4,120,6188,6189,6185,0,1,2,2,2,2,2,4,120,6189,6184,6185,1,3,2,2,2,2,2,4,120,6191,6190,6186,0,1,2,3,3,3,3,4,120,6190,6187,6186,1,3,2,3,3,3,3,4,120,6189,6191,6184,0,1,2,4,4,4,4,4,120,6191,6186,6184,1,3,2,4,4,4,4,4,120,6185,6187,6188,0,1,2,5,5,5,5,4,120,6187,6190,6188,1,3,2,5,5,5,5,4,120,6192,6194,6193,0,1,2,0,0,0,0,4,120,6194,6195,6193,1,3,2,0,0,0,0,4,120,6196,6198,6197,0,1,2,1,1,1,1,4,120,6198,6199,6197,1,3,2,1,1,1,1,4,120,6196,6197,6193,0,1,2,2,2,2,2,4,120,6197,6192,6193,1,3,2,2,2,2,2,4,120,6199,6198,6194,0,1,2,3,3,3,3,4,120,6198,6195,6194,1,3,2,3,3,3,3,4,120,6197,6199,6192,0,1,2,4,4,4,4,4,120,6199,6194,6192,1,3,2,4,4,4,4,4,120,6193,6195,6196,0,1,2,5,5,5,5,4,120,6195,6198,6196,1,3,2,5,5,5,5,4,120,6200,6202,6201,0,1,2,0,0,0,0,4,120,6202,6203,6201,1,3,2,0,0,0,0,4,120,6204,6206,6205,0,1,2,1,1,1,1,4,120,6206,6207,6205,1,3,2,1,1,1,1,4,120,6204,6205,6201,0,1,2,2,2,2,2,4,120,6205,6200,6201,1,3,2,2,2,2,2,4,120,6207,6206,6202,0,1,2,3,3,3,3,4,120,6206,6203,6202,1,3,2,3,3,3,3,4,120,6205,6207,6200,0,1,2,4,4,4,4,4,120,6207,6202,6200,1,3,2,4,4,4,4,4,120,6201,6203,6204,0,1,2,5,5,5,5,4,120,6203,6206,6204,1,3,2,5,5,5,5,4,120,6208,6210,6209,0,1,2,0,0,0,0,4,120,6210,6211,6209,1,3,2,0,0,0,0,4,120,6212,6214,6213,0,1,2,1,1,1,1,4,120,6214,6215,6213,1,3,2,1,1,1,1,4,120,6212,6213,6209,0,1,2,2,2,2,2,4,120,6213,6208,6209,1,3,2,2,2,2,2,4,120,6215,6214,6210,0,1,2,3,3,3,3,4,120,6214,6211,6210,1,3,2,3,3,3,3,4,120,6213,6215,6208,0,1,2,4,4,4,4,4,120,6215,6210,6208,1,3,2,4,4,4,4,4,120,6209,6211,6212,0,1,2,5,5,5,5,4,120,6211,6214,6212,1,3,2,5,5,5,5,4,120,6216,6218,6217,0,1,2,0,0,0,0,4,120,6218,6219,6217,1,3,2,0,0,0,0,4,120,6220,6222,6221,0,1,2,1,1,1,1,4,120,6222,6223,6221,1,3,2,1,1,1,1,4,120,6220,6221,6217,0,1,2,2,2,2,2,4,120,6221,6216,6217,1,3,2,2,2,2,2,4,120,6223,6222,6218,0,1,2,3,3,3,3,4,120,6222,6219,6218,1,3,2,3,3,3,3,4,120,6221,6223,6216,0,1,2,4,4,4,4,4,120,6223,6218,6216,1,3,2,4,4,4,4,4,120,6217,6219,6220,0,1,2,5,5,5,5,4,120,6219,6222,6220,1,3,2,5,5,5,5,4,120,6224,6226,6225,0,1,2,0,0,0,0,4,120,6226,6227,6225,1,3,2,0,0,0,0,4,120,6228,6230,6229,0,1,2,1,1,1,1,4,120,6230,6231,6229,1,3,2,1,1,1,1,4,120,6228,6229,6225,0,1,2,2,2,2,2,4,120,6229,6224,6225,1,3,2,2,2,2,2,4,120,6231,6230,6226,0,1,2,3,3,3,3,4,120,6230,6227,6226,1,3,2,3,3,3,3,4,120,6229,6231,6224,0,1,2,4,4,4,4,4,120,6231,6226,6224,1,3,2,4,4,4,4,4,120,6225,6227,6228,0,1,2,5,5,5,5,4,120,6227,6230,6228,1,3,2,5,5,5,5,4,120,6232,6234,6233,0,1,2,0,0,0,0,4,120,6234,6235,6233,1,3,2,0,0,0,0,4,120,6236,6238,6237,0,1,2,1,1,1,1,4,120,6238,6239,6237,1,3,2,1,1,1,1,4,120,6236,6237,6233,0,1,2,2,2,2,2,4,120,6237,6232,6233,1,3,2,2,2,2,2,4,120,6239,6238,6234,0,1,2,3,3,3,3,4,120,6238,6235,6234,1,3,2,3,3,3,3,4,120,6237,6239,6232,0,1,2,4,4,4,4,4,120,6239,6234,6232,1,3,2,4,4,4,4,4,120,6233,6235,6236,0,1,2,5,5,5,5,4,120,6235,6238,6236,1,3,2,5,5,5,5,4,120,6240,6242,6241,0,1,2,0,0,0,0,4,120,6242,6243,6241,1,3,2,0,0,0,0,4,120,6244,6246,6245,0,1,2,1,1,1,1,4,120,6246,6247,6245,1,3,2,1,1,1,1,4,120,6244,6245,6241,0,1,2,2,2,2,2,4,120,6245,6240,6241,1,3,2,2,2,2,2,4,120,6247,6246,6242,0,1,2,3,3,3,3,4,120,6246,6243,6242,1,3,2,3,3,3,3,4,120,6245,6247,6240,0,1,2,4,4,4,4,4,120,6247,6242,6240,1,3,2,4,4,4,4,4,120,6241,6243,6244,0,1,2,5,5,5,5,4,120,6243,6246,6244,1,3,2,5,5,5,5,4,120,6248,6250,6249,0,1,2,0,0,0,0,4,120,6250,6251,6249,1,3,2,0,0,0,0,4,120,6252,6254,6253,0,1,2,1,1,1,1,4,120,6254,6255,6253,1,3,2,1,1,1,1,4,120,6252,6253,6249,0,1,2,2,2,2,2,4,120,6253,6248,6249,1,3,2,2,2,2,2,4,120,6255,6254,6250,0,1,2,3,3,3,3,4,120,6254,6251,6250,1,3,2,3,3,3,3,4,120,6253,6255,6248,0,1,2,4,4,4,4,4,120,6255,6250,6248,1,3,2,4,4,4,4,4,120,6249,6251,6252,0,1,2,5,5,5,5,4,120,6251,6254,6252,1,3,2,5,5,5,5,4,120,6256,6258,6257,0,1,2,0,0,0,0,4,120,6258,6259,6257,1,3,2,0,0,0,0,4,120,6260,6262,6261,0,1,2,1,1,1,1,4,120,6262,6263,6261,1,3,2,1,1,1,1,4,120,6260,6261,6257,0,1,2,2,2,2,2,4,120,6261,6256,6257,1,3,2,2,2,2,2,4,120,6263,6262,6258,0,1,2,3,3,3,3,4,120,6262,6259,6258,1,3,2,3,3,3,3,4,120,6261,6263,6256,0,1,2,4,4,4,4,4,120,6263,6258,6256,1,3,2,4,4,4,4,4,120,6257,6259,6260,0,1,2,5,5,5,5,4,120,6259,6262,6260,1,3,2,5,5,5,5,4,120,6264,6266,6265,0,1,2,0,0,0,0,4,120,6266,6267,6265,1,3,2,0,0,0,0,4,120,6268,6270,6269,0,1,2,1,1,1,1,4,120,6270,6271,6269,1,3,2,1,1,1,1,4,120,6268,6269,6265,0,1,2,2,2,2,2,4,120,6269,6264,6265,1,3,2,2,2,2,2,4,120,6271,6270,6266,0,1,2,3,3,3,3,4,120,6270,6267,6266,1,3,2,3,3,3,3,4,120,6269,6271,6264,0,1,2,4,4,4,4,4,120,6271,6266,6264,1,3,2,4,4,4,4,4,120,6265,6267,6268,0,1,2,5,5,5,5,4,120,6267,6270,6268,1,3,2,5,5,5,5,4,120,6272,6274,6273,0,1,2,0,0,0,0,4,120,6274,6275,6273,1,3,2,0,0,0,0,4,120,6276,6278,6277,0,1,2,1,1,1,1,4,120,6278,6279,6277,1,3,2,1,1,1,1,4,120,6276,6277,6273,0,1,2,2,2,2,2,4,120,6277,6272,6273,1,3,2,2,2,2,2,4,120,6279,6278,6274,0,1,2,3,3,3,3,4,120,6278,6275,6274,1,3,2,3,3,3,3,4,120,6277,6279,6272,0,1,2,4,4,4,4,4,120,6279,6274,6272,1,3,2,4,4,4,4,4,120,6273,6275,6276,0,1,2,5,5,5,5,4,120,6275,6278,6276,1,3,2,5,5,5,5,4,120,6280,6282,6281,0,1,2,0,0,0,0,4,120,6282,6283,6281,1,3,2,0,0,0,0,4,120,6284,6286,6285,0,1,2,1,1,1,1,4,120,6286,6287,6285,1,3,2,1,1,1,1,4,120,6284,6285,6281,0,1,2,2,2,2,2,4,120,6285,6280,6281,1,3,2,2,2,2,2,4,120,6287,6286,6282,0,1,2,3,3,3,3,4,120,6286,6283,6282,1,3,2,3,3,3,3,4,120,6285,6287,6280,0,1,2,4,4,4,4,4,120,6287,6282,6280,1,3,2,4,4,4,4,4,120,6281,6283,6284,0,1,2,5,5,5,5,4,120,6283,6286,6284,1,3,2,5,5,5,5,4,120,6288,6290,6289,0,1,2,0,0,0,0,4,120,6290,6291,6289,1,3,2,0,0,0,0,4,120,6292,6294,6293,0,1,2,1,1,1,1,4,120,6294,6295,6293,1,3,2,1,1,1,1,4,120,6292,6293,6289,0,1,2,2,2,2,2,4,120,6293,6288,6289,1,3,2,2,2,2,2,4,120,6295,6294,6290,0,1,2,3,3,3,3,4,120,6294,6291,6290,1,3,2,3,3,3,3,4,120,6293,6295,6288,0,1,2,4,4,4,4,4,120,6295,6290,6288,1,3,2,4,4,4,4,4,120,6289,6291,6292,0,1,2,5,5,5,5,4,120,6291,6294,6292,1,3,2,5,5,5,5,4,120,6296,6298,6297,0,1,2,0,0,0,0,4,120,6298,6299,6297,1,3,2,0,0,0,0,4,120,6300,6302,6301,0,1,2,1,1,1,1,4,120,6302,6303,6301,1,3,2,1,1,1,1,4,120,6300,6301,6297,0,1,2,2,2,2,2,4,120,6301,6296,6297,1,3,2,2,2,2,2,4,120,6303,6302,6298,0,1,2,3,3,3,3,4,120,6302,6299,6298,1,3,2,3,3,3,3,4,120,6301,6303,6296,0,1,2,4,4,4,4,4,120,6303,6298,6296,1,3,2,4,4,4,4,4,120,6297,6299,6300,0,1,2,5,5,5,5,4,120,6299,6302,6300,1,3,2,5,5,5,5,4,120,6304,6306,6305,0,1,2,0,0,0,0,4,120,6306,6307,6305,1,3,2,0,0,0,0,4,120,6308,6310,6309,0,1,2,1,1,1,1,4,120,6310,6311,6309,1,3,2,1,1,1,1,4,120,6308,6309,6305,0,1,2,2,2,2,2,4,120,6309,6304,6305,1,3,2,2,2,2,2,4,120,6311,6310,6306,0,1,2,3,3,3,3,4,120,6310,6307,6306,1,3,2,3,3,3,3,4,120,6309,6311,6304,0,1,2,4,4,4,4,4,120,6311,6306,6304,1,3,2,4,4,4,4,4,120,6305,6307,6308,0,1,2,5,5,5,5,4,120,6307,6310,6308,1,3,2,5,5,5,5,4,120,6312,6314,6313,0,1,2,0,0,0,0,4,120,6314,6315,6313,1,3,2,0,0,0,0,4,120,6316,6318,6317,0,1,2,1,1,1,1,4,120,6318,6319,6317,1,3,2,1,1,1,1,4,120,6316,6317,6313,0,1,2,2,2,2,2,4,120,6317,6312,6313,1,3,2,2,2,2,2,4,120,6319,6318,6314,0,1,2,3,3,3,3,4,120,6318,6315,6314,1,3,2,3,3,3,3,4,120,6317,6319,6312,0,1,2,4,4,4,4,4,120,6319,6314,6312,1,3,2,4,4,4,4,4,120,6313,6315,6316,0,1,2,5,5,5,5,4,120,6315,6318,6316,1,3,2,5,5,5,5,4,120,6320,6322,6321,0,1,2,0,0,0,0,4,120,6322,6323,6321,1,3,2,0,0,0,0,4,120,6324,6326,6325,0,1,2,1,1,1,1,4,120,6326,6327,6325,1,3,2,1,1,1,1,4,120,6324,6325,6321,0,1,2,2,2,2,2,4,120,6325,6320,6321,1,3,2,2,2,2,2,4,120,6327,6326,6322,0,1,2,3,3,3,3,4,120,6326,6323,6322,1,3,2,3,3,3,3,4,120,6325,6327,6320,0,1,2,4,4,4,4,4,120,6327,6322,6320,1,3,2,4,4,4,4,4,120,6321,6323,6324,0,1,2,5,5,5,5,4,120,6323,6326,6324,1,3,2,5,5,5,5,4,120,6328,6330,6329,0,1,2,0,0,0,0,4,120,6330,6331,6329,1,3,2,0,0,0,0,4,120,6332,6334,6333,0,1,2,1,1,1,1,4,120,6334,6335,6333,1,3,2,1,1,1,1,4,120,6332,6333,6329,0,1,2,2,2,2,2,4,120,6333,6328,6329,1,3,2,2,2,2,2,4,120,6335,6334,6330,0,1,2,3,3,3,3,4,120,6334,6331,6330,1,3,2,3,3,3,3,4,120,6333,6335,6328,0,1,2,4,4,4,4,4,120,6335,6330,6328,1,3,2,4,4,4,4,4,120,6329,6331,6332,0,1,2,5,5,5,5,4,120,6331,6334,6332,1,3,2,5,5,5,5,4,120,6336,6338,6337,0,1,2,0,0,0,0,4,120,6338,6339,6337,1,3,2,0,0,0,0,4,120,6340,6342,6341,0,1,2,1,1,1,1,4,120,6342,6343,6341,1,3,2,1,1,1,1,4,120,6340,6341,6337,0,1,2,2,2,2,2,4,120,6341,6336,6337,1,3,2,2,2,2,2,4,120,6343,6342,6338,0,1,2,3,3,3,3,4,120,6342,6339,6338,1,3,2,3,3,3,3,4,120,6341,6343,6336,0,1,2,4,4,4,4,4,120,6343,6338,6336,1,3,2,4,4,4,4,4,120,6337,6339,6340,0,1,2,5,5,5,5,4,120,6339,6342,6340,1,3,2,5,5,5,5,4,120,6344,6346,6345,0,1,2,0,0,0,0,4,120,6346,6347,6345,1,3,2,0,0,0,0,4,120,6348,6350,6349,0,1,2,1,1,1,1,4,120,6350,6351,6349,1,3,2,1,1,1,1,4,120,6348,6349,6345,0,1,2,2,2,2,2,4,120,6349,6344,6345,1,3,2,2,2,2,2,4,120,6351,6350,6346,0,1,2,3,3,3,3,4,120,6350,6347,6346,1,3,2,3,3,3,3,4,120,6349,6351,6344,0,1,2,4,4,4,4,4,120,6351,6346,6344,1,3,2,4,4,4,4,4,120,6345,6347,6348,0,1,2,5,5,5,5,4,120,6347,6350,6348,1,3,2,5,5,5,5,4,120,6352,6354,6353,0,1,2,0,0,0,0,4,120,6354,6355,6353,1,3,2,0,0,0,0,4,120,6356,6358,6357,0,1,2,1,1,1,1,4,120,6358,6359,6357,1,3,2,1,1,1,1,4,120,6356,6357,6353,0,1,2,2,2,2,2,4,120,6357,6352,6353,1,3,2,2,2,2,2,4,120,6359,6358,6354,0,1,2,3,3,3,3,4,120,6358,6355,6354,1,3,2,3,3,3,3,4,120,6357,6359,6352,0,1,2,4,4,4,4,4,120,6359,6354,6352,1,3,2,4,4,4,4,4,120,6353,6355,6356,0,1,2,5,5,5,5,4,120,6355,6358,6356,1,3,2,5,5,5,5,4,120,6360,6362,6361,0,1,2,0,0,0,0,4,120,6362,6363,6361,1,3,2,0,0,0,0,4,120,6364,6366,6365,0,1,2,1,1,1,1,4,120,6366,6367,6365,1,3,2,1,1,1,1,4,120,6364,6365,6361,0,1,2,2,2,2,2,4,120,6365,6360,6361,1,3,2,2,2,2,2,4,120,6367,6366,6362,0,1,2,3,3,3,3,4,120,6366,6363,6362,1,3,2,3,3,3,3,4,120,6365,6367,6360,0,1,2,4,4,4,4,4,120,6367,6362,6360,1,3,2,4,4,4,4,4,120,6361,6363,6364,0,1,2,5,5,5,5,4,120,6363,6366,6364,1,3,2,5,5,5,5,4,120,6368,6370,6369,0,1,2,0,0,0,0,4,120,6370,6371,6369,1,3,2,0,0,0,0,4,120,6372,6374,6373,0,1,2,1,1,1,1,4,120,6374,6375,6373,1,3,2,1,1,1,1,4,120,6372,6373,6369,0,1,2,2,2,2,2,4,120,6373,6368,6369,1,3,2,2,2,2,2,4,120,6375,6374,6370,0,1,2,3,3,3,3,4,120,6374,6371,6370,1,3,2,3,3,3,3,4,120,6373,6375,6368,0,1,2,4,4,4,4,4,120,6375,6370,6368,1,3,2,4,4,4,4,4,120,6369,6371,6372,0,1,2,5,5,5,5,4,120,6371,6374,6372,1,3,2,5,5,5,5,4,120,6376,6378,6377,0,1,2,0,0,0,0,4,120,6378,6379,6377,1,3,2,0,0,0,0,4,120,6380,6382,6381,0,1,2,1,1,1,1,4,120,6382,6383,6381,1,3,2,1,1,1,1,4,120,6380,6381,6377,0,1,2,2,2,2,2,4,120,6381,6376,6377,1,3,2,2,2,2,2,4,120,6383,6382,6378,0,1,2,3,3,3,3,4,120,6382,6379,6378,1,3,2,3,3,3,3,4,120,6381,6383,6376,0,1,2,4,4,4,4,4,120,6383,6378,6376,1,3,2,4,4,4,4,4,120,6377,6379,6380,0,1,2,5,5,5,5,4,120,6379,6382,6380,1,3,2,5,5,5,5,4,120,6384,6386,6385,0,1,2,0,0,0,0,4,120,6386,6387,6385,1,3,2,0,0,0,0,4,120,6388,6390,6389,0,1,2,1,1,1,1,4,120,6390,6391,6389,1,3,2,1,1,1,1,4,120,6388,6389,6385,0,1,2,2,2,2,2,4,120,6389,6384,6385,1,3,2,2,2,2,2,4,120,6391,6390,6386,0,1,2,3,3,3,3,4,120,6390,6387,6386,1,3,2,3,3,3,3,4,120,6389,6391,6384,0,1,2,4,4,4,4,4,120,6391,6386,6384,1,3,2,4,4,4,4,4,120,6385,6387,6388,0,1,2,5,5,5,5,4,120,6387,6390,6388,1,3,2,5,5,5,5,4,120,6392,6394,6393,0,1,2,0,0,0,0,4,120,6394,6395,6393,1,3,2,0,0,0,0,4,120,6396,6398,6397,0,1,2,1,1,1,1,4,120,6398,6399,6397,1,3,2,1,1,1,1,4,120,6396,6397,6393,0,1,2,2,2,2,2,4,120,6397,6392,6393,1,3,2,2,2,2,2,4,120,6399,6398,6394,0,1,2,3,3,3,3,4,120,6398,6395,6394,1,3,2,3,3,3,3,4,120,6397,6399,6392,0,1,2,4,4,4,4,4,120,6399,6394,6392,1,3,2,4,4,4,4,4,120,6393,6395,6396,0,1,2,5,5,5,5,4,120,6395,6398,6396,1,3,2,5,5,5,5,4,120,6400,6402,6401,0,1,2,0,0,0,0,4,120,6402,6403,6401,1,3,2,0,0,0,0,4,120,6404,6406,6405,0,1,2,1,1,1,1,4,120,6406,6407,6405,1,3,2,1,1,1,1,4,120,6404,6405,6401,0,1,2,2,2,2,2,4,120,6405,6400,6401,1,3,2,2,2,2,2,4,120,6407,6406,6402,0,1,2,3,3,3,3,4,120,6406,6403,6402,1,3,2,3,3,3,3,4,120,6405,6407,6400,0,1,2,4,4,4,4,4,120,6407,6402,6400,1,3,2,4,4,4,4,4,120,6401,6403,6404,0,1,2,5,5,5,5,4,120,6403,6406,6404,1,3,2,5,5,5,5,4,120,6408,6410,6409,0,1,2,0,0,0,0,4,120,6410,6411,6409,1,3,2,0,0,0,0,4,120,6412,6414,6413,0,1,2,1,1,1,1,4,120,6414,6415,6413,1,3,2,1,1,1,1,4,120,6412,6413,6409,0,1,2,2,2,2,2,4,120,6413,6408,6409,1,3,2,2,2,2,2,4,120,6415,6414,6410,0,1,2,3,3,3,3,4,120,6414,6411,6410,1,3,2,3,3,3,3,4,120,6413,6415,6408,0,1,2,4,4,4,4,4,120,6415,6410,6408,1,3,2,4,4,4,4,4,120,6409,6411,6412,0,1,2,5,5,5,5,4,120,6411,6414,6412,1,3,2,5,5,5,5,4,120,6416,6418,6417,0,1,2,0,0,0,0,4,120,6418,6419,6417,1,3,2,0,0,0,0,4,120,6420,6422,6421,0,1,2,1,1,1,1,4,120,6422,6423,6421,1,3,2,1,1,1,1,4,120,6420,6421,6417,0,1,2,2,2,2,2,4,120,6421,6416,6417,1,3,2,2,2,2,2,4,120,6423,6422,6418,0,1,2,3,3,3,3,4,120,6422,6419,6418,1,3,2,3,3,3,3,4,120,6421,6423,6416,0,1,2,4,4,4,4,4,120,6423,6418,6416,1,3,2,4,4,4,4,4,120,6417,6419,6420,0,1,2,5,5,5,5,4,120,6419,6422,6420,1,3,2,5,5,5,5,4,120,6424,6426,6425,0,1,2,0,0,0,0,4,120,6426,6427,6425,1,3,2,0,0,0,0,4,120,6428,6430,6429,0,1,2,1,1,1,1,4,120,6430,6431,6429,1,3,2,1,1,1,1,4,120,6428,6429,6425,0,1,2,2,2,2,2,4,120,6429,6424,6425,1,3,2,2,2,2,2,4,120,6431,6430,6426,0,1,2,3,3,3,3,4,120,6430,6427,6426,1,3,2,3,3,3,3,4,120,6429,6431,6424,0,1,2,4,4,4,4,4,120,6431,6426,6424,1,3,2,4,4,4,4,4,120,6425,6427,6428,0,1,2,5,5,5,5,4,120,6427,6430,6428,1,3,2,5,5,5,5,4,120,6432,6434,6433,0,1,2,0,0,0,0,4,120,6434,6435,6433,1,3,2,0,0,0,0,4,120,6436,6438,6437,0,1,2,1,1,1,1,4,120,6438,6439,6437,1,3,2,1,1,1,1,4,120,6436,6437,6433,0,1,2,2,2,2,2,4,120,6437,6432,6433,1,3,2,2,2,2,2,4,120,6439,6438,6434,0,1,2,3,3,3,3,4,120,6438,6435,6434,1,3,2,3,3,3,3,4,120,6437,6439,6432,0,1,2,4,4,4,4,4,120,6439,6434,6432,1,3,2,4,4,4,4,4,120,6433,6435,6436,0,1,2,5,5,5,5,4,120,6435,6438,6436,1,3,2,5,5,5,5,4,120,6440,6442,6441,0,1,2,0,0,0,0,4,120,6442,6443,6441,1,3,2,0,0,0,0,4,120,6444,6446,6445,0,1,2,1,1,1,1,4,120,6446,6447,6445,1,3,2,1,1,1,1,4,120,6444,6445,6441,0,1,2,2,2,2,2,4,120,6445,6440,6441,1,3,2,2,2,2,2,4,120,6447,6446,6442,0,1,2,3,3,3,3,4,120,6446,6443,6442,1,3,2,3,3,3,3,4,120,6445,6447,6440,0,1,2,4,4,4,4,4,120,6447,6442,6440,1,3,2,4,4,4,4,4,120,6441,6443,6444,0,1,2,5,5,5,5,4,120,6443,6446,6444,1,3,2,5,5,5,5,4,120,6448,6450,6449,0,1,2,0,0,0,0,4,120,6450,6451,6449,1,3,2,0,0,0,0,4,120,6452,6454,6453,0,1,2,1,1,1,1,4,120,6454,6455,6453,1,3,2,1,1,1,1,4,120,6452,6453,6449,0,1,2,2,2,2,2,4,120,6453,6448,6449,1,3,2,2,2,2,2,4,120,6455,6454,6450,0,1,2,3,3,3,3,4,120,6454,6451,6450,1,3,2,3,3,3,3,4,120,6453,6455,6448,0,1,2,4,4,4,4,4,120,6455,6450,6448,1,3,2,4,4,4,4,4,120,6449,6451,6452,0,1,2,5,5,5,5,4,120,6451,6454,6452,1,3,2,5,5,5,5,4,120,6456,6458,6457,0,1,2,0,0,0,0,4,120,6458,6459,6457,1,3,2,0,0,0,0,4,120,6460,6462,6461,0,1,2,1,1,1,1,4,120,6462,6463,6461,1,3,2,1,1,1,1,4,120,6460,6461,6457,0,1,2,2,2,2,2,4,120,6461,6456,6457,1,3,2,2,2,2,2,4,120,6463,6462,6458,0,1,2,3,3,3,3,4,120,6462,6459,6458,1,3,2,3,3,3,3,4,120,6461,6463,6456,0,1,2,4,4,4,4,4,120,6463,6458,6456,1,3,2,4,4,4,4,4,120,6457,6459,6460,0,1,2,5,5,5,5,4,120,6459,6462,6460,1,3,2,5,5,5,5,4,120,6464,6466,6465,0,1,2,0,0,0,0,4,120,6466,6467,6465,1,3,2,0,0,0,0,4,120,6468,6470,6469,0,1,2,1,1,1,1,4,120,6470,6471,6469,1,3,2,1,1,1,1,4,120,6468,6469,6465,0,1,2,2,2,2,2,4,120,6469,6464,6465,1,3,2,2,2,2,2,4,120,6471,6470,6466,0,1,2,3,3,3,3,4,120,6470,6467,6466,1,3,2,3,3,3,3,4,120,6469,6471,6464,0,1,2,4,4,4,4,4,120,6471,6466,6464,1,3,2,4,4,4,4,4,120,6465,6467,6468,0,1,2,5,5,5,5,4,120,6467,6470,6468,1,3,2,5,5,5,5,4,120,6472,6474,6473,0,1,2,0,0,0,0,4,120,6474,6475,6473,1,3,2,0,0,0,0,4,120,6476,6478,6477,0,1,2,1,1,1,1,4,120,6478,6479,6477,1,3,2,1,1,1,1,4,120,6476,6477,6473,0,1,2,2,2,2,2,4,120,6477,6472,6473,1,3,2,2,2,2,2,4,120,6479,6478,6474,0,1,2,3,3,3,3,4,120,6478,6475,6474,1,3,2,3,3,3,3,4,120,6477,6479,6472,0,1,2,4,4,4,4,4,120,6479,6474,6472,1,3,2,4,4,4,4,4,120,6473,6475,6476,0,1,2,5,5,5,5,4,120,6475,6478,6476,1,3,2,5,5,5,5,4,120,6480,6482,6481,0,1,2,0,0,0,0,4,120,6482,6483,6481,1,3,2,0,0,0,0,4,120,6484,6486,6485,0,1,2,1,1,1,1,4,120,6486,6487,6485,1,3,2,1,1,1,1,4,120,6484,6485,6481,0,1,2,2,2,2,2,4,120,6485,6480,6481,1,3,2,2,2,2,2,4,120,6487,6486,6482,0,1,2,3,3,3,3,4,120,6486,6483,6482,1,3,2,3,3,3,3,4,120,6485,6487,6480,0,1,2,4,4,4,4,4,120,6487,6482,6480,1,3,2,4,4,4,4,4,120,6481,6483,6484,0,1,2,5,5,5,5,4,120,6483,6486,6484,1,3,2,5,5,5,5,4,120,6488,6490,6489,0,1,2,0,0,0,0,4,120,6490,6491,6489,1,3,2,0,0,0,0,4,120,6492,6494,6493,0,1,2,1,1,1,1,4,120,6494,6495,6493,1,3,2,1,1,1,1,4,120,6492,6493,6489,0,1,2,2,2,2,2,4,120,6493,6488,6489,1,3,2,2,2,2,2,4,120,6495,6494,6490,0,1,2,3,3,3,3,4,120,6494,6491,6490,1,3,2,3,3,3,3,4,120,6493,6495,6488,0,1,2,4,4,4,4,4,120,6495,6490,6488,1,3,2,4,4,4,4,4,120,6489,6491,6492,0,1,2,5,5,5,5,4,120,6491,6494,6492,1,3,2,5,5,5,5,4,120,6496,6498,6497,0,1,2,0,0,0,0,4,120,6498,6499,6497,1,3,2,0,0,0,0,4,120,6500,6502,6501,0,1,2,1,1,1,1,4,120,6502,6503,6501,1,3,2,1,1,1,1,4,120,6500,6501,6497,0,1,2,2,2,2,2,4,120,6501,6496,6497,1,3,2,2,2,2,2,4,120,6503,6502,6498,0,1,2,3,3,3,3,4,120,6502,6499,6498,1,3,2,3,3,3,3,4,120,6501,6503,6496,0,1,2,4,4,4,4,4,120,6503,6498,6496,1,3,2,4,4,4,4,4,120,6497,6499,6500,0,1,2,5,5,5,5,4,120,6499,6502,6500,1,3,2,5,5,5,5,4,120,6504,6506,6505,0,1,2,0,0,0,0,4,120,6506,6507,6505,1,3,2,0,0,0,0,4,120,6508,6510,6509,0,1,2,1,1,1,1,4,120,6510,6511,6509,1,3,2,1,1,1,1,4,120,6508,6509,6505,0,1,2,2,2,2,2,4,120,6509,6504,6505,1,3,2,2,2,2,2,4,120,6511,6510,6506,0,1,2,3,3,3,3,4,120,6510,6507,6506,1,3,2,3,3,3,3,4,120,6509,6511,6504,0,1,2,4,4,4,4,4,120,6511,6506,6504,1,3,2,4,4,4,4,4,120,6505,6507,6508,0,1,2,5,5,5,5,4,120,6507,6510,6508,1,3,2,5,5,5,5,4,120,6512,6514,6513,0,1,2,0,0,0,0,4,120,6514,6515,6513,1,3,2,0,0,0,0,4,120,6516,6518,6517,0,1,2,1,1,1,1,4,120,6518,6519,6517,1,3,2,1,1,1,1,4,120,6516,6517,6513,0,1,2,2,2,2,2,4,120,6517,6512,6513,1,3,2,2,2,2,2,4,120,6519,6518,6514,0,1,2,3,3,3,3,4,120,6518,6515,6514,1,3,2,3,3,3,3,4,120,6517,6519,6512,0,1,2,4,4,4,4,4,120,6519,6514,6512,1,3,2,4,4,4,4,4,120,6513,6515,6516,0,1,2,5,5,5,5,4,120,6515,6518,6516,1,3,2,5,5,5,5,4,120,6520,6522,6521,0,1,2,0,0,0,0,4,120,6522,6523,6521,1,3,2,0,0,0,0,4,120,6524,6526,6525,0,1,2,1,1,1,1,4,120,6526,6527,6525,1,3,2,1,1,1,1,4,120,6524,6525,6521,0,1,2,2,2,2,2,4,120,6525,6520,6521,1,3,2,2,2,2,2,4,120,6527,6526,6522,0,1,2,3,3,3,3,4,120,6526,6523,6522,1,3,2,3,3,3,3,4,120,6525,6527,6520,0,1,2,4,4,4,4,4,120,6527,6522,6520,1,3,2,4,4,4,4,4,120,6521,6523,6524,0,1,2,5,5,5,5,4,120,6523,6526,6524,1,3,2,5,5,5,5,4,120,6528,6530,6529,0,1,2,0,0,0,0,4,120,6530,6531,6529,1,3,2,0,0,0,0,4,120,6532,6534,6533,0,1,2,1,1,1,1,4,120,6534,6535,6533,1,3,2,1,1,1,1,4,120,6532,6533,6529,0,1,2,2,2,2,2,4,120,6533,6528,6529,1,3,2,2,2,2,2,4,120,6535,6534,6530,0,1,2,3,3,3,3,4,120,6534,6531,6530,1,3,2,3,3,3,3,4,120,6533,6535,6528,0,1,2,4,4,4,4,4,120,6535,6530,6528,1,3,2,4,4,4,4,4,120,6529,6531,6532,0,1,2,5,5,5,5,4,120,6531,6534,6532,1,3,2,5,5,5,5,4,120,6536,6538,6537,0,1,2,0,0,0,0,4,120,6538,6539,6537,1,3,2,0,0,0,0,4,120,6540,6542,6541,0,1,2,1,1,1,1,4,120,6542,6543,6541,1,3,2,1,1,1,1,4,120,6540,6541,6537,0,1,2,2,2,2,2,4,120,6541,6536,6537,1,3,2,2,2,2,2,4,120,6543,6542,6538,0,1,2,3,3,3,3,4,120,6542,6539,6538,1,3,2,3,3,3,3,4,120,6541,6543,6536,0,1,2,4,4,4,4,4,120,6543,6538,6536,1,3,2,4,4,4,4,4,120,6537,6539,6540,0,1,2,5,5,5,5,4,120,6539,6542,6540,1,3,2,5,5,5,5,4,120,6544,6546,6545,0,1,2,0,0,0,0,4,120,6546,6547,6545,1,3,2,0,0,0,0,4,120,6548,6550,6549,0,1,2,1,1,1,1,4,120,6550,6551,6549,1,3,2,1,1,1,1,4,120,6548,6549,6545,0,1,2,2,2,2,2,4,120,6549,6544,6545,1,3,2,2,2,2,2,4,120,6551,6550,6546,0,1,2,3,3,3,3,4,120,6550,6547,6546,1,3,2,3,3,3,3,4,120,6549,6551,6544,0,1,2,4,4,4,4,4,120,6551,6546,6544,1,3,2,4,4,4,4,4,120,6545,6547,6548,0,1,2,5,5,5,5,4,120,6547,6550,6548,1,3,2,5,5,5,5,4,120,6552,6554,6553,0,1,2,0,0,0,0,4,120,6554,6555,6553,1,3,2,0,0,0,0,4,120,6556,6558,6557,0,1,2,1,1,1,1,4,120,6558,6559,6557,1,3,2,1,1,1,1,4,120,6556,6557,6553,0,1,2,2,2,2,2,4,120,6557,6552,6553,1,3,2,2,2,2,2,4,120,6559,6558,6554,0,1,2,3,3,3,3,4,120,6558,6555,6554,1,3,2,3,3,3,3,4,120,6557,6559,6552,0,1,2,4,4,4,4,4,120,6559,6554,6552,1,3,2,4,4,4,4,4,120,6553,6555,6556,0,1,2,5,5,5,5,4,120,6555,6558,6556,1,3,2,5,5,5,5,4,120,6560,6562,6561,0,1,2,0,0,0,0,4,120,6562,6563,6561,1,3,2,0,0,0,0,4,120,6564,6566,6565,0,1,2,1,1,1,1,4,120,6566,6567,6565,1,3,2,1,1,1,1,4,120,6564,6565,6561,0,1,2,2,2,2,2,4,120,6565,6560,6561,1,3,2,2,2,2,2,4,120,6567,6566,6562,0,1,2,3,3,3,3,4,120,6566,6563,6562,1,3,2,3,3,3,3,4,120,6565,6567,6560,0,1,2,4,4,4,4,4,120,6567,6562,6560,1,3,2,4,4,4,4,4,120,6561,6563,6564,0,1,2,5,5,5,5,4,120,6563,6566,6564,1,3,2,5,5,5,5,4,120,6568,6570,6569,0,1,2,0,0,0,0,4,120,6570,6571,6569,1,3,2,0,0,0,0,4,120,6572,6574,6573,0,1,2,1,1,1,1,4,120,6574,6575,6573,1,3,2,1,1,1,1,4,120,6572,6573,6569,0,1,2,2,2,2,2,4,120,6573,6568,6569,1,3,2,2,2,2,2,4,120,6575,6574,6570,0,1,2,3,3,3,3,4,120,6574,6571,6570,1,3,2,3,3,3,3,4,120,6573,6575,6568,0,1,2,4,4,4,4,4,120,6575,6570,6568,1,3,2,4,4,4,4,4,120,6569,6571,6572,0,1,2,5,5,5,5,4,120,6571,6574,6572,1,3,2,5,5,5,5,4,120,6576,6578,6577,0,1,2,0,0,0,0,4,120,6578,6579,6577,1,3,2,0,0,0,0,4,120,6580,6582,6581,0,1,2,1,1,1,1,4,120,6582,6583,6581,1,3,2,1,1,1,1,4,120,6580,6581,6577,0,1,2,2,2,2,2,4,120,6581,6576,6577,1,3,2,2,2,2,2,4,120,6583,6582,6578,0,1,2,3,3,3,3,4,120,6582,6579,6578,1,3,2,3,3,3,3,4,120,6581,6583,6576,0,1,2,4,4,4,4,4,120,6583,6578,6576,1,3,2,4,4,4,4,4,120,6577,6579,6580,0,1,2,5,5,5,5,4,120,6579,6582,6580,1,3,2,5,5,5,5,4,120,6584,6586,6585,0,1,2,0,0,0,0,4,120,6586,6587,6585,1,3,2,0,0,0,0,4,120,6588,6590,6589,0,1,2,1,1,1,1,4,120,6590,6591,6589,1,3,2,1,1,1,1,4,120,6588,6589,6585,0,1,2,2,2,2,2,4,120,6589,6584,6585,1,3,2,2,2,2,2,4,120,6591,6590,6586,0,1,2,3,3,3,3,4,120,6590,6587,6586,1,3,2,3,3,3,3,4,120,6589,6591,6584,0,1,2,4,4,4,4,4,120,6591,6586,6584,1,3,2,4,4,4,4,4,120,6585,6587,6588,0,1,2,5,5,5,5,4,120,6587,6590,6588,1,3,2,5,5,5,5,4,120,6592,6594,6593,0,1,2,0,0,0,0,4,120,6594,6595,6593,1,3,2,0,0,0,0,4,120,6596,6598,6597,0,1,2,1,1,1,1,4,120,6598,6599,6597,1,3,2,1,1,1,1,4,120,6596,6597,6593,0,1,2,2,2,2,2,4,120,6597,6592,6593,1,3,2,2,2,2,2,4,120,6599,6598,6594,0,1,2,3,3,3,3,4,120,6598,6595,6594,1,3,2,3,3,3,3,4,120,6597,6599,6592,0,1,2,4,4,4,4,4,120,6599,6594,6592,1,3,2,4,4,4,4,4,120,6593,6595,6596,0,1,2,5,5,5,5,4,120,6595,6598,6596,1,3,2,5,5,5,5,4,120,6600,6602,6601,0,1,2,0,0,0,0,4,120,6602,6603,6601,1,3,2,0,0,0,0,4,120,6604,6606,6605,0,1,2,1,1,1,1,4,120,6606,6607,6605,1,3,2,1,1,1,1,4,120,6604,6605,6601,0,1,2,2,2,2,2,4,120,6605,6600,6601,1,3,2,2,2,2,2,4,120,6607,6606,6602,0,1,2,3,3,3,3,4,120,6606,6603,6602,1,3,2,3,3,3,3,4,120,6605,6607,6600,0,1,2,4,4,4,4,4,120,6607,6602,6600,1,3,2,4,4,4,4,4,120,6601,6603,6604,0,1,2,5,5,5,5,4,120,6603,6606,6604,1,3,2,5,5,5,5,4,120,6608,6610,6609,0,1,2,0,0,0,0,4,120,6610,6611,6609,1,3,2,0,0,0,0,4,120,6612,6614,6613,0,1,2,1,1,1,1,4,120,6614,6615,6613,1,3,2,1,1,1,1,4,120,6612,6613,6609,0,1,2,2,2,2,2,4,120,6613,6608,6609,1,3,2,2,2,2,2,4,120,6615,6614,6610,0,1,2,3,3,3,3,4,120,6614,6611,6610,1,3,2,3,3,3,3,4,120,6613,6615,6608,0,1,2,4,4,4,4,4,120,6615,6610,6608,1,3,2,4,4,4,4,4,120,6609,6611,6612,0,1,2,5,5,5,5,4,120,6611,6614,6612,1,3,2,5,5,5,5,4,120,6616,6618,6617,0,1,2,0,0,0,0,4,120,6618,6619,6617,1,3,2,0,0,0,0,4,120,6620,6622,6621,0,1,2,1,1,1,1,4,120,6622,6623,6621,1,3,2,1,1,1,1,4,120,6620,6621,6617,0,1,2,2,2,2,2,4,120,6621,6616,6617,1,3,2,2,2,2,2,4,120,6623,6622,6618,0,1,2,3,3,3,3,4,120,6622,6619,6618,1,3,2,3,3,3,3,4,120,6621,6623,6616,0,1,2,4,4,4,4,4,120,6623,6618,6616,1,3,2,4,4,4,4,4,120,6617,6619,6620,0,1,2,5,5,5,5,4,120,6619,6622,6620,1,3,2,5,5,5,5,4,120,6624,6626,6625,0,1,2,0,0,0,0,4,120,6626,6627,6625,1,3,2,0,0,0,0,4,120,6628,6630,6629,0,1,2,1,1,1,1,4,120,6630,6631,6629,1,3,2,1,1,1,1,4,120,6628,6629,6625,0,1,2,2,2,2,2,4,120,6629,6624,6625,1,3,2,2,2,2,2,4,120,6631,6630,6626,0,1,2,3,3,3,3,4,120,6630,6627,6626,1,3,2,3,3,3,3,4,120,6629,6631,6624,0,1,2,4,4,4,4,4,120,6631,6626,6624,1,3,2,4,4,4,4,4,120,6625,6627,6628,0,1,2,5,5,5,5,4,120,6627,6630,6628,1,3,2,5,5,5,5,4,120,6632,6634,6633,0,1,2,0,0,0,0,4,120,6634,6635,6633,1,3,2,0,0,0,0,4,120,6636,6638,6637,0,1,2,1,1,1,1,4,120,6638,6639,6637,1,3,2,1,1,1,1,4,120,6636,6637,6633,0,1,2,2,2,2,2,4,120,6637,6632,6633,1,3,2,2,2,2,2,4,120,6639,6638,6634,0,1,2,3,3,3,3,4,120,6638,6635,6634,1,3,2,3,3,3,3,4,120,6637,6639,6632,0,1,2,4,4,4,4,4,120,6639,6634,6632,1,3,2,4,4,4,4,4,120,6633,6635,6636,0,1,2,5,5,5,5,4,120,6635,6638,6636,1,3,2,5,5,5,5,4,120,6640,6642,6641,0,1,2,0,0,0,0,4,120,6642,6643,6641,1,3,2,0,0,0,0,4,120,6644,6646,6645,0,1,2,1,1,1,1,4,120,6646,6647,6645,1,3,2,1,1,1,1,4,120,6644,6645,6641,0,1,2,2,2,2,2,4,120,6645,6640,6641,1,3,2,2,2,2,2,4,120,6647,6646,6642,0,1,2,3,3,3,3,4,120,6646,6643,6642,1,3,2,3,3,3,3,4,120,6645,6647,6640,0,1,2,4,4,4,4,4,120,6647,6642,6640,1,3,2,4,4,4,4,4,120,6641,6643,6644,0,1,2,5,5,5,5,4,120,6643,6646,6644,1,3,2,5,5,5,5,4,120,6648,6650,6649,0,1,2,0,0,0,0,4,120,6650,6651,6649,1,3,2,0,0,0,0,4,120,6652,6654,6653,0,1,2,1,1,1,1,4,120,6654,6655,6653,1,3,2,1,1,1,1,4,120,6652,6653,6649,0,1,2,2,2,2,2,4,120,6653,6648,6649,1,3,2,2,2,2,2,4,120,6655,6654,6650,0,1,2,3,3,3,3,4,120,6654,6651,6650,1,3,2,3,3,3,3,4,120,6653,6655,6648,0,1,2,4,4,4,4,4,120,6655,6650,6648,1,3,2,4,4,4,4,4,120,6649,6651,6652,0,1,2,5,5,5,5,4,120,6651,6654,6652,1,3,2,5,5,5,5,4,120,6656,6658,6657,0,1,2,0,0,0,0,4,120,6658,6659,6657,1,3,2,0,0,0,0,4,120,6660,6662,6661,0,1,2,1,1,1,1,4,120,6662,6663,6661,1,3,2,1,1,1,1,4,120,6660,6661,6657,0,1,2,2,2,2,2,4,120,6661,6656,6657,1,3,2,2,2,2,2,4,120,6663,6662,6658,0,1,2,3,3,3,3,4,120,6662,6659,6658,1,3,2,3,3,3,3,4,120,6661,6663,6656,0,1,2,4,4,4,4,4,120,6663,6658,6656,1,3,2,4,4,4,4,4,120,6657,6659,6660,0,1,2,5,5,5,5,4,120,6659,6662,6660,1,3,2,5,5,5,5,4,120,6664,6666,6665,0,1,2,0,0,0,0,4,120,6666,6667,6665,1,3,2,0,0,0,0,4,120,6668,6670,6669,0,1,2,1,1,1,1,4,120,6670,6671,6669,1,3,2,1,1,1,1,4,120,6668,6669,6665,0,1,2,2,2,2,2,4,120,6669,6664,6665,1,3,2,2,2,2,2,4,120,6671,6670,6666,0,1,2,3,3,3,3,4,120,6670,6667,6666,1,3,2,3,3,3,3,4,120,6669,6671,6664,0,1,2,4,4,4,4,4,120,6671,6666,6664,1,3,2,4,4,4,4,4,120,6665,6667,6668,0,1,2,5,5,5,5,4,120,6667,6670,6668,1,3,2,5,5,5,5,4,120,6672,6674,6673,0,1,2,0,0,0,0,4,120,6674,6675,6673,1,3,2,0,0,0,0,4,120,6676,6678,6677,0,1,2,1,1,1,1,4,120,6678,6679,6677,1,3,2,1,1,1,1,4,120,6676,6677,6673,0,1,2,2,2,2,2,4,120,6677,6672,6673,1,3,2,2,2,2,2,4,120,6679,6678,6674,0,1,2,3,3,3,3,4,120,6678,6675,6674,1,3,2,3,3,3,3,4,120,6677,6679,6672,0,1,2,4,4,4,4,4,120,6679,6674,6672,1,3,2,4,4,4,4,4,120,6673,6675,6676,0,1,2,5,5,5,5,4,120,6675,6678,6676,1,3,2,5,5,5,5,4,120,6680,6682,6681,0,1,2,0,0,0,0,4,120,6682,6683,6681,1,3,2,0,0,0,0,4,120,6684,6686,6685,0,1,2,1,1,1,1,4,120,6686,6687,6685,1,3,2,1,1,1,1,4,120,6684,6685,6681,0,1,2,2,2,2,2,4,120,6685,6680,6681,1,3,2,2,2,2,2,4,120,6687,6686,6682,0,1,2,3,3,3,3,4,120,6686,6683,6682,1,3,2,3,3,3,3,4,120,6685,6687,6680,0,1,2,4,4,4,4,4,120,6687,6682,6680,1,3,2,4,4,4,4,4,120,6681,6683,6684,0,1,2,5,5,5,5,4,120,6683,6686,6684,1,3,2,5,5,5,5,4,120,6688,6690,6689,0,1,2,0,0,0,0,4,120,6690,6691,6689,1,3,2,0,0,0,0,4,120,6692,6694,6693,0,1,2,1,1,1,1,4,120,6694,6695,6693,1,3,2,1,1,1,1,4,120,6692,6693,6689,0,1,2,2,2,2,2,4,120,6693,6688,6689,1,3,2,2,2,2,2,4,120,6695,6694,6690,0,1,2,3,3,3,3,4,120,6694,6691,6690,1,3,2,3,3,3,3,4,120,6693,6695,6688,0,1,2,4,4,4,4,4,120,6695,6690,6688,1,3,2,4,4,4,4,4,120,6689,6691,6692,0,1,2,5,5,5,5,4,120,6691,6694,6692,1,3,2,5,5,5,5,4,120,6696,6698,6697,0,1,2,0,0,0,0,4,120,6698,6699,6697,1,3,2,0,0,0,0,4,120,6700,6702,6701,0,1,2,1,1,1,1,4,120,6702,6703,6701,1,3,2,1,1,1,1,4,120,6700,6701,6697,0,1,2,2,2,2,2,4,120,6701,6696,6697,1,3,2,2,2,2,2,4,120,6703,6702,6698,0,1,2,3,3,3,3,4,120,6702,6699,6698,1,3,2,3,3,3,3,4,120,6701,6703,6696,0,1,2,4,4,4,4,4,120,6703,6698,6696,1,3,2,4,4,4,4,4,120,6697,6699,6700,0,1,2,5,5,5,5,4,120,6699,6702,6700,1,3,2,5,5,5,5,4,120,6704,6706,6705,0,1,2,0,0,0,0,4,120,6706,6707,6705,1,3,2,0,0,0,0,4,120,6708,6710,6709,0,1,2,1,1,1,1,4,120,6710,6711,6709,1,3,2,1,1,1,1,4,120,6708,6709,6705,0,1,2,2,2,2,2,4,120,6709,6704,6705,1,3,2,2,2,2,2,4,120,6711,6710,6706,0,1,2,3,3,3,3,4,120,6710,6707,6706,1,3,2,3,3,3,3,4,120,6709,6711,6704,0,1,2,4,4,4,4,4,120,6711,6706,6704,1,3,2,4,4,4,4,4,120,6705,6707,6708,0,1,2,5,5,5,5,4,120,6707,6710,6708,1,3,2,5,5,5,5,4,120,6712,6714,6713,0,1,2,0,0,0,0,4,120,6714,6715,6713,1,3,2,0,0,0,0,4,120,6716,6718,6717,0,1,2,1,1,1,1,4,120,6718,6719,6717,1,3,2,1,1,1,1,4,120,6716,6717,6713,0,1,2,2,2,2,2,4,120,6717,6712,6713,1,3,2,2,2,2,2,4,120,6719,6718,6714,0,1,2,3,3,3,3,4,120,6718,6715,6714,1,3,2,3,3,3,3,4,120,6717,6719,6712,0,1,2,4,4,4,4,4,120,6719,6714,6712,1,3,2,4,4,4,4,4,120,6713,6715,6716,0,1,2,5,5,5,5,4,120,6715,6718,6716,1,3,2,5,5,5,5,4,120,6720,6722,6721,0,1,2,0,0,0,0,4,120,6722,6723,6721,1,3,2,0,0,0,0,4,120,6724,6726,6725,0,1,2,1,1,1,1,4,120,6726,6727,6725,1,3,2,1,1,1,1,4,120,6724,6725,6721,0,1,2,2,2,2,2,4,120,6725,6720,6721,1,3,2,2,2,2,2,4,120,6727,6726,6722,0,1,2,3,3,3,3,4,120,6726,6723,6722,1,3,2,3,3,3,3,4,120,6725,6727,6720,0,1,2,4,4,4,4,4,120,6727,6722,6720,1,3,2,4,4,4,4,4,120,6721,6723,6724,0,1,2,5,5,5,5,4,120,6723,6726,6724,1,3,2,5,5,5,5,4,120,6728,6730,6729,0,1,2,0,0,0,0,4,120,6730,6731,6729,1,3,2,0,0,0,0,4,120,6732,6734,6733,0,1,2,1,1,1,1,4,120,6734,6735,6733,1,3,2,1,1,1,1,4,120,6732,6733,6729,0,1,2,2,2,2,2,4,120,6733,6728,6729,1,3,2,2,2,2,2,4,120,6735,6734,6730,0,1,2,3,3,3,3,4,120,6734,6731,6730,1,3,2,3,3,3,3,4,120,6733,6735,6728,0,1,2,4,4,4,4,4,120,6735,6730,6728,1,3,2,4,4,4,4,4,120,6729,6731,6732,0,1,2,5,5,5,5,4,120,6731,6734,6732,1,3,2,5,5,5,5,4,120,6736,6738,6737,0,1,2,0,0,0,0,4,120,6738,6739,6737,1,3,2,0,0,0,0,4,120,6740,6742,6741,0,1,2,1,1,1,1,4,120,6742,6743,6741,1,3,2,1,1,1,1,4,120,6740,6741,6737,0,1,2,2,2,2,2,4,120,6741,6736,6737,1,3,2,2,2,2,2,4,120,6743,6742,6738,0,1,2,3,3,3,3,4,120,6742,6739,6738,1,3,2,3,3,3,3,4,120,6741,6743,6736,0,1,2,4,4,4,4,4,120,6743,6738,6736,1,3,2,4,4,4,4,4,120,6737,6739,6740,0,1,2,5,5,5,5,4,120,6739,6742,6740,1,3,2,5,5,5,5,4,120,6744,6746,6745,0,1,2,0,0,0,0,4,120,6746,6747,6745,1,3,2,0,0,0,0,4,120,6748,6750,6749,0,1,2,1,1,1,1,4,120,6750,6751,6749,1,3,2,1,1,1,1,4,120,6748,6749,6745,0,1,2,2,2,2,2,4,120,6749,6744,6745,1,3,2,2,2,2,2,4,120,6751,6750,6746,0,1,2,3,3,3,3,4,120,6750,6747,6746,1,3,2,3,3,3,3,4,120,6749,6751,6744,0,1,2,4,4,4,4,4,120,6751,6746,6744,1,3,2,4,4,4,4,4,120,6745,6747,6748,0,1,2,5,5,5,5,4,120,6747,6750,6748,1,3,2,5,5,5,5,4,120,6752,6754,6753,0,1,2,0,0,0,0,4,120,6754,6755,6753,1,3,2,0,0,0,0,4,120,6756,6758,6757,0,1,2,1,1,1,1,4,120,6758,6759,6757,1,3,2,1,1,1,1,4,120,6756,6757,6753,0,1,2,2,2,2,2,4,120,6757,6752,6753,1,3,2,2,2,2,2,4,120,6759,6758,6754,0,1,2,3,3,3,3,4,120,6758,6755,6754,1,3,2,3,3,3,3,4,120,6757,6759,6752,0,1,2,4,4,4,4,4,120,6759,6754,6752,1,3,2,4,4,4,4,4,120,6753,6755,6756,0,1,2,5,5,5,5,4,120,6755,6758,6756,1,3,2,5,5,5,5,4,120,6760,6762,6761,0,1,2,0,0,0,0,4,120,6762,6763,6761,1,3,2,0,0,0,0,4,120,6764,6766,6765,0,1,2,1,1,1,1,4,120,6766,6767,6765,1,3,2,1,1,1,1,4,120,6764,6765,6761,0,1,2,2,2,2,2,4,120,6765,6760,6761,1,3,2,2,2,2,2,4,120,6767,6766,6762,0,1,2,3,3,3,3,4,120,6766,6763,6762,1,3,2,3,3,3,3,4,120,6765,6767,6760,0,1,2,4,4,4,4,4,120,6767,6762,6760,1,3,2,4,4,4,4,4,120,6761,6763,6764,0,1,2,5,5,5,5,4,120,6763,6766,6764,1,3,2,5,5,5,5,4,120,6768,6770,6769,0,1,2,0,0,0,0,4,120,6770,6771,6769,1,3,2,0,0,0,0,4,120,6772,6774,6773,0,1,2,1,1,1,1,4,120,6774,6775,6773,1,3,2,1,1,1,1,4,120,6772,6773,6769,0,1,2,2,2,2,2,4,120,6773,6768,6769,1,3,2,2,2,2,2,4,120,6775,6774,6770,0,1,2,3,3,3,3,4,120,6774,6771,6770,1,3,2,3,3,3,3,4,120,6773,6775,6768,0,1,2,4,4,4,4,4,120,6775,6770,6768,1,3,2,4,4,4,4,4,120,6769,6771,6772,0,1,2,5,5,5,5,4,120,6771,6774,6772,1,3,2,5,5,5,5,4,120,6776,6778,6777,0,1,2,0,0,0,0,4,120,6778,6779,6777,1,3,2,0,0,0,0,4,120,6780,6782,6781,0,1,2,1,1,1,1,4,120,6782,6783,6781,1,3,2,1,1,1,1,4,120,6780,6781,6777,0,1,2,2,2,2,2,4,120,6781,6776,6777,1,3,2,2,2,2,2,4,120,6783,6782,6778,0,1,2,3,3,3,3,4,120,6782,6779,6778,1,3,2,3,3,3,3,4,120,6781,6783,6776,0,1,2,4,4,4,4,4,120,6783,6778,6776,1,3,2,4,4,4,4,4,120,6777,6779,6780,0,1,2,5,5,5,5,4,120,6779,6782,6780,1,3,2,5,5,5,5,4,120,6784,6786,6785,0,1,2,0,0,0,0,4,120,6786,6787,6785,1,3,2,0,0,0,0,4,120,6788,6790,6789,0,1,2,1,1,1,1,4,120,6790,6791,6789,1,3,2,1,1,1,1,4,120,6788,6789,6785,0,1,2,2,2,2,2,4,120,6789,6784,6785,1,3,2,2,2,2,2,4,120,6791,6790,6786,0,1,2,3,3,3,3,4,120,6790,6787,6786,1,3,2,3,3,3,3,4,120,6789,6791,6784,0,1,2,4,4,4,4,4,120,6791,6786,6784,1,3,2,4,4,4,4,4,120,6785,6787,6788,0,1,2,5,5,5,5,4,120,6787,6790,6788,1,3,2,5,5,5,5,4,120,6792,6794,6793,0,1,2,0,0,0,0,4,120,6794,6795,6793,1,3,2,0,0,0,0,4,120,6796,6798,6797,0,1,2,1,1,1,1,4,120,6798,6799,6797,1,3,2,1,1,1,1,4,120,6796,6797,6793,0,1,2,2,2,2,2,4,120,6797,6792,6793,1,3,2,2,2,2,2,4,120,6799,6798,6794,0,1,2,3,3,3,3,4,120,6798,6795,6794,1,3,2,3,3,3,3,4,120,6797,6799,6792,0,1,2,4,4,4,4,4,120,6799,6794,6792,1,3,2,4,4,4,4,4,120,6793,6795,6796,0,1,2,5,5,5,5,4,120,6795,6798,6796,1,3,2,5,5,5,5,4,120,6800,6802,6801,0,1,2,0,0,0,0,4,120,6802,6803,6801,1,3,2,0,0,0,0,4,120,6804,6806,6805,0,1,2,1,1,1,1,4,120,6806,6807,6805,1,3,2,1,1,1,1,4,120,6804,6805,6801,0,1,2,2,2,2,2,4,120,6805,6800,6801,1,3,2,2,2,2,2,4,120,6807,6806,6802,0,1,2,3,3,3,3,4,120,6806,6803,6802,1,3,2,3,3,3,3,4,120,6805,6807,6800,0,1,2,4,4,4,4,4,120,6807,6802,6800,1,3,2,4,4,4,4,4,120,6801,6803,6804,0,1,2,5,5,5,5,4,120,6803,6806,6804,1,3,2,5,5,5,5,4,120,6808,6810,6809,0,1,2,0,0,0,0,4,120,6810,6811,6809,1,3,2,0,0,0,0,4,120,6812,6814,6813,0,1,2,1,1,1,1,4,120,6814,6815,6813,1,3,2,1,1,1,1,4,120,6812,6813,6809,0,1,2,2,2,2,2,4,120,6813,6808,6809,1,3,2,2,2,2,2,4,120,6815,6814,6810,0,1,2,3,3,3,3,4,120,6814,6811,6810,1,3,2,3,3,3,3,4,120,6813,6815,6808,0,1,2,4,4,4,4,4,120,6815,6810,6808,1,3,2,4,4,4,4,4,120,6809,6811,6812,0,1,2,5,5,5,5,4,120,6811,6814,6812,1,3,2,5,5,5,5,4,120,6816,6818,6817,0,1,2,0,0,0,0,4,120,6818,6819,6817,1,3,2,0,0,0,0,4,120,6820,6822,6821,0,1,2,1,1,1,1,4,120,6822,6823,6821,1,3,2,1,1,1,1,4,120,6820,6821,6817,0,1,2,2,2,2,2,4,120,6821,6816,6817,1,3,2,2,2,2,2,4,120,6823,6822,6818,0,1,2,3,3,3,3,4,120,6822,6819,6818,1,3,2,3,3,3,3,4,120,6821,6823,6816,0,1,2,4,4,4,4,4,120,6823,6818,6816,1,3,2,4,4,4,4,4,120,6817,6819,6820,0,1,2,5,5,5,5,4,120,6819,6822,6820,1,3,2,5,5,5,5,4,120,6824,6826,6825,0,1,2,0,0,0,0,4,120,6826,6827,6825,1,3,2,0,0,0,0,4,120,6828,6830,6829,0,1,2,1,1,1,1,4,120,6830,6831,6829,1,3,2,1,1,1,1,4,120,6828,6829,6825,0,1,2,2,2,2,2,4,120,6829,6824,6825,1,3,2,2,2,2,2,4,120,6831,6830,6826,0,1,2,3,3,3,3,4,120,6830,6827,6826,1,3,2,3,3,3,3,4,120,6829,6831,6824,0,1,2,4,4,4,4,4,120,6831,6826,6824,1,3,2,4,4,4,4,4,120,6825,6827,6828,0,1,2,5,5,5,5,4,120,6827,6830,6828,1,3,2,5,5,5,5,4,120,6832,6834,6833,0,1,2,0,0,0,0,4,120,6834,6835,6833,1,3,2,0,0,0,0,4,120,6836,6838,6837,0,1,2,1,1,1,1,4,120,6838,6839,6837,1,3,2,1,1,1,1,4,120,6836,6837,6833,0,1,2,2,2,2,2,4,120,6837,6832,6833,1,3,2,2,2,2,2,4,120,6839,6838,6834,0,1,2,3,3,3,3,4,120,6838,6835,6834,1,3,2,3,3,3,3,4,120,6837,6839,6832,0,1,2,4,4,4,4,4,120,6839,6834,6832,1,3,2,4,4,4,4,4,120,6833,6835,6836,0,1,2,5,5,5,5,4,120,6835,6838,6836,1,3,2,5,5,5,5,4,120,6840,6842,6841,0,1,2,0,0,0,0,4,120,6842,6843,6841,1,3,2,0,0,0,0,4,120,6844,6846,6845,0,1,2,1,1,1,1,4,120,6846,6847,6845,1,3,2,1,1,1,1,4,120,6844,6845,6841,0,1,2,2,2,2,2,4,120,6845,6840,6841,1,3,2,2,2,2,2,4,120,6847,6846,6842,0,1,2,3,3,3,3,4,120,6846,6843,6842,1,3,2,3,3,3,3,4,120,6845,6847,6840,0,1,2,4,4,4,4,4,120,6847,6842,6840,1,3,2,4,4,4,4,4,120,6841,6843,6844,0,1,2,5,5,5,5,4,120,6843,6846,6844,1,3,2,5,5,5,5,4,120,6848,6850,6849,0,1,2,0,0,0,0,4,120,6850,6851,6849,1,3,2,0,0,0,0,4,120,6852,6854,6853,0,1,2,1,1,1,1,4,120,6854,6855,6853,1,3,2,1,1,1,1,4,120,6852,6853,6849,0,1,2,2,2,2,2,4,120,6853,6848,6849,1,3,2,2,2,2,2,4,120,6855,6854,6850,0,1,2,3,3,3,3,4,120,6854,6851,6850,1,3,2,3,3,3,3,4,120,6853,6855,6848,0,1,2,4,4,4,4,4,120,6855,6850,6848,1,3,2,4,4,4,4,4,120,6849,6851,6852,0,1,2,5,5,5,5,4,120,6851,6854,6852,1,3,2,5,5,5,5,4,120,6856,6858,6857,0,1,2,0,0,0,0,4,120,6858,6859,6857,1,3,2,0,0,0,0,4,120,6860,6862,6861,0,1,2,1,1,1,1,4,120,6862,6863,6861,1,3,2,1,1,1,1,4,120,6860,6861,6857,0,1,2,2,2,2,2,4,120,6861,6856,6857,1,3,2,2,2,2,2,4,120,6863,6862,6858,0,1,2,3,3,3,3,4,120,6862,6859,6858,1,3,2,3,3,3,3,4,120,6861,6863,6856,0,1,2,4,4,4,4,4,120,6863,6858,6856,1,3,2,4,4,4,4,4,120,6857,6859,6860,0,1,2,5,5,5,5,4,120,6859,6862,6860,1,3,2,5,5,5,5,4,120,6864,6866,6865,0,1,2,0,0,0,0,4,120,6866,6867,6865,1,3,2,0,0,0,0,4,120,6868,6870,6869,0,1,2,1,1,1,1,4,120,6870,6871,6869,1,3,2,1,1,1,1,4,120,6868,6869,6865,0,1,2,2,2,2,2,4,120,6869,6864,6865,1,3,2,2,2,2,2,4,120,6871,6870,6866,0,1,2,3,3,3,3,4,120,6870,6867,6866,1,3,2,3,3,3,3,4,120,6869,6871,6864,0,1,2,4,4,4,4,4,120,6871,6866,6864,1,3,2,4,4,4,4,4,120,6865,6867,6868,0,1,2,5,5,5,5,4,120,6867,6870,6868,1,3,2,5,5,5,5,4,120,6872,6874,6873,0,1,2,0,0,0,0,4,120,6874,6875,6873,1,3,2,0,0,0,0,4,120,6876,6878,6877,0,1,2,1,1,1,1,4,120,6878,6879,6877,1,3,2,1,1,1,1,4,120,6876,6877,6873,0,1,2,2,2,2,2,4,120,6877,6872,6873,1,3,2,2,2,2,2,4,120,6879,6878,6874,0,1,2,3,3,3,3,4,120,6878,6875,6874,1,3,2,3,3,3,3,4,120,6877,6879,6872,0,1,2,4,4,4,4,4,120,6879,6874,6872,1,3,2,4,4,4,4,4,120,6873,6875,6876,0,1,2,5,5,5,5,4,120,6875,6878,6876,1,3,2,5,5,5,5,4,120,6880,6882,6881,0,1,2,0,0,0,0,4,120,6882,6883,6881,1,3,2,0,0,0,0,4,120,6884,6886,6885,0,1,2,1,1,1,1,4,120,6886,6887,6885,1,3,2,1,1,1,1,4,120,6884,6885,6881,0,1,2,2,2,2,2,4,120,6885,6880,6881,1,3,2,2,2,2,2,4,120,6887,6886,6882,0,1,2,3,3,3,3,4,120,6886,6883,6882,1,3,2,3,3,3,3,4,120,6885,6887,6880,0,1,2,4,4,4,4,4,120,6887,6882,6880,1,3,2,4,4,4,4,4,120,6881,6883,6884,0,1,2,5,5,5,5,4,120,6883,6886,6884,1,3,2,5,5,5,5,4,120,6888,6890,6889,0,1,2,0,0,0,0,4,120,6890,6891,6889,1,3,2,0,0,0,0,4,120,6892,6894,6893,0,1,2,1,1,1,1,4,120,6894,6895,6893,1,3,2,1,1,1,1,4,120,6892,6893,6889,0,1,2,2,2,2,2,4,120,6893,6888,6889,1,3,2,2,2,2,2,4,120,6895,6894,6890,0,1,2,3,3,3,3,4,120,6894,6891,6890,1,3,2,3,3,3,3,4,120,6893,6895,6888,0,1,2,4,4,4,4,4,120,6895,6890,6888,1,3,2,4,4,4,4,4,120,6889,6891,6892,0,1,2,5,5,5,5,4,120,6891,6894,6892,1,3,2,5,5,5,5,4,120,6896,6898,6897,0,1,2,0,0,0,0,4,120,6898,6899,6897,1,3,2,0,0,0,0,4,120,6900,6902,6901,0,1,2,1,1,1,1,4,120,6902,6903,6901,1,3,2,1,1,1,1,4,120,6900,6901,6897,0,1,2,2,2,2,2,4,120,6901,6896,6897,1,3,2,2,2,2,2,4,120,6903,6902,6898,0,1,2,3,3,3,3,4,120,6902,6899,6898,1,3,2,3,3,3,3,4,120,6901,6903,6896,0,1,2,4,4,4,4,4,120,6903,6898,6896,1,3,2,4,4,4,4,4,120,6897,6899,6900,0,1,2,5,5,5,5,4,120,6899,6902,6900,1,3,2,5,5,5,5,4,120,6904,6906,6905,0,1,2,0,0,0,0,4,120,6906,6907,6905,1,3,2,0,0,0,0,4,120,6908,6910,6909,0,1,2,1,1,1,1,4,120,6910,6911,6909,1,3,2,1,1,1,1,4,120,6908,6909,6905,0,1,2,2,2,2,2,4,120,6909,6904,6905,1,3,2,2,2,2,2,4,120,6911,6910,6906,0,1,2,3,3,3,3,4,120,6910,6907,6906,1,3,2,3,3,3,3,4,120,6909,6911,6904,0,1,2,4,4,4,4,4,120,6911,6906,6904,1,3,2,4,4,4,4,4,120,6905,6907,6908,0,1,2,5,5,5,5,4,120,6907,6910,6908,1,3,2,5,5,5,5,4,120,6912,6914,6913,0,1,2,0,0,0,0,4,120,6914,6915,6913,1,3,2,0,0,0,0,4,120,6916,6918,6917,0,1,2,1,1,1,1,4,120,6918,6919,6917,1,3,2,1,1,1,1,4,120,6916,6917,6913,0,1,2,2,2,2,2,4,120,6917,6912,6913,1,3,2,2,2,2,2,4,120,6919,6918,6914,0,1,2,3,3,3,3,4,120,6918,6915,6914,1,3,2,3,3,3,3,4,120,6917,6919,6912,0,1,2,4,4,4,4,4,120,6919,6914,6912,1,3,2,4,4,4,4,4,120,6913,6915,6916,0,1,2,5,5,5,5,4,120,6915,6918,6916,1,3,2,5,5,5,5,4,120,6920,6922,6921,0,1,2,0,0,0,0,4,120,6922,6923,6921,1,3,2,0,0,0,0,4,120,6924,6926,6925,0,1,2,1,1,1,1,4,120,6926,6927,6925,1,3,2,1,1,1,1,4,120,6924,6925,6921,0,1,2,2,2,2,2,4,120,6925,6920,6921,1,3,2,2,2,2,2,4,120,6927,6926,6922,0,1,2,3,3,3,3,4,120,6926,6923,6922,1,3,2,3,3,3,3,4,120,6925,6927,6920,0,1,2,4,4,4,4,4,120,6927,6922,6920,1,3,2,4,4,4,4,4,120,6921,6923,6924,0,1,2,5,5,5,5,4,120,6923,6926,6924,1,3,2,5,5,5,5,4,120,6928,6930,6929,0,1,2,0,0,0,0,4,120,6930,6931,6929,1,3,2,0,0,0,0,4,120,6932,6934,6933,0,1,2,1,1,1,1,4,120,6934,6935,6933,1,3,2,1,1,1,1,4,120,6932,6933,6929,0,1,2,2,2,2,2,4,120,6933,6928,6929,1,3,2,2,2,2,2,4,120,6935,6934,6930,0,1,2,3,3,3,3,4,120,6934,6931,6930,1,3,2,3,3,3,3,4,120,6933,6935,6928,0,1,2,4,4,4,4,4,120,6935,6930,6928,1,3,2,4,4,4,4,4,120,6929,6931,6932,0,1,2,5,5,5,5,4,120,6931,6934,6932,1,3,2,5,5,5,5,4,120,6936,6938,6937,0,1,2,0,0,0,0,4,120,6938,6939,6937,1,3,2,0,0,0,0,4,120,6940,6942,6941,0,1,2,1,1,1,1,4,120,6942,6943,6941,1,3,2,1,1,1,1,4,120,6940,6941,6937,0,1,2,2,2,2,2,4,120,6941,6936,6937,1,3,2,2,2,2,2,4,120,6943,6942,6938,0,1,2,3,3,3,3,4,120,6942,6939,6938,1,3,2,3,3,3,3,4,120,6941,6943,6936,0,1,2,4,4,4,4,4,120,6943,6938,6936,1,3,2,4,4,4,4,4,120,6937,6939,6940,0,1,2,5,5,5,5,4,120,6939,6942,6940,1,3,2,5,5,5,5,4,120,6944,6946,6945,0,1,2,0,0,0,0,4,120,6946,6947,6945,1,3,2,0,0,0,0,4,120,6948,6950,6949,0,1,2,1,1,1,1,4,120,6950,6951,6949,1,3,2,1,1,1,1,4,120,6948,6949,6945,0,1,2,2,2,2,2,4,120,6949,6944,6945,1,3,2,2,2,2,2,4,120,6951,6950,6946,0,1,2,3,3,3,3,4,120,6950,6947,6946,1,3,2,3,3,3,3,4,120,6949,6951,6944,0,1,2,4,4,4,4,4,120,6951,6946,6944,1,3,2,4,4,4,4,4,120,6945,6947,6948,0,1,2,5,5,5,5,4,120,6947,6950,6948,1,3,2,5,5,5,5,4,120,6952,6954,6953,0,1,2,0,0,0,0,4,120,6954,6955,6953,1,3,2,0,0,0,0,4,120,6956,6958,6957,0,1,2,1,1,1,1,4,120,6958,6959,6957,1,3,2,1,1,1,1,4,120,6956,6957,6953,0,1,2,2,2,2,2,4,120,6957,6952,6953,1,3,2,2,2,2,2,4,120,6959,6958,6954,0,1,2,3,3,3,3,4,120,6958,6955,6954,1,3,2,3,3,3,3,4,120,6957,6959,6952,0,1,2,4,4,4,4,4,120,6959,6954,6952,1,3,2,4,4,4,4,4,120,6953,6955,6956,0,1,2,5,5,5,5,4,120,6955,6958,6956,1,3,2,5,5,5,5,4,120,6960,6962,6961,0,1,2,0,0,0,0,4,120,6962,6963,6961,1,3,2,0,0,0,0,4,120,6964,6966,6965,0,1,2,1,1,1,1,4,120,6966,6967,6965,1,3,2,1,1,1,1,4,120,6964,6965,6961,0,1,2,2,2,2,2,4,120,6965,6960,6961,1,3,2,2,2,2,2,4,120,6967,6966,6962,0,1,2,3,3,3,3,4,120,6966,6963,6962,1,3,2,3,3,3,3,4,120,6965,6967,6960,0,1,2,4,4,4,4,4,120,6967,6962,6960,1,3,2,4,4,4,4,4,120,6961,6963,6964,0,1,2,5,5,5,5,4,120,6963,6966,6964,1,3,2,5,5,5,5,4,120,6968,6970,6969,0,1,2,0,0,0,0,4,120,6970,6971,6969,1,3,2,0,0,0,0,4,120,6972,6974,6973,0,1,2,1,1,1,1,4,120,6974,6975,6973,1,3,2,1,1,1,1,4,120,6972,6973,6969,0,1,2,2,2,2,2,4,120,6973,6968,6969,1,3,2,2,2,2,2,4,120,6975,6974,6970,0,1,2,3,3,3,3,4,120,6974,6971,6970,1,3,2,3,3,3,3,4,120,6973,6975,6968,0,1,2,4,4,4,4,4,120,6975,6970,6968,1,3,2,4,4,4,4,4,120,6969,6971,6972,0,1,2,5,5,5,5,4,120,6971,6974,6972,1,3,2,5,5,5,5,4,120,6976,6978,6977,0,1,2,0,0,0,0,4,120,6978,6979,6977,1,3,2,0,0,0,0,4,120,6980,6982,6981,0,1,2,1,1,1,1,4,120,6982,6983,6981,1,3,2,1,1,1,1,4,120,6980,6981,6977,0,1,2,2,2,2,2,4,120,6981,6976,6977,1,3,2,2,2,2,2,4,120,6983,6982,6978,0,1,2,3,3,3,3,4,120,6982,6979,6978,1,3,2,3,3,3,3,4,120,6981,6983,6976,0,1,2,4,4,4,4,4,120,6983,6978,6976,1,3,2,4,4,4,4,4,120,6977,6979,6980,0,1,2,5,5,5,5,4,120,6979,6982,6980,1,3,2,5,5,5,5,4,120,6984,6986,6985,0,1,2,0,0,0,0,4,120,6986,6987,6985,1,3,2,0,0,0,0,4,120,6988,6990,6989,0,1,2,1,1,1,1,4,120,6990,6991,6989,1,3,2,1,1,1,1,4,120,6988,6989,6985,0,1,2,2,2,2,2,4,120,6989,6984,6985,1,3,2,2,2,2,2,4,120,6991,6990,6986,0,1,2,3,3,3,3,4,120,6990,6987,6986,1,3,2,3,3,3,3,4,120,6989,6991,6984,0,1,2,4,4,4,4,4,120,6991,6986,6984,1,3,2,4,4,4,4,4,120,6985,6987,6988,0,1,2,5,5,5,5,4,120,6987,6990,6988,1,3,2,5,5,5,5,4,120,6992,6994,6993,0,1,2,0,0,0,0,4,120,6994,6995,6993,1,3,2,0,0,0,0,4,120,6996,6998,6997,0,1,2,1,1,1,1,4,120,6998,6999,6997,1,3,2,1,1,1,1,4,120,6996,6997,6993,0,1,2,2,2,2,2,4,120,6997,6992,6993,1,3,2,2,2,2,2,4,120,6999,6998,6994,0,1,2,3,3,3,3,4,120,6998,6995,6994,1,3,2,3,3,3,3,4,120,6997,6999,6992,0,1,2,4,4,4,4,4,120,6999,6994,6992,1,3,2,4,4,4,4,4,120,6993,6995,6996,0,1,2,5,5,5,5,4,120,6995,6998,6996,1,3,2,5,5,5,5,4,120,7000,7002,7001,0,1,2,0,0,0,0,4,120,7002,7003,7001,1,3,2,0,0,0,0,4,120,7004,7006,7005,0,1,2,1,1,1,1,4,120,7006,7007,7005,1,3,2,1,1,1,1,4,120,7004,7005,7001,0,1,2,2,2,2,2,4,120,7005,7000,7001,1,3,2,2,2,2,2,4,120,7007,7006,7002,0,1,2,3,3,3,3,4,120,7006,7003,7002,1,3,2,3,3,3,3,4,120,7005,7007,7000,0,1,2,4,4,4,4,4,120,7007,7002,7000,1,3,2,4,4,4,4,4,120,7001,7003,7004,0,1,2,5,5,5,5,4,120,7003,7006,7004,1,3,2,5,5,5,5,4,120,7008,7010,7009,0,1,2,0,0,0,0,4,120,7010,7011,7009,1,3,2,0,0,0,0,4,120,7012,7014,7013,0,1,2,1,1,1,1,4,120,7014,7015,7013,1,3,2,1,1,1,1,4,120,7012,7013,7009,0,1,2,2,2,2,2,4,120,7013,7008,7009,1,3,2,2,2,2,2,4,120,7015,7014,7010,0,1,2,3,3,3,3,4,120,7014,7011,7010,1,3,2,3,3,3,3,4,120,7013,7015,7008,0,1,2,4,4,4,4,4,120,7015,7010,7008,1,3,2,4,4,4,4,4,120,7009,7011,7012,0,1,2,5,5,5,5,4,120,7011,7014,7012,1,3,2,5,5,5,5,4,120,7016,7018,7017,0,1,2,0,0,0,0,4,120,7018,7019,7017,1,3,2,0,0,0,0,4,120,7020,7022,7021,0,1,2,1,1,1,1,4,120,7022,7023,7021,1,3,2,1,1,1,1,4,120,7020,7021,7017,0,1,2,2,2,2,2,4,120,7021,7016,7017,1,3,2,2,2,2,2,4,120,7023,7022,7018,0,1,2,3,3,3,3,4,120,7022,7019,7018,1,3,2,3,3,3,3,4,120,7021,7023,7016,0,1,2,4,4,4,4,4,120,7023,7018,7016,1,3,2,4,4,4,4,4,120,7017,7019,7020,0,1,2,5,5,5,5,4,120,7019,7022,7020,1,3,2,5,5,5,5,4,120,7024,7026,7025,0,1,2,0,0,0,0,4,120,7026,7027,7025,1,3,2,0,0,0,0,4,120,7028,7030,7029,0,1,2,1,1,1,1,4,120,7030,7031,7029,1,3,2,1,1,1,1,4,120,7028,7029,7025,0,1,2,2,2,2,2,4,120,7029,7024,7025,1,3,2,2,2,2,2,4,120,7031,7030,7026,0,1,2,3,3,3,3,4,120,7030,7027,7026,1,3,2,3,3,3,3,4,120,7029,7031,7024,0,1,2,4,4,4,4,4,120,7031,7026,7024,1,3,2,4,4,4,4,4,120,7025,7027,7028,0,1,2,5,5,5,5,4,120,7027,7030,7028,1,3,2,5,5,5,5,4,120,7032,7034,7033,0,1,2,0,0,0,0,4,120,7034,7035,7033,1,3,2,0,0,0,0,4,120,7036,7038,7037,0,1,2,1,1,1,1,4,120,7038,7039,7037,1,3,2,1,1,1,1,4,120,7036,7037,7033,0,1,2,2,2,2,2,4,120,7037,7032,7033,1,3,2,2,2,2,2,4,120,7039,7038,7034,0,1,2,3,3,3,3,4,120,7038,7035,7034,1,3,2,3,3,3,3,4,120,7037,7039,7032,0,1,2,4,4,4,4,4,120,7039,7034,7032,1,3,2,4,4,4,4,4,120,7033,7035,7036,0,1,2,5,5,5,5,4,120,7035,7038,7036,1,3,2,5,5,5,5,4,120,7040,7042,7041,0,1,2,0,0,0,0,4,120,7042,7043,7041,1,3,2,0,0,0,0,4,120,7044,7046,7045,0,1,2,1,1,1,1,4,120,7046,7047,7045,1,3,2,1,1,1,1,4,120,7044,7045,7041,0,1,2,2,2,2,2,4,120,7045,7040,7041,1,3,2,2,2,2,2,4,120,7047,7046,7042,0,1,2,3,3,3,3,4,120,7046,7043,7042,1,3,2,3,3,3,3,4,120,7045,7047,7040,0,1,2,4,4,4,4,4,120,7047,7042,7040,1,3,2,4,4,4,4,4,120,7041,7043,7044,0,1,2,5,5,5,5,4,120,7043,7046,7044,1,3,2,5,5,5,5,4,120,7048,7050,7049,0,1,2,0,0,0,0,4,120,7050,7051,7049,1,3,2,0,0,0,0,4,120,7052,7054,7053,0,1,2,1,1,1,1,4,120,7054,7055,7053,1,3,2,1,1,1,1,4,120,7052,7053,7049,0,1,2,2,2,2,2,4,120,7053,7048,7049,1,3,2,2,2,2,2,4,120,7055,7054,7050,0,1,2,3,3,3,3,4,120,7054,7051,7050,1,3,2,3,3,3,3,4,120,7053,7055,7048,0,1,2,4,4,4,4,4,120,7055,7050,7048,1,3,2,4,4,4,4,4,120,7049,7051,7052,0,1,2,5,5,5,5,4,120,7051,7054,7052,1,3,2,5,5,5,5,4,120,7056,7058,7057,0,1,2,0,0,0,0,4,120,7058,7059,7057,1,3,2,0,0,0,0,4,120,7060,7062,7061,0,1,2,1,1,1,1,4,120,7062,7063,7061,1,3,2,1,1,1,1,4,120,7060,7061,7057,0,1,2,2,2,2,2,4,120,7061,7056,7057,1,3,2,2,2,2,2,4,120,7063,7062,7058,0,1,2,3,3,3,3,4,120,7062,7059,7058,1,3,2,3,3,3,3,4,120,7061,7063,7056,0,1,2,4,4,4,4,4,120,7063,7058,7056,1,3,2,4,4,4,4,4,120,7057,7059,7060,0,1,2,5,5,5,5,4,120,7059,7062,7060,1,3,2,5,5,5,5,4,120,7064,7066,7065,0,1,2,0,0,0,0,4,120,7066,7067,7065,1,3,2,0,0,0,0,4,120,7068,7070,7069,0,1,2,1,1,1,1,4,120,7070,7071,7069,1,3,2,1,1,1,1,4,120,7068,7069,7065,0,1,2,2,2,2,2,4,120,7069,7064,7065,1,3,2,2,2,2,2,4,120,7071,7070,7066,0,1,2,3,3,3,3,4,120,7070,7067,7066,1,3,2,3,3,3,3,4,120,7069,7071,7064,0,1,2,4,4,4,4,4,120,7071,7066,7064,1,3,2,4,4,4,4,4,120,7065,7067,7068,0,1,2,5,5,5,5,4,120,7067,7070,7068,1,3,2,5,5,5,5,4,120,7072,7074,7073,0,1,2,0,0,0,0,4,120,7074,7075,7073,1,3,2,0,0,0,0,4,120,7076,7078,7077,0,1,2,1,1,1,1,4,120,7078,7079,7077,1,3,2,1,1,1,1,4,120,7076,7077,7073,0,1,2,2,2,2,2,4,120,7077,7072,7073,1,3,2,2,2,2,2,4,120,7079,7078,7074,0,1,2,3,3,3,3,4,120,7078,7075,7074,1,3,2,3,3,3,3,4,120,7077,7079,7072,0,1,2,4,4,4,4,4,120,7079,7074,7072,1,3,2,4,4,4,4,4,120,7073,7075,7076,0,1,2,5,5,5,5,4,120,7075,7078,7076,1,3,2,5,5,5,5,4,120,7080,7082,7081,0,1,2,0,0,0,0,4,120,7082,7083,7081,1,3,2,0,0,0,0,4,120,7084,7086,7085,0,1,2,1,1,1,1,4,120,7086,7087,7085,1,3,2,1,1,1,1,4,120,7084,7085,7081,0,1,2,2,2,2,2,4,120,7085,7080,7081,1,3,2,2,2,2,2,4,120,7087,7086,7082,0,1,2,3,3,3,3,4,120,7086,7083,7082,1,3,2,3,3,3,3,4,120,7085,7087,7080,0,1,2,4,4,4,4,4,120,7087,7082,7080,1,3,2,4,4,4,4,4,120,7081,7083,7084,0,1,2,5,5,5,5,4,120,7083,7086,7084,1,3,2,5,5,5,5,4,120,7088,7090,7089,0,1,2,0,0,0,0,4,120,7090,7091,7089,1,3,2,0,0,0,0,4,120,7092,7094,7093,0,1,2,1,1,1,1,4,120,7094,7095,7093,1,3,2,1,1,1,1,4,120,7092,7093,7089,0,1,2,2,2,2,2,4,120,7093,7088,7089,1,3,2,2,2,2,2,4,120,7095,7094,7090,0,1,2,3,3,3,3,4,120,7094,7091,7090,1,3,2,3,3,3,3,4,120,7093,7095,7088,0,1,2,4,4,4,4,4,120,7095,7090,7088,1,3,2,4,4,4,4,4,120,7089,7091,7092,0,1,2,5,5,5,5,4,120,7091,7094,7092,1,3,2,5,5,5,5,4,120,7096,7098,7097,0,1,2,0,0,0,0,4,120,7098,7099,7097,1,3,2,0,0,0,0,4,120,7100,7102,7101,0,1,2,1,1,1,1,4,120,7102,7103,7101,1,3,2,1,1,1,1,4,120,7100,7101,7097,0,1,2,2,2,2,2,4,120,7101,7096,7097,1,3,2,2,2,2,2,4,120,7103,7102,7098,0,1,2,3,3,3,3,4,120,7102,7099,7098,1,3,2,3,3,3,3,4,120,7101,7103,7096,0,1,2,4,4,4,4,4,120,7103,7098,7096,1,3,2,4,4,4,4,4,120,7097,7099,7100,0,1,2,5,5,5,5,4,120,7099,7102,7100,1,3,2,5,5,5,5,4,120,7104,7106,7105,0,1,2,0,0,0,0,4,120,7106,7107,7105,1,3,2,0,0,0,0,4,120,7108,7110,7109,0,1,2,1,1,1,1,4,120,7110,7111,7109,1,3,2,1,1,1,1,4,120,7108,7109,7105,0,1,2,2,2,2,2,4,120,7109,7104,7105,1,3,2,2,2,2,2,4,120,7111,7110,7106,0,1,2,3,3,3,3,4,120,7110,7107,7106,1,3,2,3,3,3,3,4,120,7109,7111,7104,0,1,2,4,4,4,4,4,120,7111,7106,7104,1,3,2,4,4,4,4,4,120,7105,7107,7108,0,1,2,5,5,5,5,4,120,7107,7110,7108,1,3,2,5,5,5,5,4,120,7112,7114,7113,0,1,2,0,0,0,0,4,120,7114,7115,7113,1,3,2,0,0,0,0,4,120,7116,7118,7117,0,1,2,1,1,1,1,4,120,7118,7119,7117,1,3,2,1,1,1,1,4,120,7116,7117,7113,0,1,2,2,2,2,2,4,120,7117,7112,7113,1,3,2,2,2,2,2,4,120,7119,7118,7114,0,1,2,3,3,3,3,4,120,7118,7115,7114,1,3,2,3,3,3,3,4,120,7117,7119,7112,0,1,2,4,4,4,4,4,120,7119,7114,7112,1,3,2,4,4,4,4,4,120,7113,7115,7116,0,1,2,5,5,5,5,4,120,7115,7118,7116,1,3,2,5,5,5,5,4,120,7120,7122,7121,0,1,2,0,0,0,0,4,120,7122,7123,7121,1,3,2,0,0,0,0,4,120,7124,7126,7125,0,1,2,1,1,1,1,4,120,7126,7127,7125,1,3,2,1,1,1,1,4,120,7124,7125,7121,0,1,2,2,2,2,2,4,120,7125,7120,7121,1,3,2,2,2,2,2,4,120,7127,7126,7122,0,1,2,3,3,3,3,4,120,7126,7123,7122,1,3,2,3,3,3,3,4,120,7125,7127,7120,0,1,2,4,4,4,4,4,120,7127,7122,7120,1,3,2,4,4,4,4,4,120,7121,7123,7124,0,1,2,5,5,5,5,4,120,7123,7126,7124,1,3,2,5,5,5,5,4,120,7128,7130,7129,0,1,2,0,0,0,0,4,120,7130,7131,7129,1,3,2,0,0,0,0,4,120,7132,7134,7133,0,1,2,1,1,1,1,4,120,7134,7135,7133,1,3,2,1,1,1,1,4,120,7132,7133,7129,0,1,2,2,2,2,2,4,120,7133,7128,7129,1,3,2,2,2,2,2,4,120,7135,7134,7130,0,1,2,3,3,3,3,4,120,7134,7131,7130,1,3,2,3,3,3,3,4,120,7133,7135,7128,0,1,2,4,4,4,4,4,120,7135,7130,7128,1,3,2,4,4,4,4,4,120,7129,7131,7132,0,1,2,5,5,5,5,4,120,7131,7134,7132,1,3,2,5,5,5,5,4,120,7136,7138,7137,0,1,2,0,0,0,0,4,120,7138,7139,7137,1,3,2,0,0,0,0,4,120,7140,7142,7141,0,1,2,1,1,1,1,4,120,7142,7143,7141,1,3,2,1,1,1,1,4,120,7140,7141,7137,0,1,2,2,2,2,2,4,120,7141,7136,7137,1,3,2,2,2,2,2,4,120,7143,7142,7138,0,1,2,3,3,3,3,4,120,7142,7139,7138,1,3,2,3,3,3,3,4,120,7141,7143,7136,0,1,2,4,4,4,4,4,120,7143,7138,7136,1,3,2,4,4,4,4,4,120,7137,7139,7140,0,1,2,5,5,5,5,4,120,7139,7142,7140,1,3,2,5,5,5,5,4,120,7144,7146,7145,0,1,2,0,0,0,0,4,120,7146,7147,7145,1,3,2,0,0,0,0,4,120,7148,7150,7149,0,1,2,1,1,1,1,4,120,7150,7151,7149,1,3,2,1,1,1,1,4,120,7148,7149,7145,0,1,2,2,2,2,2,4,120,7149,7144,7145,1,3,2,2,2,2,2,4,120,7151,7150,7146,0,1,2,3,3,3,3,4,120,7150,7147,7146,1,3,2,3,3,3,3,4,120,7149,7151,7144,0,1,2,4,4,4,4,4,120,7151,7146,7144,1,3,2,4,4,4,4,4,120,7145,7147,7148,0,1,2,5,5,5,5,4,120,7147,7150,7148,1,3,2,5,5,5,5,4,120,7152,7154,7153,0,1,2,0,0,0,0,4,120,7154,7155,7153,1,3,2,0,0,0,0,4,120,7156,7158,7157,0,1,2,1,1,1,1,4,120,7158,7159,7157,1,3,2,1,1,1,1,4,120,7156,7157,7153,0,1,2,2,2,2,2,4,120,7157,7152,7153,1,3,2,2,2,2,2,4,120,7159,7158,7154,0,1,2,3,3,3,3,4,120,7158,7155,7154,1,3,2,3,3,3,3,4,120,7157,7159,7152,0,1,2,4,4,4,4,4,120,7159,7154,7152,1,3,2,4,4,4,4,4,120,7153,7155,7156,0,1,2,5,5,5,5,4,120,7155,7158,7156,1,3,2,5,5,5,5,4,120,7160,7162,7161,0,1,2,0,0,0,0,4,120,7162,7163,7161,1,3,2,0,0,0,0,4,120,7164,7166,7165,0,1,2,1,1,1,1,4,120,7166,7167,7165,1,3,2,1,1,1,1,4,120,7164,7165,7161,0,1,2,2,2,2,2,4,120,7165,7160,7161,1,3,2,2,2,2,2,4,120,7167,7166,7162,0,1,2,3,3,3,3,4,120,7166,7163,7162,1,3,2,3,3,3,3,4,120,7165,7167,7160,0,1,2,4,4,4,4,4,120,7167,7162,7160,1,3,2,4,4,4,4,4,120,7161,7163,7164,0,1,2,5,5,5,5,4,120,7163,7166,7164,1,3,2,5,5,5,5,4,120,7168,7170,7169,0,1,2,0,0,0,0,5,120,7170,7171,7169,1,3,2,0,0,0,0,5,120,7172,7174,7173,0,1,2,1,1,1,1,5,120,7174,7175,7173,1,3,2,1,1,1,1,5,120,7172,7173,7169,0,1,2,2,2,2,2,5,120,7173,7168,7169,1,3,2,2,2,2,2,5,120,7175,7174,7170,0,1,2,3,3,3,3,5,120,7174,7171,7170,1,3,2,3,3,3,3,5,120,7173,7175,7168,0,1,2,4,4,4,4,5,120,7175,7170,7168,1,3,2,4,4,4,4,5,120,7169,7171,7172,0,1,2,5,5,5,5,5,120,7171,7174,7172,1,3,2,5,5,5,5,5,120,7176,7178,7177,0,1,2,0,0,0,0,5,120,7178,7179,7177,1,3,2,0,0,0,0,5,120,7180,7182,7181,0,1,2,1,1,1,1,5,120,7182,7183,7181,1,3,2,1,1,1,1,5,120,7180,7181,7177,0,1,2,2,2,2,2,5,120,7181,7176,7177,1,3,2,2,2,2,2,5,120,7183,7182,7178,0,1,2,3,3,3,3,5,120,7182,7179,7178,1,3,2,3,3,3,3,5,120,7181,7183,7176,0,1,2,4,4,4,4,5,120,7183,7178,7176,1,3,2,4,4,4,4,5,120,7177,7179,7180,0,1,2,5,5,5,5,5,120,7179,7182,7180,1,3,2,5,5,5,5,5,120,7184,7186,7185,0,1,2,0,0,0,0,5,120,7186,7187,7185,1,3,2,0,0,0,0,5,120,7188,7190,7189,0,1,2,1,1,1,1,5,120,7190,7191,7189,1,3,2,1,1,1,1,5,120,7188,7189,7185,0,1,2,2,2,2,2,5,120,7189,7184,7185,1,3,2,2,2,2,2,5,120,7191,7190,7186,0,1,2,3,3,3,3,5,120,7190,7187,7186,1,3,2,3,3,3,3,5,120,7189,7191,7184,0,1,2,4,4,4,4,5,120,7191,7186,7184,1,3,2,4,4,4,4,5,120,7185,7187,7188,0,1,2,5,5,5,5,5,120,7187,7190,7188,1,3,2,5,5,5,5,5,120,7192,7194,7193,0,1,2,0,0,0,0,5,120,7194,7195,7193,1,3,2,0,0,0,0,5,120,7196,7198,7197,0,1,2,1,1,1,1,5,120,7198,7199,7197,1,3,2,1,1,1,1,5,120,7196,7197,7193,0,1,2,2,2,2,2,5,120,7197,7192,7193,1,3,2,2,2,2,2,5,120,7199,7198,7194,0,1,2,3,3,3,3,5,120,7198,7195,7194,1,3,2,3,3,3,3,5,120,7197,7199,7192,0,1,2,4,4,4,4,5,120,7199,7194,7192,1,3,2,4,4,4,4,5,120,7193,7195,7196,0,1,2,5,5,5,5,5,120,7195,7198,7196,1,3,2,5,5,5,5,5]}}],"materials":[{"uuid":"1582BC13-C832-449C-837A-1BEA6FD6D88E","type":"MeshBasicMaterial","color":16777215,"vertexColors":2,"opacity":1,"transparent":true,"wireframe":false}],"object":{"uuid":"C243D7E7-B8D1-4034-91E6-D05D80C53AF4","type":"Mesh","geometry":"AB3E9F30-8380-4812-9224-55B1955A64E7","material":"1582BC13-C832-449C-837A-1BEA6FD6D88E","matrix":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}}

},{}],133:[function(require,module,exports){
module.exports={"metadata":{"version":4.3,"type":"Object","generator":"ObjectExporter"},"geometries":[{"uuid":"E8EE312C-BEAD-45F6-86B3-DE8286F72940","type":"Geometry","data":{"vertices":[350,250,250,350,250,200,350,200,250,350,200,200,300,250,200,300,250,250,300,200,200,300,200,250,350,300,250,350,300,200,350,250,250,350,250,200,300,300,200,300,300,250,300,250,200,300,250,250,350,350,250,350,350,200,350,300,250,350,300,200,300,350,200,300,350,250,300,300,200,300,300,250,-250,250,250,-250,250,200,-250,200,250,-250,200,200,-300,250,200,-300,250,250,-300,200,200,-300,200,250,-250,300,250,-250,300,200,-250,250,250,-250,250,200,-300,300,200,-300,300,250,-300,250,200,-300,250,250,-250,350,250,-250,350,200,-250,300,250,-250,300,200,-300,350,200,-300,350,250,-300,300,200,-300,300,250,300,300,200,300,300,150,300,250,200,300,250,150,250,300,150,250,300,200,250,250,150,250,250,200,300,350,200,300,350,150,300,300,200,300,300,150,250,350,150,250,350,200,250,300,150,250,300,200,-300,300,200,-300,300,150,-300,250,200,-300,250,150,-350,300,150,-350,300,200,-350,250,150,-350,250,200,-300,350,200,-300,350,150,-300,300,200,-300,300,150,-350,350,150,-350,350,200,-350,300,150,-350,300,200,350,400,250,350,400,200,350,350,250,350,350,200,300,400,200,300,400,250,300,350,200,300,350,250,300,450,200,300,450,150,300,400,200,300,400,150,250,450,150,250,450,200,250,400,150,250,400,200,300,500,200,300,500,150,300,450,200,300,450,150,250,500,150,250,500,200,250,450,150,250,450,200,350,450,250,350,450,200,350,400,250,350,400,200,300,450,200,300,450,250,300,400,200,300,400,250,350,500,250,350,500,200,350,450,250,350,450,200,300,500,200,300,500,250,300,450,200,300,450,250,300,450,250,300,450,200,300,400,250,300,400,200,250,450,200,250,450,250,250,400,200,250,400,250,300,500,250,300,500,200,300,450,250,300,450,200,250,500,200,250,500,250,250,450,200,250,450,250,300,550,250,300,550,200,300,500,250,300,500,200,250,550,200,250,550,250,250,500,200,250,500,250,350,550,250,350,550,200,350,500,250,350,500,200,300,550,200,300,550,250,300,500,200,300,500,250,300,600,200,300,600,150,300,550,200,300,550,150,250,600,150,250,600,200,250,550,150,250,550,200,300,600,250,300,600,200,300,550,250,300,550,200,250,600,200,250,600,250,250,550,200,250,550,250,300,600,150,300,600,100,300,550,150,300,550,100,250,600,100,250,600,150,250,550,100,250,550,150,250,600,150,250,600,100,250,550,150,250,550,100,200,600,100,200,600,150,200,550,100,200,550,150,150,600,150,150,600,100,150,550,150,150,550,100,100,600,100,100,600,150,100,550,100,100,550,150,50,600,150,50,600,100,50,550,150,50,550,100,0,600,100,0,600,150,0,550,100,0,550,150,0,600,150,0,600,100,0,550,150,0,550,100,-50,600,100,-50,600,150,-50,550,100,-50,550,150,-50,600,150,-50,600,100,-50,550,150,-50,550,100,-100,600,100,-100,600,150,-100,550,100,-100,550,150,-100,600,150,-100,600,100,-100,550,150,-100,550,100,-150,600,100,-150,600,150,-150,550,100,-150,550,150,-150,600,150,-150,600,100,-150,550,150,-150,550,100,-200,600,100,-200,600,150,-200,550,100,-200,550,150,-200,600,150,-200,600,100,-200,550,150,-200,550,100,-250,600,100,-250,600,150,-250,550,100,-250,550,150,-250,600,150,-250,600,100,-250,550,150,-250,550,100,-300,600,100,-300,600,150,-300,550,100,-300,550,150,300,650,150,300,650,100,300,600,150,300,600,100,250,650,100,250,650,150,250,600,100,250,600,150,250,650,150,250,650,100,250,600,150,250,600,100,200,650,100,200,650,150,200,600,100,200,600,150,200,650,150,200,650,100,200,600,150,200,600,100,150,650,100,150,650,150,150,600,100,150,600,150,150,650,150,150,650,100,150,600,150,150,600,100,100,650,100,100,650,150,100,600,100,100,600,150,100,650,150,100,650,100,100,600,150,100,600,100,50,650,100,50,650,150,50,600,100,50,600,150,50,650,150,50,650,100,50,600,150,50,600,100,0,650,100,0,650,150,0,600,100,0,600,150,0,650,150,0,650,100,0,600,150,0,600,100,-50,650,100,-50,650,150,-50,600,100,-50,600,150,-50,650,150,-50,650,100,-50,600,150,-50,600,100,-100,650,100,-100,650,150,-100,600,100,-100,600,150,-100,650,150,-100,650,100,-100,600,150,-100,600,100,-150,650,100,-150,650,150,-150,600,100,-150,600,150,-150,650,150,-150,650,100,-150,600,150,-150,600,100,-200,650,100,-200,650,150,-200,600,100,-200,600,150,-200,650,150,-200,650,100,-200,600,150,-200,600,100,-250,650,100,-250,650,150,-250,600,100,-250,600,150,-250,650,150,-250,650,100,-250,600,150,-250,600,100,-300,650,100,-300,650,150,-300,600,100,-300,600,150,-300,400,200,-300,400,150,-300,350,200,-300,350,150,-350,400,150,-350,400,200,-350,350,150,-350,350,200,-250,400,250,-250,400,200,-250,350,250,-250,350,200,-300,400,200,-300,400,250,-300,350,200,-300,350,250,-250,450,250,-250,450,200,-250,400,250,-250,400,200,-300,450,200,-300,450,250,-300,400,200,-300,400,250,-250,500,250,-250,500,200,-250,450,250,-250,450,200,-300,500,200,-300,500,250,-300,450,200,-300,450,250,-250,550,250,-250,550,200,-250,500,250,-250,500,200,-300,550,200,-300,550,250,-300,500,200,-300,500,250,-250,600,250,-250,600,200,-250,550,250,-250,550,200,-300,600,200,-300,600,250,-300,550,200,-300,550,250,-300,500,200,-300,500,150,-300,450,200,-300,450,150,-350,500,150,-350,500,200,-350,450,150,-350,450,200,-300,550,200,-300,550,150,-300,500,200,-300,500,150,-350,550,150,-350,550,200,-350,500,150,-350,500,200,-300,600,200,-300,600,150,-300,550,200,-300,550,150,-350,600,150,-350,600,200,-350,550,150,-350,550,200,-300,650,200,-300,650,150,-300,600,200,-300,600,150,-350,650,150,-350,650,200,-350,600,150,-350,600,200,-250,650,250,-250,650,200,-250,600,250,-250,600,200,-300,650,200,-300,650,250,-300,600,200,-300,600,250,300,650,200,300,650,150,300,600,200,300,600,150,250,650,150,250,650,200,250,600,150,250,600,200,300,650,250,300,650,200,300,600,250,300,600,200,250,650,200,250,650,250,250,600,200,250,600,250,350,600,250,350,600,200,350,550,250,350,550,200,300,600,200,300,600,250,300,550,200,300,550,250,350,650,250,350,650,200,350,600,250,350,600,200,300,650,200,300,650,250,300,600,200,300,600,250,300,700,250,300,700,200,300,650,250,300,650,200,250,700,200,250,700,250,250,650,200,250,650,250,300,750,250,300,750,200,300,700,250,300,700,200,250,750,200,250,750,250,250,700,200,250,700,250,300,800,250,300,800,200,300,750,250,300,750,200,250,800,200,250,800,250,250,750,200,250,750,250,350,700,250,350,700,200,350,650,250,350,650,200,300,700,200,300,700,250,300,650,200,300,650,250,350,750,250,350,750,200,350,700,250,350,700,200,300,750,200,300,750,250,300,700,200,300,700,250,350,800,250,350,800,200,350,750,250,350,750,200,300,800,200,300,800,250,300,750,200,300,750,250,300,700,200,300,700,150,300,650,200,300,650,150,250,700,150,250,700,200,250,650,150,250,650,200,300,750,200,300,750,150,300,700,200,300,700,150,250,750,150,250,750,200,250,700,150,250,700,200,300,800,200,300,800,150,300,750,200,300,750,150,250,800,150,250,800,200,250,750,150,250,750,200,-250,700,250,-250,700,200,-250,650,250,-250,650,200,-300,700,200,-300,700,250,-300,650,200,-300,650,250,-250,750,250,-250,750,200,-250,700,250,-250,700,200,-300,750,200,-300,750,250,-300,700,200,-300,700,250,-250,800,250,-250,800,200,-250,750,250,-250,750,200,-300,800,200,-300,800,250,-300,750,200,-300,750,250,-300,700,200,-300,700,150,-300,650,200,-300,650,150,-350,700,150,-350,700,200,-350,650,150,-350,650,200,-300,800,200,-300,800,150,-300,750,200,-300,750,150,-350,800,150,-350,800,200,-350,750,150,-350,750,200,-250,650,200,-250,650,150,-250,600,200,-250,600,150,-300,650,150,-300,650,200,-300,600,150,-300,600,200,-200,650,200,-200,650,150,-200,600,200,-200,600,150,-250,650,150,-250,650,200,-250,600,150,-250,600,200,-150,650,200,-150,650,150,-150,600,200,-150,600,150,-200,650,150,-200,650,200,-200,600,150,-200,600,200,-100,650,200,-100,650,150,-100,600,200,-100,600,150,-150,650,150,-150,650,200,-150,600,150,-150,600,200,-50,650,200,-50,650,150,-50,600,200,-50,600,150,-100,650,150,-100,650,200,-100,600,150,-100,600,200,0,650,200,0,650,150,0,600,200,0,600,150,-50,650,150,-50,650,200,-50,600,150,-50,600,200,50,650,200,50,650,150,50,600,200,50,600,150,0,650,150,0,650,200,0,600,150,0,600,200,100,650,200,100,650,150,100,600,200,100,600,150,50,650,150,50,650,200,50,600,150,50,600,200,150,650,200,150,650,150,150,600,200,150,600,150,100,650,150,100,650,200,100,600,150,100,600,200,200,650,200,200,650,150,200,600,200,200,600,150,150,650,150,150,650,200,150,600,150,150,600,200,250,650,200,250,650,150,250,600,200,250,600,150,200,650,150,200,650,200,200,600,150,200,600,200,-250,600,200,-250,600,150,-250,550,200,-250,550,150,-300,600,150,-300,600,200,-300,550,150,-300,550,200,300,350,250,300,350,200,300,300,250,300,300,200,250,350,200,250,350,250,250,300,200,250,300,250,300,300,250,300,300,200,300,250,250,300,250,200,250,300,200,250,300,250,250,250,200,250,250,250,300,250,250,300,250,200,300,200,250,300,200,200,250,250,200,250,250,250,250,200,200,250,200,250,-300,750,200,-300,750,150,-300,700,200,-300,700,150,-350,750,150,-350,750,200,-350,700,150,-350,700,200,100,600,150,100,600,100,100,550,150,100,550,100,50,600,100,50,600,150,50,550,100,50,550,150,200,600,200,200,600,150,200,550,200,200,550,150,150,600,150,150,600,200,150,550,150,150,550,200,300,400,200,300,400,150,300,350,200,300,350,150,250,400,150,250,400,200,250,350,150,250,350,200,350,250,200,350,250,150,350,200,200,350,200,150,300,250,150,300,250,200,300,200,150,300,200,200,300,250,200,300,250,150,300,200,200,300,200,150,250,250,150,250,250,200,250,200,150,250,200,200,350,250,150,350,250,100,350,200,150,350,200,100,300,250,100,300,250,150,300,200,100,300,200,150,300,250,150,300,250,100,300,200,150,300,200,100,250,250,100,250,250,150,250,200,100,250,200,150,350,250,100,350,250,50,350,200,100,350,200,50,300,250,50,300,250,100,300,200,50,300,200,100,300,250,100,300,250,50,300,200,100,300,200,50,250,250,50,250,250,100,250,200,50,250,200,100,350,250,50,350,250,0,350,200,50,350,200,0,300,250,0,300,250,50,300,200,0,300,200,50,300,250,50,300,250,0,300,200,50,300,200,0,250,250,0,250,250,50,250,200,0,250,200,50,300,300,150,300,300,100,300,250,150,300,250,100,250,300,100,250,300,150,250,250,100,250,250,150,300,300,100,300,300,50,300,250,100,300,250,50,250,300,50,250,300,100,250,250,50,250,250,100,300,300,50,300,300,0,300,250,50,300,250,0,250,300,0,250,300,50,250,250,0,250,250,50,300,350,50,300,350,0,300,300,50,300,300,0,250,350,0,250,350,50,250,300,0,250,300,50,300,400,50,300,400,0,300,350,50,300,350,0,250,400,0,250,400,50,250,350,0,250,350,50,300,450,50,300,450,0,300,400,50,300,400,0,250,450,0,250,450,50,250,400,0,250,400,50,300,450,100,300,450,50,300,400,100,300,400,50,250,450,50,250,450,100,250,400,50,250,400,100,-250,250,200,-250,250,150,-250,200,200,-250,200,150,-300,250,150,-300,250,200,-300,200,150,-300,200,200,-300,250,150,-300,250,100,-300,200,150,-300,200,100,-350,250,100,-350,250,150,-350,200,100,-350,200,150,-250,250,150,-250,250,100,-250,200,150,-250,200,100,-300,250,100,-300,250,150,-300,200,100,-300,200,150,-300,250,100,-300,250,50,-300,200,100,-300,200,50,-350,250,50,-350,250,100,-350,200,50,-350,200,100,-250,250,100,-250,250,50,-250,200,100,-250,200,50,-300,250,50,-300,250,100,-300,200,50,-300,200,100,-300,250,50,-300,250,0,-300,200,50,-300,200,0,-350,250,0,-350,250,50,-350,200,0,-350,200,50,-250,250,50,-250,250,0,-250,200,50,-250,200,0,-300,250,0,-300,250,50,-300,200,0,-300,200,50,-300,250,200,-300,250,150,-300,200,200,-300,200,150,-350,250,150,-350,250,200,-350,200,150,-350,200,200,-300,250,250,-300,250,200,-300,200,250,-300,200,200,-350,250,200,-350,250,250,-350,200,200,-350,200,250,-300,300,150,-300,300,100,-300,250,150,-300,250,100,-350,300,100,-350,300,150,-350,250,100,-350,250,150,-300,300,100,-300,300,50,-300,250,100,-300,250,50,-350,300,50,-350,300,100,-350,250,50,-350,250,100,-300,300,50,-300,300,0,-300,250,50,-300,250,0,-350,300,0,-350,300,50,-350,250,0,-350,250,50,-300,350,50,-300,350,0,-300,300,50,-300,300,0,-350,350,0,-350,350,50,-350,300,0,-350,300,50,-300,400,50,-300,400,0,-300,350,50,-300,350,0,-350,400,0,-350,400,50,-350,350,0,-350,350,50,-300,450,50,-300,450,0,-300,400,50,-300,400,0,-350,450,0,-350,450,50,-350,400,0,-350,400,50,-300,450,100,-300,450,50,-300,400,100,-300,400,50,-350,450,50,-350,450,100,-350,400,50,-350,400,100,-350,50,400,-350,50,350,-350,0,400,-350,0,350,-400,50,350,-400,50,400,-400,0,350,-400,0,400,400,50,400,400,50,350,400,0,400,400,0,350,350,50,350,350,50,400,350,0,350,350,0,400,400,50,-350,400,50,-400,400,0,-350,400,0,-400,350,50,-400,350,50,-350,350,0,-400,350,0,-350,-350,50,-350,-350,50,-400,-350,0,-350,-350,0,-400,-400,50,-400,-400,50,-350,-400,0,-400,-400,0,-350],"normals":[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],"colors":[4208954,6774620,0],"uvs":[[0,1,0,0,1,1,1,0]],"faces":[120,0,2,1,0,1,2,0,0,0,0,0,120,2,3,1,1,3,2,0,0,0,0,0,120,4,6,5,0,1,2,1,1,1,1,0,120,6,7,5,1,3,2,1,1,1,1,0,120,4,5,1,0,1,2,2,2,2,2,0,120,5,0,1,1,3,2,2,2,2,2,0,120,7,6,2,0,1,2,3,3,3,3,0,120,6,3,2,1,3,2,3,3,3,3,0,120,5,7,0,0,1,2,4,4,4,4,0,120,7,2,0,1,3,2,4,4,4,4,0,120,1,3,4,0,1,2,5,5,5,5,0,120,3,6,4,1,3,2,5,5,5,5,0,120,8,10,9,0,1,2,0,0,0,0,0,120,10,11,9,1,3,2,0,0,0,0,0,120,12,14,13,0,1,2,1,1,1,1,0,120,14,15,13,1,3,2,1,1,1,1,0,120,12,13,9,0,1,2,2,2,2,2,0,120,13,8,9,1,3,2,2,2,2,2,0,120,15,14,10,0,1,2,3,3,3,3,0,120,14,11,10,1,3,2,3,3,3,3,0,120,13,15,8,0,1,2,4,4,4,4,0,120,15,10,8,1,3,2,4,4,4,4,0,120,9,11,12,0,1,2,5,5,5,5,0,120,11,14,12,1,3,2,5,5,5,5,0,120,16,18,17,0,1,2,0,0,0,0,0,120,18,19,17,1,3,2,0,0,0,0,0,120,20,22,21,0,1,2,1,1,1,1,0,120,22,23,21,1,3,2,1,1,1,1,0,120,20,21,17,0,1,2,2,2,2,2,0,120,21,16,17,1,3,2,2,2,2,2,0,120,23,22,18,0,1,2,3,3,3,3,0,120,22,19,18,1,3,2,3,3,3,3,0,120,21,23,16,0,1,2,4,4,4,4,0,120,23,18,16,1,3,2,4,4,4,4,0,120,17,19,20,0,1,2,5,5,5,5,0,120,19,22,20,1,3,2,5,5,5,5,0,120,24,26,25,0,1,2,0,0,0,0,0,120,26,27,25,1,3,2,0,0,0,0,0,120,28,30,29,0,1,2,1,1,1,1,0,120,30,31,29,1,3,2,1,1,1,1,0,120,28,29,25,0,1,2,2,2,2,2,0,120,29,24,25,1,3,2,2,2,2,2,0,120,31,30,26,0,1,2,3,3,3,3,0,120,30,27,26,1,3,2,3,3,3,3,0,120,29,31,24,0,1,2,4,4,4,4,0,120,31,26,24,1,3,2,4,4,4,4,0,120,25,27,28,0,1,2,5,5,5,5,0,120,27,30,28,1,3,2,5,5,5,5,0,120,32,34,33,0,1,2,0,0,0,0,0,120,34,35,33,1,3,2,0,0,0,0,0,120,36,38,37,0,1,2,1,1,1,1,0,120,38,39,37,1,3,2,1,1,1,1,0,120,36,37,33,0,1,2,2,2,2,2,0,120,37,32,33,1,3,2,2,2,2,2,0,120,39,38,34,0,1,2,3,3,3,3,0,120,38,35,34,1,3,2,3,3,3,3,0,120,37,39,32,0,1,2,4,4,4,4,0,120,39,34,32,1,3,2,4,4,4,4,0,120,33,35,36,0,1,2,5,5,5,5,0,120,35,38,36,1,3,2,5,5,5,5,0,120,40,42,41,0,1,2,0,0,0,0,0,120,42,43,41,1,3,2,0,0,0,0,0,120,44,46,45,0,1,2,1,1,1,1,0,120,46,47,45,1,3,2,1,1,1,1,0,120,44,45,41,0,1,2,2,2,2,2,0,120,45,40,41,1,3,2,2,2,2,2,0,120,47,46,42,0,1,2,3,3,3,3,0,120,46,43,42,1,3,2,3,3,3,3,0,120,45,47,40,0,1,2,4,4,4,4,0,120,47,42,40,1,3,2,4,4,4,4,0,120,41,43,44,0,1,2,5,5,5,5,0,120,43,46,44,1,3,2,5,5,5,5,0,120,48,50,49,0,1,2,0,0,0,0,1,120,50,51,49,1,3,2,0,0,0,0,1,120,52,54,53,0,1,2,1,1,1,1,1,120,54,55,53,1,3,2,1,1,1,1,1,120,52,53,49,0,1,2,2,2,2,2,1,120,53,48,49,1,3,2,2,2,2,2,1,120,55,54,50,0,1,2,3,3,3,3,1,120,54,51,50,1,3,2,3,3,3,3,1,120,53,55,48,0,1,2,4,4,4,4,1,120,55,50,48,1,3,2,4,4,4,4,1,120,49,51,52,0,1,2,5,5,5,5,1,120,51,54,52,1,3,2,5,5,5,5,1,120,56,58,57,0,1,2,0,0,0,0,1,120,58,59,57,1,3,2,0,0,0,0,1,120,60,62,61,0,1,2,1,1,1,1,1,120,62,63,61,1,3,2,1,1,1,1,1,120,60,61,57,0,1,2,2,2,2,2,1,120,61,56,57,1,3,2,2,2,2,2,1,120,63,62,58,0,1,2,3,3,3,3,1,120,62,59,58,1,3,2,3,3,3,3,1,120,61,63,56,0,1,2,4,4,4,4,1,120,63,58,56,1,3,2,4,4,4,4,1,120,57,59,60,0,1,2,5,5,5,5,1,120,59,62,60,1,3,2,5,5,5,5,1,120,64,66,65,0,1,2,0,0,0,0,1,120,66,67,65,1,3,2,0,0,0,0,1,120,68,70,69,0,1,2,1,1,1,1,1,120,70,71,69,1,3,2,1,1,1,1,1,120,68,69,65,0,1,2,2,2,2,2,1,120,69,64,65,1,3,2,2,2,2,2,1,120,71,70,66,0,1,2,3,3,3,3,1,120,70,67,66,1,3,2,3,3,3,3,1,120,69,71,64,0,1,2,4,4,4,4,1,120,71,66,64,1,3,2,4,4,4,4,1,120,65,67,68,0,1,2,5,5,5,5,1,120,67,70,68,1,3,2,5,5,5,5,1,120,72,74,73,0,1,2,0,0,0,0,1,120,74,75,73,1,3,2,0,0,0,0,1,120,76,78,77,0,1,2,1,1,1,1,1,120,78,79,77,1,3,2,1,1,1,1,1,120,76,77,73,0,1,2,2,2,2,2,1,120,77,72,73,1,3,2,2,2,2,2,1,120,79,78,74,0,1,2,3,3,3,3,1,120,78,75,74,1,3,2,3,3,3,3,1,120,77,79,72,0,1,2,4,4,4,4,1,120,79,74,72,1,3,2,4,4,4,4,1,120,73,75,76,0,1,2,5,5,5,5,1,120,75,78,76,1,3,2,5,5,5,5,1,120,80,82,81,0,1,2,0,0,0,0,0,120,82,83,81,1,3,2,0,0,0,0,0,120,84,86,85,0,1,2,1,1,1,1,0,120,86,87,85,1,3,2,1,1,1,1,0,120,84,85,81,0,1,2,2,2,2,2,0,120,85,80,81,1,3,2,2,2,2,2,0,120,87,86,82,0,1,2,3,3,3,3,0,120,86,83,82,1,3,2,3,3,3,3,0,120,85,87,80,0,1,2,4,4,4,4,0,120,87,82,80,1,3,2,4,4,4,4,0,120,81,83,84,0,1,2,5,5,5,5,0,120,83,86,84,1,3,2,5,5,5,5,0,120,88,90,89,0,1,2,0,0,0,0,1,120,90,91,89,1,3,2,0,0,0,0,1,120,92,94,93,0,1,2,1,1,1,1,1,120,94,95,93,1,3,2,1,1,1,1,1,120,92,93,89,0,1,2,2,2,2,2,1,120,93,88,89,1,3,2,2,2,2,2,1,120,95,94,90,0,1,2,3,3,3,3,1,120,94,91,90,1,3,2,3,3,3,3,1,120,93,95,88,0,1,2,4,4,4,4,1,120,95,90,88,1,3,2,4,4,4,4,1,120,89,91,92,0,1,2,5,5,5,5,1,120,91,94,92,1,3,2,5,5,5,5,1,120,96,98,97,0,1,2,0,0,0,0,1,120,98,99,97,1,3,2,0,0,0,0,1,120,100,102,101,0,1,2,1,1,1,1,1,120,102,103,101,1,3,2,1,1,1,1,1,120,100,101,97,0,1,2,2,2,2,2,1,120,101,96,97,1,3,2,2,2,2,2,1,120,103,102,98,0,1,2,3,3,3,3,1,120,102,99,98,1,3,2,3,3,3,3,1,120,101,103,96,0,1,2,4,4,4,4,1,120,103,98,96,1,3,2,4,4,4,4,1,120,97,99,100,0,1,2,5,5,5,5,1,120,99,102,100,1,3,2,5,5,5,5,1,120,104,106,105,0,1,2,0,0,0,0,0,120,106,107,105,1,3,2,0,0,0,0,0,120,108,110,109,0,1,2,1,1,1,1,0,120,110,111,109,1,3,2,1,1,1,1,0,120,108,109,105,0,1,2,2,2,2,2,0,120,109,104,105,1,3,2,2,2,2,2,0,120,111,110,106,0,1,2,3,3,3,3,0,120,110,107,106,1,3,2,3,3,3,3,0,120,109,111,104,0,1,2,4,4,4,4,0,120,111,106,104,1,3,2,4,4,4,4,0,120,105,107,108,0,1,2,5,5,5,5,0,120,107,110,108,1,3,2,5,5,5,5,0,120,112,114,113,0,1,2,0,0,0,0,0,120,114,115,113,1,3,2,0,0,0,0,0,120,116,118,117,0,1,2,1,1,1,1,0,120,118,119,117,1,3,2,1,1,1,1,0,120,116,117,113,0,1,2,2,2,2,2,0,120,117,112,113,1,3,2,2,2,2,2,0,120,119,118,114,0,1,2,3,3,3,3,0,120,118,115,114,1,3,2,3,3,3,3,0,120,117,119,112,0,1,2,4,4,4,4,0,120,119,114,112,1,3,2,4,4,4,4,0,120,113,115,116,0,1,2,5,5,5,5,0,120,115,118,116,1,3,2,5,5,5,5,0,120,120,122,121,0,1,2,0,0,0,0,0,120,122,123,121,1,3,2,0,0,0,0,0,120,124,126,125,0,1,2,1,1,1,1,0,120,126,127,125,1,3,2,1,1,1,1,0,120,124,125,121,0,1,2,2,2,2,2,0,120,125,120,121,1,3,2,2,2,2,2,0,120,127,126,122,0,1,2,3,3,3,3,0,120,126,123,122,1,3,2,3,3,3,3,0,120,125,127,120,0,1,2,4,4,4,4,0,120,127,122,120,1,3,2,4,4,4,4,0,120,121,123,124,0,1,2,5,5,5,5,0,120,123,126,124,1,3,2,5,5,5,5,0,120,128,130,129,0,1,2,0,0,0,0,0,120,130,131,129,1,3,2,0,0,0,0,0,120,132,134,133,0,1,2,1,1,1,1,0,120,134,135,133,1,3,2,1,1,1,1,0,120,132,133,129,0,1,2,2,2,2,2,0,120,133,128,129,1,3,2,2,2,2,2,0,120,135,134,130,0,1,2,3,3,3,3,0,120,134,131,130,1,3,2,3,3,3,3,0,120,133,135,128,0,1,2,4,4,4,4,0,120,135,130,128,1,3,2,4,4,4,4,0,120,129,131,132,0,1,2,5,5,5,5,0,120,131,134,132,1,3,2,5,5,5,5,0,120,136,138,137,0,1,2,0,0,0,0,0,120,138,139,137,1,3,2,0,0,0,0,0,120,140,142,141,0,1,2,1,1,1,1,0,120,142,143,141,1,3,2,1,1,1,1,0,120,140,141,137,0,1,2,2,2,2,2,0,120,141,136,137,1,3,2,2,2,2,2,0,120,143,142,138,0,1,2,3,3,3,3,0,120,142,139,138,1,3,2,3,3,3,3,0,120,141,143,136,0,1,2,4,4,4,4,0,120,143,138,136,1,3,2,4,4,4,4,0,120,137,139,140,0,1,2,5,5,5,5,0,120,139,142,140,1,3,2,5,5,5,5,0,120,144,146,145,0,1,2,0,0,0,0,0,120,146,147,145,1,3,2,0,0,0,0,0,120,148,150,149,0,1,2,1,1,1,1,0,120,150,151,149,1,3,2,1,1,1,1,0,120,148,149,145,0,1,2,2,2,2,2,0,120,149,144,145,1,3,2,2,2,2,2,0,120,151,150,146,0,1,2,3,3,3,3,0,120,150,147,146,1,3,2,3,3,3,3,0,120,149,151,144,0,1,2,4,4,4,4,0,120,151,146,144,1,3,2,4,4,4,4,0,120,145,147,148,0,1,2,5,5,5,5,0,120,147,150,148,1,3,2,5,5,5,5,0,120,152,154,153,0,1,2,0,0,0,0,1,120,154,155,153,1,3,2,0,0,0,0,1,120,156,158,157,0,1,2,1,1,1,1,1,120,158,159,157,1,3,2,1,1,1,1,1,120,156,157,153,0,1,2,2,2,2,2,1,120,157,152,153,1,3,2,2,2,2,2,1,120,159,158,154,0,1,2,3,3,3,3,1,120,158,155,154,1,3,2,3,3,3,3,1,120,157,159,152,0,1,2,4,4,4,4,1,120,159,154,152,1,3,2,4,4,4,4,1,120,153,155,156,0,1,2,5,5,5,5,1,120,155,158,156,1,3,2,5,5,5,5,1,120,160,162,161,0,1,2,0,0,0,0,0,120,162,163,161,1,3,2,0,0,0,0,0,120,164,166,165,0,1,2,1,1,1,1,0,120,166,167,165,1,3,2,1,1,1,1,0,120,164,165,161,0,1,2,2,2,2,2,0,120,165,160,161,1,3,2,2,2,2,2,0,120,167,166,162,0,1,2,3,3,3,3,0,120,166,163,162,1,3,2,3,3,3,3,0,120,165,167,160,0,1,2,4,4,4,4,0,120,167,162,160,1,3,2,4,4,4,4,0,120,161,163,164,0,1,2,5,5,5,5,0,120,163,166,164,1,3,2,5,5,5,5,0,120,168,170,169,0,1,2,0,0,0,0,0,120,170,171,169,1,3,2,0,0,0,0,0,120,172,174,173,0,1,2,1,1,1,1,0,120,174,175,173,1,3,2,1,1,1,1,0,120,172,173,169,0,1,2,2,2,2,2,0,120,173,168,169,1,3,2,2,2,2,2,0,120,175,174,170,0,1,2,3,3,3,3,0,120,174,171,170,1,3,2,3,3,3,3,0,120,173,175,168,0,1,2,4,4,4,4,0,120,175,170,168,1,3,2,4,4,4,4,0,120,169,171,172,0,1,2,5,5,5,5,0,120,171,174,172,1,3,2,5,5,5,5,0,120,176,178,177,0,1,2,0,0,0,0,0,120,178,179,177,1,3,2,0,0,0,0,0,120,180,182,181,0,1,2,1,1,1,1,0,120,182,183,181,1,3,2,1,1,1,1,0,120,180,181,177,0,1,2,2,2,2,2,0,120,181,176,177,1,3,2,2,2,2,2,0,120,183,182,178,0,1,2,3,3,3,3,0,120,182,179,178,1,3,2,3,3,3,3,0,120,181,183,176,0,1,2,4,4,4,4,0,120,183,178,176,1,3,2,4,4,4,4,0,120,177,179,180,0,1,2,5,5,5,5,0,120,179,182,180,1,3,2,5,5,5,5,0,120,184,186,185,0,1,2,0,0,0,0,0,120,186,187,185,1,3,2,0,0,0,0,0,120,188,190,189,0,1,2,1,1,1,1,0,120,190,191,189,1,3,2,1,1,1,1,0,120,188,189,185,0,1,2,2,2,2,2,0,120,189,184,185,1,3,2,2,2,2,2,0,120,191,190,186,0,1,2,3,3,3,3,0,120,190,187,186,1,3,2,3,3,3,3,0,120,189,191,184,0,1,2,4,4,4,4,0,120,191,186,184,1,3,2,4,4,4,4,0,120,185,187,188,0,1,2,5,5,5,5,0,120,187,190,188,1,3,2,5,5,5,5,0,120,192,194,193,0,1,2,0,0,0,0,0,120,194,195,193,1,3,2,0,0,0,0,0,120,196,198,197,0,1,2,1,1,1,1,0,120,198,199,197,1,3,2,1,1,1,1,0,120,196,197,193,0,1,2,2,2,2,2,0,120,197,192,193,1,3,2,2,2,2,2,0,120,199,198,194,0,1,2,3,3,3,3,0,120,198,195,194,1,3,2,3,3,3,3,0,120,197,199,192,0,1,2,4,4,4,4,0,120,199,194,192,1,3,2,4,4,4,4,0,120,193,195,196,0,1,2,5,5,5,5,0,120,195,198,196,1,3,2,5,5,5,5,0,120,200,202,201,0,1,2,0,0,0,0,0,120,202,203,201,1,3,2,0,0,0,0,0,120,204,206,205,0,1,2,1,1,1,1,0,120,206,207,205,1,3,2,1,1,1,1,0,120,204,205,201,0,1,2,2,2,2,2,0,120,205,200,201,1,3,2,2,2,2,2,0,120,207,206,202,0,1,2,3,3,3,3,0,120,206,203,202,1,3,2,3,3,3,3,0,120,205,207,200,0,1,2,4,4,4,4,0,120,207,202,200,1,3,2,4,4,4,4,0,120,201,203,204,0,1,2,5,5,5,5,0,120,203,206,204,1,3,2,5,5,5,5,0,120,208,210,209,0,1,2,0,0,0,0,0,120,210,211,209,1,3,2,0,0,0,0,0,120,212,214,213,0,1,2,1,1,1,1,0,120,214,215,213,1,3,2,1,1,1,1,0,120,212,213,209,0,1,2,2,2,2,2,0,120,213,208,209,1,3,2,2,2,2,2,0,120,215,214,210,0,1,2,3,3,3,3,0,120,214,211,210,1,3,2,3,3,3,3,0,120,213,215,208,0,1,2,4,4,4,4,0,120,215,210,208,1,3,2,4,4,4,4,0,120,209,211,212,0,1,2,5,5,5,5,0,120,211,214,212,1,3,2,5,5,5,5,0,120,216,218,217,0,1,2,0,0,0,0,0,120,218,219,217,1,3,2,0,0,0,0,0,120,220,222,221,0,1,2,1,1,1,1,0,120,222,223,221,1,3,2,1,1,1,1,0,120,220,221,217,0,1,2,2,2,2,2,0,120,221,216,217,1,3,2,2,2,2,2,0,120,223,222,218,0,1,2,3,3,3,3,0,120,222,219,218,1,3,2,3,3,3,3,0,120,221,223,216,0,1,2,4,4,4,4,0,120,223,218,216,1,3,2,4,4,4,4,0,120,217,219,220,0,1,2,5,5,5,5,0,120,219,222,220,1,3,2,5,5,5,5,0,120,224,226,225,0,1,2,0,0,0,0,0,120,226,227,225,1,3,2,0,0,0,0,0,120,228,230,229,0,1,2,1,1,1,1,0,120,230,231,229,1,3,2,1,1,1,1,0,120,228,229,225,0,1,2,2,2,2,2,0,120,229,224,225,1,3,2,2,2,2,2,0,120,231,230,226,0,1,2,3,3,3,3,0,120,230,227,226,1,3,2,3,3,3,3,0,120,229,231,224,0,1,2,4,4,4,4,0,120,231,226,224,1,3,2,4,4,4,4,0,120,225,227,228,0,1,2,5,5,5,5,0,120,227,230,228,1,3,2,5,5,5,5,0,120,232,234,233,0,1,2,0,0,0,0,0,120,234,235,233,1,3,2,0,0,0,0,0,120,236,238,237,0,1,2,1,1,1,1,0,120,238,239,237,1,3,2,1,1,1,1,0,120,236,237,233,0,1,2,2,2,2,2,0,120,237,232,233,1,3,2,2,2,2,2,0,120,239,238,234,0,1,2,3,3,3,3,0,120,238,235,234,1,3,2,3,3,3,3,0,120,237,239,232,0,1,2,4,4,4,4,0,120,239,234,232,1,3,2,4,4,4,4,0,120,233,235,236,0,1,2,5,5,5,5,0,120,235,238,236,1,3,2,5,5,5,5,0,120,240,242,241,0,1,2,0,0,0,0,0,120,242,243,241,1,3,2,0,0,0,0,0,120,244,246,245,0,1,2,1,1,1,1,0,120,246,247,245,1,3,2,1,1,1,1,0,120,244,245,241,0,1,2,2,2,2,2,0,120,245,240,241,1,3,2,2,2,2,2,0,120,247,246,242,0,1,2,3,3,3,3,0,120,246,243,242,1,3,2,3,3,3,3,0,120,245,247,240,0,1,2,4,4,4,4,0,120,247,242,240,1,3,2,4,4,4,4,0,120,241,243,244,0,1,2,5,5,5,5,0,120,243,246,244,1,3,2,5,5,5,5,0,120,248,250,249,0,1,2,0,0,0,0,1,120,250,251,249,1,3,2,0,0,0,0,1,120,252,254,253,0,1,2,1,1,1,1,1,120,254,255,253,1,3,2,1,1,1,1,1,120,252,253,249,0,1,2,2,2,2,2,1,120,253,248,249,1,3,2,2,2,2,2,1,120,255,254,250,0,1,2,3,3,3,3,1,120,254,251,250,1,3,2,3,3,3,3,1,120,253,255,248,0,1,2,4,4,4,4,1,120,255,250,248,1,3,2,4,4,4,4,1,120,249,251,252,0,1,2,5,5,5,5,1,120,251,254,252,1,3,2,5,5,5,5,1,120,256,258,257,0,1,2,0,0,0,0,1,120,258,259,257,1,3,2,0,0,0,0,1,120,260,262,261,0,1,2,1,1,1,1,1,120,262,263,261,1,3,2,1,1,1,1,1,120,260,261,257,0,1,2,2,2,2,2,1,120,261,256,257,1,3,2,2,2,2,2,1,120,263,262,258,0,1,2,3,3,3,3,1,120,262,259,258,1,3,2,3,3,3,3,1,120,261,263,256,0,1,2,4,4,4,4,1,120,263,258,256,1,3,2,4,4,4,4,1,120,257,259,260,0,1,2,5,5,5,5,1,120,259,262,260,1,3,2,5,5,5,5,1,120,264,266,265,0,1,2,0,0,0,0,1,120,266,267,265,1,3,2,0,0,0,0,1,120,268,270,269,0,1,2,1,1,1,1,1,120,270,271,269,1,3,2,1,1,1,1,1,120,268,269,265,0,1,2,2,2,2,2,1,120,269,264,265,1,3,2,2,2,2,2,1,120,271,270,266,0,1,2,3,3,3,3,1,120,270,267,266,1,3,2,3,3,3,3,1,120,269,271,264,0,1,2,4,4,4,4,1,120,271,266,264,1,3,2,4,4,4,4,1,120,265,267,268,0,1,2,5,5,5,5,1,120,267,270,268,1,3,2,5,5,5,5,1,120,272,274,273,0,1,2,0,0,0,0,1,120,274,275,273,1,3,2,0,0,0,0,1,120,276,278,277,0,1,2,1,1,1,1,1,120,278,279,277,1,3,2,1,1,1,1,1,120,276,277,273,0,1,2,2,2,2,2,1,120,277,272,273,1,3,2,2,2,2,2,1,120,279,278,274,0,1,2,3,3,3,3,1,120,278,275,274,1,3,2,3,3,3,3,1,120,277,279,272,0,1,2,4,4,4,4,1,120,279,274,272,1,3,2,4,4,4,4,1,120,273,275,276,0,1,2,5,5,5,5,1,120,275,278,276,1,3,2,5,5,5,5,1,120,280,282,281,0,1,2,0,0,0,0,1,120,282,283,281,1,3,2,0,0,0,0,1,120,284,286,285,0,1,2,1,1,1,1,1,120,286,287,285,1,3,2,1,1,1,1,1,120,284,285,281,0,1,2,2,2,2,2,1,120,285,280,281,1,3,2,2,2,2,2,1,120,287,286,282,0,1,2,3,3,3,3,1,120,286,283,282,1,3,2,3,3,3,3,1,120,285,287,280,0,1,2,4,4,4,4,1,120,287,282,280,1,3,2,4,4,4,4,1,120,281,283,284,0,1,2,5,5,5,5,1,120,283,286,284,1,3,2,5,5,5,5,1,120,288,290,289,0,1,2,0,0,0,0,1,120,290,291,289,1,3,2,0,0,0,0,1,120,292,294,293,0,1,2,1,1,1,1,1,120,294,295,293,1,3,2,1,1,1,1,1,120,292,293,289,0,1,2,2,2,2,2,1,120,293,288,289,1,3,2,2,2,2,2,1,120,295,294,290,0,1,2,3,3,3,3,1,120,294,291,290,1,3,2,3,3,3,3,1,120,293,295,288,0,1,2,4,4,4,4,1,120,295,290,288,1,3,2,4,4,4,4,1,120,289,291,292,0,1,2,5,5,5,5,1,120,291,294,292,1,3,2,5,5,5,5,1,120,296,298,297,0,1,2,0,0,0,0,1,120,298,299,297,1,3,2,0,0,0,0,1,120,300,302,301,0,1,2,1,1,1,1,1,120,302,303,301,1,3,2,1,1,1,1,1,120,300,301,297,0,1,2,2,2,2,2,1,120,301,296,297,1,3,2,2,2,2,2,1,120,303,302,298,0,1,2,3,3,3,3,1,120,302,299,298,1,3,2,3,3,3,3,1,120,301,303,296,0,1,2,4,4,4,4,1,120,303,298,296,1,3,2,4,4,4,4,1,120,297,299,300,0,1,2,5,5,5,5,1,120,299,302,300,1,3,2,5,5,5,5,1,120,304,306,305,0,1,2,0,0,0,0,1,120,306,307,305,1,3,2,0,0,0,0,1,120,308,310,309,0,1,2,1,1,1,1,1,120,310,311,309,1,3,2,1,1,1,1,1,120,308,309,305,0,1,2,2,2,2,2,1,120,309,304,305,1,3,2,2,2,2,2,1,120,311,310,306,0,1,2,3,3,3,3,1,120,310,307,306,1,3,2,3,3,3,3,1,120,309,311,304,0,1,2,4,4,4,4,1,120,311,306,304,1,3,2,4,4,4,4,1,120,305,307,308,0,1,2,5,5,5,5,1,120,307,310,308,1,3,2,5,5,5,5,1,120,312,314,313,0,1,2,0,0,0,0,1,120,314,315,313,1,3,2,0,0,0,0,1,120,316,318,317,0,1,2,1,1,1,1,1,120,318,319,317,1,3,2,1,1,1,1,1,120,316,317,313,0,1,2,2,2,2,2,1,120,317,312,313,1,3,2,2,2,2,2,1,120,319,318,314,0,1,2,3,3,3,3,1,120,318,315,314,1,3,2,3,3,3,3,1,120,317,319,312,0,1,2,4,4,4,4,1,120,319,314,312,1,3,2,4,4,4,4,1,120,313,315,316,0,1,2,5,5,5,5,1,120,315,318,316,1,3,2,5,5,5,5,1,120,320,322,321,0,1,2,0,0,0,0,1,120,322,323,321,1,3,2,0,0,0,0,1,120,324,326,325,0,1,2,1,1,1,1,1,120,326,327,325,1,3,2,1,1,1,1,1,120,324,325,321,0,1,2,2,2,2,2,1,120,325,320,321,1,3,2,2,2,2,2,1,120,327,326,322,0,1,2,3,3,3,3,1,120,326,323,322,1,3,2,3,3,3,3,1,120,325,327,320,0,1,2,4,4,4,4,1,120,327,322,320,1,3,2,4,4,4,4,1,120,321,323,324,0,1,2,5,5,5,5,1,120,323,326,324,1,3,2,5,5,5,5,1,120,328,330,329,0,1,2,0,0,0,0,1,120,330,331,329,1,3,2,0,0,0,0,1,120,332,334,333,0,1,2,1,1,1,1,1,120,334,335,333,1,3,2,1,1,1,1,1,120,332,333,329,0,1,2,2,2,2,2,1,120,333,328,329,1,3,2,2,2,2,2,1,120,335,334,330,0,1,2,3,3,3,3,1,120,334,331,330,1,3,2,3,3,3,3,1,120,333,335,328,0,1,2,4,4,4,4,1,120,335,330,328,1,3,2,4,4,4,4,1,120,329,331,332,0,1,2,5,5,5,5,1,120,331,334,332,1,3,2,5,5,5,5,1,120,336,338,337,0,1,2,0,0,0,0,1,120,338,339,337,1,3,2,0,0,0,0,1,120,340,342,341,0,1,2,1,1,1,1,1,120,342,343,341,1,3,2,1,1,1,1,1,120,340,341,337,0,1,2,2,2,2,2,1,120,341,336,337,1,3,2,2,2,2,2,1,120,343,342,338,0,1,2,3,3,3,3,1,120,342,339,338,1,3,2,3,3,3,3,1,120,341,343,336,0,1,2,4,4,4,4,1,120,343,338,336,1,3,2,4,4,4,4,1,120,337,339,340,0,1,2,5,5,5,5,1,120,339,342,340,1,3,2,5,5,5,5,1,120,344,346,345,0,1,2,0,0,0,0,1,120,346,347,345,1,3,2,0,0,0,0,1,120,348,350,349,0,1,2,1,1,1,1,1,120,350,351,349,1,3,2,1,1,1,1,1,120,348,349,345,0,1,2,2,2,2,2,1,120,349,344,345,1,3,2,2,2,2,2,1,120,351,350,346,0,1,2,3,3,3,3,1,120,350,347,346,1,3,2,3,3,3,3,1,120,349,351,344,0,1,2,4,4,4,4,1,120,351,346,344,1,3,2,4,4,4,4,1,120,345,347,348,0,1,2,5,5,5,5,1,120,347,350,348,1,3,2,5,5,5,5,1,120,352,354,353,0,1,2,0,0,0,0,0,120,354,355,353,1,3,2,0,0,0,0,0,120,356,358,357,0,1,2,1,1,1,1,0,120,358,359,357,1,3,2,1,1,1,1,0,120,356,357,353,0,1,2,2,2,2,2,0,120,357,352,353,1,3,2,2,2,2,2,0,120,359,358,354,0,1,2,3,3,3,3,0,120,358,355,354,1,3,2,3,3,3,3,0,120,357,359,352,0,1,2,4,4,4,4,0,120,359,354,352,1,3,2,4,4,4,4,0,120,353,355,356,0,1,2,5,5,5,5,0,120,355,358,356,1,3,2,5,5,5,5,0,120,360,362,361,0,1,2,0,0,0,0,0,120,362,363,361,1,3,2,0,0,0,0,0,120,364,366,365,0,1,2,1,1,1,1,0,120,366,367,365,1,3,2,1,1,1,1,0,120,364,365,361,0,1,2,2,2,2,2,0,120,365,360,361,1,3,2,2,2,2,2,0,120,367,366,362,0,1,2,3,3,3,3,0,120,366,363,362,1,3,2,3,3,3,3,0,120,365,367,360,0,1,2,4,4,4,4,0,120,367,362,360,1,3,2,4,4,4,4,0,120,361,363,364,0,1,2,5,5,5,5,0,120,363,366,364,1,3,2,5,5,5,5,0,120,368,370,369,0,1,2,0,0,0,0,0,120,370,371,369,1,3,2,0,0,0,0,0,120,372,374,373,0,1,2,1,1,1,1,0,120,374,375,373,1,3,2,1,1,1,1,0,120,372,373,369,0,1,2,2,2,2,2,0,120,373,368,369,1,3,2,2,2,2,2,0,120,375,374,370,0,1,2,3,3,3,3,0,120,374,371,370,1,3,2,3,3,3,3,0,120,373,375,368,0,1,2,4,4,4,4,0,120,375,370,368,1,3,2,4,4,4,4,0,120,369,371,372,0,1,2,5,5,5,5,0,120,371,374,372,1,3,2,5,5,5,5,0,120,376,378,377,0,1,2,0,0,0,0,0,120,378,379,377,1,3,2,0,0,0,0,0,120,380,382,381,0,1,2,1,1,1,1,0,120,382,383,381,1,3,2,1,1,1,1,0,120,380,381,377,0,1,2,2,2,2,2,0,120,381,376,377,1,3,2,2,2,2,2,0,120,383,382,378,0,1,2,3,3,3,3,0,120,382,379,378,1,3,2,3,3,3,3,0,120,381,383,376,0,1,2,4,4,4,4,0,120,383,378,376,1,3,2,4,4,4,4,0,120,377,379,380,0,1,2,5,5,5,5,0,120,379,382,380,1,3,2,5,5,5,5,0,120,384,386,385,0,1,2,0,0,0,0,0,120,386,387,385,1,3,2,0,0,0,0,0,120,388,390,389,0,1,2,1,1,1,1,0,120,390,391,389,1,3,2,1,1,1,1,0,120,388,389,385,0,1,2,2,2,2,2,0,120,389,384,385,1,3,2,2,2,2,2,0,120,391,390,386,0,1,2,3,3,3,3,0,120,390,387,386,1,3,2,3,3,3,3,0,120,389,391,384,0,1,2,4,4,4,4,0,120,391,386,384,1,3,2,4,4,4,4,0,120,385,387,388,0,1,2,5,5,5,5,0,120,387,390,388,1,3,2,5,5,5,5,0,120,392,394,393,0,1,2,0,0,0,0,1,120,394,395,393,1,3,2,0,0,0,0,1,120,396,398,397,0,1,2,1,1,1,1,1,120,398,399,397,1,3,2,1,1,1,1,1,120,396,397,393,0,1,2,2,2,2,2,1,120,397,392,393,1,3,2,2,2,2,2,1,120,399,398,394,0,1,2,3,3,3,3,1,120,398,395,394,1,3,2,3,3,3,3,1,120,397,399,392,0,1,2,4,4,4,4,1,120,399,394,392,1,3,2,4,4,4,4,1,120,393,395,396,0,1,2,5,5,5,5,1,120,395,398,396,1,3,2,5,5,5,5,1,120,400,402,401,0,1,2,0,0,0,0,1,120,402,403,401,1,3,2,0,0,0,0,1,120,404,406,405,0,1,2,1,1,1,1,1,120,406,407,405,1,3,2,1,1,1,1,1,120,404,405,401,0,1,2,2,2,2,2,1,120,405,400,401,1,3,2,2,2,2,2,1,120,407,406,402,0,1,2,3,3,3,3,1,120,406,403,402,1,3,2,3,3,3,3,1,120,405,407,400,0,1,2,4,4,4,4,1,120,407,402,400,1,3,2,4,4,4,4,1,120,401,403,404,0,1,2,5,5,5,5,1,120,403,406,404,1,3,2,5,5,5,5,1,120,408,410,409,0,1,2,0,0,0,0,1,120,410,411,409,1,3,2,0,0,0,0,1,120,412,414,413,0,1,2,1,1,1,1,1,120,414,415,413,1,3,2,1,1,1,1,1,120,412,413,409,0,1,2,2,2,2,2,1,120,413,408,409,1,3,2,2,2,2,2,1,120,415,414,410,0,1,2,3,3,3,3,1,120,414,411,410,1,3,2,3,3,3,3,1,120,413,415,408,0,1,2,4,4,4,4,1,120,415,410,408,1,3,2,4,4,4,4,1,120,409,411,412,0,1,2,5,5,5,5,1,120,411,414,412,1,3,2,5,5,5,5,1,120,416,418,417,0,1,2,0,0,0,0,1,120,418,419,417,1,3,2,0,0,0,0,1,120,420,422,421,0,1,2,1,1,1,1,1,120,422,423,421,1,3,2,1,1,1,1,1,120,420,421,417,0,1,2,2,2,2,2,1,120,421,416,417,1,3,2,2,2,2,2,1,120,423,422,418,0,1,2,3,3,3,3,1,120,422,419,418,1,3,2,3,3,3,3,1,120,421,423,416,0,1,2,4,4,4,4,1,120,423,418,416,1,3,2,4,4,4,4,1,120,417,419,420,0,1,2,5,5,5,5,1,120,419,422,420,1,3,2,5,5,5,5,1,120,424,426,425,0,1,2,0,0,0,0,0,120,426,427,425,1,3,2,0,0,0,0,0,120,428,430,429,0,1,2,1,1,1,1,0,120,430,431,429,1,3,2,1,1,1,1,0,120,428,429,425,0,1,2,2,2,2,2,0,120,429,424,425,1,3,2,2,2,2,2,0,120,431,430,426,0,1,2,3,3,3,3,0,120,430,427,426,1,3,2,3,3,3,3,0,120,429,431,424,0,1,2,4,4,4,4,0,120,431,426,424,1,3,2,4,4,4,4,0,120,425,427,428,0,1,2,5,5,5,5,0,120,427,430,428,1,3,2,5,5,5,5,0,120,432,434,433,0,1,2,0,0,0,0,1,120,434,435,433,1,3,2,0,0,0,0,1,120,436,438,437,0,1,2,1,1,1,1,1,120,438,439,437,1,3,2,1,1,1,1,1,120,436,437,433,0,1,2,2,2,2,2,1,120,437,432,433,1,3,2,2,2,2,2,1,120,439,438,434,0,1,2,3,3,3,3,1,120,438,435,434,1,3,2,3,3,3,3,1,120,437,439,432,0,1,2,4,4,4,4,1,120,439,434,432,1,3,2,4,4,4,4,1,120,433,435,436,0,1,2,5,5,5,5,1,120,435,438,436,1,3,2,5,5,5,5,1,120,440,442,441,0,1,2,0,0,0,0,0,120,442,443,441,1,3,2,0,0,0,0,0,120,444,446,445,0,1,2,1,1,1,1,0,120,446,447,445,1,3,2,1,1,1,1,0,120,444,445,441,0,1,2,2,2,2,2,0,120,445,440,441,1,3,2,2,2,2,2,0,120,447,446,442,0,1,2,3,3,3,3,0,120,446,443,442,1,3,2,3,3,3,3,0,120,445,447,440,0,1,2,4,4,4,4,0,120,447,442,440,1,3,2,4,4,4,4,0,120,441,443,444,0,1,2,5,5,5,5,0,120,443,446,444,1,3,2,5,5,5,5,0,120,448,450,449,0,1,2,0,0,0,0,0,120,450,451,449,1,3,2,0,0,0,0,0,120,452,454,453,0,1,2,1,1,1,1,0,120,454,455,453,1,3,2,1,1,1,1,0,120,452,453,449,0,1,2,2,2,2,2,0,120,453,448,449,1,3,2,2,2,2,2,0,120,455,454,450,0,1,2,3,3,3,3,0,120,454,451,450,1,3,2,3,3,3,3,0,120,453,455,448,0,1,2,4,4,4,4,0,120,455,450,448,1,3,2,4,4,4,4,0,120,449,451,452,0,1,2,5,5,5,5,0,120,451,454,452,1,3,2,5,5,5,5,0,120,456,458,457,0,1,2,0,0,0,0,0,120,458,459,457,1,3,2,0,0,0,0,0,120,460,462,461,0,1,2,1,1,1,1,0,120,462,463,461,1,3,2,1,1,1,1,0,120,460,461,457,0,1,2,2,2,2,2,0,120,461,456,457,1,3,2,2,2,2,2,0,120,463,462,458,0,1,2,3,3,3,3,0,120,462,459,458,1,3,2,3,3,3,3,0,120,461,463,456,0,1,2,4,4,4,4,0,120,463,458,456,1,3,2,4,4,4,4,0,120,457,459,460,0,1,2,5,5,5,5,0,120,459,462,460,1,3,2,5,5,5,5,0,120,464,466,465,0,1,2,0,0,0,0,0,120,466,467,465,1,3,2,0,0,0,0,0,120,468,470,469,0,1,2,1,1,1,1,0,120,470,471,469,1,3,2,1,1,1,1,0,120,468,469,465,0,1,2,2,2,2,2,0,120,469,464,465,1,3,2,2,2,2,2,0,120,471,470,466,0,1,2,3,3,3,3,0,120,470,467,466,1,3,2,3,3,3,3,0,120,469,471,464,0,1,2,4,4,4,4,0,120,471,466,464,1,3,2,4,4,4,4,0,120,465,467,468,0,1,2,5,5,5,5,0,120,467,470,468,1,3,2,5,5,5,5,0,120,472,474,473,0,1,2,0,0,0,0,0,120,474,475,473,1,3,2,0,0,0,0,0,120,476,478,477,0,1,2,1,1,1,1,0,120,478,479,477,1,3,2,1,1,1,1,0,120,476,477,473,0,1,2,2,2,2,2,0,120,477,472,473,1,3,2,2,2,2,2,0,120,479,478,474,0,1,2,3,3,3,3,0,120,478,475,474,1,3,2,3,3,3,3,0,120,477,479,472,0,1,2,4,4,4,4,0,120,479,474,472,1,3,2,4,4,4,4,0,120,473,475,476,0,1,2,5,5,5,5,0,120,475,478,476,1,3,2,5,5,5,5,0,120,480,482,481,0,1,2,0,0,0,0,0,120,482,483,481,1,3,2,0,0,0,0,0,120,484,486,485,0,1,2,1,1,1,1,0,120,486,487,485,1,3,2,1,1,1,1,0,120,484,485,481,0,1,2,2,2,2,2,0,120,485,480,481,1,3,2,2,2,2,2,0,120,487,486,482,0,1,2,3,3,3,3,0,120,486,483,482,1,3,2,3,3,3,3,0,120,485,487,480,0,1,2,4,4,4,4,0,120,487,482,480,1,3,2,4,4,4,4,0,120,481,483,484,0,1,2,5,5,5,5,0,120,483,486,484,1,3,2,5,5,5,5,0,120,488,490,489,0,1,2,0,0,0,0,0,120,490,491,489,1,3,2,0,0,0,0,0,120,492,494,493,0,1,2,1,1,1,1,0,120,494,495,493,1,3,2,1,1,1,1,0,120,492,493,489,0,1,2,2,2,2,2,0,120,493,488,489,1,3,2,2,2,2,2,0,120,495,494,490,0,1,2,3,3,3,3,0,120,494,491,490,1,3,2,3,3,3,3,0,120,493,495,488,0,1,2,4,4,4,4,0,120,495,490,488,1,3,2,4,4,4,4,0,120,489,491,492,0,1,2,5,5,5,5,0,120,491,494,492,1,3,2,5,5,5,5,0,120,496,498,497,0,1,2,0,0,0,0,0,120,498,499,497,1,3,2,0,0,0,0,0,120,500,502,501,0,1,2,1,1,1,1,0,120,502,503,501,1,3,2,1,1,1,1,0,120,500,501,497,0,1,2,2,2,2,2,0,120,501,496,497,1,3,2,2,2,2,2,0,120,503,502,498,0,1,2,3,3,3,3,0,120,502,499,498,1,3,2,3,3,3,3,0,120,501,503,496,0,1,2,4,4,4,4,0,120,503,498,496,1,3,2,4,4,4,4,0,120,497,499,500,0,1,2,5,5,5,5,0,120,499,502,500,1,3,2,5,5,5,5,0,120,504,506,505,0,1,2,0,0,0,0,0,120,506,507,505,1,3,2,0,0,0,0,0,120,508,510,509,0,1,2,1,1,1,1,0,120,510,511,509,1,3,2,1,1,1,1,0,120,508,509,505,0,1,2,2,2,2,2,0,120,509,504,505,1,3,2,2,2,2,2,0,120,511,510,506,0,1,2,3,3,3,3,0,120,510,507,506,1,3,2,3,3,3,3,0,120,509,511,504,0,1,2,4,4,4,4,0,120,511,506,504,1,3,2,4,4,4,4,0,120,505,507,508,0,1,2,5,5,5,5,0,120,507,510,508,1,3,2,5,5,5,5,0,120,512,514,513,0,1,2,0,0,0,0,1,120,514,515,513,1,3,2,0,0,0,0,1,120,516,518,517,0,1,2,1,1,1,1,1,120,518,519,517,1,3,2,1,1,1,1,1,120,516,517,513,0,1,2,2,2,2,2,1,120,517,512,513,1,3,2,2,2,2,2,1,120,519,518,514,0,1,2,3,3,3,3,1,120,518,515,514,1,3,2,3,3,3,3,1,120,517,519,512,0,1,2,4,4,4,4,1,120,519,514,512,1,3,2,4,4,4,4,1,120,513,515,516,0,1,2,5,5,5,5,1,120,515,518,516,1,3,2,5,5,5,5,1,120,520,522,521,0,1,2,0,0,0,0,1,120,522,523,521,1,3,2,0,0,0,0,1,120,524,526,525,0,1,2,1,1,1,1,1,120,526,527,525,1,3,2,1,1,1,1,1,120,524,525,521,0,1,2,2,2,2,2,1,120,525,520,521,1,3,2,2,2,2,2,1,120,527,526,522,0,1,2,3,3,3,3,1,120,526,523,522,1,3,2,3,3,3,3,1,120,525,527,520,0,1,2,4,4,4,4,1,120,527,522,520,1,3,2,4,4,4,4,1,120,521,523,524,0,1,2,5,5,5,5,1,120,523,526,524,1,3,2,5,5,5,5,1,120,528,530,529,0,1,2,0,0,0,0,1,120,530,531,529,1,3,2,0,0,0,0,1,120,532,534,533,0,1,2,1,1,1,1,1,120,534,535,533,1,3,2,1,1,1,1,1,120,532,533,529,0,1,2,2,2,2,2,1,120,533,528,529,1,3,2,2,2,2,2,1,120,535,534,530,0,1,2,3,3,3,3,1,120,534,531,530,1,3,2,3,3,3,3,1,120,533,535,528,0,1,2,4,4,4,4,1,120,535,530,528,1,3,2,4,4,4,4,1,120,529,531,532,0,1,2,5,5,5,5,1,120,531,534,532,1,3,2,5,5,5,5,1,120,536,538,537,0,1,2,0,0,0,0,0,120,538,539,537,1,3,2,0,0,0,0,0,120,540,542,541,0,1,2,1,1,1,1,0,120,542,543,541,1,3,2,1,1,1,1,0,120,540,541,537,0,1,2,2,2,2,2,0,120,541,536,537,1,3,2,2,2,2,2,0,120,543,542,538,0,1,2,3,3,3,3,0,120,542,539,538,1,3,2,3,3,3,3,0,120,541,543,536,0,1,2,4,4,4,4,0,120,543,538,536,1,3,2,4,4,4,4,0,120,537,539,540,0,1,2,5,5,5,5,0,120,539,542,540,1,3,2,5,5,5,5,0,120,544,546,545,0,1,2,0,0,0,0,0,120,546,547,545,1,3,2,0,0,0,0,0,120,548,550,549,0,1,2,1,1,1,1,0,120,550,551,549,1,3,2,1,1,1,1,0,120,548,549,545,0,1,2,2,2,2,2,0,120,549,544,545,1,3,2,2,2,2,2,0,120,551,550,546,0,1,2,3,3,3,3,0,120,550,547,546,1,3,2,3,3,3,3,0,120,549,551,544,0,1,2,4,4,4,4,0,120,551,546,544,1,3,2,4,4,4,4,0,120,545,547,548,0,1,2,5,5,5,5,0,120,547,550,548,1,3,2,5,5,5,5,0,120,552,554,553,0,1,2,0,0,0,0,0,120,554,555,553,1,3,2,0,0,0,0,0,120,556,558,557,0,1,2,1,1,1,1,0,120,558,559,557,1,3,2,1,1,1,1,0,120,556,557,553,0,1,2,2,2,2,2,0,120,557,552,553,1,3,2,2,2,2,2,0,120,559,558,554,0,1,2,3,3,3,3,0,120,558,555,554,1,3,2,3,3,3,3,0,120,557,559,552,0,1,2,4,4,4,4,0,120,559,554,552,1,3,2,4,4,4,4,0,120,553,555,556,0,1,2,5,5,5,5,0,120,555,558,556,1,3,2,5,5,5,5,0,120,560,562,561,0,1,2,0,0,0,0,1,120,562,563,561,1,3,2,0,0,0,0,1,120,564,566,565,0,1,2,1,1,1,1,1,120,566,567,565,1,3,2,1,1,1,1,1,120,564,565,561,0,1,2,2,2,2,2,1,120,565,560,561,1,3,2,2,2,2,2,1,120,567,566,562,0,1,2,3,3,3,3,1,120,566,563,562,1,3,2,3,3,3,3,1,120,565,567,560,0,1,2,4,4,4,4,1,120,567,562,560,1,3,2,4,4,4,4,1,120,561,563,564,0,1,2,5,5,5,5,1,120,563,566,564,1,3,2,5,5,5,5,1,120,568,570,569,0,1,2,0,0,0,0,1,120,570,571,569,1,3,2,0,0,0,0,1,120,572,574,573,0,1,2,1,1,1,1,1,120,574,575,573,1,3,2,1,1,1,1,1,120,572,573,569,0,1,2,2,2,2,2,1,120,573,568,569,1,3,2,2,2,2,2,1,120,575,574,570,0,1,2,3,3,3,3,1,120,574,571,570,1,3,2,3,3,3,3,1,120,573,575,568,0,1,2,4,4,4,4,1,120,575,570,568,1,3,2,4,4,4,4,1,120,569,571,572,0,1,2,5,5,5,5,1,120,571,574,572,1,3,2,5,5,5,5,1,120,576,578,577,0,1,2,0,0,0,0,1,120,578,579,577,1,3,2,0,0,0,0,1,120,580,582,581,0,1,2,1,1,1,1,1,120,582,583,581,1,3,2,1,1,1,1,1,120,580,581,577,0,1,2,2,2,2,2,1,120,581,576,577,1,3,2,2,2,2,2,1,120,583,582,578,0,1,2,3,3,3,3,1,120,582,579,578,1,3,2,3,3,3,3,1,120,581,583,576,0,1,2,4,4,4,4,1,120,583,578,576,1,3,2,4,4,4,4,1,120,577,579,580,0,1,2,5,5,5,5,1,120,579,582,580,1,3,2,5,5,5,5,1,120,584,586,585,0,1,2,0,0,0,0,1,120,586,587,585,1,3,2,0,0,0,0,1,120,588,590,589,0,1,2,1,1,1,1,1,120,590,591,589,1,3,2,1,1,1,1,1,120,588,589,585,0,1,2,2,2,2,2,1,120,589,584,585,1,3,2,2,2,2,2,1,120,591,590,586,0,1,2,3,3,3,3,1,120,590,587,586,1,3,2,3,3,3,3,1,120,589,591,584,0,1,2,4,4,4,4,1,120,591,586,584,1,3,2,4,4,4,4,1,120,585,587,588,0,1,2,5,5,5,5,1,120,587,590,588,1,3,2,5,5,5,5,1,120,592,594,593,0,1,2,0,0,0,0,1,120,594,595,593,1,3,2,0,0,0,0,1,120,596,598,597,0,1,2,1,1,1,1,1,120,598,599,597,1,3,2,1,1,1,1,1,120,596,597,593,0,1,2,2,2,2,2,1,120,597,592,593,1,3,2,2,2,2,2,1,120,599,598,594,0,1,2,3,3,3,3,1,120,598,595,594,1,3,2,3,3,3,3,1,120,597,599,592,0,1,2,4,4,4,4,1,120,599,594,592,1,3,2,4,4,4,4,1,120,593,595,596,0,1,2,5,5,5,5,1,120,595,598,596,1,3,2,5,5,5,5,1,120,600,602,601,0,1,2,0,0,0,0,1,120,602,603,601,1,3,2,0,0,0,0,1,120,604,606,605,0,1,2,1,1,1,1,1,120,606,607,605,1,3,2,1,1,1,1,1,120,604,605,601,0,1,2,2,2,2,2,1,120,605,600,601,1,3,2,2,2,2,2,1,120,607,606,602,0,1,2,3,3,3,3,1,120,606,603,602,1,3,2,3,3,3,3,1,120,605,607,600,0,1,2,4,4,4,4,1,120,607,602,600,1,3,2,4,4,4,4,1,120,601,603,604,0,1,2,5,5,5,5,1,120,603,606,604,1,3,2,5,5,5,5,1,120,608,610,609,0,1,2,0,0,0,0,1,120,610,611,609,1,3,2,0,0,0,0,1,120,612,614,613,0,1,2,1,1,1,1,1,120,614,615,613,1,3,2,1,1,1,1,1,120,612,613,609,0,1,2,2,2,2,2,1,120,613,608,609,1,3,2,2,2,2,2,1,120,615,614,610,0,1,2,3,3,3,3,1,120,614,611,610,1,3,2,3,3,3,3,1,120,613,615,608,0,1,2,4,4,4,4,1,120,615,610,608,1,3,2,4,4,4,4,1,120,609,611,612,0,1,2,5,5,5,5,1,120,611,614,612,1,3,2,5,5,5,5,1,120,616,618,617,0,1,2,0,0,0,0,1,120,618,619,617,1,3,2,0,0,0,0,1,120,620,622,621,0,1,2,1,1,1,1,1,120,622,623,621,1,3,2,1,1,1,1,1,120,620,621,617,0,1,2,2,2,2,2,1,120,621,616,617,1,3,2,2,2,2,2,1,120,623,622,618,0,1,2,3,3,3,3,1,120,622,619,618,1,3,2,3,3,3,3,1,120,621,623,616,0,1,2,4,4,4,4,1,120,623,618,616,1,3,2,4,4,4,4,1,120,617,619,620,0,1,2,5,5,5,5,1,120,619,622,620,1,3,2,5,5,5,5,1,120,624,626,625,0,1,2,0,0,0,0,1,120,626,627,625,1,3,2,0,0,0,0,1,120,628,630,629,0,1,2,1,1,1,1,1,120,630,631,629,1,3,2,1,1,1,1,1,120,628,629,625,0,1,2,2,2,2,2,1,120,629,624,625,1,3,2,2,2,2,2,1,120,631,630,626,0,1,2,3,3,3,3,1,120,630,627,626,1,3,2,3,3,3,3,1,120,629,631,624,0,1,2,4,4,4,4,1,120,631,626,624,1,3,2,4,4,4,4,1,120,625,627,628,0,1,2,5,5,5,5,1,120,627,630,628,1,3,2,5,5,5,5,1,120,632,634,633,0,1,2,0,0,0,0,1,120,634,635,633,1,3,2,0,0,0,0,1,120,636,638,637,0,1,2,1,1,1,1,1,120,638,639,637,1,3,2,1,1,1,1,1,120,636,637,633,0,1,2,2,2,2,2,1,120,637,632,633,1,3,2,2,2,2,2,1,120,639,638,634,0,1,2,3,3,3,3,1,120,638,635,634,1,3,2,3,3,3,3,1,120,637,639,632,0,1,2,4,4,4,4,1,120,639,634,632,1,3,2,4,4,4,4,1,120,633,635,636,0,1,2,5,5,5,5,1,120,635,638,636,1,3,2,5,5,5,5,1,120,640,642,641,0,1,2,0,0,0,0,1,120,642,643,641,1,3,2,0,0,0,0,1,120,644,646,645,0,1,2,1,1,1,1,1,120,646,647,645,1,3,2,1,1,1,1,1,120,644,645,641,0,1,2,2,2,2,2,1,120,645,640,641,1,3,2,2,2,2,2,1,120,647,646,642,0,1,2,3,3,3,3,1,120,646,643,642,1,3,2,3,3,3,3,1,120,645,647,640,0,1,2,4,4,4,4,1,120,647,642,640,1,3,2,4,4,4,4,1,120,641,643,644,0,1,2,5,5,5,5,1,120,643,646,644,1,3,2,5,5,5,5,1,120,648,650,649,0,1,2,0,0,0,0,1,120,650,651,649,1,3,2,0,0,0,0,1,120,652,654,653,0,1,2,1,1,1,1,1,120,654,655,653,1,3,2,1,1,1,1,1,120,652,653,649,0,1,2,2,2,2,2,1,120,653,648,649,1,3,2,2,2,2,2,1,120,655,654,650,0,1,2,3,3,3,3,1,120,654,651,650,1,3,2,3,3,3,3,1,120,653,655,648,0,1,2,4,4,4,4,1,120,655,650,648,1,3,2,4,4,4,4,1,120,649,651,652,0,1,2,5,5,5,5,1,120,651,654,652,1,3,2,5,5,5,5,1,120,656,658,657,0,1,2,0,0,0,0,1,120,658,659,657,1,3,2,0,0,0,0,1,120,660,662,661,0,1,2,1,1,1,1,1,120,662,663,661,1,3,2,1,1,1,1,1,120,660,661,657,0,1,2,2,2,2,2,1,120,661,656,657,1,3,2,2,2,2,2,1,120,663,662,658,0,1,2,3,3,3,3,1,120,662,659,658,1,3,2,3,3,3,3,1,120,661,663,656,0,1,2,4,4,4,4,1,120,663,658,656,1,3,2,4,4,4,4,1,120,657,659,660,0,1,2,5,5,5,5,1,120,659,662,660,1,3,2,5,5,5,5,1,120,664,666,665,0,1,2,0,0,0,0,1,120,666,667,665,1,3,2,0,0,0,0,1,120,668,670,669,0,1,2,1,1,1,1,1,120,670,671,669,1,3,2,1,1,1,1,1,120,668,669,665,0,1,2,2,2,2,2,1,120,669,664,665,1,3,2,2,2,2,2,1,120,671,670,666,0,1,2,3,3,3,3,1,120,670,667,666,1,3,2,3,3,3,3,1,120,669,671,664,0,1,2,4,4,4,4,1,120,671,666,664,1,3,2,4,4,4,4,1,120,665,667,668,0,1,2,5,5,5,5,1,120,667,670,668,1,3,2,5,5,5,5,1,120,672,674,673,0,1,2,0,0,0,0,0,120,674,675,673,1,3,2,0,0,0,0,0,120,676,678,677,0,1,2,1,1,1,1,0,120,678,679,677,1,3,2,1,1,1,1,0,120,676,677,673,0,1,2,2,2,2,2,0,120,677,672,673,1,3,2,2,2,2,2,0,120,679,678,674,0,1,2,3,3,3,3,0,120,678,675,674,1,3,2,3,3,3,3,0,120,677,679,672,0,1,2,4,4,4,4,0,120,679,674,672,1,3,2,4,4,4,4,0,120,673,675,676,0,1,2,5,5,5,5,0,120,675,678,676,1,3,2,5,5,5,5,0,120,680,682,681,0,1,2,0,0,0,0,0,120,682,683,681,1,3,2,0,0,0,0,0,120,684,686,685,0,1,2,1,1,1,1,0,120,686,687,685,1,3,2,1,1,1,1,0,120,684,685,681,0,1,2,2,2,2,2,0,120,685,680,681,1,3,2,2,2,2,2,0,120,687,686,682,0,1,2,3,3,3,3,0,120,686,683,682,1,3,2,3,3,3,3,0,120,685,687,680,0,1,2,4,4,4,4,0,120,687,682,680,1,3,2,4,4,4,4,0,120,681,683,684,0,1,2,5,5,5,5,0,120,683,686,684,1,3,2,5,5,5,5,0,120,688,690,689,0,1,2,0,0,0,0,0,120,690,691,689,1,3,2,0,0,0,0,0,120,692,694,693,0,1,2,1,1,1,1,0,120,694,695,693,1,3,2,1,1,1,1,0,120,692,693,689,0,1,2,2,2,2,2,0,120,693,688,689,1,3,2,2,2,2,2,0,120,695,694,690,0,1,2,3,3,3,3,0,120,694,691,690,1,3,2,3,3,3,3,0,120,693,695,688,0,1,2,4,4,4,4,0,120,695,690,688,1,3,2,4,4,4,4,0,120,689,691,692,0,1,2,5,5,5,5,0,120,691,694,692,1,3,2,5,5,5,5,0,120,696,698,697,0,1,2,0,0,0,0,1,120,698,699,697,1,3,2,0,0,0,0,1,120,700,702,701,0,1,2,1,1,1,1,1,120,702,703,701,1,3,2,1,1,1,1,1,120,700,701,697,0,1,2,2,2,2,2,1,120,701,696,697,1,3,2,2,2,2,2,1,120,703,702,698,0,1,2,3,3,3,3,1,120,702,699,698,1,3,2,3,3,3,3,1,120,701,703,696,0,1,2,4,4,4,4,1,120,703,698,696,1,3,2,4,4,4,4,1,120,697,699,700,0,1,2,5,5,5,5,1,120,699,702,700,1,3,2,5,5,5,5,1,120,704,706,705,0,1,2,0,0,0,0,0,120,706,707,705,1,3,2,0,0,0,0,0,120,708,710,709,0,1,2,1,1,1,1,0,120,710,711,709,1,3,2,1,1,1,1,0,120,708,709,705,0,1,2,2,2,2,2,0,120,709,704,705,1,3,2,2,2,2,2,0,120,711,710,706,0,1,2,3,3,3,3,0,120,710,707,706,1,3,2,3,3,3,3,0,120,709,711,704,0,1,2,4,4,4,4,0,120,711,706,704,1,3,2,4,4,4,4,0,120,705,707,708,0,1,2,5,5,5,5,0,120,707,710,708,1,3,2,5,5,5,5,0,120,712,714,713,0,1,2,0,0,0,0,1,120,714,715,713,1,3,2,0,0,0,0,1,120,716,718,717,0,1,2,1,1,1,1,1,120,718,719,717,1,3,2,1,1,1,1,1,120,716,717,713,0,1,2,2,2,2,2,1,120,717,712,713,1,3,2,2,2,2,2,1,120,719,718,714,0,1,2,3,3,3,3,1,120,718,715,714,1,3,2,3,3,3,3,1,120,717,719,712,0,1,2,4,4,4,4,1,120,719,714,712,1,3,2,4,4,4,4,1,120,713,715,716,0,1,2,5,5,5,5,1,120,715,718,716,1,3,2,5,5,5,5,1,120,720,722,721,0,1,2,0,0,0,0,1,120,722,723,721,1,3,2,0,0,0,0,1,120,724,726,725,0,1,2,1,1,1,1,1,120,726,727,725,1,3,2,1,1,1,1,1,120,724,725,721,0,1,2,2,2,2,2,1,120,725,720,721,1,3,2,2,2,2,2,1,120,727,726,722,0,1,2,3,3,3,3,1,120,726,723,722,1,3,2,3,3,3,3,1,120,725,727,720,0,1,2,4,4,4,4,1,120,727,722,720,1,3,2,4,4,4,4,1,120,721,723,724,0,1,2,5,5,5,5,1,120,723,726,724,1,3,2,5,5,5,5,1,120,728,730,729,0,1,2,0,0,0,0,0,120,730,731,729,1,3,2,0,0,0,0,0,120,732,734,733,0,1,2,1,1,1,1,0,120,734,735,733,1,3,2,1,1,1,1,0,120,732,733,729,0,1,2,2,2,2,2,0,120,733,728,729,1,3,2,2,2,2,2,0,120,735,734,730,0,1,2,3,3,3,3,0,120,734,731,730,1,3,2,3,3,3,3,0,120,733,735,728,0,1,2,4,4,4,4,0,120,735,730,728,1,3,2,4,4,4,4,0,120,729,731,732,0,1,2,5,5,5,5,0,120,731,734,732,1,3,2,5,5,5,5,0,120,736,738,737,0,1,2,0,0,0,0,0,120,738,739,737,1,3,2,0,0,0,0,0,120,740,742,741,0,1,2,1,1,1,1,0,120,742,743,741,1,3,2,1,1,1,1,0,120,740,741,737,0,1,2,2,2,2,2,0,120,741,736,737,1,3,2,2,2,2,2,0,120,743,742,738,0,1,2,3,3,3,3,0,120,742,739,738,1,3,2,3,3,3,3,0,120,741,743,736,0,1,2,4,4,4,4,0,120,743,738,736,1,3,2,4,4,4,4,0,120,737,739,740,0,1,2,5,5,5,5,0,120,739,742,740,1,3,2,5,5,5,5,0,120,744,746,745,0,1,2,0,0,0,0,0,120,746,747,745,1,3,2,0,0,0,0,0,120,748,750,749,0,1,2,1,1,1,1,0,120,750,751,749,1,3,2,1,1,1,1,0,120,748,749,745,0,1,2,2,2,2,2,0,120,749,744,745,1,3,2,2,2,2,2,0,120,751,750,746,0,1,2,3,3,3,3,0,120,750,747,746,1,3,2,3,3,3,3,0,120,749,751,744,0,1,2,4,4,4,4,0,120,751,746,744,1,3,2,4,4,4,4,0,120,745,747,748,0,1,2,5,5,5,5,0,120,747,750,748,1,3,2,5,5,5,5,0,120,752,754,753,0,1,2,0,0,0,0,0,120,754,755,753,1,3,2,0,0,0,0,0,120,756,758,757,0,1,2,1,1,1,1,0,120,758,759,757,1,3,2,1,1,1,1,0,120,756,757,753,0,1,2,2,2,2,2,0,120,757,752,753,1,3,2,2,2,2,2,0,120,759,758,754,0,1,2,3,3,3,3,0,120,758,755,754,1,3,2,3,3,3,3,0,120,757,759,752,0,1,2,4,4,4,4,0,120,759,754,752,1,3,2,4,4,4,4,0,120,753,755,756,0,1,2,5,5,5,5,0,120,755,758,756,1,3,2,5,5,5,5,0,120,760,762,761,0,1,2,0,0,0,0,0,120,762,763,761,1,3,2,0,0,0,0,0,120,764,766,765,0,1,2,1,1,1,1,0,120,766,767,765,1,3,2,1,1,1,1,0,120,764,765,761,0,1,2,2,2,2,2,0,120,765,760,761,1,3,2,2,2,2,2,0,120,767,766,762,0,1,2,3,3,3,3,0,120,766,763,762,1,3,2,3,3,3,3,0,120,765,767,760,0,1,2,4,4,4,4,0,120,767,762,760,1,3,2,4,4,4,4,0,120,761,763,764,0,1,2,5,5,5,5,0,120,763,766,764,1,3,2,5,5,5,5,0,120,768,770,769,0,1,2,0,0,0,0,0,120,770,771,769,1,3,2,0,0,0,0,0,120,772,774,773,0,1,2,1,1,1,1,0,120,774,775,773,1,3,2,1,1,1,1,0,120,772,773,769,0,1,2,2,2,2,2,0,120,773,768,769,1,3,2,2,2,2,2,0,120,775,774,770,0,1,2,3,3,3,3,0,120,774,771,770,1,3,2,3,3,3,3,0,120,773,775,768,0,1,2,4,4,4,4,0,120,775,770,768,1,3,2,4,4,4,4,0,120,769,771,772,0,1,2,5,5,5,5,0,120,771,774,772,1,3,2,5,5,5,5,0,120,776,778,777,0,1,2,0,0,0,0,0,120,778,779,777,1,3,2,0,0,0,0,0,120,780,782,781,0,1,2,1,1,1,1,0,120,782,783,781,1,3,2,1,1,1,1,0,120,780,781,777,0,1,2,2,2,2,2,0,120,781,776,777,1,3,2,2,2,2,2,0,120,783,782,778,0,1,2,3,3,3,3,0,120,782,779,778,1,3,2,3,3,3,3,0,120,781,783,776,0,1,2,4,4,4,4,0,120,783,778,776,1,3,2,4,4,4,4,0,120,777,779,780,0,1,2,5,5,5,5,0,120,779,782,780,1,3,2,5,5,5,5,0,120,784,786,785,0,1,2,0,0,0,0,0,120,786,787,785,1,3,2,0,0,0,0,0,120,788,790,789,0,1,2,1,1,1,1,0,120,790,791,789,1,3,2,1,1,1,1,0,120,788,789,785,0,1,2,2,2,2,2,0,120,789,784,785,1,3,2,2,2,2,2,0,120,791,790,786,0,1,2,3,3,3,3,0,120,790,787,786,1,3,2,3,3,3,3,0,120,789,791,784,0,1,2,4,4,4,4,0,120,791,786,784,1,3,2,4,4,4,4,0,120,785,787,788,0,1,2,5,5,5,5,0,120,787,790,788,1,3,2,5,5,5,5,0,120,792,794,793,0,1,2,0,0,0,0,1,120,794,795,793,1,3,2,0,0,0,0,1,120,796,798,797,0,1,2,1,1,1,1,1,120,798,799,797,1,3,2,1,1,1,1,1,120,796,797,793,0,1,2,2,2,2,2,1,120,797,792,793,1,3,2,2,2,2,2,1,120,799,798,794,0,1,2,3,3,3,3,1,120,798,795,794,1,3,2,3,3,3,3,1,120,797,799,792,0,1,2,4,4,4,4,1,120,799,794,792,1,3,2,4,4,4,4,1,120,793,795,796,0,1,2,5,5,5,5,1,120,795,798,796,1,3,2,5,5,5,5,1,120,800,802,801,0,1,2,0,0,0,0,1,120,802,803,801,1,3,2,0,0,0,0,1,120,804,806,805,0,1,2,1,1,1,1,1,120,806,807,805,1,3,2,1,1,1,1,1,120,804,805,801,0,1,2,2,2,2,2,1,120,805,800,801,1,3,2,2,2,2,2,1,120,807,806,802,0,1,2,3,3,3,3,1,120,806,803,802,1,3,2,3,3,3,3,1,120,805,807,800,0,1,2,4,4,4,4,1,120,807,802,800,1,3,2,4,4,4,4,1,120,801,803,804,0,1,2,5,5,5,5,1,120,803,806,804,1,3,2,5,5,5,5,1,120,808,810,809,0,1,2,0,0,0,0,1,120,810,811,809,1,3,2,0,0,0,0,1,120,812,814,813,0,1,2,1,1,1,1,1,120,814,815,813,1,3,2,1,1,1,1,1,120,812,813,809,0,1,2,2,2,2,2,1,120,813,808,809,1,3,2,2,2,2,2,1,120,815,814,810,0,1,2,3,3,3,3,1,120,814,811,810,1,3,2,3,3,3,3,1,120,813,815,808,0,1,2,4,4,4,4,1,120,815,810,808,1,3,2,4,4,4,4,1,120,809,811,812,0,1,2,5,5,5,5,1,120,811,814,812,1,3,2,5,5,5,5,1,120,816,818,817,0,1,2,0,0,0,0,1,120,818,819,817,1,3,2,0,0,0,0,1,120,820,822,821,0,1,2,1,1,1,1,1,120,822,823,821,1,3,2,1,1,1,1,1,120,820,821,817,0,1,2,2,2,2,2,1,120,821,816,817,1,3,2,2,2,2,2,1,120,823,822,818,0,1,2,3,3,3,3,1,120,822,819,818,1,3,2,3,3,3,3,1,120,821,823,816,0,1,2,4,4,4,4,1,120,823,818,816,1,3,2,4,4,4,4,1,120,817,819,820,0,1,2,5,5,5,5,1,120,819,822,820,1,3,2,5,5,5,5,1,120,824,826,825,0,1,2,0,0,0,0,1,120,826,827,825,1,3,2,0,0,0,0,1,120,828,830,829,0,1,2,1,1,1,1,1,120,830,831,829,1,3,2,1,1,1,1,1,120,828,829,825,0,1,2,2,2,2,2,1,120,829,824,825,1,3,2,2,2,2,2,1,120,831,830,826,0,1,2,3,3,3,3,1,120,830,827,826,1,3,2,3,3,3,3,1,120,829,831,824,0,1,2,4,4,4,4,1,120,831,826,824,1,3,2,4,4,4,4,1,120,825,827,828,0,1,2,5,5,5,5,1,120,827,830,828,1,3,2,5,5,5,5,1,120,832,834,833,0,1,2,0,0,0,0,1,120,834,835,833,1,3,2,0,0,0,0,1,120,836,838,837,0,1,2,1,1,1,1,1,120,838,839,837,1,3,2,1,1,1,1,1,120,836,837,833,0,1,2,2,2,2,2,1,120,837,832,833,1,3,2,2,2,2,2,1,120,839,838,834,0,1,2,3,3,3,3,1,120,838,835,834,1,3,2,3,3,3,3,1,120,837,839,832,0,1,2,4,4,4,4,1,120,839,834,832,1,3,2,4,4,4,4,1,120,833,835,836,0,1,2,5,5,5,5,1,120,835,838,836,1,3,2,5,5,5,5,1,120,840,842,841,0,1,2,0,0,0,0,1,120,842,843,841,1,3,2,0,0,0,0,1,120,844,846,845,0,1,2,1,1,1,1,1,120,846,847,845,1,3,2,1,1,1,1,1,120,844,845,841,0,1,2,2,2,2,2,1,120,845,840,841,1,3,2,2,2,2,2,1,120,847,846,842,0,1,2,3,3,3,3,1,120,846,843,842,1,3,2,3,3,3,3,1,120,845,847,840,0,1,2,4,4,4,4,1,120,847,842,840,1,3,2,4,4,4,4,1,120,841,843,844,0,1,2,5,5,5,5,1,120,843,846,844,1,3,2,5,5,5,5,1,120,848,850,849,0,1,2,0,0,0,0,0,120,850,851,849,1,3,2,0,0,0,0,0,120,852,854,853,0,1,2,1,1,1,1,0,120,854,855,853,1,3,2,1,1,1,1,0,120,852,853,849,0,1,2,2,2,2,2,0,120,853,848,849,1,3,2,2,2,2,2,0,120,855,854,850,0,1,2,3,3,3,3,0,120,854,851,850,1,3,2,3,3,3,3,0,120,853,855,848,0,1,2,4,4,4,4,0,120,855,850,848,1,3,2,4,4,4,4,0,120,849,851,852,0,1,2,5,5,5,5,0,120,851,854,852,1,3,2,5,5,5,5,0,120,856,858,857,0,1,2,0,0,0,0,0,120,858,859,857,1,3,2,0,0,0,0,0,120,860,862,861,0,1,2,1,1,1,1,0,120,862,863,861,1,3,2,1,1,1,1,0,120,860,861,857,0,1,2,2,2,2,2,0,120,861,856,857,1,3,2,2,2,2,2,0,120,863,862,858,0,1,2,3,3,3,3,0,120,862,859,858,1,3,2,3,3,3,3,0,120,861,863,856,0,1,2,4,4,4,4,0,120,863,858,856,1,3,2,4,4,4,4,0,120,857,859,860,0,1,2,5,5,5,5,0,120,859,862,860,1,3,2,5,5,5,5,0,120,864,866,865,0,1,2,0,0,0,0,0,120,866,867,865,1,3,2,0,0,0,0,0,120,868,870,869,0,1,2,1,1,1,1,0,120,870,871,869,1,3,2,1,1,1,1,0,120,868,869,865,0,1,2,2,2,2,2,0,120,869,864,865,1,3,2,2,2,2,2,0,120,871,870,866,0,1,2,3,3,3,3,0,120,870,867,866,1,3,2,3,3,3,3,0,120,869,871,864,0,1,2,4,4,4,4,0,120,871,866,864,1,3,2,4,4,4,4,0,120,865,867,868,0,1,2,5,5,5,5,0,120,867,870,868,1,3,2,5,5,5,5,0,120,872,874,873,0,1,2,0,0,0,0,0,120,874,875,873,1,3,2,0,0,0,0,0,120,876,878,877,0,1,2,1,1,1,1,0,120,878,879,877,1,3,2,1,1,1,1,0,120,876,877,873,0,1,2,2,2,2,2,0,120,877,872,873,1,3,2,2,2,2,2,0,120,879,878,874,0,1,2,3,3,3,3,0,120,878,875,874,1,3,2,3,3,3,3,0,120,877,879,872,0,1,2,4,4,4,4,0,120,879,874,872,1,3,2,4,4,4,4,0,120,873,875,876,0,1,2,5,5,5,5,0,120,875,878,876,1,3,2,5,5,5,5,0,120,880,882,881,0,1,2,0,0,0,0,0,120,882,883,881,1,3,2,0,0,0,0,0,120,884,886,885,0,1,2,1,1,1,1,0,120,886,887,885,1,3,2,1,1,1,1,0,120,884,885,881,0,1,2,2,2,2,2,0,120,885,880,881,1,3,2,2,2,2,2,0,120,887,886,882,0,1,2,3,3,3,3,0,120,886,883,882,1,3,2,3,3,3,3,0,120,885,887,880,0,1,2,4,4,4,4,0,120,887,882,880,1,3,2,4,4,4,4,0,120,881,883,884,0,1,2,5,5,5,5,0,120,883,886,884,1,3,2,5,5,5,5,0,120,888,890,889,0,1,2,0,0,0,0,0,120,890,891,889,1,3,2,0,0,0,0,0,120,892,894,893,0,1,2,1,1,1,1,0,120,894,895,893,1,3,2,1,1,1,1,0,120,892,893,889,0,1,2,2,2,2,2,0,120,893,888,889,1,3,2,2,2,2,2,0,120,895,894,890,0,1,2,3,3,3,3,0,120,894,891,890,1,3,2,3,3,3,3,0,120,893,895,888,0,1,2,4,4,4,4,0,120,895,890,888,1,3,2,4,4,4,4,0,120,889,891,892,0,1,2,5,5,5,5,0,120,891,894,892,1,3,2,5,5,5,5,0,120,896,898,897,0,1,2,0,0,0,0,0,120,898,899,897,1,3,2,0,0,0,0,0,120,900,902,901,0,1,2,1,1,1,1,0,120,902,903,901,1,3,2,1,1,1,1,0,120,900,901,897,0,1,2,2,2,2,2,0,120,901,896,897,1,3,2,2,2,2,2,0,120,903,902,898,0,1,2,3,3,3,3,0,120,902,899,898,1,3,2,3,3,3,3,0,120,901,903,896,0,1,2,4,4,4,4,0,120,903,898,896,1,3,2,4,4,4,4,0,120,897,899,900,0,1,2,5,5,5,5,0,120,899,902,900,1,3,2,5,5,5,5,0,120,904,906,905,0,1,2,0,0,0,0,0,120,906,907,905,1,3,2,0,0,0,0,0,120,908,910,909,0,1,2,1,1,1,1,0,120,910,911,909,1,3,2,1,1,1,1,0,120,908,909,905,0,1,2,2,2,2,2,0,120,909,904,905,1,3,2,2,2,2,2,0,120,911,910,906,0,1,2,3,3,3,3,0,120,910,907,906,1,3,2,3,3,3,3,0,120,909,911,904,0,1,2,4,4,4,4,0,120,911,906,904,1,3,2,4,4,4,4,0,120,905,907,908,0,1,2,5,5,5,5,0,120,907,910,908,1,3,2,5,5,5,5,0,120,912,914,913,0,1,2,0,0,0,0,0,120,914,915,913,1,3,2,0,0,0,0,0,120,916,918,917,0,1,2,1,1,1,1,0,120,918,919,917,1,3,2,1,1,1,1,0,120,916,917,913,0,1,2,2,2,2,2,0,120,917,912,913,1,3,2,2,2,2,2,0,120,919,918,914,0,1,2,3,3,3,3,0,120,918,915,914,1,3,2,3,3,3,3,0,120,917,919,912,0,1,2,4,4,4,4,0,120,919,914,912,1,3,2,4,4,4,4,0,120,913,915,916,0,1,2,5,5,5,5,0,120,915,918,916,1,3,2,5,5,5,5,0,120,920,922,921,0,1,2,0,0,0,0,1,120,922,923,921,1,3,2,0,0,0,0,1,120,924,926,925,0,1,2,1,1,1,1,1,120,926,927,925,1,3,2,1,1,1,1,1,120,924,925,921,0,1,2,2,2,2,2,1,120,925,920,921,1,3,2,2,2,2,2,1,120,927,926,922,0,1,2,3,3,3,3,1,120,926,923,922,1,3,2,3,3,3,3,1,120,925,927,920,0,1,2,4,4,4,4,1,120,927,922,920,1,3,2,4,4,4,4,1,120,921,923,924,0,1,2,5,5,5,5,1,120,923,926,924,1,3,2,5,5,5,5,1,120,928,930,929,0,1,2,0,0,0,0,1,120,930,931,929,1,3,2,0,0,0,0,1,120,932,934,933,0,1,2,1,1,1,1,1,120,934,935,933,1,3,2,1,1,1,1,1,120,932,933,929,0,1,2,2,2,2,2,1,120,933,928,929,1,3,2,2,2,2,2,1,120,935,934,930,0,1,2,3,3,3,3,1,120,934,931,930,1,3,2,3,3,3,3,1,120,933,935,928,0,1,2,4,4,4,4,1,120,935,930,928,1,3,2,4,4,4,4,1,120,929,931,932,0,1,2,5,5,5,5,1,120,931,934,932,1,3,2,5,5,5,5,1,120,936,938,937,0,1,2,0,0,0,0,1,120,938,939,937,1,3,2,0,0,0,0,1,120,940,942,941,0,1,2,1,1,1,1,1,120,942,943,941,1,3,2,1,1,1,1,1,120,940,941,937,0,1,2,2,2,2,2,1,120,941,936,937,1,3,2,2,2,2,2,1,120,943,942,938,0,1,2,3,3,3,3,1,120,942,939,938,1,3,2,3,3,3,3,1,120,941,943,936,0,1,2,4,4,4,4,1,120,943,938,936,1,3,2,4,4,4,4,1,120,937,939,940,0,1,2,5,5,5,5,1,120,939,942,940,1,3,2,5,5,5,5,1,120,944,946,945,0,1,2,0,0,0,0,1,120,946,947,945,1,3,2,0,0,0,0,1,120,948,950,949,0,1,2,1,1,1,1,1,120,950,951,949,1,3,2,1,1,1,1,1,120,948,949,945,0,1,2,2,2,2,2,1,120,949,944,945,1,3,2,2,2,2,2,1,120,951,950,946,0,1,2,3,3,3,3,1,120,950,947,946,1,3,2,3,3,3,3,1,120,949,951,944,0,1,2,4,4,4,4,1,120,951,946,944,1,3,2,4,4,4,4,1,120,945,947,948,0,1,2,5,5,5,5,1,120,947,950,948,1,3,2,5,5,5,5,1,120,952,954,953,0,1,2,0,0,0,0,1,120,954,955,953,1,3,2,0,0,0,0,1,120,956,958,957,0,1,2,1,1,1,1,1,120,958,959,957,1,3,2,1,1,1,1,1,120,956,957,953,0,1,2,2,2,2,2,1,120,957,952,953,1,3,2,2,2,2,2,1,120,959,958,954,0,1,2,3,3,3,3,1,120,958,955,954,1,3,2,3,3,3,3,1,120,957,959,952,0,1,2,4,4,4,4,1,120,959,954,952,1,3,2,4,4,4,4,1,120,953,955,956,0,1,2,5,5,5,5,1,120,955,958,956,1,3,2,5,5,5,5,1,120,960,962,961,0,1,2,0,0,0,0,1,120,962,963,961,1,3,2,0,0,0,0,1,120,964,966,965,0,1,2,1,1,1,1,1,120,966,967,965,1,3,2,1,1,1,1,1,120,964,965,961,0,1,2,2,2,2,2,1,120,965,960,961,1,3,2,2,2,2,2,1,120,967,966,962,0,1,2,3,3,3,3,1,120,966,963,962,1,3,2,3,3,3,3,1,120,965,967,960,0,1,2,4,4,4,4,1,120,967,962,960,1,3,2,4,4,4,4,1,120,961,963,964,0,1,2,5,5,5,5,1,120,963,966,964,1,3,2,5,5,5,5,1,120,968,970,969,0,1,2,0,0,0,0,1,120,970,971,969,1,3,2,0,0,0,0,1,120,972,974,973,0,1,2,1,1,1,1,1,120,974,975,973,1,3,2,1,1,1,1,1,120,972,973,969,0,1,2,2,2,2,2,1,120,973,968,969,1,3,2,2,2,2,2,1,120,975,974,970,0,1,2,3,3,3,3,1,120,974,971,970,1,3,2,3,3,3,3,1,120,973,975,968,0,1,2,4,4,4,4,1,120,975,970,968,1,3,2,4,4,4,4,1,120,969,971,972,0,1,2,5,5,5,5,1,120,971,974,972,1,3,2,5,5,5,5,1,120,976,978,977,0,1,2,0,0,0,0,2,120,978,979,977,1,3,2,0,0,0,0,2,120,980,982,981,0,1,2,1,1,1,1,2,120,982,983,981,1,3,2,1,1,1,1,2,120,980,981,977,0,1,2,2,2,2,2,2,120,981,976,977,1,3,2,2,2,2,2,2,120,983,982,978,0,1,2,3,3,3,3,2,120,982,979,978,1,3,2,3,3,3,3,2,120,981,983,976,0,1,2,4,4,4,4,2,120,983,978,976,1,3,2,4,4,4,4,2,120,977,979,980,0,1,2,5,5,5,5,2,120,979,982,980,1,3,2,5,5,5,5,2,120,984,986,985,0,1,2,0,0,0,0,2,120,986,987,985,1,3,2,0,0,0,0,2,120,988,990,989,0,1,2,1,1,1,1,2,120,990,991,989,1,3,2,1,1,1,1,2,120,988,989,985,0,1,2,2,2,2,2,2,120,989,984,985,1,3,2,2,2,2,2,2,120,991,990,986,0,1,2,3,3,3,3,2,120,990,987,986,1,3,2,3,3,3,3,2,120,989,991,984,0,1,2,4,4,4,4,2,120,991,986,984,1,3,2,4,4,4,4,2,120,985,987,988,0,1,2,5,5,5,5,2,120,987,990,988,1,3,2,5,5,5,5,2,120,992,994,993,0,1,2,0,0,0,0,2,120,994,995,993,1,3,2,0,0,0,0,2,120,996,998,997,0,1,2,1,1,1,1,2,120,998,999,997,1,3,2,1,1,1,1,2,120,996,997,993,0,1,2,2,2,2,2,2,120,997,992,993,1,3,2,2,2,2,2,2,120,999,998,994,0,1,2,3,3,3,3,2,120,998,995,994,1,3,2,3,3,3,3,2,120,997,999,992,0,1,2,4,4,4,4,2,120,999,994,992,1,3,2,4,4,4,4,2,120,993,995,996,0,1,2,5,5,5,5,2,120,995,998,996,1,3,2,5,5,5,5,2,120,1000,1002,1001,0,1,2,0,0,0,0,2,120,1002,1003,1001,1,3,2,0,0,0,0,2,120,1004,1006,1005,0,1,2,1,1,1,1,2,120,1006,1007,1005,1,3,2,1,1,1,1,2,120,1004,1005,1001,0,1,2,2,2,2,2,2,120,1005,1000,1001,1,3,2,2,2,2,2,2,120,1007,1006,1002,0,1,2,3,3,3,3,2,120,1006,1003,1002,1,3,2,3,3,3,3,2,120,1005,1007,1000,0,1,2,4,4,4,4,2,120,1007,1002,1000,1,3,2,4,4,4,4,2,120,1001,1003,1004,0,1,2,5,5,5,5,2,120,1003,1006,1004,1,3,2,5,5,5,5,2]}}],"materials":[{"uuid":"BAF46F42-7B02-4043-A49E-E1F190FECCE4","type":"MeshBasicMaterial","color":16777215,"vertexColors":2,"opacity":1,"transparent":true,"wireframe":false}],"object":{"uuid":"117D178E-F69D-4EAC-8B4F-0CE889FE8A61","type":"Mesh","geometry":"E8EE312C-BEAD-45F6-86B3-DE8286F72940","material":"BAF46F42-7B02-4043-A49E-E1F190FECCE4","matrix":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}} 

},{}],134:[function(require,module,exports){
module.exports={"metadata":{"version":4.3,"type":"Object","generator":"ObjectExporter"},"geometries":[{"uuid":"B1ECD189-5369-43C4-A5AF-95C09C32CBA9","type":"Geometry","data":{"vertices":[350,50,250,350,50,200,350,0,250,350,0,200,300,50,200,300,50,250,300,0,200,300,0,250,-250,50,250,-250,50,200,-250,0,250,-250,0,200,-300,50,200,-300,50,250,-300,0,200,-300,0,250,300,50,200,300,50,150,300,0,200,300,0,150,250,50,150,250,50,200,250,0,150,250,0,200,-300,50,200,-300,50,150,-300,0,200,-300,0,150,-350,50,150,-350,50,200,-350,0,150,-350,0,200,300,100,200,300,100,150,300,50,200,300,50,150,250,100,150,250,100,200,250,50,150,250,50,200,-300,100,200,-300,100,150,-300,50,200,-300,50,150,-350,100,150,-350,100,200,-350,50,150,-350,50,200,350,100,250,350,100,200,350,50,250,350,50,200,300,100,200,300,100,250,300,50,200,300,50,250,-250,100,250,-250,100,200,-250,50,250,-250,50,200,-300,100,200,-300,100,250,-300,50,200,-300,50,250,300,50,250,300,50,200,300,0,250,300,0,200,250,50,200,250,50,250,250,0,200,250,0,250,300,100,250,300,100,200,300,50,250,300,50,200,250,100,200,250,100,250,250,50,200,250,50,250,300,150,250,300,150,200,300,100,250,300,100,200,250,150,200,250,150,250,250,100,200,250,100,250,350,150,250,350,150,200,350,100,250,350,100,200,300,150,200,300,150,250,300,100,200,300,100,250,350,200,250,350,200,200,350,150,250,350,150,200,300,200,200,300,200,250,300,150,200,300,150,250,350,250,250,350,250,200,350,200,250,350,200,200,300,250,200,300,250,250,300,200,200,300,200,250,350,300,250,350,300,200,350,250,250,350,250,200,300,300,200,300,300,250,300,250,200,300,250,250,350,350,250,350,350,200,350,300,250,350,300,200,300,350,200,300,350,250,300,300,200,300,300,250,-250,150,250,-250,150,200,-250,100,250,-250,100,200,-300,150,200,-300,150,250,-300,100,200,-300,100,250,-250,200,250,-250,200,200,-250,150,250,-250,150,200,-300,200,200,-300,200,250,-300,150,200,-300,150,250,-250,250,250,-250,250,200,-250,200,250,-250,200,200,-300,250,200,-300,250,250,-300,200,200,-300,200,250,-250,300,250,-250,300,200,-250,250,250,-250,250,200,-300,300,200,-300,300,250,-300,250,200,-300,250,250,-250,350,250,-250,350,200,-250,300,250,-250,300,200,-300,350,200,-300,350,250,-300,300,200,-300,300,250,-300,150,200,-300,150,150,-300,100,200,-300,100,150,-350,150,150,-350,150,200,-350,100,150,-350,100,200,-300,200,200,-300,200,150,-300,150,200,-300,150,150,-350,200,150,-350,200,200,-350,150,150,-350,150,200,-300,250,200,-300,250,150,-300,200,200,-300,200,150,-350,250,150,-350,250,200,-350,200,150,-350,200,200,-300,250,150,-300,250,100,-300,200,150,-300,200,100,-350,250,100,-350,250,150,-350,200,100,-350,200,150,-250,200,150,-250,200,100,-250,150,150,-250,150,100,-300,200,100,-300,200,150,-300,150,100,-300,150,150,-200,200,150,-200,200,100,-200,150,150,-200,150,100,-250,200,100,-250,200,150,-250,150,100,-250,150,150,-150,200,150,-150,200,100,-150,150,150,-150,150,100,-200,200,100,-200,200,150,-200,150,100,-200,150,150,-100,200,150,-100,200,100,-100,150,150,-100,150,100,-150,200,100,-150,200,150,-150,150,100,-150,150,150,-50,200,150,-50,200,100,-50,150,150,-50,150,100,-100,200,100,-100,200,150,-100,150,100,-100,150,150,0,200,150,0,200,100,0,150,150,0,150,100,-50,200,100,-50,200,150,-50,150,100,-50,150,150,50,200,150,50,200,100,50,150,150,50,150,100,0,200,100,0,200,150,0,150,100,0,150,150,100,200,150,100,200,100,100,150,150,100,150,100,50,200,100,50,200,150,50,150,100,50,150,150,150,200,150,150,200,100,150,150,150,150,150,100,100,200,100,100,200,150,100,150,100,100,150,150,200,200,150,200,200,100,200,150,150,200,150,100,150,200,100,150,200,150,150,150,100,150,150,150,-250,250,150,-250,250,100,-250,200,150,-250,200,100,-300,250,100,-300,250,150,-300,200,100,-300,200,150,-200,250,150,-200,250,100,-200,200,150,-200,200,100,-250,250,100,-250,250,150,-250,200,100,-250,200,150,-150,250,150,-150,250,100,-150,200,150,-150,200,100,-200,250,100,-200,250,150,-200,200,100,-200,200,150,-100,250,150,-100,250,100,-100,200,150,-100,200,100,-150,250,100,-150,250,150,-150,200,100,-150,200,150,-50,250,150,-50,250,100,-50,200,150,-50,200,100,-100,250,100,-100,250,150,-100,200,100,-100,200,150,0,250,150,0,250,100,0,200,150,0,200,100,-50,250,100,-50,250,150,-50,200,100,-50,200,150,50,250,150,50,250,100,50,200,150,50,200,100,0,250,100,0,250,150,0,200,100,0,200,150,100,250,150,100,250,100,100,200,150,100,200,100,50,250,100,50,250,150,50,200,100,50,200,150,150,250,150,150,250,100,150,200,150,150,200,100,100,250,100,100,250,150,100,200,100,100,200,150,200,250,150,200,250,100,200,200,150,200,200,100,150,250,100,150,250,150,150,200,100,150,200,150,250,200,150,250,200,100,250,150,150,250,150,100,200,200,100,200,200,150,200,150,100,200,150,150,300,200,150,300,200,100,300,150,150,300,150,100,250,200,100,250,200,150,250,150,100,250,150,150,250,250,150,250,250,100,250,200,150,250,200,100,200,250,100,200,250,150,200,200,100,200,200,150,300,250,150,300,250,100,300,200,150,300,200,100,250,250,100,250,250,150,250,200,100,250,200,150,300,250,200,300,250,150,300,200,200,300,200,150,250,250,150,250,250,200,250,200,150,250,200,200,300,200,200,300,200,150,300,150,200,300,150,150,250,200,150,250,200,200,250,150,150,250,150,200,300,300,200,300,300,150,300,250,200,300,250,150,250,300,150,250,300,200,250,250,150,250,250,200,300,350,200,300,350,150,300,300,200,300,300,150,250,350,150,250,350,200,250,300,150,250,300,200,-300,300,200,-300,300,150,-300,250,200,-300,250,150,-350,300,150,-350,300,200,-350,250,150,-350,250,200,-300,350,200,-300,350,150,-300,300,200,-300,300,150,-350,350,150,-350,350,200,-350,300,150,-350,300,200,300,400,250,300,400,200,300,350,250,300,350,200,250,400,200,250,400,250,250,350,200,250,350,250,350,400,250,350,400,200,350,350,250,350,350,200,300,400,200,300,400,250,300,350,200,300,350,250,300,450,200,300,450,150,300,400,200,300,400,150,250,450,150,250,450,200,250,400,150,250,400,200,300,500,200,300,500,150,300,450,200,300,450,150,250,500,150,250,500,200,250,450,150,250,450,200,350,450,250,350,450,200,350,400,250,350,400,200,300,450,200,300,450,250,300,400,200,300,400,250,350,500,250,350,500,200,350,450,250,350,450,200,300,500,200,300,500,250,300,450,200,300,450,250,300,450,250,300,450,200,300,400,250,300,400,200,250,450,200,250,450,250,250,400,200,250,400,250,300,500,250,300,500,200,300,450,250,300,450,200,250,500,200,250,500,250,250,450,200,250,450,250,350,400,300,350,400,250,350,350,300,350,350,250,300,400,250,300,400,300,300,350,250,300,350,300,350,400,350,350,400,300,350,350,350,350,350,300,300,400,300,300,400,350,300,350,300,300,350,350,350,400,400,350,400,350,350,350,400,350,350,350,300,400,350,300,400,400,300,350,350,300,350,400,350,450,400,350,450,350,350,400,400,350,400,350,300,450,350,300,450,400,300,400,350,300,400,400,350,350,400,350,350,350,350,300,400,350,300,350,300,350,350,300,350,400,300,300,350,300,300,400,300,550,250,300,550,200,300,500,250,300,500,200,250,550,200,250,550,250,250,500,200,250,500,250,350,550,250,350,550,200,350,500,250,350,500,200,300,550,200,300,550,250,300,500,200,300,500,250,300,600,200,300,600,150,300,550,200,300,550,150,250,600,150,250,600,200,250,550,150,250,550,200,300,600,250,300,600,200,300,550,250,300,550,200,250,600,200,250,600,250,250,550,200,250,550,250,300,600,150,300,600,100,300,550,150,300,550,100,250,600,100,250,600,150,250,550,100,250,550,150,250,600,150,250,600,100,250,550,150,250,550,100,200,600,100,200,600,150,200,550,100,200,550,150,200,600,150,200,600,100,200,550,150,200,550,100,150,600,100,150,600,150,150,550,100,150,550,150,150,600,150,150,600,100,150,550,150,150,550,100,100,600,100,100,600,150,100,550,100,100,550,150,50,600,150,50,600,100,50,550,150,50,550,100,0,600,100,0,600,150,0,550,100,0,550,150,0,600,150,0,600,100,0,550,150,0,550,100,-50,600,100,-50,600,150,-50,550,100,-50,550,150,-50,600,150,-50,600,100,-50,550,150,-50,550,100,-100,600,100,-100,600,150,-100,550,100,-100,550,150,-100,600,150,-100,600,100,-100,550,150,-100,550,100,-150,600,100,-150,600,150,-150,550,100,-150,550,150,-150,600,150,-150,600,100,-150,550,150,-150,550,100,-200,600,100,-200,600,150,-200,550,100,-200,550,150,-200,600,150,-200,600,100,-200,550,150,-200,550,100,-250,600,100,-250,600,150,-250,550,100,-250,550,150,-250,600,150,-250,600,100,-250,550,150,-250,550,100,-300,600,100,-300,600,150,-300,550,100,-300,550,150,300,650,150,300,650,100,300,600,150,300,600,100,250,650,100,250,650,150,250,600,100,250,600,150,250,650,150,250,650,100,250,600,150,250,600,100,200,650,100,200,650,150,200,600,100,200,600,150,200,650,150,200,650,100,200,600,150,200,600,100,150,650,100,150,650,150,150,600,100,150,600,150,150,650,150,150,650,100,150,600,150,150,600,100,100,650,100,100,650,150,100,600,100,100,600,150,100,650,150,100,650,100,100,600,150,100,600,100,50,650,100,50,650,150,50,600,100,50,600,150,50,650,150,50,650,100,50,600,150,50,600,100,0,650,100,0,650,150,0,600,100,0,600,150,0,650,150,0,650,100,0,600,150,0,600,100,-50,650,100,-50,650,150,-50,600,100,-50,600,150,-50,650,150,-50,650,100,-50,600,150,-50,600,100,-100,650,100,-100,650,150,-100,600,100,-100,600,150,-100,650,150,-100,650,100,-100,600,150,-100,600,100,-150,650,100,-150,650,150,-150,600,100,-150,600,150,-150,650,150,-150,650,100,-150,600,150,-150,600,100,-200,650,100,-200,650,150,-200,600,100,-200,600,150,-200,650,150,-200,650,100,-200,600,150,-200,600,100,-250,650,100,-250,650,150,-250,600,100,-250,600,150,-250,650,150,-250,650,100,-250,600,150,-250,600,100,-300,650,100,-300,650,150,-300,600,100,-300,600,150,-300,400,200,-300,400,150,-300,350,200,-300,350,150,-350,400,150,-350,400,200,-350,350,150,-350,350,200,-250,400,250,-250,400,200,-250,350,250,-250,350,200,-300,400,200,-300,400,250,-300,350,200,-300,350,250,-250,450,250,-250,450,200,-250,400,250,-250,400,200,-300,450,200,-300,450,250,-300,400,200,-300,400,250,-250,500,250,-250,500,200,-250,450,250,-250,450,200,-300,500,200,-300,500,250,-300,450,200,-300,450,250,-250,550,250,-250,550,200,-250,500,250,-250,500,200,-300,550,200,-300,550,250,-300,500,200,-300,500,250,-250,600,250,-250,600,200,-250,550,250,-250,550,200,-300,600,200,-300,600,250,-300,550,200,-300,550,250,-300,450,200,-300,450,150,-300,400,200,-300,400,150,-350,450,150,-350,450,200,-350,400,150,-350,400,200,-300,500,200,-300,500,150,-300,450,200,-300,450,150,-350,500,150,-350,500,200,-350,450,150,-350,450,200,-300,550,200,-300,550,150,-300,500,200,-300,500,150,-350,550,150,-350,550,200,-350,500,150,-350,500,200,-300,600,200,-300,600,150,-300,550,200,-300,550,150,-350,600,150,-350,600,200,-350,550,150,-350,550,200,-300,650,200,-300,650,150,-300,600,200,-300,600,150,-350,650,150,-350,650,200,-350,600,150,-350,600,200,-250,650,250,-250,650,200,-250,600,250,-250,600,200,-300,650,200,-300,650,250,-300,600,200,-300,600,250,300,650,200,300,650,150,300,600,200,300,600,150,250,650,150,250,650,200,250,600,150,250,600,200,300,650,250,300,650,200,300,600,250,300,600,200,250,650,200,250,650,250,250,600,200,250,600,250,350,600,250,350,600,200,350,550,250,350,550,200,300,600,200,300,600,250,300,550,200,300,550,250,350,650,250,350,650,200,350,600,250,350,600,200,300,650,200,300,650,250,300,600,200,300,600,250,-250,400,300,-250,400,250,-250,350,300,-250,350,250,-300,400,250,-300,400,300,-300,350,250,-300,350,300,-250,400,350,-250,400,300,-250,350,350,-250,350,300,-300,400,300,-300,400,350,-300,350,300,-300,350,350,-250,400,400,-250,400,350,-250,350,400,-250,350,350,-300,400,350,-300,400,400,-300,350,350,-300,350,400,-250,350,400,-250,350,350,-250,300,400,-250,300,350,-300,350,350,-300,350,400,-300,300,350,-300,300,400,-250,450,400,-250,450,350,-250,400,400,-250,400,350,-300,450,350,-300,450,400,-300,400,350,-300,400,400,300,700,250,300,700,200,300,650,250,300,650,200,250,700,200,250,700,250,250,650,200,250,650,250,300,750,250,300,750,200,300,700,250,300,700,200,250,750,200,250,750,250,250,700,200,250,700,250,300,800,250,300,800,200,300,750,250,300,750,200,250,800,200,250,800,250,250,750,200,250,750,250,350,700,250,350,700,200,350,650,250,350,650,200,300,700,200,300,700,250,300,650,200,300,650,250,350,750,250,350,750,200,350,700,250,350,700,200,300,750,200,300,750,250,300,700,200,300,700,250,350,800,250,350,800,200,350,750,250,350,750,200,300,800,200,300,800,250,300,750,200,300,750,250,300,700,200,300,700,150,300,650,200,300,650,150,250,700,150,250,700,200,250,650,150,250,650,200,300,750,200,300,750,150,300,700,200,300,700,150,250,750,150,250,750,200,250,700,150,250,700,200,300,800,200,300,800,150,300,750,200,300,750,150,250,800,150,250,800,200,250,750,150,250,750,200,-250,700,250,-250,700,200,-250,650,250,-250,650,200,-300,700,200,-300,700,250,-300,650,200,-300,650,250,-250,750,250,-250,750,200,-250,700,250,-250,700,200,-300,750,200,-300,750,250,-300,700,200,-300,700,250,-250,800,250,-250,800,200,-250,750,250,-250,750,200,-300,800,200,-300,800,250,-300,750,200,-300,750,250,-300,700,200,-300,700,150,-300,650,200,-300,650,150,-350,700,150,-350,700,200,-350,650,150,-350,650,200,-300,800,200,-300,800,150,-300,750,200,-300,750,150,-350,800,150,-350,800,200,-350,750,150,-350,750,200,-250,650,200,-250,650,150,-250,600,200,-250,600,150,-300,650,150,-300,650,200,-300,600,150,-300,600,200,-200,650,200,-200,650,150,-200,600,200,-200,600,150,-250,650,150,-250,650,200,-250,600,150,-250,600,200,-150,650,200,-150,650,150,-150,600,200,-150,600,150,-200,650,150,-200,650,200,-200,600,150,-200,600,200,-100,650,200,-100,650,150,-100,600,200,-100,600,150,-150,650,150,-150,650,200,-150,600,150,-150,600,200,-50,650,200,-50,650,150,-50,600,200,-50,600,150,-100,650,150,-100,650,200,-100,600,150,-100,600,200,0,650,200,0,650,150,0,600,200,0,600,150,-50,650,150,-50,650,200,-50,600,150,-50,600,200,50,650,200,50,650,150,50,600,200,50,600,150,0,650,150,0,650,200,0,600,150,0,600,200,100,650,200,100,650,150,100,600,200,100,600,150,50,650,150,50,650,200,50,600,150,50,600,200,150,650,200,150,650,150,150,600,200,150,600,150,100,650,150,100,650,200,100,600,150,100,600,200,200,650,200,200,650,150,200,600,200,200,600,150,150,650,150,150,650,200,150,600,150,150,600,200,250,650,200,250,650,150,250,600,200,250,600,150,200,650,150,200,650,200,200,600,150,200,600,200,-250,600,200,-250,600,150,-250,550,200,-250,550,150,-300,600,150,-300,600,200,-300,550,150,-300,550,200,100,600,200,100,600,150,100,550,200,100,550,150,50,600,150,50,600,200,50,550,150,50,550,200,-300,750,250,-300,750,200,-300,700,250,-300,700,200,-350,750,200,-350,750,250,-350,700,200,-350,700,250,300,350,250,300,350,200,300,300,250,300,300,200,250,350,200,250,350,250,250,300,200,250,300,250,300,300,250,300,300,200,300,250,250,300,250,200,250,300,200,250,300,250,250,250,200,250,250,250,300,250,250,300,250,200,300,200,250,300,200,200,250,250,200,250,250,250,250,200,200,250,200,250,300,200,250,300,200,200,300,150,250,300,150,200,250,200,200,250,200,250,250,150,200,250,150,250,400,50,400,400,50,350,400,0,400,400,0,350,350,50,350,350,50,400,350,0,350,350,0,400,-350,50,400,-350,50,350,-350,0,400,-350,0,350,-400,50,350,-400,50,400,-400,0,350,-400,0,400,-350,50,-350,-350,50,-400,-350,0,-350,-350,0,-400,-400,50,-400,-400,50,-350,-400,0,-400,-400,0,-350,400,50,-350,400,50,-400,400,0,-350,400,0,-400,350,50,-400,350,50,-350,350,0,-400,350,0,-350],"normals":[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],"colors":[4208954,6774620,0],"uvs":[[0,1,0,0,1,1,1,0]],"faces":[120,0,2,1,0,1,2,0,0,0,0,0,120,2,3,1,1,3,2,0,0,0,0,0,120,4,6,5,0,1,2,1,1,1,1,0,120,6,7,5,1,3,2,1,1,1,1,0,120,4,5,1,0,1,2,2,2,2,2,0,120,5,0,1,1,3,2,2,2,2,2,0,120,7,6,2,0,1,2,3,3,3,3,0,120,6,3,2,1,3,2,3,3,3,3,0,120,5,7,0,0,1,2,4,4,4,4,0,120,7,2,0,1,3,2,4,4,4,4,0,120,1,3,4,0,1,2,5,5,5,5,0,120,3,6,4,1,3,2,5,5,5,5,0,120,8,10,9,0,1,2,0,0,0,0,0,120,10,11,9,1,3,2,0,0,0,0,0,120,12,14,13,0,1,2,1,1,1,1,0,120,14,15,13,1,3,2,1,1,1,1,0,120,12,13,9,0,1,2,2,2,2,2,0,120,13,8,9,1,3,2,2,2,2,2,0,120,15,14,10,0,1,2,3,3,3,3,0,120,14,11,10,1,3,2,3,3,3,3,0,120,13,15,8,0,1,2,4,4,4,4,0,120,15,10,8,1,3,2,4,4,4,4,0,120,9,11,12,0,1,2,5,5,5,5,0,120,11,14,12,1,3,2,5,5,5,5,0,120,16,18,17,0,1,2,0,0,0,0,1,120,18,19,17,1,3,2,0,0,0,0,1,120,20,22,21,0,1,2,1,1,1,1,1,120,22,23,21,1,3,2,1,1,1,1,1,120,20,21,17,0,1,2,2,2,2,2,1,120,21,16,17,1,3,2,2,2,2,2,1,120,23,22,18,0,1,2,3,3,3,3,1,120,22,19,18,1,3,2,3,3,3,3,1,120,21,23,16,0,1,2,4,4,4,4,1,120,23,18,16,1,3,2,4,4,4,4,1,120,17,19,20,0,1,2,5,5,5,5,1,120,19,22,20,1,3,2,5,5,5,5,1,120,24,26,25,0,1,2,0,0,0,0,1,120,26,27,25,1,3,2,0,0,0,0,1,120,28,30,29,0,1,2,1,1,1,1,1,120,30,31,29,1,3,2,1,1,1,1,1,120,28,29,25,0,1,2,2,2,2,2,1,120,29,24,25,1,3,2,2,2,2,2,1,120,31,30,26,0,1,2,3,3,3,3,1,120,30,27,26,1,3,2,3,3,3,3,1,120,29,31,24,0,1,2,4,4,4,4,1,120,31,26,24,1,3,2,4,4,4,4,1,120,25,27,28,0,1,2,5,5,5,5,1,120,27,30,28,1,3,2,5,5,5,5,1,120,32,34,33,0,1,2,0,0,0,0,1,120,34,35,33,1,3,2,0,0,0,0,1,120,36,38,37,0,1,2,1,1,1,1,1,120,38,39,37,1,3,2,1,1,1,1,1,120,36,37,33,0,1,2,2,2,2,2,1,120,37,32,33,1,3,2,2,2,2,2,1,120,39,38,34,0,1,2,3,3,3,3,1,120,38,35,34,1,3,2,3,3,3,3,1,120,37,39,32,0,1,2,4,4,4,4,1,120,39,34,32,1,3,2,4,4,4,4,1,120,33,35,36,0,1,2,5,5,5,5,1,120,35,38,36,1,3,2,5,5,5,5,1,120,40,42,41,0,1,2,0,0,0,0,1,120,42,43,41,1,3,2,0,0,0,0,1,120,44,46,45,0,1,2,1,1,1,1,1,120,46,47,45,1,3,2,1,1,1,1,1,120,44,45,41,0,1,2,2,2,2,2,1,120,45,40,41,1,3,2,2,2,2,2,1,120,47,46,42,0,1,2,3,3,3,3,1,120,46,43,42,1,3,2,3,3,3,3,1,120,45,47,40,0,1,2,4,4,4,4,1,120,47,42,40,1,3,2,4,4,4,4,1,120,41,43,44,0,1,2,5,5,5,5,1,120,43,46,44,1,3,2,5,5,5,5,1,120,48,50,49,0,1,2,0,0,0,0,0,120,50,51,49,1,3,2,0,0,0,0,0,120,52,54,53,0,1,2,1,1,1,1,0,120,54,55,53,1,3,2,1,1,1,1,0,120,52,53,49,0,1,2,2,2,2,2,0,120,53,48,49,1,3,2,2,2,2,2,0,120,55,54,50,0,1,2,3,3,3,3,0,120,54,51,50,1,3,2,3,3,3,3,0,120,53,55,48,0,1,2,4,4,4,4,0,120,55,50,48,1,3,2,4,4,4,4,0,120,49,51,52,0,1,2,5,5,5,5,0,120,51,54,52,1,3,2,5,5,5,5,0,120,56,58,57,0,1,2,0,0,0,0,0,120,58,59,57,1,3,2,0,0,0,0,0,120,60,62,61,0,1,2,1,1,1,1,0,120,62,63,61,1,3,2,1,1,1,1,0,120,60,61,57,0,1,2,2,2,2,2,0,120,61,56,57,1,3,2,2,2,2,2,0,120,63,62,58,0,1,2,3,3,3,3,0,120,62,59,58,1,3,2,3,3,3,3,0,120,61,63,56,0,1,2,4,4,4,4,0,120,63,58,56,1,3,2,4,4,4,4,0,120,57,59,60,0,1,2,5,5,5,5,0,120,59,62,60,1,3,2,5,5,5,5,0,120,64,66,65,0,1,2,0,0,0,0,0,120,66,67,65,1,3,2,0,0,0,0,0,120,68,70,69,0,1,2,1,1,1,1,0,120,70,71,69,1,3,2,1,1,1,1,0,120,68,69,65,0,1,2,2,2,2,2,0,120,69,64,65,1,3,2,2,2,2,2,0,120,71,70,66,0,1,2,3,3,3,3,0,120,70,67,66,1,3,2,3,3,3,3,0,120,69,71,64,0,1,2,4,4,4,4,0,120,71,66,64,1,3,2,4,4,4,4,0,120,65,67,68,0,1,2,5,5,5,5,0,120,67,70,68,1,3,2,5,5,5,5,0,120,72,74,73,0,1,2,0,0,0,0,0,120,74,75,73,1,3,2,0,0,0,0,0,120,76,78,77,0,1,2,1,1,1,1,0,120,78,79,77,1,3,2,1,1,1,1,0,120,76,77,73,0,1,2,2,2,2,2,0,120,77,72,73,1,3,2,2,2,2,2,0,120,79,78,74,0,1,2,3,3,3,3,0,120,78,75,74,1,3,2,3,3,3,3,0,120,77,79,72,0,1,2,4,4,4,4,0,120,79,74,72,1,3,2,4,4,4,4,0,120,73,75,76,0,1,2,5,5,5,5,0,120,75,78,76,1,3,2,5,5,5,5,0,120,80,82,81,0,1,2,0,0,0,0,0,120,82,83,81,1,3,2,0,0,0,0,0,120,84,86,85,0,1,2,1,1,1,1,0,120,86,87,85,1,3,2,1,1,1,1,0,120,84,85,81,0,1,2,2,2,2,2,0,120,85,80,81,1,3,2,2,2,2,2,0,120,87,86,82,0,1,2,3,3,3,3,0,120,86,83,82,1,3,2,3,3,3,3,0,120,85,87,80,0,1,2,4,4,4,4,0,120,87,82,80,1,3,2,4,4,4,4,0,120,81,83,84,0,1,2,5,5,5,5,0,120,83,86,84,1,3,2,5,5,5,5,0,120,88,90,89,0,1,2,0,0,0,0,0,120,90,91,89,1,3,2,0,0,0,0,0,120,92,94,93,0,1,2,1,1,1,1,0,120,94,95,93,1,3,2,1,1,1,1,0,120,92,93,89,0,1,2,2,2,2,2,0,120,93,88,89,1,3,2,2,2,2,2,0,120,95,94,90,0,1,2,3,3,3,3,0,120,94,91,90,1,3,2,3,3,3,3,0,120,93,95,88,0,1,2,4,4,4,4,0,120,95,90,88,1,3,2,4,4,4,4,0,120,89,91,92,0,1,2,5,5,5,5,0,120,91,94,92,1,3,2,5,5,5,5,0,120,96,98,97,0,1,2,0,0,0,0,0,120,98,99,97,1,3,2,0,0,0,0,0,120,100,102,101,0,1,2,1,1,1,1,0,120,102,103,101,1,3,2,1,1,1,1,0,120,100,101,97,0,1,2,2,2,2,2,0,120,101,96,97,1,3,2,2,2,2,2,0,120,103,102,98,0,1,2,3,3,3,3,0,120,102,99,98,1,3,2,3,3,3,3,0,120,101,103,96,0,1,2,4,4,4,4,0,120,103,98,96,1,3,2,4,4,4,4,0,120,97,99,100,0,1,2,5,5,5,5,0,120,99,102,100,1,3,2,5,5,5,5,0,120,104,106,105,0,1,2,0,0,0,0,0,120,106,107,105,1,3,2,0,0,0,0,0,120,108,110,109,0,1,2,1,1,1,1,0,120,110,111,109,1,3,2,1,1,1,1,0,120,108,109,105,0,1,2,2,2,2,2,0,120,109,104,105,1,3,2,2,2,2,2,0,120,111,110,106,0,1,2,3,3,3,3,0,120,110,107,106,1,3,2,3,3,3,3,0,120,109,111,104,0,1,2,4,4,4,4,0,120,111,106,104,1,3,2,4,4,4,4,0,120,105,107,108,0,1,2,5,5,5,5,0,120,107,110,108,1,3,2,5,5,5,5,0,120,112,114,113,0,1,2,0,0,0,0,0,120,114,115,113,1,3,2,0,0,0,0,0,120,116,118,117,0,1,2,1,1,1,1,0,120,118,119,117,1,3,2,1,1,1,1,0,120,116,117,113,0,1,2,2,2,2,2,0,120,117,112,113,1,3,2,2,2,2,2,0,120,119,118,114,0,1,2,3,3,3,3,0,120,118,115,114,1,3,2,3,3,3,3,0,120,117,119,112,0,1,2,4,4,4,4,0,120,119,114,112,1,3,2,4,4,4,4,0,120,113,115,116,0,1,2,5,5,5,5,0,120,115,118,116,1,3,2,5,5,5,5,0,120,120,122,121,0,1,2,0,0,0,0,0,120,122,123,121,1,3,2,0,0,0,0,0,120,124,126,125,0,1,2,1,1,1,1,0,120,126,127,125,1,3,2,1,1,1,1,0,120,124,125,121,0,1,2,2,2,2,2,0,120,125,120,121,1,3,2,2,2,2,2,0,120,127,126,122,0,1,2,3,3,3,3,0,120,126,123,122,1,3,2,3,3,3,3,0,120,125,127,120,0,1,2,4,4,4,4,0,120,127,122,120,1,3,2,4,4,4,4,0,120,121,123,124,0,1,2,5,5,5,5,0,120,123,126,124,1,3,2,5,5,5,5,0,120,128,130,129,0,1,2,0,0,0,0,0,120,130,131,129,1,3,2,0,0,0,0,0,120,132,134,133,0,1,2,1,1,1,1,0,120,134,135,133,1,3,2,1,1,1,1,0,120,132,133,129,0,1,2,2,2,2,2,0,120,133,128,129,1,3,2,2,2,2,2,0,120,135,134,130,0,1,2,3,3,3,3,0,120,134,131,130,1,3,2,3,3,3,3,0,120,133,135,128,0,1,2,4,4,4,4,0,120,135,130,128,1,3,2,4,4,4,4,0,120,129,131,132,0,1,2,5,5,5,5,0,120,131,134,132,1,3,2,5,5,5,5,0,120,136,138,137,0,1,2,0,0,0,0,0,120,138,139,137,1,3,2,0,0,0,0,0,120,140,142,141,0,1,2,1,1,1,1,0,120,142,143,141,1,3,2,1,1,1,1,0,120,140,141,137,0,1,2,2,2,2,2,0,120,141,136,137,1,3,2,2,2,2,2,0,120,143,142,138,0,1,2,3,3,3,3,0,120,142,139,138,1,3,2,3,3,3,3,0,120,141,143,136,0,1,2,4,4,4,4,0,120,143,138,136,1,3,2,4,4,4,4,0,120,137,139,140,0,1,2,5,5,5,5,0,120,139,142,140,1,3,2,5,5,5,5,0,120,144,146,145,0,1,2,0,0,0,0,0,120,146,147,145,1,3,2,0,0,0,0,0,120,148,150,149,0,1,2,1,1,1,1,0,120,150,151,149,1,3,2,1,1,1,1,0,120,148,149,145,0,1,2,2,2,2,2,0,120,149,144,145,1,3,2,2,2,2,2,0,120,151,150,146,0,1,2,3,3,3,3,0,120,150,147,146,1,3,2,3,3,3,3,0,120,149,151,144,0,1,2,4,4,4,4,0,120,151,146,144,1,3,2,4,4,4,4,0,120,145,147,148,0,1,2,5,5,5,5,0,120,147,150,148,1,3,2,5,5,5,5,0,120,152,154,153,0,1,2,0,0,0,0,0,120,154,155,153,1,3,2,0,0,0,0,0,120,156,158,157,0,1,2,1,1,1,1,0,120,158,159,157,1,3,2,1,1,1,1,0,120,156,157,153,0,1,2,2,2,2,2,0,120,157,152,153,1,3,2,2,2,2,2,0,120,159,158,154,0,1,2,3,3,3,3,0,120,158,155,154,1,3,2,3,3,3,3,0,120,157,159,152,0,1,2,4,4,4,4,0,120,159,154,152,1,3,2,4,4,4,4,0,120,153,155,156,0,1,2,5,5,5,5,0,120,155,158,156,1,3,2,5,5,5,5,0,120,160,162,161,0,1,2,0,0,0,0,0,120,162,163,161,1,3,2,0,0,0,0,0,120,164,166,165,0,1,2,1,1,1,1,0,120,166,167,165,1,3,2,1,1,1,1,0,120,164,165,161,0,1,2,2,2,2,2,0,120,165,160,161,1,3,2,2,2,2,2,0,120,167,166,162,0,1,2,3,3,3,3,0,120,166,163,162,1,3,2,3,3,3,3,0,120,165,167,160,0,1,2,4,4,4,4,0,120,167,162,160,1,3,2,4,4,4,4,0,120,161,163,164,0,1,2,5,5,5,5,0,120,163,166,164,1,3,2,5,5,5,5,0,120,168,170,169,0,1,2,0,0,0,0,1,120,170,171,169,1,3,2,0,0,0,0,1,120,172,174,173,0,1,2,1,1,1,1,1,120,174,175,173,1,3,2,1,1,1,1,1,120,172,173,169,0,1,2,2,2,2,2,1,120,173,168,169,1,3,2,2,2,2,2,1,120,175,174,170,0,1,2,3,3,3,3,1,120,174,171,170,1,3,2,3,3,3,3,1,120,173,175,168,0,1,2,4,4,4,4,1,120,175,170,168,1,3,2,4,4,4,4,1,120,169,171,172,0,1,2,5,5,5,5,1,120,171,174,172,1,3,2,5,5,5,5,1,120,176,178,177,0,1,2,0,0,0,0,1,120,178,179,177,1,3,2,0,0,0,0,1,120,180,182,181,0,1,2,1,1,1,1,1,120,182,183,181,1,3,2,1,1,1,1,1,120,180,181,177,0,1,2,2,2,2,2,1,120,181,176,177,1,3,2,2,2,2,2,1,120,183,182,178,0,1,2,3,3,3,3,1,120,182,179,178,1,3,2,3,3,3,3,1,120,181,183,176,0,1,2,4,4,4,4,1,120,183,178,176,1,3,2,4,4,4,4,1,120,177,179,180,0,1,2,5,5,5,5,1,120,179,182,180,1,3,2,5,5,5,5,1,120,184,186,185,0,1,2,0,0,0,0,1,120,186,187,185,1,3,2,0,0,0,0,1,120,188,190,189,0,1,2,1,1,1,1,1,120,190,191,189,1,3,2,1,1,1,1,1,120,188,189,185,0,1,2,2,2,2,2,1,120,189,184,185,1,3,2,2,2,2,2,1,120,191,190,186,0,1,2,3,3,3,3,1,120,190,187,186,1,3,2,3,3,3,3,1,120,189,191,184,0,1,2,4,4,4,4,1,120,191,186,184,1,3,2,4,4,4,4,1,120,185,187,188,0,1,2,5,5,5,5,1,120,187,190,188,1,3,2,5,5,5,5,1,120,192,194,193,0,1,2,0,0,0,0,1,120,194,195,193,1,3,2,0,0,0,0,1,120,196,198,197,0,1,2,1,1,1,1,1,120,198,199,197,1,3,2,1,1,1,1,1,120,196,197,193,0,1,2,2,2,2,2,1,120,197,192,193,1,3,2,2,2,2,2,1,120,199,198,194,0,1,2,3,3,3,3,1,120,198,195,194,1,3,2,3,3,3,3,1,120,197,199,192,0,1,2,4,4,4,4,1,120,199,194,192,1,3,2,4,4,4,4,1,120,193,195,196,0,1,2,5,5,5,5,1,120,195,198,196,1,3,2,5,5,5,5,1,120,200,202,201,0,1,2,0,0,0,0,0,120,202,203,201,1,3,2,0,0,0,0,0,120,204,206,205,0,1,2,1,1,1,1,0,120,206,207,205,1,3,2,1,1,1,1,0,120,204,205,201,0,1,2,2,2,2,2,0,120,205,200,201,1,3,2,2,2,2,2,0,120,207,206,202,0,1,2,3,3,3,3,0,120,206,203,202,1,3,2,3,3,3,3,0,120,205,207,200,0,1,2,4,4,4,4,0,120,207,202,200,1,3,2,4,4,4,4,0,120,201,203,204,0,1,2,5,5,5,5,0,120,203,206,204,1,3,2,5,5,5,5,0,120,208,210,209,0,1,2,0,0,0,0,0,120,210,211,209,1,3,2,0,0,0,0,0,120,212,214,213,0,1,2,1,1,1,1,0,120,214,215,213,1,3,2,1,1,1,1,0,120,212,213,209,0,1,2,2,2,2,2,0,120,213,208,209,1,3,2,2,2,2,2,0,120,215,214,210,0,1,2,3,3,3,3,0,120,214,211,210,1,3,2,3,3,3,3,0,120,213,215,208,0,1,2,4,4,4,4,0,120,215,210,208,1,3,2,4,4,4,4,0,120,209,211,212,0,1,2,5,5,5,5,0,120,211,214,212,1,3,2,5,5,5,5,0,120,216,218,217,0,1,2,0,0,0,0,0,120,218,219,217,1,3,2,0,0,0,0,0,120,220,222,221,0,1,2,1,1,1,1,0,120,222,223,221,1,3,2,1,1,1,1,0,120,220,221,217,0,1,2,2,2,2,2,0,120,221,216,217,1,3,2,2,2,2,2,0,120,223,222,218,0,1,2,3,3,3,3,0,120,222,219,218,1,3,2,3,3,3,3,0,120,221,223,216,0,1,2,4,4,4,4,0,120,223,218,216,1,3,2,4,4,4,4,0,120,217,219,220,0,1,2,5,5,5,5,0,120,219,222,220,1,3,2,5,5,5,5,0,120,224,226,225,0,1,2,0,0,0,0,0,120,226,227,225,1,3,2,0,0,0,0,0,120,228,230,229,0,1,2,1,1,1,1,0,120,230,231,229,1,3,2,1,1,1,1,0,120,228,229,225,0,1,2,2,2,2,2,0,120,229,224,225,1,3,2,2,2,2,2,0,120,231,230,226,0,1,2,3,3,3,3,0,120,230,227,226,1,3,2,3,3,3,3,0,120,229,231,224,0,1,2,4,4,4,4,0,120,231,226,224,1,3,2,4,4,4,4,0,120,225,227,228,0,1,2,5,5,5,5,0,120,227,230,228,1,3,2,5,5,5,5,0,120,232,234,233,0,1,2,0,0,0,0,0,120,234,235,233,1,3,2,0,0,0,0,0,120,236,238,237,0,1,2,1,1,1,1,0,120,238,239,237,1,3,2,1,1,1,1,0,120,236,237,233,0,1,2,2,2,2,2,0,120,237,232,233,1,3,2,2,2,2,2,0,120,239,238,234,0,1,2,3,3,3,3,0,120,238,235,234,1,3,2,3,3,3,3,0,120,237,239,232,0,1,2,4,4,4,4,0,120,239,234,232,1,3,2,4,4,4,4,0,120,233,235,236,0,1,2,5,5,5,5,0,120,235,238,236,1,3,2,5,5,5,5,0,120,240,242,241,0,1,2,0,0,0,0,0,120,242,243,241,1,3,2,0,0,0,0,0,120,244,246,245,0,1,2,1,1,1,1,0,120,246,247,245,1,3,2,1,1,1,1,0,120,244,245,241,0,1,2,2,2,2,2,0,120,245,240,241,1,3,2,2,2,2,2,0,120,247,246,242,0,1,2,3,3,3,3,0,120,246,243,242,1,3,2,3,3,3,3,0,120,245,247,240,0,1,2,4,4,4,4,0,120,247,242,240,1,3,2,4,4,4,4,0,120,241,243,244,0,1,2,5,5,5,5,0,120,243,246,244,1,3,2,5,5,5,5,0,120,248,250,249,0,1,2,0,0,0,0,0,120,250,251,249,1,3,2,0,0,0,0,0,120,252,254,253,0,1,2,1,1,1,1,0,120,254,255,253,1,3,2,1,1,1,1,0,120,252,253,249,0,1,2,2,2,2,2,0,120,253,248,249,1,3,2,2,2,2,2,0,120,255,254,250,0,1,2,3,3,3,3,0,120,254,251,250,1,3,2,3,3,3,3,0,120,253,255,248,0,1,2,4,4,4,4,0,120,255,250,248,1,3,2,4,4,4,4,0,120,249,251,252,0,1,2,5,5,5,5,0,120,251,254,252,1,3,2,5,5,5,5,0,120,256,258,257,0,1,2,0,0,0,0,0,120,258,259,257,1,3,2,0,0,0,0,0,120,260,262,261,0,1,2,1,1,1,1,0,120,262,263,261,1,3,2,1,1,1,1,0,120,260,261,257,0,1,2,2,2,2,2,0,120,261,256,257,1,3,2,2,2,2,2,0,120,263,262,258,0,1,2,3,3,3,3,0,120,262,259,258,1,3,2,3,3,3,3,0,120,261,263,256,0,1,2,4,4,4,4,0,120,263,258,256,1,3,2,4,4,4,4,0,120,257,259,260,0,1,2,5,5,5,5,0,120,259,262,260,1,3,2,5,5,5,5,0,120,264,266,265,0,1,2,0,0,0,0,0,120,266,267,265,1,3,2,0,0,0,0,0,120,268,270,269,0,1,2,1,1,1,1,0,120,270,271,269,1,3,2,1,1,1,1,0,120,268,269,265,0,1,2,2,2,2,2,0,120,269,264,265,1,3,2,2,2,2,2,0,120,271,270,266,0,1,2,3,3,3,3,0,120,270,267,266,1,3,2,3,3,3,3,0,120,269,271,264,0,1,2,4,4,4,4,0,120,271,266,264,1,3,2,4,4,4,4,0,120,265,267,268,0,1,2,5,5,5,5,0,120,267,270,268,1,3,2,5,5,5,5,0,120,272,274,273,0,1,2,0,0,0,0,0,120,274,275,273,1,3,2,0,0,0,0,0,120,276,278,277,0,1,2,1,1,1,1,0,120,278,279,277,1,3,2,1,1,1,1,0,120,276,277,273,0,1,2,2,2,2,2,0,120,277,272,273,1,3,2,2,2,2,2,0,120,279,278,274,0,1,2,3,3,3,3,0,120,278,275,274,1,3,2,3,3,3,3,0,120,277,279,272,0,1,2,4,4,4,4,0,120,279,274,272,1,3,2,4,4,4,4,0,120,273,275,276,0,1,2,5,5,5,5,0,120,275,278,276,1,3,2,5,5,5,5,0,120,280,282,281,0,1,2,0,0,0,0,1,120,282,283,281,1,3,2,0,0,0,0,1,120,284,286,285,0,1,2,1,1,1,1,1,120,286,287,285,1,3,2,1,1,1,1,1,120,284,285,281,0,1,2,2,2,2,2,1,120,285,280,281,1,3,2,2,2,2,2,1,120,287,286,282,0,1,2,3,3,3,3,1,120,286,283,282,1,3,2,3,3,3,3,1,120,285,287,280,0,1,2,4,4,4,4,1,120,287,282,280,1,3,2,4,4,4,4,1,120,281,283,284,0,1,2,5,5,5,5,1,120,283,286,284,1,3,2,5,5,5,5,1,120,288,290,289,0,1,2,0,0,0,0,1,120,290,291,289,1,3,2,0,0,0,0,1,120,292,294,293,0,1,2,1,1,1,1,1,120,294,295,293,1,3,2,1,1,1,1,1,120,292,293,289,0,1,2,2,2,2,2,1,120,293,288,289,1,3,2,2,2,2,2,1,120,295,294,290,0,1,2,3,3,3,3,1,120,294,291,290,1,3,2,3,3,3,3,1,120,293,295,288,0,1,2,4,4,4,4,1,120,295,290,288,1,3,2,4,4,4,4,1,120,289,291,292,0,1,2,5,5,5,5,1,120,291,294,292,1,3,2,5,5,5,5,1,120,296,298,297,0,1,2,0,0,0,0,1,120,298,299,297,1,3,2,0,0,0,0,1,120,300,302,301,0,1,2,1,1,1,1,1,120,302,303,301,1,3,2,1,1,1,1,1,120,300,301,297,0,1,2,2,2,2,2,1,120,301,296,297,1,3,2,2,2,2,2,1,120,303,302,298,0,1,2,3,3,3,3,1,120,302,299,298,1,3,2,3,3,3,3,1,120,301,303,296,0,1,2,4,4,4,4,1,120,303,298,296,1,3,2,4,4,4,4,1,120,297,299,300,0,1,2,5,5,5,5,1,120,299,302,300,1,3,2,5,5,5,5,1,120,304,306,305,0,1,2,0,0,0,0,1,120,306,307,305,1,3,2,0,0,0,0,1,120,308,310,309,0,1,2,1,1,1,1,1,120,310,311,309,1,3,2,1,1,1,1,1,120,308,309,305,0,1,2,2,2,2,2,1,120,309,304,305,1,3,2,2,2,2,2,1,120,311,310,306,0,1,2,3,3,3,3,1,120,310,307,306,1,3,2,3,3,3,3,1,120,309,311,304,0,1,2,4,4,4,4,1,120,311,306,304,1,3,2,4,4,4,4,1,120,305,307,308,0,1,2,5,5,5,5,1,120,307,310,308,1,3,2,5,5,5,5,1,120,312,314,313,0,1,2,0,0,0,0,1,120,314,315,313,1,3,2,0,0,0,0,1,120,316,318,317,0,1,2,1,1,1,1,1,120,318,319,317,1,3,2,1,1,1,1,1,120,316,317,313,0,1,2,2,2,2,2,1,120,317,312,313,1,3,2,2,2,2,2,1,120,319,318,314,0,1,2,3,3,3,3,1,120,318,315,314,1,3,2,3,3,3,3,1,120,317,319,312,0,1,2,4,4,4,4,1,120,319,314,312,1,3,2,4,4,4,4,1,120,313,315,316,0,1,2,5,5,5,5,1,120,315,318,316,1,3,2,5,5,5,5,1,120,320,322,321,0,1,2,0,0,0,0,1,120,322,323,321,1,3,2,0,0,0,0,1,120,324,326,325,0,1,2,1,1,1,1,1,120,326,327,325,1,3,2,1,1,1,1,1,120,324,325,321,0,1,2,2,2,2,2,1,120,325,320,321,1,3,2,2,2,2,2,1,120,327,326,322,0,1,2,3,3,3,3,1,120,326,323,322,1,3,2,3,3,3,3,1,120,325,327,320,0,1,2,4,4,4,4,1,120,327,322,320,1,3,2,4,4,4,4,1,120,321,323,324,0,1,2,5,5,5,5,1,120,323,326,324,1,3,2,5,5,5,5,1,120,328,330,329,0,1,2,0,0,0,0,1,120,330,331,329,1,3,2,0,0,0,0,1,120,332,334,333,0,1,2,1,1,1,1,1,120,334,335,333,1,3,2,1,1,1,1,1,120,332,333,329,0,1,2,2,2,2,2,1,120,333,328,329,1,3,2,2,2,2,2,1,120,335,334,330,0,1,2,3,3,3,3,1,120,334,331,330,1,3,2,3,3,3,3,1,120,333,335,328,0,1,2,4,4,4,4,1,120,335,330,328,1,3,2,4,4,4,4,1,120,329,331,332,0,1,2,5,5,5,5,1,120,331,334,332,1,3,2,5,5,5,5,1,120,336,338,337,0,1,2,0,0,0,0,1,120,338,339,337,1,3,2,0,0,0,0,1,120,340,342,341,0,1,2,1,1,1,1,1,120,342,343,341,1,3,2,1,1,1,1,1,120,340,341,337,0,1,2,2,2,2,2,1,120,341,336,337,1,3,2,2,2,2,2,1,120,343,342,338,0,1,2,3,3,3,3,1,120,342,339,338,1,3,2,3,3,3,3,1,120,341,343,336,0,1,2,4,4,4,4,1,120,343,338,336,1,3,2,4,4,4,4,1,120,337,339,340,0,1,2,5,5,5,5,1,120,339,342,340,1,3,2,5,5,5,5,1,120,344,346,345,0,1,2,0,0,0,0,1,120,346,347,345,1,3,2,0,0,0,0,1,120,348,350,349,0,1,2,1,1,1,1,1,120,350,351,349,1,3,2,1,1,1,1,1,120,348,349,345,0,1,2,2,2,2,2,1,120,349,344,345,1,3,2,2,2,2,2,1,120,351,350,346,0,1,2,3,3,3,3,1,120,350,347,346,1,3,2,3,3,3,3,1,120,349,351,344,0,1,2,4,4,4,4,1,120,351,346,344,1,3,2,4,4,4,4,1,120,345,347,348,0,1,2,5,5,5,5,1,120,347,350,348,1,3,2,5,5,5,5,1,120,352,354,353,0,1,2,0,0,0,0,1,120,354,355,353,1,3,2,0,0,0,0,1,120,356,358,357,0,1,2,1,1,1,1,1,120,358,359,357,1,3,2,1,1,1,1,1,120,356,357,353,0,1,2,2,2,2,2,1,120,357,352,353,1,3,2,2,2,2,2,1,120,359,358,354,0,1,2,3,3,3,3,1,120,358,355,354,1,3,2,3,3,3,3,1,120,357,359,352,0,1,2,4,4,4,4,1,120,359,354,352,1,3,2,4,4,4,4,1,120,353,355,356,0,1,2,5,5,5,5,1,120,355,358,356,1,3,2,5,5,5,5,1,120,360,362,361,0,1,2,0,0,0,0,0,120,362,363,361,1,3,2,0,0,0,0,0,120,364,366,365,0,1,2,1,1,1,1,0,120,366,367,365,1,3,2,1,1,1,1,0,120,364,365,361,0,1,2,2,2,2,2,0,120,365,360,361,1,3,2,2,2,2,2,0,120,367,366,362,0,1,2,3,3,3,3,0,120,366,363,362,1,3,2,3,3,3,3,0,120,365,367,360,0,1,2,4,4,4,4,0,120,367,362,360,1,3,2,4,4,4,4,0,120,361,363,364,0,1,2,5,5,5,5,0,120,363,366,364,1,3,2,5,5,5,5,0,120,368,370,369,0,1,2,0,0,0,0,0,120,370,371,369,1,3,2,0,0,0,0,0,120,372,374,373,0,1,2,1,1,1,1,0,120,374,375,373,1,3,2,1,1,1,1,0,120,372,373,369,0,1,2,2,2,2,2,0,120,373,368,369,1,3,2,2,2,2,2,0,120,375,374,370,0,1,2,3,3,3,3,0,120,374,371,370,1,3,2,3,3,3,3,0,120,373,375,368,0,1,2,4,4,4,4,0,120,375,370,368,1,3,2,4,4,4,4,0,120,369,371,372,0,1,2,5,5,5,5,0,120,371,374,372,1,3,2,5,5,5,5,0,120,376,378,377,0,1,2,0,0,0,0,1,120,378,379,377,1,3,2,0,0,0,0,1,120,380,382,381,0,1,2,1,1,1,1,1,120,382,383,381,1,3,2,1,1,1,1,1,120,380,381,377,0,1,2,2,2,2,2,1,120,381,376,377,1,3,2,2,2,2,2,1,120,383,382,378,0,1,2,3,3,3,3,1,120,382,379,378,1,3,2,3,3,3,3,1,120,381,383,376,0,1,2,4,4,4,4,1,120,383,378,376,1,3,2,4,4,4,4,1,120,377,379,380,0,1,2,5,5,5,5,1,120,379,382,380,1,3,2,5,5,5,5,1,120,384,386,385,0,1,2,0,0,0,0,1,120,386,387,385,1,3,2,0,0,0,0,1,120,388,390,389,0,1,2,1,1,1,1,1,120,390,391,389,1,3,2,1,1,1,1,1,120,388,389,385,0,1,2,2,2,2,2,1,120,389,384,385,1,3,2,2,2,2,2,1,120,391,390,386,0,1,2,3,3,3,3,1,120,390,387,386,1,3,2,3,3,3,3,1,120,389,391,384,0,1,2,4,4,4,4,1,120,391,386,384,1,3,2,4,4,4,4,1,120,385,387,388,0,1,2,5,5,5,5,1,120,387,390,388,1,3,2,5,5,5,5,1,120,392,394,393,0,1,2,0,0,0,0,1,120,394,395,393,1,3,2,0,0,0,0,1,120,396,398,397,0,1,2,1,1,1,1,1,120,398,399,397,1,3,2,1,1,1,1,1,120,396,397,393,0,1,2,2,2,2,2,1,120,397,392,393,1,3,2,2,2,2,2,1,120,399,398,394,0,1,2,3,3,3,3,1,120,398,395,394,1,3,2,3,3,3,3,1,120,397,399,392,0,1,2,4,4,4,4,1,120,399,394,392,1,3,2,4,4,4,4,1,120,393,395,396,0,1,2,5,5,5,5,1,120,395,398,396,1,3,2,5,5,5,5,1,120,400,402,401,0,1,2,0,0,0,0,1,120,402,403,401,1,3,2,0,0,0,0,1,120,404,406,405,0,1,2,1,1,1,1,1,120,406,407,405,1,3,2,1,1,1,1,1,120,404,405,401,0,1,2,2,2,2,2,1,120,405,400,401,1,3,2,2,2,2,2,1,120,407,406,402,0,1,2,3,3,3,3,1,120,406,403,402,1,3,2,3,3,3,3,1,120,405,407,400,0,1,2,4,4,4,4,1,120,407,402,400,1,3,2,4,4,4,4,1,120,401,403,404,0,1,2,5,5,5,5,1,120,403,406,404,1,3,2,5,5,5,5,1,120,408,410,409,0,1,2,0,0,0,0,1,120,410,411,409,1,3,2,0,0,0,0,1,120,412,414,413,0,1,2,1,1,1,1,1,120,414,415,413,1,3,2,1,1,1,1,1,120,412,413,409,0,1,2,2,2,2,2,1,120,413,408,409,1,3,2,2,2,2,2,1,120,415,414,410,0,1,2,3,3,3,3,1,120,414,411,410,1,3,2,3,3,3,3,1,120,413,415,408,0,1,2,4,4,4,4,1,120,415,410,408,1,3,2,4,4,4,4,1,120,409,411,412,0,1,2,5,5,5,5,1,120,411,414,412,1,3,2,5,5,5,5,1,120,416,418,417,0,1,2,0,0,0,0,1,120,418,419,417,1,3,2,0,0,0,0,1,120,420,422,421,0,1,2,1,1,1,1,1,120,422,423,421,1,3,2,1,1,1,1,1,120,420,421,417,0,1,2,2,2,2,2,1,120,421,416,417,1,3,2,2,2,2,2,1,120,423,422,418,0,1,2,3,3,3,3,1,120,422,419,418,1,3,2,3,3,3,3,1,120,421,423,416,0,1,2,4,4,4,4,1,120,423,418,416,1,3,2,4,4,4,4,1,120,417,419,420,0,1,2,5,5,5,5,1,120,419,422,420,1,3,2,5,5,5,5,1,120,424,426,425,0,1,2,0,0,0,0,1,120,426,427,425,1,3,2,0,0,0,0,1,120,428,430,429,0,1,2,1,1,1,1,1,120,430,431,429,1,3,2,1,1,1,1,1,120,428,429,425,0,1,2,2,2,2,2,1,120,429,424,425,1,3,2,2,2,2,2,1,120,431,430,426,0,1,2,3,3,3,3,1,120,430,427,426,1,3,2,3,3,3,3,1,120,429,431,424,0,1,2,4,4,4,4,1,120,431,426,424,1,3,2,4,4,4,4,1,120,425,427,428,0,1,2,5,5,5,5,1,120,427,430,428,1,3,2,5,5,5,5,1,120,432,434,433,0,1,2,0,0,0,0,1,120,434,435,433,1,3,2,0,0,0,0,1,120,436,438,437,0,1,2,1,1,1,1,1,120,438,439,437,1,3,2,1,1,1,1,1,120,436,437,433,0,1,2,2,2,2,2,1,120,437,432,433,1,3,2,2,2,2,2,1,120,439,438,434,0,1,2,3,3,3,3,1,120,438,435,434,1,3,2,3,3,3,3,1,120,437,439,432,0,1,2,4,4,4,4,1,120,439,434,432,1,3,2,4,4,4,4,1,120,433,435,436,0,1,2,5,5,5,5,1,120,435,438,436,1,3,2,5,5,5,5,1,120,440,442,441,0,1,2,0,0,0,0,0,120,442,443,441,1,3,2,0,0,0,0,0,120,444,446,445,0,1,2,1,1,1,1,0,120,446,447,445,1,3,2,1,1,1,1,0,120,444,445,441,0,1,2,2,2,2,2,0,120,445,440,441,1,3,2,2,2,2,2,0,120,447,446,442,0,1,2,3,3,3,3,0,120,446,443,442,1,3,2,3,3,3,3,0,120,445,447,440,0,1,2,4,4,4,4,0,120,447,442,440,1,3,2,4,4,4,4,0,120,441,443,444,0,1,2,5,5,5,5,0,120,443,446,444,1,3,2,5,5,5,5,0,120,448,450,449,0,1,2,0,0,0,0,0,120,450,451,449,1,3,2,0,0,0,0,0,120,452,454,453,0,1,2,1,1,1,1,0,120,454,455,453,1,3,2,1,1,1,1,0,120,452,453,449,0,1,2,2,2,2,2,0,120,453,448,449,1,3,2,2,2,2,2,0,120,455,454,450,0,1,2,3,3,3,3,0,120,454,451,450,1,3,2,3,3,3,3,0,120,453,455,448,0,1,2,4,4,4,4,0,120,455,450,448,1,3,2,4,4,4,4,0,120,449,451,452,0,1,2,5,5,5,5,0,120,451,454,452,1,3,2,5,5,5,5,0,120,456,458,457,0,1,2,0,0,0,0,1,120,458,459,457,1,3,2,0,0,0,0,1,120,460,462,461,0,1,2,1,1,1,1,1,120,462,463,461,1,3,2,1,1,1,1,1,120,460,461,457,0,1,2,2,2,2,2,1,120,461,456,457,1,3,2,2,2,2,2,1,120,463,462,458,0,1,2,3,3,3,3,1,120,462,459,458,1,3,2,3,3,3,3,1,120,461,463,456,0,1,2,4,4,4,4,1,120,463,458,456,1,3,2,4,4,4,4,1,120,457,459,460,0,1,2,5,5,5,5,1,120,459,462,460,1,3,2,5,5,5,5,1,120,464,466,465,0,1,2,0,0,0,0,1,120,466,467,465,1,3,2,0,0,0,0,1,120,468,470,469,0,1,2,1,1,1,1,1,120,470,471,469,1,3,2,1,1,1,1,1,120,468,469,465,0,1,2,2,2,2,2,1,120,469,464,465,1,3,2,2,2,2,2,1,120,471,470,466,0,1,2,3,3,3,3,1,120,470,467,466,1,3,2,3,3,3,3,1,120,469,471,464,0,1,2,4,4,4,4,1,120,471,466,464,1,3,2,4,4,4,4,1,120,465,467,468,0,1,2,5,5,5,5,1,120,467,470,468,1,3,2,5,5,5,5,1,120,472,474,473,0,1,2,0,0,0,0,0,120,474,475,473,1,3,2,0,0,0,0,0,120,476,478,477,0,1,2,1,1,1,1,0,120,478,479,477,1,3,2,1,1,1,1,0,120,476,477,473,0,1,2,2,2,2,2,0,120,477,472,473,1,3,2,2,2,2,2,0,120,479,478,474,0,1,2,3,3,3,3,0,120,478,475,474,1,3,2,3,3,3,3,0,120,477,479,472,0,1,2,4,4,4,4,0,120,479,474,472,1,3,2,4,4,4,4,0,120,473,475,476,0,1,2,5,5,5,5,0,120,475,478,476,1,3,2,5,5,5,5,0,120,480,482,481,0,1,2,0,0,0,0,0,120,482,483,481,1,3,2,0,0,0,0,0,120,484,486,485,0,1,2,1,1,1,1,0,120,486,487,485,1,3,2,1,1,1,1,0,120,484,485,481,0,1,2,2,2,2,2,0,120,485,480,481,1,3,2,2,2,2,2,0,120,487,486,482,0,1,2,3,3,3,3,0,120,486,483,482,1,3,2,3,3,3,3,0,120,485,487,480,0,1,2,4,4,4,4,0,120,487,482,480,1,3,2,4,4,4,4,0,120,481,483,484,0,1,2,5,5,5,5,0,120,483,486,484,1,3,2,5,5,5,5,0,120,488,490,489,0,1,2,0,0,0,0,0,120,490,491,489,1,3,2,0,0,0,0,0,120,492,494,493,0,1,2,1,1,1,1,0,120,494,495,493,1,3,2,1,1,1,1,0,120,492,493,489,0,1,2,2,2,2,2,0,120,493,488,489,1,3,2,2,2,2,2,0,120,495,494,490,0,1,2,3,3,3,3,0,120,494,491,490,1,3,2,3,3,3,3,0,120,493,495,488,0,1,2,4,4,4,4,0,120,495,490,488,1,3,2,4,4,4,4,0,120,489,491,492,0,1,2,5,5,5,5,0,120,491,494,492,1,3,2,5,5,5,5,0,120,496,498,497,0,1,2,0,0,0,0,0,120,498,499,497,1,3,2,0,0,0,0,0,120,500,502,501,0,1,2,1,1,1,1,0,120,502,503,501,1,3,2,1,1,1,1,0,120,500,501,497,0,1,2,2,2,2,2,0,120,501,496,497,1,3,2,2,2,2,2,0,120,503,502,498,0,1,2,3,3,3,3,0,120,502,499,498,1,3,2,3,3,3,3,0,120,501,503,496,0,1,2,4,4,4,4,0,120,503,498,496,1,3,2,4,4,4,4,0,120,497,499,500,0,1,2,5,5,5,5,0,120,499,502,500,1,3,2,5,5,5,5,0,120,504,506,505,0,1,2,0,0,0,0,0,120,506,507,505,1,3,2,0,0,0,0,0,120,508,510,509,0,1,2,1,1,1,1,0,120,510,511,509,1,3,2,1,1,1,1,0,120,508,509,505,0,1,2,2,2,2,2,0,120,509,504,505,1,3,2,2,2,2,2,0,120,511,510,506,0,1,2,3,3,3,3,0,120,510,507,506,1,3,2,3,3,3,3,0,120,509,511,504,0,1,2,4,4,4,4,0,120,511,506,504,1,3,2,4,4,4,4,0,120,505,507,508,0,1,2,5,5,5,5,0,120,507,510,508,1,3,2,5,5,5,5,0,120,512,514,513,0,1,2,0,0,0,0,0,120,514,515,513,1,3,2,0,0,0,0,0,120,516,518,517,0,1,2,1,1,1,1,0,120,518,519,517,1,3,2,1,1,1,1,0,120,516,517,513,0,1,2,2,2,2,2,0,120,517,512,513,1,3,2,2,2,2,2,0,120,519,518,514,0,1,2,3,3,3,3,0,120,518,515,514,1,3,2,3,3,3,3,0,120,517,519,512,0,1,2,4,4,4,4,0,120,519,514,512,1,3,2,4,4,4,4,0,120,513,515,516,0,1,2,5,5,5,5,0,120,515,518,516,1,3,2,5,5,5,5,0,120,520,522,521,0,1,2,0,0,0,0,0,120,522,523,521,1,3,2,0,0,0,0,0,120,524,526,525,0,1,2,1,1,1,1,0,120,526,527,525,1,3,2,1,1,1,1,0,120,524,525,521,0,1,2,2,2,2,2,0,120,525,520,521,1,3,2,2,2,2,2,0,120,527,526,522,0,1,2,3,3,3,3,0,120,526,523,522,1,3,2,3,3,3,3,0,120,525,527,520,0,1,2,4,4,4,4,0,120,527,522,520,1,3,2,4,4,4,4,0,120,521,523,524,0,1,2,5,5,5,5,0,120,523,526,524,1,3,2,5,5,5,5,0,120,528,530,529,0,1,2,0,0,0,0,0,120,530,531,529,1,3,2,0,0,0,0,0,120,532,534,533,0,1,2,1,1,1,1,0,120,534,535,533,1,3,2,1,1,1,1,0,120,532,533,529,0,1,2,2,2,2,2,0,120,533,528,529,1,3,2,2,2,2,2,0,120,535,534,530,0,1,2,3,3,3,3,0,120,534,531,530,1,3,2,3,3,3,3,0,120,533,535,528,0,1,2,4,4,4,4,0,120,535,530,528,1,3,2,4,4,4,4,0,120,529,531,532,0,1,2,5,5,5,5,0,120,531,534,532,1,3,2,5,5,5,5,0,120,536,538,537,0,1,2,0,0,0,0,0,120,538,539,537,1,3,2,0,0,0,0,0,120,540,542,541,0,1,2,1,1,1,1,0,120,542,543,541,1,3,2,1,1,1,1,0,120,540,541,537,0,1,2,2,2,2,2,0,120,541,536,537,1,3,2,2,2,2,2,0,120,543,542,538,0,1,2,3,3,3,3,0,120,542,539,538,1,3,2,3,3,3,3,0,120,541,543,536,0,1,2,4,4,4,4,0,120,543,538,536,1,3,2,4,4,4,4,0,120,537,539,540,0,1,2,5,5,5,5,0,120,539,542,540,1,3,2,5,5,5,5,0,120,544,546,545,0,1,2,0,0,0,0,0,120,546,547,545,1,3,2,0,0,0,0,0,120,548,550,549,0,1,2,1,1,1,1,0,120,550,551,549,1,3,2,1,1,1,1,0,120,548,549,545,0,1,2,2,2,2,2,0,120,549,544,545,1,3,2,2,2,2,2,0,120,551,550,546,0,1,2,3,3,3,3,0,120,550,547,546,1,3,2,3,3,3,3,0,120,549,551,544,0,1,2,4,4,4,4,0,120,551,546,544,1,3,2,4,4,4,4,0,120,545,547,548,0,1,2,5,5,5,5,0,120,547,550,548,1,3,2,5,5,5,5,0,120,552,554,553,0,1,2,0,0,0,0,0,120,554,555,553,1,3,2,0,0,0,0,0,120,556,558,557,0,1,2,1,1,1,1,0,120,558,559,557,1,3,2,1,1,1,1,0,120,556,557,553,0,1,2,2,2,2,2,0,120,557,552,553,1,3,2,2,2,2,2,0,120,559,558,554,0,1,2,3,3,3,3,0,120,558,555,554,1,3,2,3,3,3,3,0,120,557,559,552,0,1,2,4,4,4,4,0,120,559,554,552,1,3,2,4,4,4,4,0,120,553,555,556,0,1,2,5,5,5,5,0,120,555,558,556,1,3,2,5,5,5,5,0,120,560,562,561,0,1,2,0,0,0,0,1,120,562,563,561,1,3,2,0,0,0,0,1,120,564,566,565,0,1,2,1,1,1,1,1,120,566,567,565,1,3,2,1,1,1,1,1,120,564,565,561,0,1,2,2,2,2,2,1,120,565,560,561,1,3,2,2,2,2,2,1,120,567,566,562,0,1,2,3,3,3,3,1,120,566,563,562,1,3,2,3,3,3,3,1,120,565,567,560,0,1,2,4,4,4,4,1,120,567,562,560,1,3,2,4,4,4,4,1,120,561,563,564,0,1,2,5,5,5,5,1,120,563,566,564,1,3,2,5,5,5,5,1,120,568,570,569,0,1,2,0,0,0,0,0,120,570,571,569,1,3,2,0,0,0,0,0,120,572,574,573,0,1,2,1,1,1,1,0,120,574,575,573,1,3,2,1,1,1,1,0,120,572,573,569,0,1,2,2,2,2,2,0,120,573,568,569,1,3,2,2,2,2,2,0,120,575,574,570,0,1,2,3,3,3,3,0,120,574,571,570,1,3,2,3,3,3,3,0,120,573,575,568,0,1,2,4,4,4,4,0,120,575,570,568,1,3,2,4,4,4,4,0,120,569,571,572,0,1,2,5,5,5,5,0,120,571,574,572,1,3,2,5,5,5,5,0,120,576,578,577,0,1,2,0,0,0,0,0,120,578,579,577,1,3,2,0,0,0,0,0,120,580,582,581,0,1,2,1,1,1,1,0,120,582,583,581,1,3,2,1,1,1,1,0,120,580,581,577,0,1,2,2,2,2,2,0,120,581,576,577,1,3,2,2,2,2,2,0,120,583,582,578,0,1,2,3,3,3,3,0,120,582,579,578,1,3,2,3,3,3,3,0,120,581,583,576,0,1,2,4,4,4,4,0,120,583,578,576,1,3,2,4,4,4,4,0,120,577,579,580,0,1,2,5,5,5,5,0,120,579,582,580,1,3,2,5,5,5,5,0,120,584,586,585,0,1,2,0,0,0,0,0,120,586,587,585,1,3,2,0,0,0,0,0,120,588,590,589,0,1,2,1,1,1,1,0,120,590,591,589,1,3,2,1,1,1,1,0,120,588,589,585,0,1,2,2,2,2,2,0,120,589,584,585,1,3,2,2,2,2,2,0,120,591,590,586,0,1,2,3,3,3,3,0,120,590,587,586,1,3,2,3,3,3,3,0,120,589,591,584,0,1,2,4,4,4,4,0,120,591,586,584,1,3,2,4,4,4,4,0,120,585,587,588,0,1,2,5,5,5,5,0,120,587,590,588,1,3,2,5,5,5,5,0,120,592,594,593,0,1,2,0,0,0,0,0,120,594,595,593,1,3,2,0,0,0,0,0,120,596,598,597,0,1,2,1,1,1,1,0,120,598,599,597,1,3,2,1,1,1,1,0,120,596,597,593,0,1,2,2,2,2,2,0,120,597,592,593,1,3,2,2,2,2,2,0,120,599,598,594,0,1,2,3,3,3,3,0,120,598,595,594,1,3,2,3,3,3,3,0,120,597,599,592,0,1,2,4,4,4,4,0,120,599,594,592,1,3,2,4,4,4,4,0,120,593,595,596,0,1,2,5,5,5,5,0,120,595,598,596,1,3,2,5,5,5,5,0,120,600,602,601,0,1,2,0,0,0,0,0,120,602,603,601,1,3,2,0,0,0,0,0,120,604,606,605,0,1,2,1,1,1,1,0,120,606,607,605,1,3,2,1,1,1,1,0,120,604,605,601,0,1,2,2,2,2,2,0,120,605,600,601,1,3,2,2,2,2,2,0,120,607,606,602,0,1,2,3,3,3,3,0,120,606,603,602,1,3,2,3,3,3,3,0,120,605,607,600,0,1,2,4,4,4,4,0,120,607,602,600,1,3,2,4,4,4,4,0,120,601,603,604,0,1,2,5,5,5,5,0,120,603,606,604,1,3,2,5,5,5,5,0,120,608,610,609,0,1,2,0,0,0,0,0,120,610,611,609,1,3,2,0,0,0,0,0,120,612,614,613,0,1,2,1,1,1,1,0,120,614,615,613,1,3,2,1,1,1,1,0,120,612,613,609,0,1,2,2,2,2,2,0,120,613,608,609,1,3,2,2,2,2,2,0,120,615,614,610,0,1,2,3,3,3,3,0,120,614,611,610,1,3,2,3,3,3,3,0,120,613,615,608,0,1,2,4,4,4,4,0,120,615,610,608,1,3,2,4,4,4,4,0,120,609,611,612,0,1,2,5,5,5,5,0,120,611,614,612,1,3,2,5,5,5,5,0,120,616,618,617,0,1,2,0,0,0,0,0,120,618,619,617,1,3,2,0,0,0,0,0,120,620,622,621,0,1,2,1,1,1,1,0,120,622,623,621,1,3,2,1,1,1,1,0,120,620,621,617,0,1,2,2,2,2,2,0,120,621,616,617,1,3,2,2,2,2,2,0,120,623,622,618,0,1,2,3,3,3,3,0,120,622,619,618,1,3,2,3,3,3,3,0,120,621,623,616,0,1,2,4,4,4,4,0,120,623,618,616,1,3,2,4,4,4,4,0,120,617,619,620,0,1,2,5,5,5,5,0,120,619,622,620,1,3,2,5,5,5,5,0,120,624,626,625,0,1,2,0,0,0,0,0,120,626,627,625,1,3,2,0,0,0,0,0,120,628,630,629,0,1,2,1,1,1,1,0,120,630,631,629,1,3,2,1,1,1,1,0,120,628,629,625,0,1,2,2,2,2,2,0,120,629,624,625,1,3,2,2,2,2,2,0,120,631,630,626,0,1,2,3,3,3,3,0,120,630,627,626,1,3,2,3,3,3,3,0,120,629,631,624,0,1,2,4,4,4,4,0,120,631,626,624,1,3,2,4,4,4,4,0,120,625,627,628,0,1,2,5,5,5,5,0,120,627,630,628,1,3,2,5,5,5,5,0,120,632,634,633,0,1,2,0,0,0,0,0,120,634,635,633,1,3,2,0,0,0,0,0,120,636,638,637,0,1,2,1,1,1,1,0,120,638,639,637,1,3,2,1,1,1,1,0,120,636,637,633,0,1,2,2,2,2,2,0,120,637,632,633,1,3,2,2,2,2,2,0,120,639,638,634,0,1,2,3,3,3,3,0,120,638,635,634,1,3,2,3,3,3,3,0,120,637,639,632,0,1,2,4,4,4,4,0,120,639,634,632,1,3,2,4,4,4,4,0,120,633,635,636,0,1,2,5,5,5,5,0,120,635,638,636,1,3,2,5,5,5,5,0,120,640,642,641,0,1,2,0,0,0,0,0,120,642,643,641,1,3,2,0,0,0,0,0,120,644,646,645,0,1,2,1,1,1,1,0,120,646,647,645,1,3,2,1,1,1,1,0,120,644,645,641,0,1,2,2,2,2,2,0,120,645,640,641,1,3,2,2,2,2,2,0,120,647,646,642,0,1,2,3,3,3,3,0,120,646,643,642,1,3,2,3,3,3,3,0,120,645,647,640,0,1,2,4,4,4,4,0,120,647,642,640,1,3,2,4,4,4,4,0,120,641,643,644,0,1,2,5,5,5,5,0,120,643,646,644,1,3,2,5,5,5,5,0,120,648,650,649,0,1,2,0,0,0,0,0,120,650,651,649,1,3,2,0,0,0,0,0,120,652,654,653,0,1,2,1,1,1,1,0,120,654,655,653,1,3,2,1,1,1,1,0,120,652,653,649,0,1,2,2,2,2,2,0,120,653,648,649,1,3,2,2,2,2,2,0,120,655,654,650,0,1,2,3,3,3,3,0,120,654,651,650,1,3,2,3,3,3,3,0,120,653,655,648,0,1,2,4,4,4,4,0,120,655,650,648,1,3,2,4,4,4,4,0,120,649,651,652,0,1,2,5,5,5,5,0,120,651,654,652,1,3,2,5,5,5,5,0,120,656,658,657,0,1,2,0,0,0,0,0,120,658,659,657,1,3,2,0,0,0,0,0,120,660,662,661,0,1,2,1,1,1,1,0,120,662,663,661,1,3,2,1,1,1,1,0,120,660,661,657,0,1,2,2,2,2,2,0,120,661,656,657,1,3,2,2,2,2,2,0,120,663,662,658,0,1,2,3,3,3,3,0,120,662,659,658,1,3,2,3,3,3,3,0,120,661,663,656,0,1,2,4,4,4,4,0,120,663,658,656,1,3,2,4,4,4,4,0,120,657,659,660,0,1,2,5,5,5,5,0,120,659,662,660,1,3,2,5,5,5,5,0,120,664,666,665,0,1,2,0,0,0,0,1,120,666,667,665,1,3,2,0,0,0,0,1,120,668,670,669,0,1,2,1,1,1,1,1,120,670,671,669,1,3,2,1,1,1,1,1,120,668,669,665,0,1,2,2,2,2,2,1,120,669,664,665,1,3,2,2,2,2,2,1,120,671,670,666,0,1,2,3,3,3,3,1,120,670,667,666,1,3,2,3,3,3,3,1,120,669,671,664,0,1,2,4,4,4,4,1,120,671,666,664,1,3,2,4,4,4,4,1,120,665,667,668,0,1,2,5,5,5,5,1,120,667,670,668,1,3,2,5,5,5,5,1,120,672,674,673,0,1,2,0,0,0,0,1,120,674,675,673,1,3,2,0,0,0,0,1,120,676,678,677,0,1,2,1,1,1,1,1,120,678,679,677,1,3,2,1,1,1,1,1,120,676,677,673,0,1,2,2,2,2,2,1,120,677,672,673,1,3,2,2,2,2,2,1,120,679,678,674,0,1,2,3,3,3,3,1,120,678,675,674,1,3,2,3,3,3,3,1,120,677,679,672,0,1,2,4,4,4,4,1,120,679,674,672,1,3,2,4,4,4,4,1,120,673,675,676,0,1,2,5,5,5,5,1,120,675,678,676,1,3,2,5,5,5,5,1,120,680,682,681,0,1,2,0,0,0,0,1,120,682,683,681,1,3,2,0,0,0,0,1,120,684,686,685,0,1,2,1,1,1,1,1,120,686,687,685,1,3,2,1,1,1,1,1,120,684,685,681,0,1,2,2,2,2,2,1,120,685,680,681,1,3,2,2,2,2,2,1,120,687,686,682,0,1,2,3,3,3,3,1,120,686,683,682,1,3,2,3,3,3,3,1,120,685,687,680,0,1,2,4,4,4,4,1,120,687,682,680,1,3,2,4,4,4,4,1,120,681,683,684,0,1,2,5,5,5,5,1,120,683,686,684,1,3,2,5,5,5,5,1,120,688,690,689,0,1,2,0,0,0,0,1,120,690,691,689,1,3,2,0,0,0,0,1,120,692,694,693,0,1,2,1,1,1,1,1,120,694,695,693,1,3,2,1,1,1,1,1,120,692,693,689,0,1,2,2,2,2,2,1,120,693,688,689,1,3,2,2,2,2,2,1,120,695,694,690,0,1,2,3,3,3,3,1,120,694,691,690,1,3,2,3,3,3,3,1,120,693,695,688,0,1,2,4,4,4,4,1,120,695,690,688,1,3,2,4,4,4,4,1,120,689,691,692,0,1,2,5,5,5,5,1,120,691,694,692,1,3,2,5,5,5,5,1,120,696,698,697,0,1,2,0,0,0,0,1,120,698,699,697,1,3,2,0,0,0,0,1,120,700,702,701,0,1,2,1,1,1,1,1,120,702,703,701,1,3,2,1,1,1,1,1,120,700,701,697,0,1,2,2,2,2,2,1,120,701,696,697,1,3,2,2,2,2,2,1,120,703,702,698,0,1,2,3,3,3,3,1,120,702,699,698,1,3,2,3,3,3,3,1,120,701,703,696,0,1,2,4,4,4,4,1,120,703,698,696,1,3,2,4,4,4,4,1,120,697,699,700,0,1,2,5,5,5,5,1,120,699,702,700,1,3,2,5,5,5,5,1,120,704,706,705,0,1,2,0,0,0,0,1,120,706,707,705,1,3,2,0,0,0,0,1,120,708,710,709,0,1,2,1,1,1,1,1,120,710,711,709,1,3,2,1,1,1,1,1,120,708,709,705,0,1,2,2,2,2,2,1,120,709,704,705,1,3,2,2,2,2,2,1,120,711,710,706,0,1,2,3,3,3,3,1,120,710,707,706,1,3,2,3,3,3,3,1,120,709,711,704,0,1,2,4,4,4,4,1,120,711,706,704,1,3,2,4,4,4,4,1,120,705,707,708,0,1,2,5,5,5,5,1,120,707,710,708,1,3,2,5,5,5,5,1,120,712,714,713,0,1,2,0,0,0,0,1,120,714,715,713,1,3,2,0,0,0,0,1,120,716,718,717,0,1,2,1,1,1,1,1,120,718,719,717,1,3,2,1,1,1,1,1,120,716,717,713,0,1,2,2,2,2,2,1,120,717,712,713,1,3,2,2,2,2,2,1,120,719,718,714,0,1,2,3,3,3,3,1,120,718,715,714,1,3,2,3,3,3,3,1,120,717,719,712,0,1,2,4,4,4,4,1,120,719,714,712,1,3,2,4,4,4,4,1,120,713,715,716,0,1,2,5,5,5,5,1,120,715,718,716,1,3,2,5,5,5,5,1,120,720,722,721,0,1,2,0,0,0,0,1,120,722,723,721,1,3,2,0,0,0,0,1,120,724,726,725,0,1,2,1,1,1,1,1,120,726,727,725,1,3,2,1,1,1,1,1,120,724,725,721,0,1,2,2,2,2,2,1,120,725,720,721,1,3,2,2,2,2,2,1,120,727,726,722,0,1,2,3,3,3,3,1,120,726,723,722,1,3,2,3,3,3,3,1,120,725,727,720,0,1,2,4,4,4,4,1,120,727,722,720,1,3,2,4,4,4,4,1,120,721,723,724,0,1,2,5,5,5,5,1,120,723,726,724,1,3,2,5,5,5,5,1,120,728,730,729,0,1,2,0,0,0,0,1,120,730,731,729,1,3,2,0,0,0,0,1,120,732,734,733,0,1,2,1,1,1,1,1,120,734,735,733,1,3,2,1,1,1,1,1,120,732,733,729,0,1,2,2,2,2,2,1,120,733,728,729,1,3,2,2,2,2,2,1,120,735,734,730,0,1,2,3,3,3,3,1,120,734,731,730,1,3,2,3,3,3,3,1,120,733,735,728,0,1,2,4,4,4,4,1,120,735,730,728,1,3,2,4,4,4,4,1,120,729,731,732,0,1,2,5,5,5,5,1,120,731,734,732,1,3,2,5,5,5,5,1,120,736,738,737,0,1,2,0,0,0,0,1,120,738,739,737,1,3,2,0,0,0,0,1,120,740,742,741,0,1,2,1,1,1,1,1,120,742,743,741,1,3,2,1,1,1,1,1,120,740,741,737,0,1,2,2,2,2,2,1,120,741,736,737,1,3,2,2,2,2,2,1,120,743,742,738,0,1,2,3,3,3,3,1,120,742,739,738,1,3,2,3,3,3,3,1,120,741,743,736,0,1,2,4,4,4,4,1,120,743,738,736,1,3,2,4,4,4,4,1,120,737,739,740,0,1,2,5,5,5,5,1,120,739,742,740,1,3,2,5,5,5,5,1,120,744,746,745,0,1,2,0,0,0,0,1,120,746,747,745,1,3,2,0,0,0,0,1,120,748,750,749,0,1,2,1,1,1,1,1,120,750,751,749,1,3,2,1,1,1,1,1,120,748,749,745,0,1,2,2,2,2,2,1,120,749,744,745,1,3,2,2,2,2,2,1,120,751,750,746,0,1,2,3,3,3,3,1,120,750,747,746,1,3,2,3,3,3,3,1,120,749,751,744,0,1,2,4,4,4,4,1,120,751,746,744,1,3,2,4,4,4,4,1,120,745,747,748,0,1,2,5,5,5,5,1,120,747,750,748,1,3,2,5,5,5,5,1,120,752,754,753,0,1,2,0,0,0,0,1,120,754,755,753,1,3,2,0,0,0,0,1,120,756,758,757,0,1,2,1,1,1,1,1,120,758,759,757,1,3,2,1,1,1,1,1,120,756,757,753,0,1,2,2,2,2,2,1,120,757,752,753,1,3,2,2,2,2,2,1,120,759,758,754,0,1,2,3,3,3,3,1,120,758,755,754,1,3,2,3,3,3,3,1,120,757,759,752,0,1,2,4,4,4,4,1,120,759,754,752,1,3,2,4,4,4,4,1,120,753,755,756,0,1,2,5,5,5,5,1,120,755,758,756,1,3,2,5,5,5,5,1,120,760,762,761,0,1,2,0,0,0,0,1,120,762,763,761,1,3,2,0,0,0,0,1,120,764,766,765,0,1,2,1,1,1,1,1,120,766,767,765,1,3,2,1,1,1,1,1,120,764,765,761,0,1,2,2,2,2,2,1,120,765,760,761,1,3,2,2,2,2,2,1,120,767,766,762,0,1,2,3,3,3,3,1,120,766,763,762,1,3,2,3,3,3,3,1,120,765,767,760,0,1,2,4,4,4,4,1,120,767,762,760,1,3,2,4,4,4,4,1,120,761,763,764,0,1,2,5,5,5,5,1,120,763,766,764,1,3,2,5,5,5,5,1,120,768,770,769,0,1,2,0,0,0,0,0,120,770,771,769,1,3,2,0,0,0,0,0,120,772,774,773,0,1,2,1,1,1,1,0,120,774,775,773,1,3,2,1,1,1,1,0,120,772,773,769,0,1,2,2,2,2,2,0,120,773,768,769,1,3,2,2,2,2,2,0,120,775,774,770,0,1,2,3,3,3,3,0,120,774,771,770,1,3,2,3,3,3,3,0,120,773,775,768,0,1,2,4,4,4,4,0,120,775,770,768,1,3,2,4,4,4,4,0,120,769,771,772,0,1,2,5,5,5,5,0,120,771,774,772,1,3,2,5,5,5,5,0,120,776,778,777,0,1,2,0,0,0,0,0,120,778,779,777,1,3,2,0,0,0,0,0,120,780,782,781,0,1,2,1,1,1,1,0,120,782,783,781,1,3,2,1,1,1,1,0,120,780,781,777,0,1,2,2,2,2,2,0,120,781,776,777,1,3,2,2,2,2,2,0,120,783,782,778,0,1,2,3,3,3,3,0,120,782,779,778,1,3,2,3,3,3,3,0,120,781,783,776,0,1,2,4,4,4,4,0,120,783,778,776,1,3,2,4,4,4,4,0,120,777,779,780,0,1,2,5,5,5,5,0,120,779,782,780,1,3,2,5,5,5,5,0,120,784,786,785,0,1,2,0,0,0,0,0,120,786,787,785,1,3,2,0,0,0,0,0,120,788,790,789,0,1,2,1,1,1,1,0,120,790,791,789,1,3,2,1,1,1,1,0,120,788,789,785,0,1,2,2,2,2,2,0,120,789,784,785,1,3,2,2,2,2,2,0,120,791,790,786,0,1,2,3,3,3,3,0,120,790,787,786,1,3,2,3,3,3,3,0,120,789,791,784,0,1,2,4,4,4,4,0,120,791,786,784,1,3,2,4,4,4,4,0,120,785,787,788,0,1,2,5,5,5,5,0,120,787,790,788,1,3,2,5,5,5,5,0,120,792,794,793,0,1,2,0,0,0,0,0,120,794,795,793,1,3,2,0,0,0,0,0,120,796,798,797,0,1,2,1,1,1,1,0,120,798,799,797,1,3,2,1,1,1,1,0,120,796,797,793,0,1,2,2,2,2,2,0,120,797,792,793,1,3,2,2,2,2,2,0,120,799,798,794,0,1,2,3,3,3,3,0,120,798,795,794,1,3,2,3,3,3,3,0,120,797,799,792,0,1,2,4,4,4,4,0,120,799,794,792,1,3,2,4,4,4,4,0,120,793,795,796,0,1,2,5,5,5,5,0,120,795,798,796,1,3,2,5,5,5,5,0,120,800,802,801,0,1,2,0,0,0,0,0,120,802,803,801,1,3,2,0,0,0,0,0,120,804,806,805,0,1,2,1,1,1,1,0,120,806,807,805,1,3,2,1,1,1,1,0,120,804,805,801,0,1,2,2,2,2,2,0,120,805,800,801,1,3,2,2,2,2,2,0,120,807,806,802,0,1,2,3,3,3,3,0,120,806,803,802,1,3,2,3,3,3,3,0,120,805,807,800,0,1,2,4,4,4,4,0,120,807,802,800,1,3,2,4,4,4,4,0,120,801,803,804,0,1,2,5,5,5,5,0,120,803,806,804,1,3,2,5,5,5,5,0,120,808,810,809,0,1,2,0,0,0,0,1,120,810,811,809,1,3,2,0,0,0,0,1,120,812,814,813,0,1,2,1,1,1,1,1,120,814,815,813,1,3,2,1,1,1,1,1,120,812,813,809,0,1,2,2,2,2,2,1,120,813,808,809,1,3,2,2,2,2,2,1,120,815,814,810,0,1,2,3,3,3,3,1,120,814,811,810,1,3,2,3,3,3,3,1,120,813,815,808,0,1,2,4,4,4,4,1,120,815,810,808,1,3,2,4,4,4,4,1,120,809,811,812,0,1,2,5,5,5,5,1,120,811,814,812,1,3,2,5,5,5,5,1,120,816,818,817,0,1,2,0,0,0,0,1,120,818,819,817,1,3,2,0,0,0,0,1,120,820,822,821,0,1,2,1,1,1,1,1,120,822,823,821,1,3,2,1,1,1,1,1,120,820,821,817,0,1,2,2,2,2,2,1,120,821,816,817,1,3,2,2,2,2,2,1,120,823,822,818,0,1,2,3,3,3,3,1,120,822,819,818,1,3,2,3,3,3,3,1,120,821,823,816,0,1,2,4,4,4,4,1,120,823,818,816,1,3,2,4,4,4,4,1,120,817,819,820,0,1,2,5,5,5,5,1,120,819,822,820,1,3,2,5,5,5,5,1,120,824,826,825,0,1,2,0,0,0,0,1,120,826,827,825,1,3,2,0,0,0,0,1,120,828,830,829,0,1,2,1,1,1,1,1,120,830,831,829,1,3,2,1,1,1,1,1,120,828,829,825,0,1,2,2,2,2,2,1,120,829,824,825,1,3,2,2,2,2,2,1,120,831,830,826,0,1,2,3,3,3,3,1,120,830,827,826,1,3,2,3,3,3,3,1,120,829,831,824,0,1,2,4,4,4,4,1,120,831,826,824,1,3,2,4,4,4,4,1,120,825,827,828,0,1,2,5,5,5,5,1,120,827,830,828,1,3,2,5,5,5,5,1,120,832,834,833,0,1,2,0,0,0,0,1,120,834,835,833,1,3,2,0,0,0,0,1,120,836,838,837,0,1,2,1,1,1,1,1,120,838,839,837,1,3,2,1,1,1,1,1,120,836,837,833,0,1,2,2,2,2,2,1,120,837,832,833,1,3,2,2,2,2,2,1,120,839,838,834,0,1,2,3,3,3,3,1,120,838,835,834,1,3,2,3,3,3,3,1,120,837,839,832,0,1,2,4,4,4,4,1,120,839,834,832,1,3,2,4,4,4,4,1,120,833,835,836,0,1,2,5,5,5,5,1,120,835,838,836,1,3,2,5,5,5,5,1,120,840,842,841,0,1,2,0,0,0,0,1,120,842,843,841,1,3,2,0,0,0,0,1,120,844,846,845,0,1,2,1,1,1,1,1,120,846,847,845,1,3,2,1,1,1,1,1,120,844,845,841,0,1,2,2,2,2,2,1,120,845,840,841,1,3,2,2,2,2,2,1,120,847,846,842,0,1,2,3,3,3,3,1,120,846,843,842,1,3,2,3,3,3,3,1,120,845,847,840,0,1,2,4,4,4,4,1,120,847,842,840,1,3,2,4,4,4,4,1,120,841,843,844,0,1,2,5,5,5,5,1,120,843,846,844,1,3,2,5,5,5,5,1,120,848,850,849,0,1,2,0,0,0,0,0,120,850,851,849,1,3,2,0,0,0,0,0,120,852,854,853,0,1,2,1,1,1,1,0,120,854,855,853,1,3,2,1,1,1,1,0,120,852,853,849,0,1,2,2,2,2,2,0,120,853,848,849,1,3,2,2,2,2,2,0,120,855,854,850,0,1,2,3,3,3,3,0,120,854,851,850,1,3,2,3,3,3,3,0,120,853,855,848,0,1,2,4,4,4,4,0,120,855,850,848,1,3,2,4,4,4,4,0,120,849,851,852,0,1,2,5,5,5,5,0,120,851,854,852,1,3,2,5,5,5,5,0,120,856,858,857,0,1,2,0,0,0,0,1,120,858,859,857,1,3,2,0,0,0,0,1,120,860,862,861,0,1,2,1,1,1,1,1,120,862,863,861,1,3,2,1,1,1,1,1,120,860,861,857,0,1,2,2,2,2,2,1,120,861,856,857,1,3,2,2,2,2,2,1,120,863,862,858,0,1,2,3,3,3,3,1,120,862,859,858,1,3,2,3,3,3,3,1,120,861,863,856,0,1,2,4,4,4,4,1,120,863,858,856,1,3,2,4,4,4,4,1,120,857,859,860,0,1,2,5,5,5,5,1,120,859,862,860,1,3,2,5,5,5,5,1,120,864,866,865,0,1,2,0,0,0,0,0,120,866,867,865,1,3,2,0,0,0,0,0,120,868,870,869,0,1,2,1,1,1,1,0,120,870,871,869,1,3,2,1,1,1,1,0,120,868,869,865,0,1,2,2,2,2,2,0,120,869,864,865,1,3,2,2,2,2,2,0,120,871,870,866,0,1,2,3,3,3,3,0,120,870,867,866,1,3,2,3,3,3,3,0,120,869,871,864,0,1,2,4,4,4,4,0,120,871,866,864,1,3,2,4,4,4,4,0,120,865,867,868,0,1,2,5,5,5,5,0,120,867,870,868,1,3,2,5,5,5,5,0,120,872,874,873,0,1,2,0,0,0,0,0,120,874,875,873,1,3,2,0,0,0,0,0,120,876,878,877,0,1,2,1,1,1,1,0,120,878,879,877,1,3,2,1,1,1,1,0,120,876,877,873,0,1,2,2,2,2,2,0,120,877,872,873,1,3,2,2,2,2,2,0,120,879,878,874,0,1,2,3,3,3,3,0,120,878,875,874,1,3,2,3,3,3,3,0,120,877,879,872,0,1,2,4,4,4,4,0,120,879,874,872,1,3,2,4,4,4,4,0,120,873,875,876,0,1,2,5,5,5,5,0,120,875,878,876,1,3,2,5,5,5,5,0,120,880,882,881,0,1,2,0,0,0,0,0,120,882,883,881,1,3,2,0,0,0,0,0,120,884,886,885,0,1,2,1,1,1,1,0,120,886,887,885,1,3,2,1,1,1,1,0,120,884,885,881,0,1,2,2,2,2,2,0,120,885,880,881,1,3,2,2,2,2,2,0,120,887,886,882,0,1,2,3,3,3,3,0,120,886,883,882,1,3,2,3,3,3,3,0,120,885,887,880,0,1,2,4,4,4,4,0,120,887,882,880,1,3,2,4,4,4,4,0,120,881,883,884,0,1,2,5,5,5,5,0,120,883,886,884,1,3,2,5,5,5,5,0,120,888,890,889,0,1,2,0,0,0,0,0,120,890,891,889,1,3,2,0,0,0,0,0,120,892,894,893,0,1,2,1,1,1,1,0,120,894,895,893,1,3,2,1,1,1,1,0,120,892,893,889,0,1,2,2,2,2,2,0,120,893,888,889,1,3,2,2,2,2,2,0,120,895,894,890,0,1,2,3,3,3,3,0,120,894,891,890,1,3,2,3,3,3,3,0,120,893,895,888,0,1,2,4,4,4,4,0,120,895,890,888,1,3,2,4,4,4,4,0,120,889,891,892,0,1,2,5,5,5,5,0,120,891,894,892,1,3,2,5,5,5,5,0,120,896,898,897,0,1,2,0,0,0,0,0,120,898,899,897,1,3,2,0,0,0,0,0,120,900,902,901,0,1,2,1,1,1,1,0,120,902,903,901,1,3,2,1,1,1,1,0,120,900,901,897,0,1,2,2,2,2,2,0,120,901,896,897,1,3,2,2,2,2,2,0,120,903,902,898,0,1,2,3,3,3,3,0,120,902,899,898,1,3,2,3,3,3,3,0,120,901,903,896,0,1,2,4,4,4,4,0,120,903,898,896,1,3,2,4,4,4,4,0,120,897,899,900,0,1,2,5,5,5,5,0,120,899,902,900,1,3,2,5,5,5,5,0,120,904,906,905,0,1,2,0,0,0,0,0,120,906,907,905,1,3,2,0,0,0,0,0,120,908,910,909,0,1,2,1,1,1,1,0,120,910,911,909,1,3,2,1,1,1,1,0,120,908,909,905,0,1,2,2,2,2,2,0,120,909,904,905,1,3,2,2,2,2,2,0,120,911,910,906,0,1,2,3,3,3,3,0,120,910,907,906,1,3,2,3,3,3,3,0,120,909,911,904,0,1,2,4,4,4,4,0,120,911,906,904,1,3,2,4,4,4,4,0,120,905,907,908,0,1,2,5,5,5,5,0,120,907,910,908,1,3,2,5,5,5,5,0,120,912,914,913,0,1,2,0,0,0,0,0,120,914,915,913,1,3,2,0,0,0,0,0,120,916,918,917,0,1,2,1,1,1,1,0,120,918,919,917,1,3,2,1,1,1,1,0,120,916,917,913,0,1,2,2,2,2,2,0,120,917,912,913,1,3,2,2,2,2,2,0,120,919,918,914,0,1,2,3,3,3,3,0,120,918,915,914,1,3,2,3,3,3,3,0,120,917,919,912,0,1,2,4,4,4,4,0,120,919,914,912,1,3,2,4,4,4,4,0,120,913,915,916,0,1,2,5,5,5,5,0,120,915,918,916,1,3,2,5,5,5,5,0,120,920,922,921,0,1,2,0,0,0,0,0,120,922,923,921,1,3,2,0,0,0,0,0,120,924,926,925,0,1,2,1,1,1,1,0,120,926,927,925,1,3,2,1,1,1,1,0,120,924,925,921,0,1,2,2,2,2,2,0,120,925,920,921,1,3,2,2,2,2,2,0,120,927,926,922,0,1,2,3,3,3,3,0,120,926,923,922,1,3,2,3,3,3,3,0,120,925,927,920,0,1,2,4,4,4,4,0,120,927,922,920,1,3,2,4,4,4,4,0,120,921,923,924,0,1,2,5,5,5,5,0,120,923,926,924,1,3,2,5,5,5,5,0,120,928,930,929,0,1,2,0,0,0,0,0,120,930,931,929,1,3,2,0,0,0,0,0,120,932,934,933,0,1,2,1,1,1,1,0,120,934,935,933,1,3,2,1,1,1,1,0,120,932,933,929,0,1,2,2,2,2,2,0,120,933,928,929,1,3,2,2,2,2,2,0,120,935,934,930,0,1,2,3,3,3,3,0,120,934,931,930,1,3,2,3,3,3,3,0,120,933,935,928,0,1,2,4,4,4,4,0,120,935,930,928,1,3,2,4,4,4,4,0,120,929,931,932,0,1,2,5,5,5,5,0,120,931,934,932,1,3,2,5,5,5,5,0,120,936,938,937,0,1,2,0,0,0,0,0,120,938,939,937,1,3,2,0,0,0,0,0,120,940,942,941,0,1,2,1,1,1,1,0,120,942,943,941,1,3,2,1,1,1,1,0,120,940,941,937,0,1,2,2,2,2,2,0,120,941,936,937,1,3,2,2,2,2,2,0,120,943,942,938,0,1,2,3,3,3,3,0,120,942,939,938,1,3,2,3,3,3,3,0,120,941,943,936,0,1,2,4,4,4,4,0,120,943,938,936,1,3,2,4,4,4,4,0,120,937,939,940,0,1,2,5,5,5,5,0,120,939,942,940,1,3,2,5,5,5,5,0,120,944,946,945,0,1,2,0,0,0,0,0,120,946,947,945,1,3,2,0,0,0,0,0,120,948,950,949,0,1,2,1,1,1,1,0,120,950,951,949,1,3,2,1,1,1,1,0,120,948,949,945,0,1,2,2,2,2,2,0,120,949,944,945,1,3,2,2,2,2,2,0,120,951,950,946,0,1,2,3,3,3,3,0,120,950,947,946,1,3,2,3,3,3,3,0,120,949,951,944,0,1,2,4,4,4,4,0,120,951,946,944,1,3,2,4,4,4,4,0,120,945,947,948,0,1,2,5,5,5,5,0,120,947,950,948,1,3,2,5,5,5,5,0,120,952,954,953,0,1,2,0,0,0,0,0,120,954,955,953,1,3,2,0,0,0,0,0,120,956,958,957,0,1,2,1,1,1,1,0,120,958,959,957,1,3,2,1,1,1,1,0,120,956,957,953,0,1,2,2,2,2,2,0,120,957,952,953,1,3,2,2,2,2,2,0,120,959,958,954,0,1,2,3,3,3,3,0,120,958,955,954,1,3,2,3,3,3,3,0,120,957,959,952,0,1,2,4,4,4,4,0,120,959,954,952,1,3,2,4,4,4,4,0,120,953,955,956,0,1,2,5,5,5,5,0,120,955,958,956,1,3,2,5,5,5,5,0,120,960,962,961,0,1,2,0,0,0,0,0,120,962,963,961,1,3,2,0,0,0,0,0,120,964,966,965,0,1,2,1,1,1,1,0,120,966,967,965,1,3,2,1,1,1,1,0,120,964,965,961,0,1,2,2,2,2,2,0,120,965,960,961,1,3,2,2,2,2,2,0,120,967,966,962,0,1,2,3,3,3,3,0,120,966,963,962,1,3,2,3,3,3,3,0,120,965,967,960,0,1,2,4,4,4,4,0,120,967,962,960,1,3,2,4,4,4,4,0,120,961,963,964,0,1,2,5,5,5,5,0,120,963,966,964,1,3,2,5,5,5,5,0,120,968,970,969,0,1,2,0,0,0,0,0,120,970,971,969,1,3,2,0,0,0,0,0,120,972,974,973,0,1,2,1,1,1,1,0,120,974,975,973,1,3,2,1,1,1,1,0,120,972,973,969,0,1,2,2,2,2,2,0,120,973,968,969,1,3,2,2,2,2,2,0,120,975,974,970,0,1,2,3,3,3,3,0,120,974,971,970,1,3,2,3,3,3,3,0,120,973,975,968,0,1,2,4,4,4,4,0,120,975,970,968,1,3,2,4,4,4,4,0,120,969,971,972,0,1,2,5,5,5,5,0,120,971,974,972,1,3,2,5,5,5,5,0,120,976,978,977,0,1,2,0,0,0,0,1,120,978,979,977,1,3,2,0,0,0,0,1,120,980,982,981,0,1,2,1,1,1,1,1,120,982,983,981,1,3,2,1,1,1,1,1,120,980,981,977,0,1,2,2,2,2,2,1,120,981,976,977,1,3,2,2,2,2,2,1,120,983,982,978,0,1,2,3,3,3,3,1,120,982,979,978,1,3,2,3,3,3,3,1,120,981,983,976,0,1,2,4,4,4,4,1,120,983,978,976,1,3,2,4,4,4,4,1,120,977,979,980,0,1,2,5,5,5,5,1,120,979,982,980,1,3,2,5,5,5,5,1,120,984,986,985,0,1,2,0,0,0,0,1,120,986,987,985,1,3,2,0,0,0,0,1,120,988,990,989,0,1,2,1,1,1,1,1,120,990,991,989,1,3,2,1,1,1,1,1,120,988,989,985,0,1,2,2,2,2,2,1,120,989,984,985,1,3,2,2,2,2,2,1,120,991,990,986,0,1,2,3,3,3,3,1,120,990,987,986,1,3,2,3,3,3,3,1,120,989,991,984,0,1,2,4,4,4,4,1,120,991,986,984,1,3,2,4,4,4,4,1,120,985,987,988,0,1,2,5,5,5,5,1,120,987,990,988,1,3,2,5,5,5,5,1,120,992,994,993,0,1,2,0,0,0,0,1,120,994,995,993,1,3,2,0,0,0,0,1,120,996,998,997,0,1,2,1,1,1,1,1,120,998,999,997,1,3,2,1,1,1,1,1,120,996,997,993,0,1,2,2,2,2,2,1,120,997,992,993,1,3,2,2,2,2,2,1,120,999,998,994,0,1,2,3,3,3,3,1,120,998,995,994,1,3,2,3,3,3,3,1,120,997,999,992,0,1,2,4,4,4,4,1,120,999,994,992,1,3,2,4,4,4,4,1,120,993,995,996,0,1,2,5,5,5,5,1,120,995,998,996,1,3,2,5,5,5,5,1,120,1000,1002,1001,0,1,2,0,0,0,0,0,120,1002,1003,1001,1,3,2,0,0,0,0,0,120,1004,1006,1005,0,1,2,1,1,1,1,0,120,1006,1007,1005,1,3,2,1,1,1,1,0,120,1004,1005,1001,0,1,2,2,2,2,2,0,120,1005,1000,1001,1,3,2,2,2,2,2,0,120,1007,1006,1002,0,1,2,3,3,3,3,0,120,1006,1003,1002,1,3,2,3,3,3,3,0,120,1005,1007,1000,0,1,2,4,4,4,4,0,120,1007,1002,1000,1,3,2,4,4,4,4,0,120,1001,1003,1004,0,1,2,5,5,5,5,0,120,1003,1006,1004,1,3,2,5,5,5,5,0,120,1008,1010,1009,0,1,2,0,0,0,0,0,120,1010,1011,1009,1,3,2,0,0,0,0,0,120,1012,1014,1013,0,1,2,1,1,1,1,0,120,1014,1015,1013,1,3,2,1,1,1,1,0,120,1012,1013,1009,0,1,2,2,2,2,2,0,120,1013,1008,1009,1,3,2,2,2,2,2,0,120,1015,1014,1010,0,1,2,3,3,3,3,0,120,1014,1011,1010,1,3,2,3,3,3,3,0,120,1013,1015,1008,0,1,2,4,4,4,4,0,120,1015,1010,1008,1,3,2,4,4,4,4,0,120,1009,1011,1012,0,1,2,5,5,5,5,0,120,1011,1014,1012,1,3,2,5,5,5,5,0,120,1016,1018,1017,0,1,2,0,0,0,0,0,120,1018,1019,1017,1,3,2,0,0,0,0,0,120,1020,1022,1021,0,1,2,1,1,1,1,0,120,1022,1023,1021,1,3,2,1,1,1,1,0,120,1020,1021,1017,0,1,2,2,2,2,2,0,120,1021,1016,1017,1,3,2,2,2,2,2,0,120,1023,1022,1018,0,1,2,3,3,3,3,0,120,1022,1019,1018,1,3,2,3,3,3,3,0,120,1021,1023,1016,0,1,2,4,4,4,4,0,120,1023,1018,1016,1,3,2,4,4,4,4,0,120,1017,1019,1020,0,1,2,5,5,5,5,0,120,1019,1022,1020,1,3,2,5,5,5,5,0,120,1024,1026,1025,0,1,2,0,0,0,0,1,120,1026,1027,1025,1,3,2,0,0,0,0,1,120,1028,1030,1029,0,1,2,1,1,1,1,1,120,1030,1031,1029,1,3,2,1,1,1,1,1,120,1028,1029,1025,0,1,2,2,2,2,2,1,120,1029,1024,1025,1,3,2,2,2,2,2,1,120,1031,1030,1026,0,1,2,3,3,3,3,1,120,1030,1027,1026,1,3,2,3,3,3,3,1,120,1029,1031,1024,0,1,2,4,4,4,4,1,120,1031,1026,1024,1,3,2,4,4,4,4,1,120,1025,1027,1028,0,1,2,5,5,5,5,1,120,1027,1030,1028,1,3,2,5,5,5,5,1,120,1032,1034,1033,0,1,2,0,0,0,0,1,120,1034,1035,1033,1,3,2,0,0,0,0,1,120,1036,1038,1037,0,1,2,1,1,1,1,1,120,1038,1039,1037,1,3,2,1,1,1,1,1,120,1036,1037,1033,0,1,2,2,2,2,2,1,120,1037,1032,1033,1,3,2,2,2,2,2,1,120,1039,1038,1034,0,1,2,3,3,3,3,1,120,1038,1035,1034,1,3,2,3,3,3,3,1,120,1037,1039,1032,0,1,2,4,4,4,4,1,120,1039,1034,1032,1,3,2,4,4,4,4,1,120,1033,1035,1036,0,1,2,5,5,5,5,1,120,1035,1038,1036,1,3,2,5,5,5,5,1,120,1040,1042,1041,0,1,2,0,0,0,0,1,120,1042,1043,1041,1,3,2,0,0,0,0,1,120,1044,1046,1045,0,1,2,1,1,1,1,1,120,1046,1047,1045,1,3,2,1,1,1,1,1,120,1044,1045,1041,0,1,2,2,2,2,2,1,120,1045,1040,1041,1,3,2,2,2,2,2,1,120,1047,1046,1042,0,1,2,3,3,3,3,1,120,1046,1043,1042,1,3,2,3,3,3,3,1,120,1045,1047,1040,0,1,2,4,4,4,4,1,120,1047,1042,1040,1,3,2,4,4,4,4,1,120,1041,1043,1044,0,1,2,5,5,5,5,1,120,1043,1046,1044,1,3,2,5,5,5,5,1,120,1048,1050,1049,0,1,2,0,0,0,0,1,120,1050,1051,1049,1,3,2,0,0,0,0,1,120,1052,1054,1053,0,1,2,1,1,1,1,1,120,1054,1055,1053,1,3,2,1,1,1,1,1,120,1052,1053,1049,0,1,2,2,2,2,2,1,120,1053,1048,1049,1,3,2,2,2,2,2,1,120,1055,1054,1050,0,1,2,3,3,3,3,1,120,1054,1051,1050,1,3,2,3,3,3,3,1,120,1053,1055,1048,0,1,2,4,4,4,4,1,120,1055,1050,1048,1,3,2,4,4,4,4,1,120,1049,1051,1052,0,1,2,5,5,5,5,1,120,1051,1054,1052,1,3,2,5,5,5,5,1,120,1056,1058,1057,0,1,2,0,0,0,0,1,120,1058,1059,1057,1,3,2,0,0,0,0,1,120,1060,1062,1061,0,1,2,1,1,1,1,1,120,1062,1063,1061,1,3,2,1,1,1,1,1,120,1060,1061,1057,0,1,2,2,2,2,2,1,120,1061,1056,1057,1,3,2,2,2,2,2,1,120,1063,1062,1058,0,1,2,3,3,3,3,1,120,1062,1059,1058,1,3,2,3,3,3,3,1,120,1061,1063,1056,0,1,2,4,4,4,4,1,120,1063,1058,1056,1,3,2,4,4,4,4,1,120,1057,1059,1060,0,1,2,5,5,5,5,1,120,1059,1062,1060,1,3,2,5,5,5,5,1,120,1064,1066,1065,0,1,2,0,0,0,0,1,120,1066,1067,1065,1,3,2,0,0,0,0,1,120,1068,1070,1069,0,1,2,1,1,1,1,1,120,1070,1071,1069,1,3,2,1,1,1,1,1,120,1068,1069,1065,0,1,2,2,2,2,2,1,120,1069,1064,1065,1,3,2,2,2,2,2,1,120,1071,1070,1066,0,1,2,3,3,3,3,1,120,1070,1067,1066,1,3,2,3,3,3,3,1,120,1069,1071,1064,0,1,2,4,4,4,4,1,120,1071,1066,1064,1,3,2,4,4,4,4,1,120,1065,1067,1068,0,1,2,5,5,5,5,1,120,1067,1070,1068,1,3,2,5,5,5,5,1,120,1072,1074,1073,0,1,2,0,0,0,0,1,120,1074,1075,1073,1,3,2,0,0,0,0,1,120,1076,1078,1077,0,1,2,1,1,1,1,1,120,1078,1079,1077,1,3,2,1,1,1,1,1,120,1076,1077,1073,0,1,2,2,2,2,2,1,120,1077,1072,1073,1,3,2,2,2,2,2,1,120,1079,1078,1074,0,1,2,3,3,3,3,1,120,1078,1075,1074,1,3,2,3,3,3,3,1,120,1077,1079,1072,0,1,2,4,4,4,4,1,120,1079,1074,1072,1,3,2,4,4,4,4,1,120,1073,1075,1076,0,1,2,5,5,5,5,1,120,1075,1078,1076,1,3,2,5,5,5,5,1,120,1080,1082,1081,0,1,2,0,0,0,0,1,120,1082,1083,1081,1,3,2,0,0,0,0,1,120,1084,1086,1085,0,1,2,1,1,1,1,1,120,1086,1087,1085,1,3,2,1,1,1,1,1,120,1084,1085,1081,0,1,2,2,2,2,2,1,120,1085,1080,1081,1,3,2,2,2,2,2,1,120,1087,1086,1082,0,1,2,3,3,3,3,1,120,1086,1083,1082,1,3,2,3,3,3,3,1,120,1085,1087,1080,0,1,2,4,4,4,4,1,120,1087,1082,1080,1,3,2,4,4,4,4,1,120,1081,1083,1084,0,1,2,5,5,5,5,1,120,1083,1086,1084,1,3,2,5,5,5,5,1,120,1088,1090,1089,0,1,2,0,0,0,0,1,120,1090,1091,1089,1,3,2,0,0,0,0,1,120,1092,1094,1093,0,1,2,1,1,1,1,1,120,1094,1095,1093,1,3,2,1,1,1,1,1,120,1092,1093,1089,0,1,2,2,2,2,2,1,120,1093,1088,1089,1,3,2,2,2,2,2,1,120,1095,1094,1090,0,1,2,3,3,3,3,1,120,1094,1091,1090,1,3,2,3,3,3,3,1,120,1093,1095,1088,0,1,2,4,4,4,4,1,120,1095,1090,1088,1,3,2,4,4,4,4,1,120,1089,1091,1092,0,1,2,5,5,5,5,1,120,1091,1094,1092,1,3,2,5,5,5,5,1,120,1096,1098,1097,0,1,2,0,0,0,0,1,120,1098,1099,1097,1,3,2,0,0,0,0,1,120,1100,1102,1101,0,1,2,1,1,1,1,1,120,1102,1103,1101,1,3,2,1,1,1,1,1,120,1100,1101,1097,0,1,2,2,2,2,2,1,120,1101,1096,1097,1,3,2,2,2,2,2,1,120,1103,1102,1098,0,1,2,3,3,3,3,1,120,1102,1099,1098,1,3,2,3,3,3,3,1,120,1101,1103,1096,0,1,2,4,4,4,4,1,120,1103,1098,1096,1,3,2,4,4,4,4,1,120,1097,1099,1100,0,1,2,5,5,5,5,1,120,1099,1102,1100,1,3,2,5,5,5,5,1,120,1104,1106,1105,0,1,2,0,0,0,0,1,120,1106,1107,1105,1,3,2,0,0,0,0,1,120,1108,1110,1109,0,1,2,1,1,1,1,1,120,1110,1111,1109,1,3,2,1,1,1,1,1,120,1108,1109,1105,0,1,2,2,2,2,2,1,120,1109,1104,1105,1,3,2,2,2,2,2,1,120,1111,1110,1106,0,1,2,3,3,3,3,1,120,1110,1107,1106,1,3,2,3,3,3,3,1,120,1109,1111,1104,0,1,2,4,4,4,4,1,120,1111,1106,1104,1,3,2,4,4,4,4,1,120,1105,1107,1108,0,1,2,5,5,5,5,1,120,1107,1110,1108,1,3,2,5,5,5,5,1,120,1112,1114,1113,0,1,2,0,0,0,0,1,120,1114,1115,1113,1,3,2,0,0,0,0,1,120,1116,1118,1117,0,1,2,1,1,1,1,1,120,1118,1119,1117,1,3,2,1,1,1,1,1,120,1116,1117,1113,0,1,2,2,2,2,2,1,120,1117,1112,1113,1,3,2,2,2,2,2,1,120,1119,1118,1114,0,1,2,3,3,3,3,1,120,1118,1115,1114,1,3,2,3,3,3,3,1,120,1117,1119,1112,0,1,2,4,4,4,4,1,120,1119,1114,1112,1,3,2,4,4,4,4,1,120,1113,1115,1116,0,1,2,5,5,5,5,1,120,1115,1118,1116,1,3,2,5,5,5,5,1,120,1120,1122,1121,0,1,2,0,0,0,0,1,120,1122,1123,1121,1,3,2,0,0,0,0,1,120,1124,1126,1125,0,1,2,1,1,1,1,1,120,1126,1127,1125,1,3,2,1,1,1,1,1,120,1124,1125,1121,0,1,2,2,2,2,2,1,120,1125,1120,1121,1,3,2,2,2,2,2,1,120,1127,1126,1122,0,1,2,3,3,3,3,1,120,1126,1123,1122,1,3,2,3,3,3,3,1,120,1125,1127,1120,0,1,2,4,4,4,4,1,120,1127,1122,1120,1,3,2,4,4,4,4,1,120,1121,1123,1124,0,1,2,5,5,5,5,1,120,1123,1126,1124,1,3,2,5,5,5,5,1,120,1128,1130,1129,0,1,2,0,0,0,0,1,120,1130,1131,1129,1,3,2,0,0,0,0,1,120,1132,1134,1133,0,1,2,1,1,1,1,1,120,1134,1135,1133,1,3,2,1,1,1,1,1,120,1132,1133,1129,0,1,2,2,2,2,2,1,120,1133,1128,1129,1,3,2,2,2,2,2,1,120,1135,1134,1130,0,1,2,3,3,3,3,1,120,1134,1131,1130,1,3,2,3,3,3,3,1,120,1133,1135,1128,0,1,2,4,4,4,4,1,120,1135,1130,1128,1,3,2,4,4,4,4,1,120,1129,1131,1132,0,1,2,5,5,5,5,1,120,1131,1134,1132,1,3,2,5,5,5,5,1,120,1136,1138,1137,0,1,2,0,0,0,0,1,120,1138,1139,1137,1,3,2,0,0,0,0,1,120,1140,1142,1141,0,1,2,1,1,1,1,1,120,1142,1143,1141,1,3,2,1,1,1,1,1,120,1140,1141,1137,0,1,2,2,2,2,2,1,120,1141,1136,1137,1,3,2,2,2,2,2,1,120,1143,1142,1138,0,1,2,3,3,3,3,1,120,1142,1139,1138,1,3,2,3,3,3,3,1,120,1141,1143,1136,0,1,2,4,4,4,4,1,120,1143,1138,1136,1,3,2,4,4,4,4,1,120,1137,1139,1140,0,1,2,5,5,5,5,1,120,1139,1142,1140,1,3,2,5,5,5,5,1,120,1144,1146,1145,0,1,2,0,0,0,0,0,120,1146,1147,1145,1,3,2,0,0,0,0,0,120,1148,1150,1149,0,1,2,1,1,1,1,0,120,1150,1151,1149,1,3,2,1,1,1,1,0,120,1148,1149,1145,0,1,2,2,2,2,2,0,120,1149,1144,1145,1,3,2,2,2,2,2,0,120,1151,1150,1146,0,1,2,3,3,3,3,0,120,1150,1147,1146,1,3,2,3,3,3,3,0,120,1149,1151,1144,0,1,2,4,4,4,4,0,120,1151,1146,1144,1,3,2,4,4,4,4,0,120,1145,1147,1148,0,1,2,5,5,5,5,0,120,1147,1150,1148,1,3,2,5,5,5,5,0,120,1152,1154,1153,0,1,2,0,0,0,0,0,120,1154,1155,1153,1,3,2,0,0,0,0,0,120,1156,1158,1157,0,1,2,1,1,1,1,0,120,1158,1159,1157,1,3,2,1,1,1,1,0,120,1156,1157,1153,0,1,2,2,2,2,2,0,120,1157,1152,1153,1,3,2,2,2,2,2,0,120,1159,1158,1154,0,1,2,3,3,3,3,0,120,1158,1155,1154,1,3,2,3,3,3,3,0,120,1157,1159,1152,0,1,2,4,4,4,4,0,120,1159,1154,1152,1,3,2,4,4,4,4,0,120,1153,1155,1156,0,1,2,5,5,5,5,0,120,1155,1158,1156,1,3,2,5,5,5,5,0,120,1160,1162,1161,0,1,2,0,0,0,0,0,120,1162,1163,1161,1,3,2,0,0,0,0,0,120,1164,1166,1165,0,1,2,1,1,1,1,0,120,1166,1167,1165,1,3,2,1,1,1,1,0,120,1164,1165,1161,0,1,2,2,2,2,2,0,120,1165,1160,1161,1,3,2,2,2,2,2,0,120,1167,1166,1162,0,1,2,3,3,3,3,0,120,1166,1163,1162,1,3,2,3,3,3,3,0,120,1165,1167,1160,0,1,2,4,4,4,4,0,120,1167,1162,1160,1,3,2,4,4,4,4,0,120,1161,1163,1164,0,1,2,5,5,5,5,0,120,1163,1166,1164,1,3,2,5,5,5,5,0,120,1168,1170,1169,0,1,2,0,0,0,0,0,120,1170,1171,1169,1,3,2,0,0,0,0,0,120,1172,1174,1173,0,1,2,1,1,1,1,0,120,1174,1175,1173,1,3,2,1,1,1,1,0,120,1172,1173,1169,0,1,2,2,2,2,2,0,120,1173,1168,1169,1,3,2,2,2,2,2,0,120,1175,1174,1170,0,1,2,3,3,3,3,0,120,1174,1171,1170,1,3,2,3,3,3,3,0,120,1173,1175,1168,0,1,2,4,4,4,4,0,120,1175,1170,1168,1,3,2,4,4,4,4,0,120,1169,1171,1172,0,1,2,5,5,5,5,0,120,1171,1174,1172,1,3,2,5,5,5,5,0,120,1176,1178,1177,0,1,2,0,0,0,0,0,120,1178,1179,1177,1,3,2,0,0,0,0,0,120,1180,1182,1181,0,1,2,1,1,1,1,0,120,1182,1183,1181,1,3,2,1,1,1,1,0,120,1180,1181,1177,0,1,2,2,2,2,2,0,120,1181,1176,1177,1,3,2,2,2,2,2,0,120,1183,1182,1178,0,1,2,3,3,3,3,0,120,1182,1179,1178,1,3,2,3,3,3,3,0,120,1181,1183,1176,0,1,2,4,4,4,4,0,120,1183,1178,1176,1,3,2,4,4,4,4,0,120,1177,1179,1180,0,1,2,5,5,5,5,0,120,1179,1182,1180,1,3,2,5,5,5,5,0,120,1184,1186,1185,0,1,2,0,0,0,0,2,120,1186,1187,1185,1,3,2,0,0,0,0,2,120,1188,1190,1189,0,1,2,1,1,1,1,2,120,1190,1191,1189,1,3,2,1,1,1,1,2,120,1188,1189,1185,0,1,2,2,2,2,2,2,120,1189,1184,1185,1,3,2,2,2,2,2,2,120,1191,1190,1186,0,1,2,3,3,3,3,2,120,1190,1187,1186,1,3,2,3,3,3,3,2,120,1189,1191,1184,0,1,2,4,4,4,4,2,120,1191,1186,1184,1,3,2,4,4,4,4,2,120,1185,1187,1188,0,1,2,5,5,5,5,2,120,1187,1190,1188,1,3,2,5,5,5,5,2,120,1192,1194,1193,0,1,2,0,0,0,0,2,120,1194,1195,1193,1,3,2,0,0,0,0,2,120,1196,1198,1197,0,1,2,1,1,1,1,2,120,1198,1199,1197,1,3,2,1,1,1,1,2,120,1196,1197,1193,0,1,2,2,2,2,2,2,120,1197,1192,1193,1,3,2,2,2,2,2,2,120,1199,1198,1194,0,1,2,3,3,3,3,2,120,1198,1195,1194,1,3,2,3,3,3,3,2,120,1197,1199,1192,0,1,2,4,4,4,4,2,120,1199,1194,1192,1,3,2,4,4,4,4,2,120,1193,1195,1196,0,1,2,5,5,5,5,2,120,1195,1198,1196,1,3,2,5,5,5,5,2,120,1200,1202,1201,0,1,2,0,0,0,0,2,120,1202,1203,1201,1,3,2,0,0,0,0,2,120,1204,1206,1205,0,1,2,1,1,1,1,2,120,1206,1207,1205,1,3,2,1,1,1,1,2,120,1204,1205,1201,0,1,2,2,2,2,2,2,120,1205,1200,1201,1,3,2,2,2,2,2,2,120,1207,1206,1202,0,1,2,3,3,3,3,2,120,1206,1203,1202,1,3,2,3,3,3,3,2,120,1205,1207,1200,0,1,2,4,4,4,4,2,120,1207,1202,1200,1,3,2,4,4,4,4,2,120,1201,1203,1204,0,1,2,5,5,5,5,2,120,1203,1206,1204,1,3,2,5,5,5,5,2,120,1208,1210,1209,0,1,2,0,0,0,0,2,120,1210,1211,1209,1,3,2,0,0,0,0,2,120,1212,1214,1213,0,1,2,1,1,1,1,2,120,1214,1215,1213,1,3,2,1,1,1,1,2,120,1212,1213,1209,0,1,2,2,2,2,2,2,120,1213,1208,1209,1,3,2,2,2,2,2,2,120,1215,1214,1210,0,1,2,3,3,3,3,2,120,1214,1211,1210,1,3,2,3,3,3,3,2,120,1213,1215,1208,0,1,2,4,4,4,4,2,120,1215,1210,1208,1,3,2,4,4,4,4,2,120,1209,1211,1212,0,1,2,5,5,5,5,2,120,1211,1214,1212,1,3,2,5,5,5,5,2]}}],"materials":[{"uuid":"7FDA0183-6723-4AB8-8685-6A0BCBEE4133","type":"MeshBasicMaterial","color":16777215,"vertexColors":2,"opacity":1,"transparent":true,"wireframe":false}],"object":{"uuid":"F6122F5E-9790-471C-B763-B7C684448C82","type":"Mesh","geometry":"B1ECD189-5369-43C4-A5AF-95C09C32CBA9","material":"7FDA0183-6723-4AB8-8685-6A0BCBEE4133","matrix":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}} 

},{}],135:[function(require,module,exports){
module.exports={"metadata":{"version":4.3,"type":"Object","generator":"ObjectExporter"},"geometries":[{"uuid":"92D1BFE0-E396-44EB-8BD3-1C28A28552BC","type":"Geometry","data":{"vertices":[350,50,250,350,50,200,350,0,250,350,0,200,300,50,200,300,50,250,300,0,200,300,0,250,-250,50,250,-250,50,200,-250,0,250,-250,0,200,-300,50,200,-300,50,250,-300,0,200,-300,0,250,300,50,200,300,50,150,300,0,200,300,0,150,250,50,150,250,50,200,250,0,150,250,0,200,-300,50,200,-300,50,150,-300,0,200,-300,0,150,-350,50,150,-350,50,200,-350,0,150,-350,0,200,300,100,200,300,100,150,300,50,200,300,50,150,250,100,150,250,100,200,250,50,150,250,50,200,-300,100,200,-300,100,150,-300,50,200,-300,50,150,-350,100,150,-350,100,200,-350,50,150,-350,50,200,350,100,250,350,100,200,350,50,250,350,50,200,300,100,200,300,100,250,300,50,200,300,50,250,-250,100,250,-250,100,200,-250,50,250,-250,50,200,-300,100,200,-300,100,250,-300,50,200,-300,50,250,300,50,250,300,50,200,300,0,250,300,0,200,250,50,200,250,50,250,250,0,200,250,0,250,300,100,250,300,100,200,300,50,250,300,50,200,250,100,200,250,100,250,250,50,200,250,50,250,300,150,250,300,150,200,300,100,250,300,100,200,250,150,200,250,150,250,250,100,200,250,100,250,350,150,250,350,150,200,350,100,250,350,100,200,300,150,200,300,150,250,300,100,200,300,100,250,350,200,250,350,200,200,350,150,250,350,150,200,300,200,200,300,200,250,300,150,200,300,150,250,350,250,250,350,250,200,350,200,250,350,200,200,300,250,200,300,250,250,300,200,200,300,200,250,350,300,250,350,300,200,350,250,250,350,250,200,300,300,200,300,300,250,300,250,200,300,250,250,350,350,250,350,350,200,350,300,250,350,300,200,300,350,200,300,350,250,300,300,200,300,300,250,-250,150,250,-250,150,200,-250,100,250,-250,100,200,-300,150,200,-300,150,250,-300,100,200,-300,100,250,-250,200,250,-250,200,200,-250,150,250,-250,150,200,-300,200,200,-300,200,250,-300,150,200,-300,150,250,-250,250,250,-250,250,200,-250,200,250,-250,200,200,-300,250,200,-300,250,250,-300,200,200,-300,200,250,-250,300,250,-250,300,200,-250,250,250,-250,250,200,-300,300,200,-300,300,250,-300,250,200,-300,250,250,-250,350,250,-250,350,200,-250,300,250,-250,300,200,-300,350,200,-300,350,250,-300,300,200,-300,300,250,-300,150,200,-300,150,150,-300,100,200,-300,100,150,-350,150,150,-350,150,200,-350,100,150,-350,100,200,-300,200,200,-300,200,150,-300,150,200,-300,150,150,-350,200,150,-350,200,200,-350,150,150,-350,150,200,-300,250,200,-300,250,150,-300,200,200,-300,200,150,-350,250,150,-350,250,200,-350,200,150,-350,200,200,-300,250,150,-300,250,100,-300,200,150,-300,200,100,-350,250,100,-350,250,150,-350,200,100,-350,200,150,-250,200,150,-250,200,100,-250,150,150,-250,150,100,-300,200,100,-300,200,150,-300,150,100,-300,150,150,-200,200,150,-200,200,100,-200,150,150,-200,150,100,-250,200,100,-250,200,150,-250,150,100,-250,150,150,-150,200,150,-150,200,100,-150,150,150,-150,150,100,-200,200,100,-200,200,150,-200,150,100,-200,150,150,-100,200,150,-100,200,100,-100,150,150,-100,150,100,-150,200,100,-150,200,150,-150,150,100,-150,150,150,-50,200,150,-50,200,100,-50,150,150,-50,150,100,-100,200,100,-100,200,150,-100,150,100,-100,150,150,0,200,150,0,200,100,0,150,150,0,150,100,-50,200,100,-50,200,150,-50,150,100,-50,150,150,50,200,150,50,200,100,50,150,150,50,150,100,0,200,100,0,200,150,0,150,100,0,150,150,100,200,150,100,200,100,100,150,150,100,150,100,50,200,100,50,200,150,50,150,100,50,150,150,150,200,150,150,200,100,150,150,150,150,150,100,100,200,100,100,200,150,100,150,100,100,150,150,200,200,150,200,200,100,200,150,150,200,150,100,150,200,100,150,200,150,150,150,100,150,150,150,-250,250,150,-250,250,100,-250,200,150,-250,200,100,-300,250,100,-300,250,150,-300,200,100,-300,200,150,-200,250,150,-200,250,100,-200,200,150,-200,200,100,-250,250,100,-250,250,150,-250,200,100,-250,200,150,-150,250,150,-150,250,100,-150,200,150,-150,200,100,-200,250,100,-200,250,150,-200,200,100,-200,200,150,-100,250,150,-100,250,100,-100,200,150,-100,200,100,-150,250,100,-150,250,150,-150,200,100,-150,200,150,-50,250,150,-50,250,100,-50,200,150,-50,200,100,-100,250,100,-100,250,150,-100,200,100,-100,200,150,0,250,150,0,250,100,0,200,150,0,200,100,-50,250,100,-50,250,150,-50,200,100,-50,200,150,50,250,150,50,250,100,50,200,150,50,200,100,0,250,100,0,250,150,0,200,100,0,200,150,100,250,150,100,250,100,100,200,150,100,200,100,50,250,100,50,250,150,50,200,100,50,200,150,150,250,150,150,250,100,150,200,150,150,200,100,100,250,100,100,250,150,100,200,100,100,200,150,200,250,150,200,250,100,200,200,150,200,200,100,150,250,100,150,250,150,150,200,100,150,200,150,250,200,150,250,200,100,250,150,150,250,150,100,200,200,100,200,200,150,200,150,100,200,150,150,300,200,150,300,200,100,300,150,150,300,150,100,250,200,100,250,200,150,250,150,100,250,150,150,250,250,150,250,250,100,250,200,150,250,200,100,200,250,100,200,250,150,200,200,100,200,200,150,300,250,150,300,250,100,300,200,150,300,200,100,250,250,100,250,250,150,250,200,100,250,200,150,300,250,200,300,250,150,300,200,200,300,200,150,250,250,150,250,250,200,250,200,150,250,200,200,300,200,200,300,200,150,300,150,200,300,150,150,250,200,150,250,200,200,250,150,150,250,150,200,300,300,200,300,300,150,300,250,200,300,250,150,250,300,150,250,300,200,250,250,150,250,250,200,300,350,200,300,350,150,300,300,200,300,300,150,250,350,150,250,350,200,250,300,150,250,300,200,300,400,200,300,400,150,300,350,200,300,350,150,250,400,150,250,400,200,250,350,150,250,350,200,-300,300,200,-300,300,150,-300,250,200,-300,250,150,-350,300,150,-350,300,200,-350,250,150,-350,250,200,-300,350,200,-300,350,150,-300,300,200,-300,300,150,-350,350,150,-350,350,200,-350,300,150,-350,300,200,-300,400,200,-300,400,150,-300,350,200,-300,350,150,-350,400,150,-350,400,200,-350,350,150,-350,350,200,350,400,200,350,400,150,350,350,200,350,350,150,300,400,150,300,400,200,300,350,150,300,350,200,-250,400,200,-250,400,150,-250,350,200,-250,350,150,-300,400,150,-300,400,200,-300,350,150,-300,350,200,350,400,250,350,400,200,350,350,250,350,350,200,300,400,200,300,400,250,300,350,200,300,350,250,350,400,300,350,400,250,350,350,300,350,350,250,300,400,250,300,400,300,300,350,250,300,350,300,350,400,350,350,400,300,350,350,350,350,350,300,300,400,300,300,400,350,300,350,300,300,350,350,350,400,400,350,400,350,350,350,400,350,350,350,300,400,350,300,400,400,300,350,350,300,350,400,350,350,300,350,350,250,350,300,300,350,300,250,300,350,250,300,350,300,300,300,250,300,300,300,350,350,350,350,350,300,350,300,350,350,300,300,300,350,300,300,350,350,300,300,300,300,300,350,350,350,400,350,350,350,350,300,400,350,300,350,300,350,350,300,350,400,300,300,350,300,300,400,-250,350,300,-250,350,250,-250,300,300,-250,300,250,-300,350,250,-300,350,300,-300,300,250,-300,300,300,-250,350,350,-250,350,300,-250,300,350,-250,300,300,-300,350,300,-300,350,350,-300,300,300,-300,300,350,-250,350,400,-250,350,350,-250,300,400,-250,300,350,-300,350,350,-300,350,400,-300,300,350,-300,300,400,-250,400,250,-250,400,200,-250,350,250,-250,350,200,-300,400,200,-300,400,250,-300,350,200,-300,350,250,-250,400,300,-250,400,250,-250,350,300,-250,350,250,-300,400,250,-300,400,300,-300,350,250,-300,350,300,-250,400,350,-250,400,300,-250,350,350,-250,350,300,-300,400,300,-300,400,350,-300,350,300,-300,350,350,-250,400,400,-250,400,350,-250,350,400,-250,350,350,-300,400,350,-300,400,400,-300,350,350,-300,350,400,-350,50,400,-350,50,350,-350,0,400,-350,0,350,-400,50,350,-400,50,400,-400,0,350,-400,0,400,400,50,400,400,50,350,400,0,400,400,0,350,350,50,350,350,50,400,350,0,350,350,0,400,-350,50,-350,-350,50,-400,-350,0,-350,-350,0,-400,-400,50,-400,-400,50,-350,-400,0,-400,-400,0,-350,400,50,-350,400,50,-400,400,0,-350,400,0,-400,350,50,-400,350,50,-350,350,0,-400,350,0,-350],"normals":[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],"colors":[4208954,6774620,0],"uvs":[[0,1,0,0,1,1,1,0]],"faces":[120,0,2,1,0,1,2,0,0,0,0,0,120,2,3,1,1,3,2,0,0,0,0,0,120,4,6,5,0,1,2,1,1,1,1,0,120,6,7,5,1,3,2,1,1,1,1,0,120,4,5,1,0,1,2,2,2,2,2,0,120,5,0,1,1,3,2,2,2,2,2,0,120,7,6,2,0,1,2,3,3,3,3,0,120,6,3,2,1,3,2,3,3,3,3,0,120,5,7,0,0,1,2,4,4,4,4,0,120,7,2,0,1,3,2,4,4,4,4,0,120,1,3,4,0,1,2,5,5,5,5,0,120,3,6,4,1,3,2,5,5,5,5,0,120,8,10,9,0,1,2,0,0,0,0,0,120,10,11,9,1,3,2,0,0,0,0,0,120,12,14,13,0,1,2,1,1,1,1,0,120,14,15,13,1,3,2,1,1,1,1,0,120,12,13,9,0,1,2,2,2,2,2,0,120,13,8,9,1,3,2,2,2,2,2,0,120,15,14,10,0,1,2,3,3,3,3,0,120,14,11,10,1,3,2,3,3,3,3,0,120,13,15,8,0,1,2,4,4,4,4,0,120,15,10,8,1,3,2,4,4,4,4,0,120,9,11,12,0,1,2,5,5,5,5,0,120,11,14,12,1,3,2,5,5,5,5,0,120,16,18,17,0,1,2,0,0,0,0,1,120,18,19,17,1,3,2,0,0,0,0,1,120,20,22,21,0,1,2,1,1,1,1,1,120,22,23,21,1,3,2,1,1,1,1,1,120,20,21,17,0,1,2,2,2,2,2,1,120,21,16,17,1,3,2,2,2,2,2,1,120,23,22,18,0,1,2,3,3,3,3,1,120,22,19,18,1,3,2,3,3,3,3,1,120,21,23,16,0,1,2,4,4,4,4,1,120,23,18,16,1,3,2,4,4,4,4,1,120,17,19,20,0,1,2,5,5,5,5,1,120,19,22,20,1,3,2,5,5,5,5,1,120,24,26,25,0,1,2,0,0,0,0,1,120,26,27,25,1,3,2,0,0,0,0,1,120,28,30,29,0,1,2,1,1,1,1,1,120,30,31,29,1,3,2,1,1,1,1,1,120,28,29,25,0,1,2,2,2,2,2,1,120,29,24,25,1,3,2,2,2,2,2,1,120,31,30,26,0,1,2,3,3,3,3,1,120,30,27,26,1,3,2,3,3,3,3,1,120,29,31,24,0,1,2,4,4,4,4,1,120,31,26,24,1,3,2,4,4,4,4,1,120,25,27,28,0,1,2,5,5,5,5,1,120,27,30,28,1,3,2,5,5,5,5,1,120,32,34,33,0,1,2,0,0,0,0,1,120,34,35,33,1,3,2,0,0,0,0,1,120,36,38,37,0,1,2,1,1,1,1,1,120,38,39,37,1,3,2,1,1,1,1,1,120,36,37,33,0,1,2,2,2,2,2,1,120,37,32,33,1,3,2,2,2,2,2,1,120,39,38,34,0,1,2,3,3,3,3,1,120,38,35,34,1,3,2,3,3,3,3,1,120,37,39,32,0,1,2,4,4,4,4,1,120,39,34,32,1,3,2,4,4,4,4,1,120,33,35,36,0,1,2,5,5,5,5,1,120,35,38,36,1,3,2,5,5,5,5,1,120,40,42,41,0,1,2,0,0,0,0,1,120,42,43,41,1,3,2,0,0,0,0,1,120,44,46,45,0,1,2,1,1,1,1,1,120,46,47,45,1,3,2,1,1,1,1,1,120,44,45,41,0,1,2,2,2,2,2,1,120,45,40,41,1,3,2,2,2,2,2,1,120,47,46,42,0,1,2,3,3,3,3,1,120,46,43,42,1,3,2,3,3,3,3,1,120,45,47,40,0,1,2,4,4,4,4,1,120,47,42,40,1,3,2,4,4,4,4,1,120,41,43,44,0,1,2,5,5,5,5,1,120,43,46,44,1,3,2,5,5,5,5,1,120,48,50,49,0,1,2,0,0,0,0,0,120,50,51,49,1,3,2,0,0,0,0,0,120,52,54,53,0,1,2,1,1,1,1,0,120,54,55,53,1,3,2,1,1,1,1,0,120,52,53,49,0,1,2,2,2,2,2,0,120,53,48,49,1,3,2,2,2,2,2,0,120,55,54,50,0,1,2,3,3,3,3,0,120,54,51,50,1,3,2,3,3,3,3,0,120,53,55,48,0,1,2,4,4,4,4,0,120,55,50,48,1,3,2,4,4,4,4,0,120,49,51,52,0,1,2,5,5,5,5,0,120,51,54,52,1,3,2,5,5,5,5,0,120,56,58,57,0,1,2,0,0,0,0,0,120,58,59,57,1,3,2,0,0,0,0,0,120,60,62,61,0,1,2,1,1,1,1,0,120,62,63,61,1,3,2,1,1,1,1,0,120,60,61,57,0,1,2,2,2,2,2,0,120,61,56,57,1,3,2,2,2,2,2,0,120,63,62,58,0,1,2,3,3,3,3,0,120,62,59,58,1,3,2,3,3,3,3,0,120,61,63,56,0,1,2,4,4,4,4,0,120,63,58,56,1,3,2,4,4,4,4,0,120,57,59,60,0,1,2,5,5,5,5,0,120,59,62,60,1,3,2,5,5,5,5,0,120,64,66,65,0,1,2,0,0,0,0,0,120,66,67,65,1,3,2,0,0,0,0,0,120,68,70,69,0,1,2,1,1,1,1,0,120,70,71,69,1,3,2,1,1,1,1,0,120,68,69,65,0,1,2,2,2,2,2,0,120,69,64,65,1,3,2,2,2,2,2,0,120,71,70,66,0,1,2,3,3,3,3,0,120,70,67,66,1,3,2,3,3,3,3,0,120,69,71,64,0,1,2,4,4,4,4,0,120,71,66,64,1,3,2,4,4,4,4,0,120,65,67,68,0,1,2,5,5,5,5,0,120,67,70,68,1,3,2,5,5,5,5,0,120,72,74,73,0,1,2,0,0,0,0,0,120,74,75,73,1,3,2,0,0,0,0,0,120,76,78,77,0,1,2,1,1,1,1,0,120,78,79,77,1,3,2,1,1,1,1,0,120,76,77,73,0,1,2,2,2,2,2,0,120,77,72,73,1,3,2,2,2,2,2,0,120,79,78,74,0,1,2,3,3,3,3,0,120,78,75,74,1,3,2,3,3,3,3,0,120,77,79,72,0,1,2,4,4,4,4,0,120,79,74,72,1,3,2,4,4,4,4,0,120,73,75,76,0,1,2,5,5,5,5,0,120,75,78,76,1,3,2,5,5,5,5,0,120,80,82,81,0,1,2,0,0,0,0,0,120,82,83,81,1,3,2,0,0,0,0,0,120,84,86,85,0,1,2,1,1,1,1,0,120,86,87,85,1,3,2,1,1,1,1,0,120,84,85,81,0,1,2,2,2,2,2,0,120,85,80,81,1,3,2,2,2,2,2,0,120,87,86,82,0,1,2,3,3,3,3,0,120,86,83,82,1,3,2,3,3,3,3,0,120,85,87,80,0,1,2,4,4,4,4,0,120,87,82,80,1,3,2,4,4,4,4,0,120,81,83,84,0,1,2,5,5,5,5,0,120,83,86,84,1,3,2,5,5,5,5,0,120,88,90,89,0,1,2,0,0,0,0,0,120,90,91,89,1,3,2,0,0,0,0,0,120,92,94,93,0,1,2,1,1,1,1,0,120,94,95,93,1,3,2,1,1,1,1,0,120,92,93,89,0,1,2,2,2,2,2,0,120,93,88,89,1,3,2,2,2,2,2,0,120,95,94,90,0,1,2,3,3,3,3,0,120,94,91,90,1,3,2,3,3,3,3,0,120,93,95,88,0,1,2,4,4,4,4,0,120,95,90,88,1,3,2,4,4,4,4,0,120,89,91,92,0,1,2,5,5,5,5,0,120,91,94,92,1,3,2,5,5,5,5,0,120,96,98,97,0,1,2,0,0,0,0,0,120,98,99,97,1,3,2,0,0,0,0,0,120,100,102,101,0,1,2,1,1,1,1,0,120,102,103,101,1,3,2,1,1,1,1,0,120,100,101,97,0,1,2,2,2,2,2,0,120,101,96,97,1,3,2,2,2,2,2,0,120,103,102,98,0,1,2,3,3,3,3,0,120,102,99,98,1,3,2,3,3,3,3,0,120,101,103,96,0,1,2,4,4,4,4,0,120,103,98,96,1,3,2,4,4,4,4,0,120,97,99,100,0,1,2,5,5,5,5,0,120,99,102,100,1,3,2,5,5,5,5,0,120,104,106,105,0,1,2,0,0,0,0,0,120,106,107,105,1,3,2,0,0,0,0,0,120,108,110,109,0,1,2,1,1,1,1,0,120,110,111,109,1,3,2,1,1,1,1,0,120,108,109,105,0,1,2,2,2,2,2,0,120,109,104,105,1,3,2,2,2,2,2,0,120,111,110,106,0,1,2,3,3,3,3,0,120,110,107,106,1,3,2,3,3,3,3,0,120,109,111,104,0,1,2,4,4,4,4,0,120,111,106,104,1,3,2,4,4,4,4,0,120,105,107,108,0,1,2,5,5,5,5,0,120,107,110,108,1,3,2,5,5,5,5,0,120,112,114,113,0,1,2,0,0,0,0,0,120,114,115,113,1,3,2,0,0,0,0,0,120,116,118,117,0,1,2,1,1,1,1,0,120,118,119,117,1,3,2,1,1,1,1,0,120,116,117,113,0,1,2,2,2,2,2,0,120,117,112,113,1,3,2,2,2,2,2,0,120,119,118,114,0,1,2,3,3,3,3,0,120,118,115,114,1,3,2,3,3,3,3,0,120,117,119,112,0,1,2,4,4,4,4,0,120,119,114,112,1,3,2,4,4,4,4,0,120,113,115,116,0,1,2,5,5,5,5,0,120,115,118,116,1,3,2,5,5,5,5,0,120,120,122,121,0,1,2,0,0,0,0,0,120,122,123,121,1,3,2,0,0,0,0,0,120,124,126,125,0,1,2,1,1,1,1,0,120,126,127,125,1,3,2,1,1,1,1,0,120,124,125,121,0,1,2,2,2,2,2,0,120,125,120,121,1,3,2,2,2,2,2,0,120,127,126,122,0,1,2,3,3,3,3,0,120,126,123,122,1,3,2,3,3,3,3,0,120,125,127,120,0,1,2,4,4,4,4,0,120,127,122,120,1,3,2,4,4,4,4,0,120,121,123,124,0,1,2,5,5,5,5,0,120,123,126,124,1,3,2,5,5,5,5,0,120,128,130,129,0,1,2,0,0,0,0,0,120,130,131,129,1,3,2,0,0,0,0,0,120,132,134,133,0,1,2,1,1,1,1,0,120,134,135,133,1,3,2,1,1,1,1,0,120,132,133,129,0,1,2,2,2,2,2,0,120,133,128,129,1,3,2,2,2,2,2,0,120,135,134,130,0,1,2,3,3,3,3,0,120,134,131,130,1,3,2,3,3,3,3,0,120,133,135,128,0,1,2,4,4,4,4,0,120,135,130,128,1,3,2,4,4,4,4,0,120,129,131,132,0,1,2,5,5,5,5,0,120,131,134,132,1,3,2,5,5,5,5,0,120,136,138,137,0,1,2,0,0,0,0,0,120,138,139,137,1,3,2,0,0,0,0,0,120,140,142,141,0,1,2,1,1,1,1,0,120,142,143,141,1,3,2,1,1,1,1,0,120,140,141,137,0,1,2,2,2,2,2,0,120,141,136,137,1,3,2,2,2,2,2,0,120,143,142,138,0,1,2,3,3,3,3,0,120,142,139,138,1,3,2,3,3,3,3,0,120,141,143,136,0,1,2,4,4,4,4,0,120,143,138,136,1,3,2,4,4,4,4,0,120,137,139,140,0,1,2,5,5,5,5,0,120,139,142,140,1,3,2,5,5,5,5,0,120,144,146,145,0,1,2,0,0,0,0,0,120,146,147,145,1,3,2,0,0,0,0,0,120,148,150,149,0,1,2,1,1,1,1,0,120,150,151,149,1,3,2,1,1,1,1,0,120,148,149,145,0,1,2,2,2,2,2,0,120,149,144,145,1,3,2,2,2,2,2,0,120,151,150,146,0,1,2,3,3,3,3,0,120,150,147,146,1,3,2,3,3,3,3,0,120,149,151,144,0,1,2,4,4,4,4,0,120,151,146,144,1,3,2,4,4,4,4,0,120,145,147,148,0,1,2,5,5,5,5,0,120,147,150,148,1,3,2,5,5,5,5,0,120,152,154,153,0,1,2,0,0,0,0,0,120,154,155,153,1,3,2,0,0,0,0,0,120,156,158,157,0,1,2,1,1,1,1,0,120,158,159,157,1,3,2,1,1,1,1,0,120,156,157,153,0,1,2,2,2,2,2,0,120,157,152,153,1,3,2,2,2,2,2,0,120,159,158,154,0,1,2,3,3,3,3,0,120,158,155,154,1,3,2,3,3,3,3,0,120,157,159,152,0,1,2,4,4,4,4,0,120,159,154,152,1,3,2,4,4,4,4,0,120,153,155,156,0,1,2,5,5,5,5,0,120,155,158,156,1,3,2,5,5,5,5,0,120,160,162,161,0,1,2,0,0,0,0,0,120,162,163,161,1,3,2,0,0,0,0,0,120,164,166,165,0,1,2,1,1,1,1,0,120,166,167,165,1,3,2,1,1,1,1,0,120,164,165,161,0,1,2,2,2,2,2,0,120,165,160,161,1,3,2,2,2,2,2,0,120,167,166,162,0,1,2,3,3,3,3,0,120,166,163,162,1,3,2,3,3,3,3,0,120,165,167,160,0,1,2,4,4,4,4,0,120,167,162,160,1,3,2,4,4,4,4,0,120,161,163,164,0,1,2,5,5,5,5,0,120,163,166,164,1,3,2,5,5,5,5,0,120,168,170,169,0,1,2,0,0,0,0,1,120,170,171,169,1,3,2,0,0,0,0,1,120,172,174,173,0,1,2,1,1,1,1,1,120,174,175,173,1,3,2,1,1,1,1,1,120,172,173,169,0,1,2,2,2,2,2,1,120,173,168,169,1,3,2,2,2,2,2,1,120,175,174,170,0,1,2,3,3,3,3,1,120,174,171,170,1,3,2,3,3,3,3,1,120,173,175,168,0,1,2,4,4,4,4,1,120,175,170,168,1,3,2,4,4,4,4,1,120,169,171,172,0,1,2,5,5,5,5,1,120,171,174,172,1,3,2,5,5,5,5,1,120,176,178,177,0,1,2,0,0,0,0,1,120,178,179,177,1,3,2,0,0,0,0,1,120,180,182,181,0,1,2,1,1,1,1,1,120,182,183,181,1,3,2,1,1,1,1,1,120,180,181,177,0,1,2,2,2,2,2,1,120,181,176,177,1,3,2,2,2,2,2,1,120,183,182,178,0,1,2,3,3,3,3,1,120,182,179,178,1,3,2,3,3,3,3,1,120,181,183,176,0,1,2,4,4,4,4,1,120,183,178,176,1,3,2,4,4,4,4,1,120,177,179,180,0,1,2,5,5,5,5,1,120,179,182,180,1,3,2,5,5,5,5,1,120,184,186,185,0,1,2,0,0,0,0,1,120,186,187,185,1,3,2,0,0,0,0,1,120,188,190,189,0,1,2,1,1,1,1,1,120,190,191,189,1,3,2,1,1,1,1,1,120,188,189,185,0,1,2,2,2,2,2,1,120,189,184,185,1,3,2,2,2,2,2,1,120,191,190,186,0,1,2,3,3,3,3,1,120,190,187,186,1,3,2,3,3,3,3,1,120,189,191,184,0,1,2,4,4,4,4,1,120,191,186,184,1,3,2,4,4,4,4,1,120,185,187,188,0,1,2,5,5,5,5,1,120,187,190,188,1,3,2,5,5,5,5,1,120,192,194,193,0,1,2,0,0,0,0,1,120,194,195,193,1,3,2,0,0,0,0,1,120,196,198,197,0,1,2,1,1,1,1,1,120,198,199,197,1,3,2,1,1,1,1,1,120,196,197,193,0,1,2,2,2,2,2,1,120,197,192,193,1,3,2,2,2,2,2,1,120,199,198,194,0,1,2,3,3,3,3,1,120,198,195,194,1,3,2,3,3,3,3,1,120,197,199,192,0,1,2,4,4,4,4,1,120,199,194,192,1,3,2,4,4,4,4,1,120,193,195,196,0,1,2,5,5,5,5,1,120,195,198,196,1,3,2,5,5,5,5,1,120,200,202,201,0,1,2,0,0,0,0,0,120,202,203,201,1,3,2,0,0,0,0,0,120,204,206,205,0,1,2,1,1,1,1,0,120,206,207,205,1,3,2,1,1,1,1,0,120,204,205,201,0,1,2,2,2,2,2,0,120,205,200,201,1,3,2,2,2,2,2,0,120,207,206,202,0,1,2,3,3,3,3,0,120,206,203,202,1,3,2,3,3,3,3,0,120,205,207,200,0,1,2,4,4,4,4,0,120,207,202,200,1,3,2,4,4,4,4,0,120,201,203,204,0,1,2,5,5,5,5,0,120,203,206,204,1,3,2,5,5,5,5,0,120,208,210,209,0,1,2,0,0,0,0,0,120,210,211,209,1,3,2,0,0,0,0,0,120,212,214,213,0,1,2,1,1,1,1,0,120,214,215,213,1,3,2,1,1,1,1,0,120,212,213,209,0,1,2,2,2,2,2,0,120,213,208,209,1,3,2,2,2,2,2,0,120,215,214,210,0,1,2,3,3,3,3,0,120,214,211,210,1,3,2,3,3,3,3,0,120,213,215,208,0,1,2,4,4,4,4,0,120,215,210,208,1,3,2,4,4,4,4,0,120,209,211,212,0,1,2,5,5,5,5,0,120,211,214,212,1,3,2,5,5,5,5,0,120,216,218,217,0,1,2,0,0,0,0,0,120,218,219,217,1,3,2,0,0,0,0,0,120,220,222,221,0,1,2,1,1,1,1,0,120,222,223,221,1,3,2,1,1,1,1,0,120,220,221,217,0,1,2,2,2,2,2,0,120,221,216,217,1,3,2,2,2,2,2,0,120,223,222,218,0,1,2,3,3,3,3,0,120,222,219,218,1,3,2,3,3,3,3,0,120,221,223,216,0,1,2,4,4,4,4,0,120,223,218,216,1,3,2,4,4,4,4,0,120,217,219,220,0,1,2,5,5,5,5,0,120,219,222,220,1,3,2,5,5,5,5,0,120,224,226,225,0,1,2,0,0,0,0,0,120,226,227,225,1,3,2,0,0,0,0,0,120,228,230,229,0,1,2,1,1,1,1,0,120,230,231,229,1,3,2,1,1,1,1,0,120,228,229,225,0,1,2,2,2,2,2,0,120,229,224,225,1,3,2,2,2,2,2,0,120,231,230,226,0,1,2,3,3,3,3,0,120,230,227,226,1,3,2,3,3,3,3,0,120,229,231,224,0,1,2,4,4,4,4,0,120,231,226,224,1,3,2,4,4,4,4,0,120,225,227,228,0,1,2,5,5,5,5,0,120,227,230,228,1,3,2,5,5,5,5,0,120,232,234,233,0,1,2,0,0,0,0,0,120,234,235,233,1,3,2,0,0,0,0,0,120,236,238,237,0,1,2,1,1,1,1,0,120,238,239,237,1,3,2,1,1,1,1,0,120,236,237,233,0,1,2,2,2,2,2,0,120,237,232,233,1,3,2,2,2,2,2,0,120,239,238,234,0,1,2,3,3,3,3,0,120,238,235,234,1,3,2,3,3,3,3,0,120,237,239,232,0,1,2,4,4,4,4,0,120,239,234,232,1,3,2,4,4,4,4,0,120,233,235,236,0,1,2,5,5,5,5,0,120,235,238,236,1,3,2,5,5,5,5,0,120,240,242,241,0,1,2,0,0,0,0,0,120,242,243,241,1,3,2,0,0,0,0,0,120,244,246,245,0,1,2,1,1,1,1,0,120,246,247,245,1,3,2,1,1,1,1,0,120,244,245,241,0,1,2,2,2,2,2,0,120,245,240,241,1,3,2,2,2,2,2,0,120,247,246,242,0,1,2,3,3,3,3,0,120,246,243,242,1,3,2,3,3,3,3,0,120,245,247,240,0,1,2,4,4,4,4,0,120,247,242,240,1,3,2,4,4,4,4,0,120,241,243,244,0,1,2,5,5,5,5,0,120,243,246,244,1,3,2,5,5,5,5,0,120,248,250,249,0,1,2,0,0,0,0,0,120,250,251,249,1,3,2,0,0,0,0,0,120,252,254,253,0,1,2,1,1,1,1,0,120,254,255,253,1,3,2,1,1,1,1,0,120,252,253,249,0,1,2,2,2,2,2,0,120,253,248,249,1,3,2,2,2,2,2,0,120,255,254,250,0,1,2,3,3,3,3,0,120,254,251,250,1,3,2,3,3,3,3,0,120,253,255,248,0,1,2,4,4,4,4,0,120,255,250,248,1,3,2,4,4,4,4,0,120,249,251,252,0,1,2,5,5,5,5,0,120,251,254,252,1,3,2,5,5,5,5,0,120,256,258,257,0,1,2,0,0,0,0,0,120,258,259,257,1,3,2,0,0,0,0,0,120,260,262,261,0,1,2,1,1,1,1,0,120,262,263,261,1,3,2,1,1,1,1,0,120,260,261,257,0,1,2,2,2,2,2,0,120,261,256,257,1,3,2,2,2,2,2,0,120,263,262,258,0,1,2,3,3,3,3,0,120,262,259,258,1,3,2,3,3,3,3,0,120,261,263,256,0,1,2,4,4,4,4,0,120,263,258,256,1,3,2,4,4,4,4,0,120,257,259,260,0,1,2,5,5,5,5,0,120,259,262,260,1,3,2,5,5,5,5,0,120,264,266,265,0,1,2,0,0,0,0,0,120,266,267,265,1,3,2,0,0,0,0,0,120,268,270,269,0,1,2,1,1,1,1,0,120,270,271,269,1,3,2,1,1,1,1,0,120,268,269,265,0,1,2,2,2,2,2,0,120,269,264,265,1,3,2,2,2,2,2,0,120,271,270,266,0,1,2,3,3,3,3,0,120,270,267,266,1,3,2,3,3,3,3,0,120,269,271,264,0,1,2,4,4,4,4,0,120,271,266,264,1,3,2,4,4,4,4,0,120,265,267,268,0,1,2,5,5,5,5,0,120,267,270,268,1,3,2,5,5,5,5,0,120,272,274,273,0,1,2,0,0,0,0,0,120,274,275,273,1,3,2,0,0,0,0,0,120,276,278,277,0,1,2,1,1,1,1,0,120,278,279,277,1,3,2,1,1,1,1,0,120,276,277,273,0,1,2,2,2,2,2,0,120,277,272,273,1,3,2,2,2,2,2,0,120,279,278,274,0,1,2,3,3,3,3,0,120,278,275,274,1,3,2,3,3,3,3,0,120,277,279,272,0,1,2,4,4,4,4,0,120,279,274,272,1,3,2,4,4,4,4,0,120,273,275,276,0,1,2,5,5,5,5,0,120,275,278,276,1,3,2,5,5,5,5,0,120,280,282,281,0,1,2,0,0,0,0,1,120,282,283,281,1,3,2,0,0,0,0,1,120,284,286,285,0,1,2,1,1,1,1,1,120,286,287,285,1,3,2,1,1,1,1,1,120,284,285,281,0,1,2,2,2,2,2,1,120,285,280,281,1,3,2,2,2,2,2,1,120,287,286,282,0,1,2,3,3,3,3,1,120,286,283,282,1,3,2,3,3,3,3,1,120,285,287,280,0,1,2,4,4,4,4,1,120,287,282,280,1,3,2,4,4,4,4,1,120,281,283,284,0,1,2,5,5,5,5,1,120,283,286,284,1,3,2,5,5,5,5,1,120,288,290,289,0,1,2,0,0,0,0,1,120,290,291,289,1,3,2,0,0,0,0,1,120,292,294,293,0,1,2,1,1,1,1,1,120,294,295,293,1,3,2,1,1,1,1,1,120,292,293,289,0,1,2,2,2,2,2,1,120,293,288,289,1,3,2,2,2,2,2,1,120,295,294,290,0,1,2,3,3,3,3,1,120,294,291,290,1,3,2,3,3,3,3,1,120,293,295,288,0,1,2,4,4,4,4,1,120,295,290,288,1,3,2,4,4,4,4,1,120,289,291,292,0,1,2,5,5,5,5,1,120,291,294,292,1,3,2,5,5,5,5,1,120,296,298,297,0,1,2,0,0,0,0,1,120,298,299,297,1,3,2,0,0,0,0,1,120,300,302,301,0,1,2,1,1,1,1,1,120,302,303,301,1,3,2,1,1,1,1,1,120,300,301,297,0,1,2,2,2,2,2,1,120,301,296,297,1,3,2,2,2,2,2,1,120,303,302,298,0,1,2,3,3,3,3,1,120,302,299,298,1,3,2,3,3,3,3,1,120,301,303,296,0,1,2,4,4,4,4,1,120,303,298,296,1,3,2,4,4,4,4,1,120,297,299,300,0,1,2,5,5,5,5,1,120,299,302,300,1,3,2,5,5,5,5,1,120,304,306,305,0,1,2,0,0,0,0,1,120,306,307,305,1,3,2,0,0,0,0,1,120,308,310,309,0,1,2,1,1,1,1,1,120,310,311,309,1,3,2,1,1,1,1,1,120,308,309,305,0,1,2,2,2,2,2,1,120,309,304,305,1,3,2,2,2,2,2,1,120,311,310,306,0,1,2,3,3,3,3,1,120,310,307,306,1,3,2,3,3,3,3,1,120,309,311,304,0,1,2,4,4,4,4,1,120,311,306,304,1,3,2,4,4,4,4,1,120,305,307,308,0,1,2,5,5,5,5,1,120,307,310,308,1,3,2,5,5,5,5,1,120,312,314,313,0,1,2,0,0,0,0,1,120,314,315,313,1,3,2,0,0,0,0,1,120,316,318,317,0,1,2,1,1,1,1,1,120,318,319,317,1,3,2,1,1,1,1,1,120,316,317,313,0,1,2,2,2,2,2,1,120,317,312,313,1,3,2,2,2,2,2,1,120,319,318,314,0,1,2,3,3,3,3,1,120,318,315,314,1,3,2,3,3,3,3,1,120,317,319,312,0,1,2,4,4,4,4,1,120,319,314,312,1,3,2,4,4,4,4,1,120,313,315,316,0,1,2,5,5,5,5,1,120,315,318,316,1,3,2,5,5,5,5,1,120,320,322,321,0,1,2,0,0,0,0,1,120,322,323,321,1,3,2,0,0,0,0,1,120,324,326,325,0,1,2,1,1,1,1,1,120,326,327,325,1,3,2,1,1,1,1,1,120,324,325,321,0,1,2,2,2,2,2,1,120,325,320,321,1,3,2,2,2,2,2,1,120,327,326,322,0,1,2,3,3,3,3,1,120,326,323,322,1,3,2,3,3,3,3,1,120,325,327,320,0,1,2,4,4,4,4,1,120,327,322,320,1,3,2,4,4,4,4,1,120,321,323,324,0,1,2,5,5,5,5,1,120,323,326,324,1,3,2,5,5,5,5,1,120,328,330,329,0,1,2,0,0,0,0,1,120,330,331,329,1,3,2,0,0,0,0,1,120,332,334,333,0,1,2,1,1,1,1,1,120,334,335,333,1,3,2,1,1,1,1,1,120,332,333,329,0,1,2,2,2,2,2,1,120,333,328,329,1,3,2,2,2,2,2,1,120,335,334,330,0,1,2,3,3,3,3,1,120,334,331,330,1,3,2,3,3,3,3,1,120,333,335,328,0,1,2,4,4,4,4,1,120,335,330,328,1,3,2,4,4,4,4,1,120,329,331,332,0,1,2,5,5,5,5,1,120,331,334,332,1,3,2,5,5,5,5,1,120,336,338,337,0,1,2,0,0,0,0,1,120,338,339,337,1,3,2,0,0,0,0,1,120,340,342,341,0,1,2,1,1,1,1,1,120,342,343,341,1,3,2,1,1,1,1,1,120,340,341,337,0,1,2,2,2,2,2,1,120,341,336,337,1,3,2,2,2,2,2,1,120,343,342,338,0,1,2,3,3,3,3,1,120,342,339,338,1,3,2,3,3,3,3,1,120,341,343,336,0,1,2,4,4,4,4,1,120,343,338,336,1,3,2,4,4,4,4,1,120,337,339,340,0,1,2,5,5,5,5,1,120,339,342,340,1,3,2,5,5,5,5,1,120,344,346,345,0,1,2,0,0,0,0,1,120,346,347,345,1,3,2,0,0,0,0,1,120,348,350,349,0,1,2,1,1,1,1,1,120,350,351,349,1,3,2,1,1,1,1,1,120,348,349,345,0,1,2,2,2,2,2,1,120,349,344,345,1,3,2,2,2,2,2,1,120,351,350,346,0,1,2,3,3,3,3,1,120,350,347,346,1,3,2,3,3,3,3,1,120,349,351,344,0,1,2,4,4,4,4,1,120,351,346,344,1,3,2,4,4,4,4,1,120,345,347,348,0,1,2,5,5,5,5,1,120,347,350,348,1,3,2,5,5,5,5,1,120,352,354,353,0,1,2,0,0,0,0,1,120,354,355,353,1,3,2,0,0,0,0,1,120,356,358,357,0,1,2,1,1,1,1,1,120,358,359,357,1,3,2,1,1,1,1,1,120,356,357,353,0,1,2,2,2,2,2,1,120,357,352,353,1,3,2,2,2,2,2,1,120,359,358,354,0,1,2,3,3,3,3,1,120,358,355,354,1,3,2,3,3,3,3,1,120,357,359,352,0,1,2,4,4,4,4,1,120,359,354,352,1,3,2,4,4,4,4,1,120,353,355,356,0,1,2,5,5,5,5,1,120,355,358,356,1,3,2,5,5,5,5,1,120,360,362,361,0,1,2,0,0,0,0,0,120,362,363,361,1,3,2,0,0,0,0,0,120,364,366,365,0,1,2,1,1,1,1,0,120,366,367,365,1,3,2,1,1,1,1,0,120,364,365,361,0,1,2,2,2,2,2,0,120,365,360,361,1,3,2,2,2,2,2,0,120,367,366,362,0,1,2,3,3,3,3,0,120,366,363,362,1,3,2,3,3,3,3,0,120,365,367,360,0,1,2,4,4,4,4,0,120,367,362,360,1,3,2,4,4,4,4,0,120,361,363,364,0,1,2,5,5,5,5,0,120,363,366,364,1,3,2,5,5,5,5,0,120,368,370,369,0,1,2,0,0,0,0,0,120,370,371,369,1,3,2,0,0,0,0,0,120,372,374,373,0,1,2,1,1,1,1,0,120,374,375,373,1,3,2,1,1,1,1,0,120,372,373,369,0,1,2,2,2,2,2,0,120,373,368,369,1,3,2,2,2,2,2,0,120,375,374,370,0,1,2,3,3,3,3,0,120,374,371,370,1,3,2,3,3,3,3,0,120,373,375,368,0,1,2,4,4,4,4,0,120,375,370,368,1,3,2,4,4,4,4,0,120,369,371,372,0,1,2,5,5,5,5,0,120,371,374,372,1,3,2,5,5,5,5,0,120,376,378,377,0,1,2,0,0,0,0,1,120,378,379,377,1,3,2,0,0,0,0,1,120,380,382,381,0,1,2,1,1,1,1,1,120,382,383,381,1,3,2,1,1,1,1,1,120,380,381,377,0,1,2,2,2,2,2,1,120,381,376,377,1,3,2,2,2,2,2,1,120,383,382,378,0,1,2,3,3,3,3,1,120,382,379,378,1,3,2,3,3,3,3,1,120,381,383,376,0,1,2,4,4,4,4,1,120,383,378,376,1,3,2,4,4,4,4,1,120,377,379,380,0,1,2,5,5,5,5,1,120,379,382,380,1,3,2,5,5,5,5,1,120,384,386,385,0,1,2,0,0,0,0,1,120,386,387,385,1,3,2,0,0,0,0,1,120,388,390,389,0,1,2,1,1,1,1,1,120,390,391,389,1,3,2,1,1,1,1,1,120,388,389,385,0,1,2,2,2,2,2,1,120,389,384,385,1,3,2,2,2,2,2,1,120,391,390,386,0,1,2,3,3,3,3,1,120,390,387,386,1,3,2,3,3,3,3,1,120,389,391,384,0,1,2,4,4,4,4,1,120,391,386,384,1,3,2,4,4,4,4,1,120,385,387,388,0,1,2,5,5,5,5,1,120,387,390,388,1,3,2,5,5,5,5,1,120,392,394,393,0,1,2,0,0,0,0,1,120,394,395,393,1,3,2,0,0,0,0,1,120,396,398,397,0,1,2,1,1,1,1,1,120,398,399,397,1,3,2,1,1,1,1,1,120,396,397,393,0,1,2,2,2,2,2,1,120,397,392,393,1,3,2,2,2,2,2,1,120,399,398,394,0,1,2,3,3,3,3,1,120,398,395,394,1,3,2,3,3,3,3,1,120,397,399,392,0,1,2,4,4,4,4,1,120,399,394,392,1,3,2,4,4,4,4,1,120,393,395,396,0,1,2,5,5,5,5,1,120,395,398,396,1,3,2,5,5,5,5,1,120,400,402,401,0,1,2,0,0,0,0,1,120,402,403,401,1,3,2,0,0,0,0,1,120,404,406,405,0,1,2,1,1,1,1,1,120,406,407,405,1,3,2,1,1,1,1,1,120,404,405,401,0,1,2,2,2,2,2,1,120,405,400,401,1,3,2,2,2,2,2,1,120,407,406,402,0,1,2,3,3,3,3,1,120,406,403,402,1,3,2,3,3,3,3,1,120,405,407,400,0,1,2,4,4,4,4,1,120,407,402,400,1,3,2,4,4,4,4,1,120,401,403,404,0,1,2,5,5,5,5,1,120,403,406,404,1,3,2,5,5,5,5,1,120,408,410,409,0,1,2,0,0,0,0,1,120,410,411,409,1,3,2,0,0,0,0,1,120,412,414,413,0,1,2,1,1,1,1,1,120,414,415,413,1,3,2,1,1,1,1,1,120,412,413,409,0,1,2,2,2,2,2,1,120,413,408,409,1,3,2,2,2,2,2,1,120,415,414,410,0,1,2,3,3,3,3,1,120,414,411,410,1,3,2,3,3,3,3,1,120,413,415,408,0,1,2,4,4,4,4,1,120,415,410,408,1,3,2,4,4,4,4,1,120,409,411,412,0,1,2,5,5,5,5,1,120,411,414,412,1,3,2,5,5,5,5,1,120,416,418,417,0,1,2,0,0,0,0,1,120,418,419,417,1,3,2,0,0,0,0,1,120,420,422,421,0,1,2,1,1,1,1,1,120,422,423,421,1,3,2,1,1,1,1,1,120,420,421,417,0,1,2,2,2,2,2,1,120,421,416,417,1,3,2,2,2,2,2,1,120,423,422,418,0,1,2,3,3,3,3,1,120,422,419,418,1,3,2,3,3,3,3,1,120,421,423,416,0,1,2,4,4,4,4,1,120,423,418,416,1,3,2,4,4,4,4,1,120,417,419,420,0,1,2,5,5,5,5,1,120,419,422,420,1,3,2,5,5,5,5,1,120,424,426,425,0,1,2,0,0,0,0,1,120,426,427,425,1,3,2,0,0,0,0,1,120,428,430,429,0,1,2,1,1,1,1,1,120,430,431,429,1,3,2,1,1,1,1,1,120,428,429,425,0,1,2,2,2,2,2,1,120,429,424,425,1,3,2,2,2,2,2,1,120,431,430,426,0,1,2,3,3,3,3,1,120,430,427,426,1,3,2,3,3,3,3,1,120,429,431,424,0,1,2,4,4,4,4,1,120,431,426,424,1,3,2,4,4,4,4,1,120,425,427,428,0,1,2,5,5,5,5,1,120,427,430,428,1,3,2,5,5,5,5,1,120,432,434,433,0,1,2,0,0,0,0,1,120,434,435,433,1,3,2,0,0,0,0,1,120,436,438,437,0,1,2,1,1,1,1,1,120,438,439,437,1,3,2,1,1,1,1,1,120,436,437,433,0,1,2,2,2,2,2,1,120,437,432,433,1,3,2,2,2,2,2,1,120,439,438,434,0,1,2,3,3,3,3,1,120,438,435,434,1,3,2,3,3,3,3,1,120,437,439,432,0,1,2,4,4,4,4,1,120,439,434,432,1,3,2,4,4,4,4,1,120,433,435,436,0,1,2,5,5,5,5,1,120,435,438,436,1,3,2,5,5,5,5,1,120,440,442,441,0,1,2,0,0,0,0,1,120,442,443,441,1,3,2,0,0,0,0,1,120,444,446,445,0,1,2,1,1,1,1,1,120,446,447,445,1,3,2,1,1,1,1,1,120,444,445,441,0,1,2,2,2,2,2,1,120,445,440,441,1,3,2,2,2,2,2,1,120,447,446,442,0,1,2,3,3,3,3,1,120,446,443,442,1,3,2,3,3,3,3,1,120,445,447,440,0,1,2,4,4,4,4,1,120,447,442,440,1,3,2,4,4,4,4,1,120,441,443,444,0,1,2,5,5,5,5,1,120,443,446,444,1,3,2,5,5,5,5,1,120,448,450,449,0,1,2,0,0,0,0,1,120,450,451,449,1,3,2,0,0,0,0,1,120,452,454,453,0,1,2,1,1,1,1,1,120,454,455,453,1,3,2,1,1,1,1,1,120,452,453,449,0,1,2,2,2,2,2,1,120,453,448,449,1,3,2,2,2,2,2,1,120,455,454,450,0,1,2,3,3,3,3,1,120,454,451,450,1,3,2,3,3,3,3,1,120,453,455,448,0,1,2,4,4,4,4,1,120,455,450,448,1,3,2,4,4,4,4,1,120,449,451,452,0,1,2,5,5,5,5,1,120,451,454,452,1,3,2,5,5,5,5,1,120,456,458,457,0,1,2,0,0,0,0,1,120,458,459,457,1,3,2,0,0,0,0,1,120,460,462,461,0,1,2,1,1,1,1,1,120,462,463,461,1,3,2,1,1,1,1,1,120,460,461,457,0,1,2,2,2,2,2,1,120,461,456,457,1,3,2,2,2,2,2,1,120,463,462,458,0,1,2,3,3,3,3,1,120,462,459,458,1,3,2,3,3,3,3,1,120,461,463,456,0,1,2,4,4,4,4,1,120,463,458,456,1,3,2,4,4,4,4,1,120,457,459,460,0,1,2,5,5,5,5,1,120,459,462,460,1,3,2,5,5,5,5,1,120,464,466,465,0,1,2,0,0,0,0,1,120,466,467,465,1,3,2,0,0,0,0,1,120,468,470,469,0,1,2,1,1,1,1,1,120,470,471,469,1,3,2,1,1,1,1,1,120,468,469,465,0,1,2,2,2,2,2,1,120,469,464,465,1,3,2,2,2,2,2,1,120,471,470,466,0,1,2,3,3,3,3,1,120,470,467,466,1,3,2,3,3,3,3,1,120,469,471,464,0,1,2,4,4,4,4,1,120,471,466,464,1,3,2,4,4,4,4,1,120,465,467,468,0,1,2,5,5,5,5,1,120,467,470,468,1,3,2,5,5,5,5,1,120,472,474,473,0,1,2,0,0,0,0,1,120,474,475,473,1,3,2,0,0,0,0,1,120,476,478,477,0,1,2,1,1,1,1,1,120,478,479,477,1,3,2,1,1,1,1,1,120,476,477,473,0,1,2,2,2,2,2,1,120,477,472,473,1,3,2,2,2,2,2,1,120,479,478,474,0,1,2,3,3,3,3,1,120,478,475,474,1,3,2,3,3,3,3,1,120,477,479,472,0,1,2,4,4,4,4,1,120,479,474,472,1,3,2,4,4,4,4,1,120,473,475,476,0,1,2,5,5,5,5,1,120,475,478,476,1,3,2,5,5,5,5,1,120,480,482,481,0,1,2,0,0,0,0,1,120,482,483,481,1,3,2,0,0,0,0,1,120,484,486,485,0,1,2,1,1,1,1,1,120,486,487,485,1,3,2,1,1,1,1,1,120,484,485,481,0,1,2,2,2,2,2,1,120,485,480,481,1,3,2,2,2,2,2,1,120,487,486,482,0,1,2,3,3,3,3,1,120,486,483,482,1,3,2,3,3,3,3,1,120,485,487,480,0,1,2,4,4,4,4,1,120,487,482,480,1,3,2,4,4,4,4,1,120,481,483,484,0,1,2,5,5,5,5,1,120,483,486,484,1,3,2,5,5,5,5,1,120,488,490,489,0,1,2,0,0,0,0,1,120,490,491,489,1,3,2,0,0,0,0,1,120,492,494,493,0,1,2,1,1,1,1,1,120,494,495,493,1,3,2,1,1,1,1,1,120,492,493,489,0,1,2,2,2,2,2,1,120,493,488,489,1,3,2,2,2,2,2,1,120,495,494,490,0,1,2,3,3,3,3,1,120,494,491,490,1,3,2,3,3,3,3,1,120,493,495,488,0,1,2,4,4,4,4,1,120,495,490,488,1,3,2,4,4,4,4,1,120,489,491,492,0,1,2,5,5,5,5,1,120,491,494,492,1,3,2,5,5,5,5,1,120,496,498,497,0,1,2,0,0,0,0,1,120,498,499,497,1,3,2,0,0,0,0,1,120,500,502,501,0,1,2,1,1,1,1,1,120,502,503,501,1,3,2,1,1,1,1,1,120,500,501,497,0,1,2,2,2,2,2,1,120,501,496,497,1,3,2,2,2,2,2,1,120,503,502,498,0,1,2,3,3,3,3,1,120,502,499,498,1,3,2,3,3,3,3,1,120,501,503,496,0,1,2,4,4,4,4,1,120,503,498,496,1,3,2,4,4,4,4,1,120,497,499,500,0,1,2,5,5,5,5,1,120,499,502,500,1,3,2,5,5,5,5,1,120,504,506,505,0,1,2,0,0,0,0,0,120,506,507,505,1,3,2,0,0,0,0,0,120,508,510,509,0,1,2,1,1,1,1,0,120,510,511,509,1,3,2,1,1,1,1,0,120,508,509,505,0,1,2,2,2,2,2,0,120,509,504,505,1,3,2,2,2,2,2,0,120,511,510,506,0,1,2,3,3,3,3,0,120,510,507,506,1,3,2,3,3,3,3,0,120,509,511,504,0,1,2,4,4,4,4,0,120,511,506,504,1,3,2,4,4,4,4,0,120,505,507,508,0,1,2,5,5,5,5,0,120,507,510,508,1,3,2,5,5,5,5,0,120,512,514,513,0,1,2,0,0,0,0,0,120,514,515,513,1,3,2,0,0,0,0,0,120,516,518,517,0,1,2,1,1,1,1,0,120,518,519,517,1,3,2,1,1,1,1,0,120,516,517,513,0,1,2,2,2,2,2,0,120,517,512,513,1,3,2,2,2,2,2,0,120,519,518,514,0,1,2,3,3,3,3,0,120,518,515,514,1,3,2,3,3,3,3,0,120,517,519,512,0,1,2,4,4,4,4,0,120,519,514,512,1,3,2,4,4,4,4,0,120,513,515,516,0,1,2,5,5,5,5,0,120,515,518,516,1,3,2,5,5,5,5,0,120,520,522,521,0,1,2,0,0,0,0,0,120,522,523,521,1,3,2,0,0,0,0,0,120,524,526,525,0,1,2,1,1,1,1,0,120,526,527,525,1,3,2,1,1,1,1,0,120,524,525,521,0,1,2,2,2,2,2,0,120,525,520,521,1,3,2,2,2,2,2,0,120,527,526,522,0,1,2,3,3,3,3,0,120,526,523,522,1,3,2,3,3,3,3,0,120,525,527,520,0,1,2,4,4,4,4,0,120,527,522,520,1,3,2,4,4,4,4,0,120,521,523,524,0,1,2,5,5,5,5,0,120,523,526,524,1,3,2,5,5,5,5,0,120,528,530,529,0,1,2,0,0,0,0,0,120,530,531,529,1,3,2,0,0,0,0,0,120,532,534,533,0,1,2,1,1,1,1,0,120,534,535,533,1,3,2,1,1,1,1,0,120,532,533,529,0,1,2,2,2,2,2,0,120,533,528,529,1,3,2,2,2,2,2,0,120,535,534,530,0,1,2,3,3,3,3,0,120,534,531,530,1,3,2,3,3,3,3,0,120,533,535,528,0,1,2,4,4,4,4,0,120,535,530,528,1,3,2,4,4,4,4,0,120,529,531,532,0,1,2,5,5,5,5,0,120,531,534,532,1,3,2,5,5,5,5,0,120,536,538,537,0,1,2,0,0,0,0,0,120,538,539,537,1,3,2,0,0,0,0,0,120,540,542,541,0,1,2,1,1,1,1,0,120,542,543,541,1,3,2,1,1,1,1,0,120,540,541,537,0,1,2,2,2,2,2,0,120,541,536,537,1,3,2,2,2,2,2,0,120,543,542,538,0,1,2,3,3,3,3,0,120,542,539,538,1,3,2,3,3,3,3,0,120,541,543,536,0,1,2,4,4,4,4,0,120,543,538,536,1,3,2,4,4,4,4,0,120,537,539,540,0,1,2,5,5,5,5,0,120,539,542,540,1,3,2,5,5,5,5,0,120,544,546,545,0,1,2,0,0,0,0,0,120,546,547,545,1,3,2,0,0,0,0,0,120,548,550,549,0,1,2,1,1,1,1,0,120,550,551,549,1,3,2,1,1,1,1,0,120,548,549,545,0,1,2,2,2,2,2,0,120,549,544,545,1,3,2,2,2,2,2,0,120,551,550,546,0,1,2,3,3,3,3,0,120,550,547,546,1,3,2,3,3,3,3,0,120,549,551,544,0,1,2,4,4,4,4,0,120,551,546,544,1,3,2,4,4,4,4,0,120,545,547,548,0,1,2,5,5,5,5,0,120,547,550,548,1,3,2,5,5,5,5,0,120,552,554,553,0,1,2,0,0,0,0,1,120,554,555,553,1,3,2,0,0,0,0,1,120,556,558,557,0,1,2,1,1,1,1,1,120,558,559,557,1,3,2,1,1,1,1,1,120,556,557,553,0,1,2,2,2,2,2,1,120,557,552,553,1,3,2,2,2,2,2,1,120,559,558,554,0,1,2,3,3,3,3,1,120,558,555,554,1,3,2,3,3,3,3,1,120,557,559,552,0,1,2,4,4,4,4,1,120,559,554,552,1,3,2,4,4,4,4,1,120,553,555,556,0,1,2,5,5,5,5,1,120,555,558,556,1,3,2,5,5,5,5,1,120,560,562,561,0,1,2,0,0,0,0,1,120,562,563,561,1,3,2,0,0,0,0,1,120,564,566,565,0,1,2,1,1,1,1,1,120,566,567,565,1,3,2,1,1,1,1,1,120,564,565,561,0,1,2,2,2,2,2,1,120,565,560,561,1,3,2,2,2,2,2,1,120,567,566,562,0,1,2,3,3,3,3,1,120,566,563,562,1,3,2,3,3,3,3,1,120,565,567,560,0,1,2,4,4,4,4,1,120,567,562,560,1,3,2,4,4,4,4,1,120,561,563,564,0,1,2,5,5,5,5,1,120,563,566,564,1,3,2,5,5,5,5,1,120,568,570,569,0,1,2,0,0,0,0,1,120,570,571,569,1,3,2,0,0,0,0,1,120,572,574,573,0,1,2,1,1,1,1,1,120,574,575,573,1,3,2,1,1,1,1,1,120,572,573,569,0,1,2,2,2,2,2,1,120,573,568,569,1,3,2,2,2,2,2,1,120,575,574,570,0,1,2,3,3,3,3,1,120,574,571,570,1,3,2,3,3,3,3,1,120,573,575,568,0,1,2,4,4,4,4,1,120,575,570,568,1,3,2,4,4,4,4,1,120,569,571,572,0,1,2,5,5,5,5,1,120,571,574,572,1,3,2,5,5,5,5,1,120,576,578,577,0,1,2,0,0,0,0,1,120,578,579,577,1,3,2,0,0,0,0,1,120,580,582,581,0,1,2,1,1,1,1,1,120,582,583,581,1,3,2,1,1,1,1,1,120,580,581,577,0,1,2,2,2,2,2,1,120,581,576,577,1,3,2,2,2,2,2,1,120,583,582,578,0,1,2,3,3,3,3,1,120,582,579,578,1,3,2,3,3,3,3,1,120,581,583,576,0,1,2,4,4,4,4,1,120,583,578,576,1,3,2,4,4,4,4,1,120,577,579,580,0,1,2,5,5,5,5,1,120,579,582,580,1,3,2,5,5,5,5,1,120,584,586,585,0,1,2,0,0,0,0,2,120,586,587,585,1,3,2,0,0,0,0,2,120,588,590,589,0,1,2,1,1,1,1,2,120,590,591,589,1,3,2,1,1,1,1,2,120,588,589,585,0,1,2,2,2,2,2,2,120,589,584,585,1,3,2,2,2,2,2,2,120,591,590,586,0,1,2,3,3,3,3,2,120,590,587,586,1,3,2,3,3,3,3,2,120,589,591,584,0,1,2,4,4,4,4,2,120,591,586,584,1,3,2,4,4,4,4,2,120,585,587,588,0,1,2,5,5,5,5,2,120,587,590,588,1,3,2,5,5,5,5,2,120,592,594,593,0,1,2,0,0,0,0,2,120,594,595,593,1,3,2,0,0,0,0,2,120,596,598,597,0,1,2,1,1,1,1,2,120,598,599,597,1,3,2,1,1,1,1,2,120,596,597,593,0,1,2,2,2,2,2,2,120,597,592,593,1,3,2,2,2,2,2,2,120,599,598,594,0,1,2,3,3,3,3,2,120,598,595,594,1,3,2,3,3,3,3,2,120,597,599,592,0,1,2,4,4,4,4,2,120,599,594,592,1,3,2,4,4,4,4,2,120,593,595,596,0,1,2,5,5,5,5,2,120,595,598,596,1,3,2,5,5,5,5,2,120,600,602,601,0,1,2,0,0,0,0,2,120,602,603,601,1,3,2,0,0,0,0,2,120,604,606,605,0,1,2,1,1,1,1,2,120,606,607,605,1,3,2,1,1,1,1,2,120,604,605,601,0,1,2,2,2,2,2,2,120,605,600,601,1,3,2,2,2,2,2,2,120,607,606,602,0,1,2,3,3,3,3,2,120,606,603,602,1,3,2,3,3,3,3,2,120,605,607,600,0,1,2,4,4,4,4,2,120,607,602,600,1,3,2,4,4,4,4,2,120,601,603,604,0,1,2,5,5,5,5,2,120,603,606,604,1,3,2,5,5,5,5,2,120,608,610,609,0,1,2,0,0,0,0,2,120,610,611,609,1,3,2,0,0,0,0,2,120,612,614,613,0,1,2,1,1,1,1,2,120,614,615,613,1,3,2,1,1,1,1,2,120,612,613,609,0,1,2,2,2,2,2,2,120,613,608,609,1,3,2,2,2,2,2,2,120,615,614,610,0,1,2,3,3,3,3,2,120,614,611,610,1,3,2,3,3,3,3,2,120,613,615,608,0,1,2,4,4,4,4,2,120,615,610,608,1,3,2,4,4,4,4,2,120,609,611,612,0,1,2,5,5,5,5,2,120,611,614,612,1,3,2,5,5,5,5,2]}}],"materials":[{"uuid":"34000851-9476-48B6-8506-772F4E4B57D5","type":"MeshBasicMaterial","color":16777215,"vertexColors":2,"opacity":1,"transparent":true,"wireframe":false}],"object":{"uuid":"B00C4D96-2F70-4E04-AF47-E2257ED3FA48","type":"Mesh","geometry":"92D1BFE0-E396-44EB-8BD3-1C28A28552BC","material":"34000851-9476-48B6-8506-772F4E4B57D5","matrix":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}} 

},{}],136:[function(require,module,exports){
module.exports = {
  colors: ['color-000000', 'brick-light', 'brick-medium', 'brick-dark', 'brick-grasstop', 'bridge-post-top', 'bridge', 'bridge-post', 'color-fff160', 'color-ecf0f1', 'ladder-top', 'ladder-middle', 'ladder-bottom'],
  voxels: {
    'brick-light': {
      type: 'texture',
      front_url: './textures/brick-light-1.png',
      back_url: './textures/brick-light-2.png',
      top_url: './textures/grass.png',
      bottom_url: './textures/grass.png',
      left_url: './textures/brick-light-5.png',
      right_url: './textures/brick-light-6.png'
    },
    'brick-medium': {
      type: 'texture',
      front_url: './textures/brick-medium-1.png',
      back_url: './textures/brick-medium-2.png',
      top_url: './textures/grass.png',
      bottom_url: './textures/grass.png',
      left_url: './textures/brick-medium-5.png',
      right_url: './textures/brick-medium-6.png'
    },
    'brick-dark': {
      type: 'texture',
      front_url: './textures/brick-dark-1.png',
      back_url: './textures/brick-dark-2.png',
      top_url: './textures/grass.png',
      bottom_url: './textures/grass.png',
      left_url: './textures/brick-dark-5.png',
      right_url: './textures/brick-dark-6.png'
    },
    'brick-grasstop': {
      collision: 'top',
      type: 'texture',
      front_url: './textures/brick-grasstop-1.png',
      back_url: './textures/brick-grasstop-2.png',
      top_url: './textures/grass.png',
      bottom_url: './textures/grass.png',
      left_url: './textures/brick-grasstop-1.png',
      right_url: './textures/brick-grasstop-2.png'
    },
    'bridge-post-top': {
      collision: 'top',
      type: 'texture',
      front_url: './textures/bridge-post-top.png',
      back_url: './textures/bridge-post-top.png',
      top_url: './textures/grass.png',
      bottom_url: './textures/grass.png',
      left_url: './textures/bridge-post-top.png',
      right_url: './textures/bridge-post-top.png'
    },
    'bridge-post': {
      type: 'texture',
      front_url: './textures/bridge-post-1.png',
      back_url: './textures/bridge-post-2.png',
      top_url: './textures/grass.png',
      bottom_url: './textures/grass.png',
      left_url: './textures/bridge-post-1.png',
      right_url: './textures/bridge-post-2.png'
    },
    'bridge': {
      name: 'Bridge',
      collision: 'top',
      type: 'geometry',
      geometry: require('./geometries/bridge.json')
    },
    'ladder-top': {
      name: 'Ladder Top',
      collision: 'ladder',
      type: 'geometry',
      geometry: require('./geometries/ladder-top.json')
    },
    'ladder-middle': {
      name: 'Ladder Middle',
      collision: 'ladder',
      type: 'geometry',
      geometry: require('./geometries/ladder-middle.json')
    },
    'ladder-bottom': {
      name: 'Ladder Bottom',
      collision: 'ladder',
      type: 'geometry',
      geometry: require('./geometries/ladder-bottom.json')
    }
  }
};



},{"./geometries/bridge.json":132,"./geometries/ladder-bottom.json":133,"./geometries/ladder-middle.json":134,"./geometries/ladder-top.json":135}],137:[function(require,module,exports){
var PaletteManager, THREE, TextureCube, VOXEL_TEMPLATE_MAP, VoxelFactory, config, geometryLoader, template, textureLoader, voxelName, _ref;

THREE = require('../three');

PaletteManager = require('./palette-manager');

TextureCube = require('./texture-cube');

geometryLoader = function(config) {
  var group, voxel, wireframeCube, wireframeMaterial, wireframeOptions;
  voxel = new THREE.ObjectLoader().parse(config.geometry);
  voxel.scale.x = 1 / 50 / 16;
  voxel.scale.y = 1 / 50 / 16;
  voxel.scale.z = 1 / 50 / 16;
  voxel.position.y += -.5;
  wireframeCube = new THREE.BoxGeometry((16 / 16) + .5 / 16, (16 / 16) + .5 / 16, (16 / 16) + .5 / 16);
  wireframeOptions = {
    color: 0xEEEEEE,
    wireframe: true,
    wireframeLinewidth: 1,
    opacity: 0.05
  };
  wireframeMaterial = new THREE.MeshBasicMaterial(wireframeOptions);
  group = new THREE.Object3D();
  group.add(voxel);
  group.wireMesh = new THREE.Mesh(wireframeCube, wireframeMaterial);
  group.wireMesh.myVoxel = group;
  group.wireMesh.isWireMesh = true;
  group.add(group.wireMesh);
  return group;
};

textureLoader = function(config) {
  var back_url, bottom_url, front_url, left_url, right_url, top_url;
  front_url = config.front_url, back_url = config.back_url, top_url = config.top_url, bottom_url = config.bottom_url, left_url = config.left_url, right_url = config.right_url;
  return TextureCube.freshCube([front_url, back_url, top_url, bottom_url, left_url, right_url]);
};

VOXEL_TEMPLATE_MAP = {};

_ref = PaletteManager.allVoxelConfigs();
for (voxelName in _ref) {
  config = _ref[voxelName];
  template = (function() {
    switch (config.type) {
      case 'geometry':
        return geometryLoader(config);
      case 'texture':
        return textureLoader(config);
      default:
        throw new Error('BUG: Unsupported Voxel type');
    }
  })();
  VOXEL_TEMPLATE_MAP[voxelName] = template;
}

module.exports = new (VoxelFactory = (function() {
  function VoxelFactory() {}

  VoxelFactory.prototype._cube = new THREE.BoxGeometry(16 / 16, 16 / 16, 16 / 16);

  VoxelFactory.prototype.freshVoxel = function(id, addWireframe) {
    var colorInt, cubeMaterial, voxel, _CubeMaterial;
    template = VOXEL_TEMPLATE_MAP[id];
    if (!id) {
      console.warn('BUG! Invalid voxel color name. using black');
      id = 'color-000000';
    }
    if (template) {
      voxel = template.clone();
      if (template.wireMesh) {
        voxel.wireMesh = template.wireMesh.clone();
        voxel.wireMesh.isWireMesh = true;
        voxel.wireMesh.myVoxel = voxel;
      }
      voxel.name = id;
    } else if (/^color-[0-9a-fA-F]{6}/.test(id)) {
      _CubeMaterial = THREE.MeshBasicMaterial;
      cubeMaterial = new _CubeMaterial({
        vertexColors: THREE.VertexColors,
        transparent: true
      });
      colorInt = parseInt(id.substring('color-'.length), 16 / 16);
      cubeMaterial.color = new THREE.Color(colorInt);
      voxel = new THREE.Mesh(this._cube, cubeMaterial);
      voxel.name = id;
    } else {
      throw new Error('BUG! Invalid Voxel name');
    }
    return voxel;
  };

  return VoxelFactory;

})());



},{"../three":129,"./palette-manager":130,"./texture-cube":131}]},{},[2]);
